// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _BINARY_SUBSCR_STR_INTplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BEFORE_ASYNC_WITH.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 c9 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 2c: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 b0 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 a5 00 00 00             ja      0xf5 <_JIT_ENTRY+0xf5>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 96 00 00 00             jle     0xf5 <_JIT_ENTRY+0xf5>
// 5f: 49 89 d6                      movq    %rdx, %r14
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 76 37                         jbe     0x12c <_JIT_ENTRY+0x12c>
// f5: 49 29 df                      subq    %rbx, %r15
// f8: 49 83 c7 b8                   addq    $-0x48, %r15
// fc: 49 c1 ef 03                   shrq    $0x3, %r15
// 100: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 104: 48 8b 03                      movq    (%rbx), %rax
// 107: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000109:  R_X86_64_64  _JIT_TARGET
// 111: 89 c9                         movl    %ecx, %ecx
// 113: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 117: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11d: 48 83 c4 18                   addq    $0x18, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5d                         popq    %r13
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: 5d                            popq    %rbp
// 12b: c3                            retq
// 12c: 89 c0                         movl    %eax, %eax
// 12e: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 132: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 137: 75 28                         jne     0x161 <_JIT_ENTRY+0x161>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyInterpreterState_Get
// 143: ff d0                         callq   *%rax
// 145: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14c: 49 ff 4d 00                   decq    (%r13)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  PyObject_Free
// 15c: 4c 89 ef                      movq    %r13, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 c1 e5 04                   shlq    $0x4, %rbp
// 165: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000167:  R_X86_64_64  _PyRuntime
// 16f: 49 8b 04 24                   movq    (%r12), %rax
// 173: 48 85 c0                      testq   %rax, %rax
// 176: 7f 22                         jg      0x19a <_JIT_ENTRY+0x19a>
// 178: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017a:  R_X86_64_64  .rodata.str1.1
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_NegativeRefcount
// 18c: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 191: 4c 89 e2                      movq    %r12, %rdx
// 194: ff d0                         callq   *%rax
// 196: 49 8b 04 24                   movq    (%r12), %rax
// 19a: 49 8d 4f f0                   leaq    -0x10(%r15), %rcx
// 19e: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 1a3: 4c 01 ed                      addq    %r13, %rbp
// 1a6: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 78 21                         js      0x1d2 <_JIT_ENTRY+0x1d2>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bb: ff d0                         callq   *%rax
// 1bd: 49 ff 0c 24                   decq    (%r12)
// 1c1: 75 0f                         jne     0x1d2 <_JIT_ENTRY+0x1d2>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_Dealloc
// 1cd: 4c 89 e7                      movq    %r12, %rdi
// 1d0: ff d0                         callq   *%rax
// 1d2: 4d 8d 67 f8                   leaq    -0x8(%r15), %r12
// 1d6: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1db: 48 89 28                      movq    %rbp, (%rax)
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _PyObject_LookupSpecial
// 1e8: 49 8d b5 68 a6 00 00          leaq    0xa668(%r13), %rsi
// 1ef: 48 89 ef                      movq    %rbp, %rdi
// 1f2: ff d0                         callq   *%rax
// 1f4: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1f9: 48 85 c0                      testq   %rax, %rax
// 1fc: 0f 84 ba 00 00 00             je      0x2bc <_JIT_ENTRY+0x2bc>
// 202: 49 81 c5 a0 a6 00 00          addq    $0xa6a0, %r13           # imm = 0xA6A0
// 209: 48 89 ef                      movq    %rbp, %rdi
// 20c: 4c 89 ee                      movq    %r13, %rsi
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _PyObject_LookupSpecial
// 219: ff d0                         callq   *%rax
// 21b: 48 85 c0                      testq   %rax, %rax
// 21e: 0f 84 7e 01 00 00             je      0x3a2 <_JIT_ENTRY+0x3a2>
// 224: 49 89 c5                      movq    %rax, %r13
// 227: 48 8b 45 00                   movq    (%rbp), %rax
// 22b: 48 85 c0                      testq   %rax, %rax
// 22e: 7f 22                         jg      0x252 <_JIT_ENTRY+0x252>
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_NegativeRefcount
// 244: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 249: 48 89 ea                      movq    %rbp, %rdx
// 24c: ff d0                         callq   *%rax
// 24e: 48 8b 45 00                   movq    (%rbp), %rax
// 252: 85 c0                         testl   %eax, %eax
// 254: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 259: 78 21                         js      0x27c <_JIT_ENTRY+0x27c>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 265: ff d0                         callq   *%rax
// 267: 48 ff 4d 00                   decq    (%rbp)
// 26b: 75 0f                         jne     0x27c <_JIT_ENTRY+0x27c>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_Dealloc
// 277: 48 89 ef                      movq    %rbp, %rdi
// 27a: ff d0                         callq   *%rax
// 27c: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 281: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 288: 74 7c                         je      0x306 <_JIT_ENTRY+0x306>
// 28a: 48 8b 40 38                   movq    0x38(%rax), %rax
// 28e: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 292: 48 85 c0                      testq   %rax, %rax
// 295: 74 6f                         je      0x306 <_JIT_ENTRY+0x306>
// 297: 4c 89 e7                      movq    %r12, %rdi
// 29a: 31 f6                         xorl    %esi, %esi
// 29c: 31 d2                         xorl    %edx, %edx
// 29e: 31 c9                         xorl    %ecx, %ecx
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002a4:  R_X86_64_64  _Py_CheckFunctionResult
// 2ac: 4c 89 f7                      movq    %r14, %rdi
// 2af: 4c 89 e6                      movq    %r12, %rsi
// 2b2: 48 89 c2                      movq    %rax, %rdx
// 2b5: 31 c9                         xorl    %ecx, %ecx
// 2b7: 41 ff d0                      callq   *%r8
// 2ba: eb 63                         jmp     0x31f <_JIT_ENTRY+0x31f>
// 2bc: 49 8b 46 68                   movq    0x68(%r14), %rax
// 2c0: 48 85 c0                      testq   %rax, %rax
// 2c3: 74 0b                         je      0x2d0 <_JIT_ENTRY+0x2d0>
// 2c5: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2ca: 0f 85 e8 01 00 00             jne     0x4b8 <_JIT_ENTRY+0x4b8>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  PyExc_TypeError
// 2da: 48 8b 30                      movq    (%rax), %rsi
// 2dd: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2e1: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2e5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002e7:  R_X86_64_64  .rodata.str1.1+0x39
// 2ef: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002f1:  R_X86_64_64  _PyErr_Format
// 2f9: 4c 89 f7                      movq    %r14, %rdi
// 2fc: 31 c0                         xorl    %eax, %eax
// 2fe: 41 ff d0                      callq   *%r8
// 301: e9 b2 01 00 00                jmp     0x4b8 <_JIT_ENTRY+0x4b8>
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _PyObject_MakeTpCall
// 310: 4c 89 f7                      movq    %r14, %rdi
// 313: 4c 89 e6                      movq    %r12, %rsi
// 316: 31 d2                         xorl    %edx, %edx
// 318: 31 c9                         xorl    %ecx, %ecx
// 31a: 45 31 c0                      xorl    %r8d, %r8d
// 31d: ff d0                         callq   *%rax
// 31f: 48 89 c5                      movq    %rax, %rbp
// 322: 49 8b 04 24                   movq    (%r12), %rax
// 326: 48 85 c0                      testq   %rax, %rax
// 329: 7f 22                         jg      0x34d <_JIT_ENTRY+0x34d>
// 32b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000032d:  R_X86_64_64  .rodata.str1.1
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  _Py_NegativeRefcount
// 33f: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 344: 4c 89 e2                      movq    %r12, %rdx
// 347: ff d0                         callq   *%rax
// 349: 49 8b 04 24                   movq    (%r12), %rax
// 34d: 85 c0                         testl   %eax, %eax
// 34f: 78 21                         js      0x372 <_JIT_ENTRY+0x372>
// 351: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000353:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 35b: ff d0                         callq   *%rax
// 35d: 49 ff 0c 24                   decq    (%r12)
// 361: 75 0f                         jne     0x372 <_JIT_ENTRY+0x372>
// 363: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000365:  R_X86_64_64  _Py_Dealloc
// 36d: 4c 89 e7                      movq    %r12, %rdi
// 370: ff d0                         callq   *%rax
// 372: 48 85 ed                      testq   %rbp, %rbp
// 375: 74 59                         je      0x3d0 <_JIT_ENTRY+0x3d0>
// 377: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 37b: 49 89 6f f8                   movq    %rbp, -0x8(%r15)
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  _JIT_CONTINUE
// 389: 48 89 df                      movq    %rbx, %rdi
// 38c: 4c 89 fe                      movq    %r15, %rsi
// 38f: 4c 89 f2                      movq    %r14, %rdx
// 392: 48 83 c4 18                   addq    $0x18, %rsp
// 396: 5b                            popq    %rbx
// 397: 41 5c                         popq    %r12
// 399: 41 5d                         popq    %r13
// 39b: 41 5e                         popq    %r14
// 39d: 41 5f                         popq    %r15
// 39f: 5d                            popq    %rbp
// 3a0: ff e0                         jmpq    *%rax
// 3a2: 49 8b 46 68                   movq    0x68(%r14), %rax
// 3a6: 48 85 c0                      testq   %rax, %rax
// 3a9: 74 7f                         je      0x42a <_JIT_ENTRY+0x42a>
// 3ab: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 3b0: 74 78                         je      0x42a <_JIT_ENTRY+0x42a>
// 3b2: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 3b7: 48 8b 00                      movq    (%rax), %rax
// 3ba: 48 85 c0                      testq   %rax, %rax
// 3bd: 0f 8e a9 00 00 00             jle     0x46c <_JIT_ENTRY+0x46c>
// 3c3: 85 c0                         testl   %eax, %eax
// 3c5: 0f 89 cb 00 00 00             jns     0x496 <_JIT_ENTRY+0x496>
// 3cb: e9 e8 00 00 00                jmp     0x4b8 <_JIT_ENTRY+0x4b8>
// 3d0: 49 8b 45 00                   movq    (%r13), %rax
// 3d4: 48 85 c0                      testq   %rax, %rax
// 3d7: 7f 22                         jg      0x3fb <_JIT_ENTRY+0x3fb>
// 3d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003db:  R_X86_64_64  .rodata.str1.1
// 3e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e5:  R_X86_64_64  _Py_NegativeRefcount
// 3ed: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 3f2: 4c 89 ea                      movq    %r13, %rdx
// 3f5: ff d0                         callq   *%rax
// 3f7: 49 8b 45 00                   movq    (%r13), %rax
// 3fb: 85 c0                         testl   %eax, %eax
// 3fd: 78 21                         js      0x420 <_JIT_ENTRY+0x420>
// 3ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000401:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 409: ff d0                         callq   *%rax
// 40b: 49 ff 4d 00                   decq    (%r13)
// 40f: 75 0f                         jne     0x420 <_JIT_ENTRY+0x420>
// 411: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000413:  R_X86_64_64  _Py_Dealloc
// 41b: 4c 89 ef                      movq    %r13, %rdi
// 41e: ff d0                         callq   *%rax
// 420: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 425: e9 8e 00 00 00                jmp     0x4b8 <_JIT_ENTRY+0x4b8>
// 42a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000042c:  R_X86_64_64  PyExc_TypeError
// 434: 48 8b 30                      movq    (%rax), %rsi
// 437: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 43b: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 43f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000441:  R_X86_64_64  .rodata.str1.1+0x84
// 449: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000044b:  R_X86_64_64  _PyErr_Format
// 453: 4c 89 f7                      movq    %r14, %rdi
// 456: 31 c0                         xorl    %eax, %eax
// 458: 41 ff d0                      callq   *%r8
// 45b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 460: 48 8b 00                      movq    (%rax), %rax
// 463: 48 85 c0                      testq   %rax, %rax
// 466: 0f 8f 57 ff ff ff             jg      0x3c3 <_JIT_ENTRY+0x3c3>
// 46c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000046e:  R_X86_64_64  .rodata.str1.1
// 476: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000478:  R_X86_64_64  _Py_NegativeRefcount
// 480: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 485: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 48a: 4c 89 f2                      movq    %r14, %rdx
// 48d: ff d0                         callq   *%rax
// 48f: 49 8b 06                      movq    (%r14), %rax
// 492: 85 c0                         testl   %eax, %eax
// 494: 78 22                         js      0x4b8 <_JIT_ENTRY+0x4b8>
// 496: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000498:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a0: ff d0                         callq   *%rax
// 4a2: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 4a7: 48 ff 0f                      decq    (%rdi)
// 4aa: 75 0c                         jne     0x4b8 <_JIT_ENTRY+0x4b8>
// 4ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004ae:  R_X86_64_64  _Py_Dealloc
// 4b6: ff d0                         callq   *%rax
// 4b8: 49 29 dc                      subq    %rbx, %r12
// 4bb: 49 83 c4 b8                   addq    $-0x48, %r12
// 4bf: 49 c1 ec 03                   shrq    $0x3, %r12
// 4c3: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 4c7: 31 c0                         xorl    %eax, %eax
// 4c9: e9 4f fc ff ff                jmp     0x11d <_JIT_ENTRY+0x11d>
// 4ce: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BEFORE_ASYNC_WITH_code_body[1231] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x4f, 0xf0, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x01, 0xed, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x67, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x68, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa0, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x7e, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x74, 0x7c, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x74, 0x6f, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xeb, 0x63, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0xe8, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xb2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x59, 0x4d, 0x89, 0x6f, 0xf0, 0x49, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x7f, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x78, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xcb, 0x00, 0x00, 0x00, 0xe9, 0xe8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x57, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x4f, 0xfc, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BEFORE_ASYNC_WITH_code_holes[38] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x353, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x365, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x381, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3db, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x401, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x413, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x42c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x441, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x84},
    {0x44b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x46e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x478, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x498, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00"
// e9: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BEFORE_ASYNC_WITH_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BEFORE_ASYNC_WITH_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BEFORE_WITH
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BEFORE_WITH.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 c9 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 2c: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 b0 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 a5 00 00 00             ja      0xf5 <_JIT_ENTRY+0xf5>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 96 00 00 00             jle     0xf5 <_JIT_ENTRY+0xf5>
// 5f: 49 89 d6                      movq    %rdx, %r14
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 76 37                         jbe     0x12c <_JIT_ENTRY+0x12c>
// f5: 49 29 df                      subq    %rbx, %r15
// f8: 49 83 c7 b8                   addq    $-0x48, %r15
// fc: 49 c1 ef 03                   shrq    $0x3, %r15
// 100: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 104: 48 8b 03                      movq    (%rbx), %rax
// 107: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000109:  R_X86_64_64  _JIT_TARGET
// 111: 89 c9                         movl    %ecx, %ecx
// 113: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 117: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11d: 48 83 c4 18                   addq    $0x18, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5d                         popq    %r13
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: 5d                            popq    %rbp
// 12b: c3                            retq
// 12c: 89 c0                         movl    %eax, %eax
// 12e: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 132: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 137: 75 28                         jne     0x161 <_JIT_ENTRY+0x161>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyInterpreterState_Get
// 143: ff d0                         callq   *%rax
// 145: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14c: 49 ff 4d 00                   decq    (%r13)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  PyObject_Free
// 15c: 4c 89 ef                      movq    %r13, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 c1 e5 04                   shlq    $0x4, %rbp
// 165: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000167:  R_X86_64_64  _PyRuntime
// 16f: 49 8b 04 24                   movq    (%r12), %rax
// 173: 48 85 c0                      testq   %rax, %rax
// 176: 7f 22                         jg      0x19a <_JIT_ENTRY+0x19a>
// 178: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017a:  R_X86_64_64  .rodata.str1.1
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_NegativeRefcount
// 18c: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 191: 4c 89 e2                      movq    %r12, %rdx
// 194: ff d0                         callq   *%rax
// 196: 49 8b 04 24                   movq    (%r12), %rax
// 19a: 49 8d 4f f0                   leaq    -0x10(%r15), %rcx
// 19e: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 1a3: 4c 01 ed                      addq    %r13, %rbp
// 1a6: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 78 21                         js      0x1d2 <_JIT_ENTRY+0x1d2>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bb: ff d0                         callq   *%rax
// 1bd: 49 ff 0c 24                   decq    (%r12)
// 1c1: 75 0f                         jne     0x1d2 <_JIT_ENTRY+0x1d2>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_Dealloc
// 1cd: 4c 89 e7                      movq    %r12, %rdi
// 1d0: ff d0                         callq   *%rax
// 1d2: 4d 8d 67 f8                   leaq    -0x8(%r15), %r12
// 1d6: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1db: 48 89 28                      movq    %rbp, (%rax)
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _PyObject_LookupSpecial
// 1e8: 49 8d b5 50 ae 00 00          leaq    0xae50(%r13), %rsi
// 1ef: 48 89 ef                      movq    %rbp, %rdi
// 1f2: ff d0                         callq   *%rax
// 1f4: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1f9: 48 85 c0                      testq   %rax, %rax
// 1fc: 0f 84 ba 00 00 00             je      0x2bc <_JIT_ENTRY+0x2bc>
// 202: 49 81 c5 b8 ae 00 00          addq    $0xaeb8, %r13           # imm = 0xAEB8
// 209: 48 89 ef                      movq    %rbp, %rdi
// 20c: 4c 89 ee                      movq    %r13, %rsi
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _PyObject_LookupSpecial
// 219: ff d0                         callq   *%rax
// 21b: 48 85 c0                      testq   %rax, %rax
// 21e: 0f 84 7e 01 00 00             je      0x3a2 <_JIT_ENTRY+0x3a2>
// 224: 49 89 c5                      movq    %rax, %r13
// 227: 48 8b 45 00                   movq    (%rbp), %rax
// 22b: 48 85 c0                      testq   %rax, %rax
// 22e: 7f 22                         jg      0x252 <_JIT_ENTRY+0x252>
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_NegativeRefcount
// 244: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 249: 48 89 ea                      movq    %rbp, %rdx
// 24c: ff d0                         callq   *%rax
// 24e: 48 8b 45 00                   movq    (%rbp), %rax
// 252: 85 c0                         testl   %eax, %eax
// 254: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 259: 78 21                         js      0x27c <_JIT_ENTRY+0x27c>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 265: ff d0                         callq   *%rax
// 267: 48 ff 4d 00                   decq    (%rbp)
// 26b: 75 0f                         jne     0x27c <_JIT_ENTRY+0x27c>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_Dealloc
// 277: 48 89 ef                      movq    %rbp, %rdi
// 27a: ff d0                         callq   *%rax
// 27c: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 281: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 288: 74 7c                         je      0x306 <_JIT_ENTRY+0x306>
// 28a: 48 8b 40 38                   movq    0x38(%rax), %rax
// 28e: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 292: 48 85 c0                      testq   %rax, %rax
// 295: 74 6f                         je      0x306 <_JIT_ENTRY+0x306>
// 297: 4c 89 e7                      movq    %r12, %rdi
// 29a: 31 f6                         xorl    %esi, %esi
// 29c: 31 d2                         xorl    %edx, %edx
// 29e: 31 c9                         xorl    %ecx, %ecx
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002a4:  R_X86_64_64  _Py_CheckFunctionResult
// 2ac: 4c 89 f7                      movq    %r14, %rdi
// 2af: 4c 89 e6                      movq    %r12, %rsi
// 2b2: 48 89 c2                      movq    %rax, %rdx
// 2b5: 31 c9                         xorl    %ecx, %ecx
// 2b7: 41 ff d0                      callq   *%r8
// 2ba: eb 63                         jmp     0x31f <_JIT_ENTRY+0x31f>
// 2bc: 49 8b 46 68                   movq    0x68(%r14), %rax
// 2c0: 48 85 c0                      testq   %rax, %rax
// 2c3: 74 0b                         je      0x2d0 <_JIT_ENTRY+0x2d0>
// 2c5: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2ca: 0f 85 e8 01 00 00             jne     0x4b8 <_JIT_ENTRY+0x4b8>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  PyExc_TypeError
// 2da: 48 8b 30                      movq    (%rax), %rsi
// 2dd: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2e1: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2e5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002e7:  R_X86_64_64  .rodata.str1.1+0x39
// 2ef: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002f1:  R_X86_64_64  _PyErr_Format
// 2f9: 4c 89 f7                      movq    %r14, %rdi
// 2fc: 31 c0                         xorl    %eax, %eax
// 2fe: 41 ff d0                      callq   *%r8
// 301: e9 b2 01 00 00                jmp     0x4b8 <_JIT_ENTRY+0x4b8>
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _PyObject_MakeTpCall
// 310: 4c 89 f7                      movq    %r14, %rdi
// 313: 4c 89 e6                      movq    %r12, %rsi
// 316: 31 d2                         xorl    %edx, %edx
// 318: 31 c9                         xorl    %ecx, %ecx
// 31a: 45 31 c0                      xorl    %r8d, %r8d
// 31d: ff d0                         callq   *%rax
// 31f: 48 89 c5                      movq    %rax, %rbp
// 322: 49 8b 04 24                   movq    (%r12), %rax
// 326: 48 85 c0                      testq   %rax, %rax
// 329: 7f 22                         jg      0x34d <_JIT_ENTRY+0x34d>
// 32b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000032d:  R_X86_64_64  .rodata.str1.1
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  _Py_NegativeRefcount
// 33f: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 344: 4c 89 e2                      movq    %r12, %rdx
// 347: ff d0                         callq   *%rax
// 349: 49 8b 04 24                   movq    (%r12), %rax
// 34d: 85 c0                         testl   %eax, %eax
// 34f: 78 21                         js      0x372 <_JIT_ENTRY+0x372>
// 351: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000353:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 35b: ff d0                         callq   *%rax
// 35d: 49 ff 0c 24                   decq    (%r12)
// 361: 75 0f                         jne     0x372 <_JIT_ENTRY+0x372>
// 363: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000365:  R_X86_64_64  _Py_Dealloc
// 36d: 4c 89 e7                      movq    %r12, %rdi
// 370: ff d0                         callq   *%rax
// 372: 48 85 ed                      testq   %rbp, %rbp
// 375: 74 59                         je      0x3d0 <_JIT_ENTRY+0x3d0>
// 377: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 37b: 49 89 6f f8                   movq    %rbp, -0x8(%r15)
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  _JIT_CONTINUE
// 389: 48 89 df                      movq    %rbx, %rdi
// 38c: 4c 89 fe                      movq    %r15, %rsi
// 38f: 4c 89 f2                      movq    %r14, %rdx
// 392: 48 83 c4 18                   addq    $0x18, %rsp
// 396: 5b                            popq    %rbx
// 397: 41 5c                         popq    %r12
// 399: 41 5d                         popq    %r13
// 39b: 41 5e                         popq    %r14
// 39d: 41 5f                         popq    %r15
// 39f: 5d                            popq    %rbp
// 3a0: ff e0                         jmpq    *%rax
// 3a2: 49 8b 46 68                   movq    0x68(%r14), %rax
// 3a6: 48 85 c0                      testq   %rax, %rax
// 3a9: 74 7f                         je      0x42a <_JIT_ENTRY+0x42a>
// 3ab: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 3b0: 74 78                         je      0x42a <_JIT_ENTRY+0x42a>
// 3b2: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 3b7: 48 8b 00                      movq    (%rax), %rax
// 3ba: 48 85 c0                      testq   %rax, %rax
// 3bd: 0f 8e a9 00 00 00             jle     0x46c <_JIT_ENTRY+0x46c>
// 3c3: 85 c0                         testl   %eax, %eax
// 3c5: 0f 89 cb 00 00 00             jns     0x496 <_JIT_ENTRY+0x496>
// 3cb: e9 e8 00 00 00                jmp     0x4b8 <_JIT_ENTRY+0x4b8>
// 3d0: 49 8b 45 00                   movq    (%r13), %rax
// 3d4: 48 85 c0                      testq   %rax, %rax
// 3d7: 7f 22                         jg      0x3fb <_JIT_ENTRY+0x3fb>
// 3d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003db:  R_X86_64_64  .rodata.str1.1
// 3e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e5:  R_X86_64_64  _Py_NegativeRefcount
// 3ed: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 3f2: 4c 89 ea                      movq    %r13, %rdx
// 3f5: ff d0                         callq   *%rax
// 3f7: 49 8b 45 00                   movq    (%r13), %rax
// 3fb: 85 c0                         testl   %eax, %eax
// 3fd: 78 21                         js      0x420 <_JIT_ENTRY+0x420>
// 3ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000401:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 409: ff d0                         callq   *%rax
// 40b: 49 ff 4d 00                   decq    (%r13)
// 40f: 75 0f                         jne     0x420 <_JIT_ENTRY+0x420>
// 411: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000413:  R_X86_64_64  _Py_Dealloc
// 41b: 4c 89 ef                      movq    %r13, %rdi
// 41e: ff d0                         callq   *%rax
// 420: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 425: e9 8e 00 00 00                jmp     0x4b8 <_JIT_ENTRY+0x4b8>
// 42a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000042c:  R_X86_64_64  PyExc_TypeError
// 434: 48 8b 30                      movq    (%rax), %rsi
// 437: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 43b: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 43f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000441:  R_X86_64_64  .rodata.str1.1+0x77
// 449: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000044b:  R_X86_64_64  _PyErr_Format
// 453: 4c 89 f7                      movq    %r14, %rdi
// 456: 31 c0                         xorl    %eax, %eax
// 458: 41 ff d0                      callq   *%r8
// 45b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 460: 48 8b 00                      movq    (%rax), %rax
// 463: 48 85 c0                      testq   %rax, %rax
// 466: 0f 8f 57 ff ff ff             jg      0x3c3 <_JIT_ENTRY+0x3c3>
// 46c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000046e:  R_X86_64_64  .rodata.str1.1
// 476: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000478:  R_X86_64_64  _Py_NegativeRefcount
// 480: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 485: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 48a: 4c 89 f2                      movq    %r14, %rdx
// 48d: ff d0                         callq   *%rax
// 48f: 49 8b 06                      movq    (%r14), %rax
// 492: 85 c0                         testl   %eax, %eax
// 494: 78 22                         js      0x4b8 <_JIT_ENTRY+0x4b8>
// 496: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000498:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a0: ff d0                         callq   *%rax
// 4a2: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 4a7: 48 ff 0f                      decq    (%rdi)
// 4aa: 75 0c                         jne     0x4b8 <_JIT_ENTRY+0x4b8>
// 4ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004ae:  R_X86_64_64  _Py_Dealloc
// 4b6: ff d0                         callq   *%rax
// 4b8: 49 29 dc                      subq    %rbx, %r12
// 4bb: 49 83 c4 b8                   addq    $-0x48, %r12
// 4bf: 49 c1 ec 03                   shrq    $0x3, %r12
// 4c3: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 4c7: 31 c0                         xorl    %eax, %eax
// 4c9: e9 4f fc ff ff                jmp     0x11d <_JIT_ENTRY+0x11d>
// 4ce: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BEFORE_WITH_code_body[1231] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x4f, 0xf0, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x01, 0xed, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x67, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x50, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xb8, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x7e, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x74, 0x7c, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x74, 0x6f, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xeb, 0x63, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0xe8, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xb2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x59, 0x4d, 0x89, 0x6f, 0xf0, 0x49, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x7f, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x78, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xcb, 0x00, 0x00, 0x00, 0xe9, 0xe8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x57, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x4f, 0xfc, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BEFORE_WITH_code_holes[38] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x353, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x365, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x381, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3db, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x401, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x413, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x42c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x441, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x77},
    {0x44b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x46e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x478, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x498, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00"
// ce: 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BEFORE_WITH_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BEFORE_WITH_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_OP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_OP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 49 8b 6e e8                   movq    -0x18(%r14), %rbp
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: 0f b7 c0                      movzwl  %ax, %eax
// 1db: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dd:  R_X86_64_64  _PyEval_BinaryOps
// 1e5: 48 89 ef                      movq    %rbp, %rdi
// 1e8: 4c 89 ee                      movq    %r13, %rsi
// 1eb: ff 14 c1                      callq   *(%rcx,%rax,8)
// 1ee: 49 89 c4                      movq    %rax, %r12
// 1f1: 48 8b 45 00                   movq    (%rbp), %rax
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 7f 22                         jg      0x21c <_JIT_ENTRY+0x21c>
// 1fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fc:  R_X86_64_64  .rodata.str1.1
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_NegativeRefcount
// 20e: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 213: 48 89 ea                      movq    %rbp, %rdx
// 216: ff d0                         callq   *%rax
// 218: 48 8b 45 00                   movq    (%rbp), %rax
// 21c: 85 c0                         testl   %eax, %eax
// 21e: 78 21                         js      0x241 <_JIT_ENTRY+0x241>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22a: ff d0                         callq   *%rax
// 22c: 48 ff 4d 00                   decq    (%rbp)
// 230: 75 0f                         jne     0x241 <_JIT_ENTRY+0x241>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_Dealloc
// 23c: 48 89 ef                      movq    %rbp, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 49 8b 45 00                   movq    (%r13), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 7f 22                         jg      0x26c <_JIT_ENTRY+0x26c>
// 24a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024c:  R_X86_64_64  .rodata.str1.1
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_NegativeRefcount
// 25e: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 263: 4c 89 ea                      movq    %r13, %rdx
// 266: ff d0                         callq   *%rax
// 268: 49 8b 45 00                   movq    (%r13), %rax
// 26c: 85 c0                         testl   %eax, %eax
// 26e: 78 21                         js      0x291 <_JIT_ENTRY+0x291>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27a: ff d0                         callq   *%rax
// 27c: 49 ff 4d 00                   decq    (%r13)
// 280: 75 0f                         jne     0x291 <_JIT_ENTRY+0x291>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_Dealloc
// 28c: 4c 89 ef                      movq    %r13, %rdi
// 28f: ff d0                         callq   *%rax
// 291: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 295: 4d 85 e4                      testq   %r12, %r12
// 298: 74 2a                         je      0x2c4 <_JIT_ENTRY+0x2c4>
// 29a: 49 83 c6 f0                   addq    $-0x10, %r14
// 29e: 4c 89 20                      movq    %r12, (%rax)
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _JIT_CONTINUE
// 2ab: 48 89 df                      movq    %rbx, %rdi
// 2ae: 4c 89 f6                      movq    %r14, %rsi
// 2b1: 4c 89 fa                      movq    %r15, %rdx
// 2b4: 48 83 c4 08                   addq    $0x8, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: ff e0                         jmpq    *%rax
// 2c4: 48 29 d8                      subq    %rbx, %rax
// 2c7: 48 83 c0 b8                   addq    $-0x48, %rax
// 2cb: 48 c1 e8 03                   shrq    $0x3, %rax
// 2cf: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2d2: 31 c0                         xorl    %eax, %eax
// 2d4: e9 41 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2d9: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_code_body[730] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x41, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_FLOAT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 8b 6b e8                   movq    -0x18(%rbx), %rbp
// 1ce: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 1d3: f2 41 0f 58 45 10             addsd   0x10(%r13), %xmm0
// 1d9: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 1de: 75 3c                         jne     0x21c <_JIT_ENTRY+0x21c>
// 1e0: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 1e5: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1ea: 75 28                         jne     0x214 <_JIT_ENTRY+0x214>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  PyInterpreterState_Get
// 1f6: ff d0                         callq   *%rax
// 1f8: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ff: 49 ff 4d 00                   decq    (%r13)
// 203: 75 0f                         jne     0x214 <_JIT_ENTRY+0x214>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _PyFloat_ExactDealloc
// 20f: 4c 89 ef                      movq    %r13, %rdi
// 212: ff d0                         callq   *%rax
// 214: 49 89 ed                      movq    %rbp, %r13
// 217: e9 e3 00 00 00                jmp     0x2ff <_JIT_ENTRY+0x2ff>
// 21c: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 221: 75 31                         jne     0x254 <_JIT_ENTRY+0x254>
// 223: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 229: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 22d: 0f 85 cc 00 00 00             jne     0x2ff <_JIT_ENTRY+0x2ff>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  PyInterpreterState_Get
// 23d: ff d0                         callq   *%rax
// 23f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 246: 48 8b 45 00                   movq    (%rbp), %rax
// 24a: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 24e: 48 89 4d 00                   movq    %rcx, (%rbp)
// 252: eb 68                         jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  PyFloat_FromDouble
// 25e: ff d0                         callq   *%rax
// 260: 48 85 c0                      testq   %rax, %rax
// 263: 74 7d                         je      0x2e2 <_JIT_ENTRY+0x2e2>
// 265: 49 89 c4                      movq    %rax, %r12
// 268: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 26c: 75 25                         jne     0x293 <_JIT_ENTRY+0x293>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  PyInterpreterState_Get
// 278: ff d0                         callq   *%rax
// 27a: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 281: 48 8b 45 00                   movq    (%rbp), %rax
// 285: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 289: 48 89 4d 00                   movq    %rcx, (%rbp)
// 28d: 48 83 f8 01                   cmpq    $0x1, %rax
// 291: 7e 2f                         jle     0x2c2 <_JIT_ENTRY+0x2c2>
// 293: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 298: 75 62                         jne     0x2fc <_JIT_ENTRY+0x2fc>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  PyInterpreterState_Get
// 2a4: ff d0                         callq   *%rax
// 2a6: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2ad: 49 8b 45 00                   movq    (%r13), %rax
// 2b1: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2b5: 49 89 4d 00                   movq    %rcx, (%r13)
// 2b9: 4d 89 e5                      movq    %r12, %r13
// 2bc: 48 83 f8 01                   cmpq    $0x1, %rax
// 2c0: 7f 3d                         jg      0x2ff <_JIT_ENTRY+0x2ff>
// 2c2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c4:  R_X86_64_64  .rodata.str1.1+0x39
// 2cc: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002ce:  R_X86_64_64  .rodata.str1.1+0x4f
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 2e0: ff d0                         callq   *%rax
// 2e2: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2e6: 4c 29 f3                      subq    %r14, %rbx
// 2e9: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2ed: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2f1: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2f5: 31 c0                         xorl    %eax, %eax
// 2f7: e9 1e fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2fc: 4d 89 e5                      movq    %r12, %r13
// 2ff: 4c 89 6b e8                   movq    %r13, -0x18(%rbx)
// 303: 48 83 c3 f0                   addq    $-0x10, %rbx
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _JIT_CONTINUE
// 311: 4c 89 f7                      movq    %r14, %rdi
// 314: 48 89 de                      movq    %rbx, %rsi
// 317: 4c 89 fa                      movq    %r15, %rdx
// 31a: 48 83 c4 08                   addq    $0x8, %rsp
// 31e: 5b                            popq    %rbx
// 31f: 41 5c                         popq    %r12
// 321: 41 5d                         popq    %r13
// 323: 41 5e                         popq    %r14
// 325: 41 5f                         popq    %r15
// 327: 5d                            popq    %rbp
// 328: ff e0                         jmpq    *%rax
// 32a: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_FLOAT_code_body[811] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x8b, 0x6b, 0xe8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x45, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3c, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xed, 0xe9, 0xe3, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x31, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xcc, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0xeb, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7d, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x2f, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x62, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x4d, 0x89, 0xe5, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x3d, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x1e, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xe5, 0x4c, 0x89, 0x6b, 0xe8, 0x48, 0x83, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_FLOAT_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_INT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_INT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 49 8b 6e e8                   movq    -0x18(%r14), %rbp
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _PyLong_Add
// 1d8: 48 89 ef                      movq    %rbp, %rdi
// 1db: 4c 89 ee                      movq    %r13, %rsi
// 1de: ff d0                         callq   *%rax
// 1e0: 49 89 c4                      movq    %rax, %r12
// 1e3: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1e8: 75 28                         jne     0x212 <_JIT_ENTRY+0x212>
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  PyInterpreterState_Get
// 1f4: ff d0                         callq   *%rax
// 1f6: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1fd: 49 ff 4d 00                   decq    (%r13)
// 201: 75 0f                         jne     0x212 <_JIT_ENTRY+0x212>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyObject_Free
// 20d: 4c 89 ef                      movq    %r13, %rdi
// 210: ff d0                         callq   *%rax
// 212: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 216: 75 28                         jne     0x240 <_JIT_ENTRY+0x240>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyInterpreterState_Get
// 222: ff d0                         callq   *%rax
// 224: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 22b: 48 ff 4d 00                   decq    (%rbp)
// 22f: 75 0f                         jne     0x240 <_JIT_ENTRY+0x240>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  PyObject_Free
// 23b: 48 89 ef                      movq    %rbp, %rdi
// 23e: ff d0                         callq   *%rax
// 240: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 244: 4d 85 e4                      testq   %r12, %r12
// 247: 74 2a                         je      0x273 <_JIT_ENTRY+0x273>
// 249: 49 83 c6 f0                   addq    $-0x10, %r14
// 24d: 4c 89 20                      movq    %r12, (%rax)
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _JIT_CONTINUE
// 25a: 48 89 df                      movq    %rbx, %rdi
// 25d: 4c 89 f6                      movq    %r14, %rsi
// 260: 4c 89 fa                      movq    %r15, %rdx
// 263: 48 83 c4 08                   addq    $0x8, %rsp
// 267: 5b                            popq    %rbx
// 268: 41 5c                         popq    %r12
// 26a: 41 5d                         popq    %r13
// 26c: 41 5e                         popq    %r14
// 26e: 41 5f                         popq    %r15
// 270: 5d                            popq    %rbp
// 271: ff e0                         jmpq    *%rax
// 273: 48 29 d8                      subq    %rbx, %rax
// 276: 48 83 c0 b8                   addq    $-0x48, %rax
// 27a: 48 c1 e8 03                   shrq    $0x3, %rax
// 27e: 89 43 40                      movl    %eax, 0x40(%rbx)
// 281: 31 c0                         xorl    %eax, %eax
// 283: e9 92 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 288: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_INT_code_body[649] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x92, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_INT_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_INT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_UNICODE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 49 8b 6e e8                   movq    -0x18(%r14), %rbp
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  PyUnicode_Concat
// 1d8: 48 89 ef                      movq    %rbp, %rdi
// 1db: 4c 89 ee                      movq    %r13, %rsi
// 1de: ff d0                         callq   *%rax
// 1e0: 49 89 c4                      movq    %rax, %r12
// 1e3: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1e7: 75 28                         jne     0x211 <_JIT_ENTRY+0x211>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  PyInterpreterState_Get
// 1f3: ff d0                         callq   *%rax
// 1f5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1fc: 48 ff 4d 00                   decq    (%rbp)
// 200: 75 0f                         jne     0x211 <_JIT_ENTRY+0x211>
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _PyUnicode_ExactDealloc
// 20c: 48 89 ef                      movq    %rbp, %rdi
// 20f: ff d0                         callq   *%rax
// 211: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 216: 75 28                         jne     0x240 <_JIT_ENTRY+0x240>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyInterpreterState_Get
// 222: ff d0                         callq   *%rax
// 224: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 22b: 49 ff 4d 00                   decq    (%r13)
// 22f: 75 0f                         jne     0x240 <_JIT_ENTRY+0x240>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _PyUnicode_ExactDealloc
// 23b: 4c 89 ef                      movq    %r13, %rdi
// 23e: ff d0                         callq   *%rax
// 240: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 244: 4d 85 e4                      testq   %r12, %r12
// 247: 74 2a                         je      0x273 <_JIT_ENTRY+0x273>
// 249: 49 83 c6 f0                   addq    $-0x10, %r14
// 24d: 4c 89 20                      movq    %r12, (%rax)
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _JIT_CONTINUE
// 25a: 48 89 df                      movq    %rbx, %rdi
// 25d: 4c 89 f6                      movq    %r14, %rsi
// 260: 4c 89 fa                      movq    %r15, %rdx
// 263: 48 83 c4 08                   addq    $0x8, %rsp
// 267: 5b                            popq    %rbx
// 268: 41 5c                         popq    %r12
// 26a: 41 5d                         popq    %r13
// 26c: 41 5e                         popq    %r14
// 26e: 41 5f                         popq    %r15
// 270: 5d                            popq    %rbp
// 271: ff e0                         jmpq    *%rax
// 273: 48 29 d8                      subq    %rbx, %rax
// 276: 48 83 c0 b8                   addq    $-0x48, %rax
// 27a: 48 c1 e8 03                   shrq    $0x3, %rax
// 27e: 89 43 40                      movl    %eax, 0x40(%rbx)
// 281: 31 c0                         xorl    %eax, %eax
// 283: e9 92 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 288: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_UNICODE_code_body[649] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x92, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_UNICODE_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_FLOAT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 8b 6b e8                   movq    -0x18(%rbx), %rbp
// 1ce: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 1d3: f2 41 0f 59 45 10             mulsd   0x10(%r13), %xmm0
// 1d9: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 1de: 75 3c                         jne     0x21c <_JIT_ENTRY+0x21c>
// 1e0: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 1e5: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1ea: 75 28                         jne     0x214 <_JIT_ENTRY+0x214>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  PyInterpreterState_Get
// 1f6: ff d0                         callq   *%rax
// 1f8: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ff: 49 ff 4d 00                   decq    (%r13)
// 203: 75 0f                         jne     0x214 <_JIT_ENTRY+0x214>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _PyFloat_ExactDealloc
// 20f: 4c 89 ef                      movq    %r13, %rdi
// 212: ff d0                         callq   *%rax
// 214: 49 89 ed                      movq    %rbp, %r13
// 217: e9 e3 00 00 00                jmp     0x2ff <_JIT_ENTRY+0x2ff>
// 21c: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 221: 75 31                         jne     0x254 <_JIT_ENTRY+0x254>
// 223: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 229: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 22d: 0f 85 cc 00 00 00             jne     0x2ff <_JIT_ENTRY+0x2ff>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  PyInterpreterState_Get
// 23d: ff d0                         callq   *%rax
// 23f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 246: 48 8b 45 00                   movq    (%rbp), %rax
// 24a: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 24e: 48 89 4d 00                   movq    %rcx, (%rbp)
// 252: eb 68                         jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  PyFloat_FromDouble
// 25e: ff d0                         callq   *%rax
// 260: 48 85 c0                      testq   %rax, %rax
// 263: 74 7d                         je      0x2e2 <_JIT_ENTRY+0x2e2>
// 265: 49 89 c4                      movq    %rax, %r12
// 268: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 26c: 75 25                         jne     0x293 <_JIT_ENTRY+0x293>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  PyInterpreterState_Get
// 278: ff d0                         callq   *%rax
// 27a: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 281: 48 8b 45 00                   movq    (%rbp), %rax
// 285: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 289: 48 89 4d 00                   movq    %rcx, (%rbp)
// 28d: 48 83 f8 01                   cmpq    $0x1, %rax
// 291: 7e 2f                         jle     0x2c2 <_JIT_ENTRY+0x2c2>
// 293: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 298: 75 62                         jne     0x2fc <_JIT_ENTRY+0x2fc>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  PyInterpreterState_Get
// 2a4: ff d0                         callq   *%rax
// 2a6: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2ad: 49 8b 45 00                   movq    (%r13), %rax
// 2b1: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2b5: 49 89 4d 00                   movq    %rcx, (%r13)
// 2b9: 4d 89 e5                      movq    %r12, %r13
// 2bc: 48 83 f8 01                   cmpq    $0x1, %rax
// 2c0: 7f 3d                         jg      0x2ff <_JIT_ENTRY+0x2ff>
// 2c2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c4:  R_X86_64_64  .rodata.str1.1+0x39
// 2cc: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002ce:  R_X86_64_64  .rodata.str1.1+0x4f
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 2e0: ff d0                         callq   *%rax
// 2e2: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2e6: 4c 29 f3                      subq    %r14, %rbx
// 2e9: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2ed: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2f1: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2f5: 31 c0                         xorl    %eax, %eax
// 2f7: e9 1e fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2fc: 4d 89 e5                      movq    %r12, %r13
// 2ff: 4c 89 6b e8                   movq    %r13, -0x18(%rbx)
// 303: 48 83 c3 f0                   addq    $-0x10, %rbx
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _JIT_CONTINUE
// 311: 4c 89 f7                      movq    %r14, %rdi
// 314: 48 89 de                      movq    %rbx, %rsi
// 317: 4c 89 fa                      movq    %r15, %rdx
// 31a: 48 83 c4 08                   addq    $0x8, %rsp
// 31e: 5b                            popq    %rbx
// 31f: 41 5c                         popq    %r12
// 321: 41 5d                         popq    %r13
// 323: 41 5e                         popq    %r14
// 325: 41 5f                         popq    %r15
// 327: 5d                            popq    %rbp
// 328: ff e0                         jmpq    *%rax
// 32a: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_FLOAT_code_body[811] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x8b, 0x6b, 0xe8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x45, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3c, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xed, 0xe9, 0xe3, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x31, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xcc, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0xeb, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7d, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x2f, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x62, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x4d, 0x89, 0xe5, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x3d, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x1e, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xe5, 0x4c, 0x89, 0x6b, 0xe8, 0x48, 0x83, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 49 8b 6e e8                   movq    -0x18(%r14), %rbp
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _PyLong_Multiply
// 1d8: 48 89 ef                      movq    %rbp, %rdi
// 1db: 4c 89 ee                      movq    %r13, %rsi
// 1de: ff d0                         callq   *%rax
// 1e0: 49 89 c4                      movq    %rax, %r12
// 1e3: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1e8: 75 28                         jne     0x212 <_JIT_ENTRY+0x212>
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  PyInterpreterState_Get
// 1f4: ff d0                         callq   *%rax
// 1f6: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1fd: 49 ff 4d 00                   decq    (%r13)
// 201: 75 0f                         jne     0x212 <_JIT_ENTRY+0x212>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyObject_Free
// 20d: 4c 89 ef                      movq    %r13, %rdi
// 210: ff d0                         callq   *%rax
// 212: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 216: 75 28                         jne     0x240 <_JIT_ENTRY+0x240>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyInterpreterState_Get
// 222: ff d0                         callq   *%rax
// 224: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 22b: 48 ff 4d 00                   decq    (%rbp)
// 22f: 75 0f                         jne     0x240 <_JIT_ENTRY+0x240>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  PyObject_Free
// 23b: 48 89 ef                      movq    %rbp, %rdi
// 23e: ff d0                         callq   *%rax
// 240: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 244: 4d 85 e4                      testq   %r12, %r12
// 247: 74 2a                         je      0x273 <_JIT_ENTRY+0x273>
// 249: 49 83 c6 f0                   addq    $-0x10, %r14
// 24d: 4c 89 20                      movq    %r12, (%rax)
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _JIT_CONTINUE
// 25a: 48 89 df                      movq    %rbx, %rdi
// 25d: 4c 89 f6                      movq    %r14, %rsi
// 260: 4c 89 fa                      movq    %r15, %rdx
// 263: 48 83 c4 08                   addq    $0x8, %rsp
// 267: 5b                            popq    %rbx
// 268: 41 5c                         popq    %r12
// 26a: 41 5d                         popq    %r13
// 26c: 41 5e                         popq    %r14
// 26e: 41 5f                         popq    %r15
// 270: 5d                            popq    %rbp
// 271: ff e0                         jmpq    *%rax
// 273: 48 29 d8                      subq    %rbx, %rax
// 276: 48 83 c0 b8                   addq    $-0x48, %rax
// 27a: 48 c1 e8 03                   shrq    $0x3, %rax
// 27e: 89 43 40                      movl    %eax, 0x40(%rbx)
// 281: 31 c0                         xorl    %eax, %eax
// 283: e9 92 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 288: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_INT_code_body[649] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x92, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_INT_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_FLOAT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 8b 6b e8                   movq    -0x18(%rbx), %rbp
// 1ce: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 1d3: f2 41 0f 5c 45 10             subsd   0x10(%r13), %xmm0
// 1d9: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 1de: 75 3c                         jne     0x21c <_JIT_ENTRY+0x21c>
// 1e0: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 1e5: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1ea: 75 28                         jne     0x214 <_JIT_ENTRY+0x214>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  PyInterpreterState_Get
// 1f6: ff d0                         callq   *%rax
// 1f8: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ff: 49 ff 4d 00                   decq    (%r13)
// 203: 75 0f                         jne     0x214 <_JIT_ENTRY+0x214>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _PyFloat_ExactDealloc
// 20f: 4c 89 ef                      movq    %r13, %rdi
// 212: ff d0                         callq   *%rax
// 214: 49 89 ed                      movq    %rbp, %r13
// 217: e9 e3 00 00 00                jmp     0x2ff <_JIT_ENTRY+0x2ff>
// 21c: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 221: 75 31                         jne     0x254 <_JIT_ENTRY+0x254>
// 223: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 229: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 22d: 0f 85 cc 00 00 00             jne     0x2ff <_JIT_ENTRY+0x2ff>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  PyInterpreterState_Get
// 23d: ff d0                         callq   *%rax
// 23f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 246: 48 8b 45 00                   movq    (%rbp), %rax
// 24a: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 24e: 48 89 4d 00                   movq    %rcx, (%rbp)
// 252: eb 68                         jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  PyFloat_FromDouble
// 25e: ff d0                         callq   *%rax
// 260: 48 85 c0                      testq   %rax, %rax
// 263: 74 7d                         je      0x2e2 <_JIT_ENTRY+0x2e2>
// 265: 49 89 c4                      movq    %rax, %r12
// 268: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 26c: 75 25                         jne     0x293 <_JIT_ENTRY+0x293>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  PyInterpreterState_Get
// 278: ff d0                         callq   *%rax
// 27a: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 281: 48 8b 45 00                   movq    (%rbp), %rax
// 285: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 289: 48 89 4d 00                   movq    %rcx, (%rbp)
// 28d: 48 83 f8 01                   cmpq    $0x1, %rax
// 291: 7e 2f                         jle     0x2c2 <_JIT_ENTRY+0x2c2>
// 293: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 298: 75 62                         jne     0x2fc <_JIT_ENTRY+0x2fc>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  PyInterpreterState_Get
// 2a4: ff d0                         callq   *%rax
// 2a6: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2ad: 49 8b 45 00                   movq    (%r13), %rax
// 2b1: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2b5: 49 89 4d 00                   movq    %rcx, (%r13)
// 2b9: 4d 89 e5                      movq    %r12, %r13
// 2bc: 48 83 f8 01                   cmpq    $0x1, %rax
// 2c0: 7f 3d                         jg      0x2ff <_JIT_ENTRY+0x2ff>
// 2c2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c4:  R_X86_64_64  .rodata.str1.1+0x39
// 2cc: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002ce:  R_X86_64_64  .rodata.str1.1+0x4f
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 2e0: ff d0                         callq   *%rax
// 2e2: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2e6: 4c 29 f3                      subq    %r14, %rbx
// 2e9: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2ed: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2f1: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2f5: 31 c0                         xorl    %eax, %eax
// 2f7: e9 1e fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2fc: 4d 89 e5                      movq    %r12, %r13
// 2ff: 4c 89 6b e8                   movq    %r13, -0x18(%rbx)
// 303: 48 83 c3 f0                   addq    $-0x10, %rbx
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _JIT_CONTINUE
// 311: 4c 89 f7                      movq    %r14, %rdi
// 314: 48 89 de                      movq    %rbx, %rsi
// 317: 4c 89 fa                      movq    %r15, %rdx
// 31a: 48 83 c4 08                   addq    $0x8, %rsp
// 31e: 5b                            popq    %rbx
// 31f: 41 5c                         popq    %r12
// 321: 41 5d                         popq    %r13
// 323: 41 5e                         popq    %r14
// 325: 41 5f                         popq    %r15
// 327: 5d                            popq    %rbp
// 328: ff e0                         jmpq    *%rax
// 32a: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_FLOAT_code_body[811] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x8b, 0x6b, 0xe8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x45, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3c, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xed, 0xe9, 0xe3, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x31, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xcc, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0xeb, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7d, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x2f, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x62, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x4d, 0x89, 0xe5, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x3d, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x1e, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xe5, 0x4c, 0x89, 0x6b, 0xe8, 0x48, 0x83, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 49 8b 6e e8                   movq    -0x18(%r14), %rbp
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _PyLong_Subtract
// 1d8: 48 89 ef                      movq    %rbp, %rdi
// 1db: 4c 89 ee                      movq    %r13, %rsi
// 1de: ff d0                         callq   *%rax
// 1e0: 49 89 c4                      movq    %rax, %r12
// 1e3: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1e8: 75 28                         jne     0x212 <_JIT_ENTRY+0x212>
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  PyInterpreterState_Get
// 1f4: ff d0                         callq   *%rax
// 1f6: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1fd: 49 ff 4d 00                   decq    (%r13)
// 201: 75 0f                         jne     0x212 <_JIT_ENTRY+0x212>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyObject_Free
// 20d: 4c 89 ef                      movq    %r13, %rdi
// 210: ff d0                         callq   *%rax
// 212: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 216: 75 28                         jne     0x240 <_JIT_ENTRY+0x240>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyInterpreterState_Get
// 222: ff d0                         callq   *%rax
// 224: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 22b: 48 ff 4d 00                   decq    (%rbp)
// 22f: 75 0f                         jne     0x240 <_JIT_ENTRY+0x240>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  PyObject_Free
// 23b: 48 89 ef                      movq    %rbp, %rdi
// 23e: ff d0                         callq   *%rax
// 240: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 244: 4d 85 e4                      testq   %r12, %r12
// 247: 74 2a                         je      0x273 <_JIT_ENTRY+0x273>
// 249: 49 83 c6 f0                   addq    $-0x10, %r14
// 24d: 4c 89 20                      movq    %r12, (%rax)
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _JIT_CONTINUE
// 25a: 48 89 df                      movq    %rbx, %rdi
// 25d: 4c 89 f6                      movq    %r14, %rsi
// 260: 4c 89 fa                      movq    %r15, %rdx
// 263: 48 83 c4 08                   addq    $0x8, %rsp
// 267: 5b                            popq    %rbx
// 268: 41 5c                         popq    %r12
// 26a: 41 5d                         popq    %r13
// 26c: 41 5e                         popq    %r14
// 26e: 41 5f                         popq    %r15
// 270: 5d                            popq    %rbp
// 271: ff e0                         jmpq    *%rax
// 273: 48 29 d8                      subq    %rbx, %rax
// 276: 48 83 c0 b8                   addq    $-0x48, %rax
// 27a: 48 c1 e8 03                   shrq    $0x3, %rax
// 27e: 89 43 40                      movl    %eax, 0x40(%rbx)
// 281: 31 c0                         xorl    %eax, %eax
// 283: e9 92 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 288: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_INT_code_body[649] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x92, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_INT_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_SLICE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_SLICE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 4d 8b 66 e0                   movq    -0x20(%r14), %r12
// 1ce: 49 8b 7e e8                   movq    -0x18(%r14), %rdi
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 1dc: 4c 89 ee                      movq    %r13, %rsi
// 1df: ff d0                         callq   *%rax
// 1e1: 48 85 c0                      testq   %rax, %rax
// 1e4: 74 6a                         je      0x250 <_JIT_ENTRY+0x250>
// 1e6: 48 89 c5                      movq    %rax, %rbp
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  PyObject_GetItem
// 1f3: 4c 89 e7                      movq    %r12, %rdi
// 1f6: 48 89 ee                      movq    %rbp, %rsi
// 1f9: ff d0                         callq   *%rax
// 1fb: 49 89 c5                      movq    %rax, %r13
// 1fe: 48 8b 45 00                   movq    (%rbp), %rax
// 202: 48 85 c0                      testq   %rax, %rax
// 205: 7f 22                         jg      0x229 <_JIT_ENTRY+0x229>
// 207: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000209:  R_X86_64_64  .rodata.str1.1
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_NegativeRefcount
// 21b: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 220: 48 89 ea                      movq    %rbp, %rdx
// 223: ff d0                         callq   *%rax
// 225: 48 8b 45 00                   movq    (%rbp), %rax
// 229: 85 c0                         testl   %eax, %eax
// 22b: 78 26                         js      0x253 <_JIT_ENTRY+0x253>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 237: ff d0                         callq   *%rax
// 239: 48 ff 4d 00                   decq    (%rbp)
// 23d: 75 14                         jne     0x253 <_JIT_ENTRY+0x253>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_Dealloc
// 249: 48 89 ef                      movq    %rbp, %rdi
// 24c: ff d0                         callq   *%rax
// 24e: eb 03                         jmp     0x253 <_JIT_ENTRY+0x253>
// 250: 45 31 ed                      xorl    %r13d, %r13d
// 253: 49 8b 04 24                   movq    (%r12), %rax
// 257: 48 85 c0                      testq   %rax, %rax
// 25a: 7f 22                         jg      0x27e <_JIT_ENTRY+0x27e>
// 25c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025e:  R_X86_64_64  .rodata.str1.1
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_NegativeRefcount
// 270: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 275: 4c 89 e2                      movq    %r12, %rdx
// 278: ff d0                         callq   *%rax
// 27a: 49 8b 04 24                   movq    (%r12), %rax
// 27e: 85 c0                         testl   %eax, %eax
// 280: 78 21                         js      0x2a3 <_JIT_ENTRY+0x2a3>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28c: ff d0                         callq   *%rax
// 28e: 49 ff 0c 24                   decq    (%r12)
// 292: 75 0f                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_Dealloc
// 29e: 4c 89 e7                      movq    %r12, %rdi
// 2a1: ff d0                         callq   *%rax
// 2a3: 49 8d 46 e0                   leaq    -0x20(%r14), %rax
// 2a7: 4d 85 ed                      testq   %r13, %r13
// 2aa: 74 2a                         je      0x2d6 <_JIT_ENTRY+0x2d6>
// 2ac: 49 83 c6 e8                   addq    $-0x18, %r14
// 2b0: 4c 89 28                      movq    %r13, (%rax)
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _JIT_CONTINUE
// 2bd: 48 89 df                      movq    %rbx, %rdi
// 2c0: 4c 89 f6                      movq    %r14, %rsi
// 2c3: 4c 89 fa                      movq    %r15, %rdx
// 2c6: 48 83 c4 08                   addq    $0x8, %rsp
// 2ca: 5b                            popq    %rbx
// 2cb: 41 5c                         popq    %r12
// 2cd: 41 5d                         popq    %r13
// 2cf: 41 5e                         popq    %r14
// 2d1: 41 5f                         popq    %r15
// 2d3: 5d                            popq    %rbp
// 2d4: ff e0                         jmpq    *%rax
// 2d6: 48 29 d8                      subq    %rbx, %rax
// 2d9: 48 83 c0 b8                   addq    $-0x48, %rax
// 2dd: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e1: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2e4: 31 c0                         xorl    %eax, %eax
// 2e6: e9 2f fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2eb: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_SLICE_code_body[748] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xe0, 0x49, 0x8b, 0x7e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x6a, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x03, 0x45, 0x31, 0xed, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe0, 0x4d, 0x85, 0xed, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xe8, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x2f, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_SLICE_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_SLICE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 49 8b 6e e8                   movq    -0x18(%r14), %rbp
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  PyObject_GetItem
// 1d8: 48 89 ef                      movq    %rbp, %rdi
// 1db: 4c 89 ee                      movq    %r13, %rsi
// 1de: ff d0                         callq   *%rax
// 1e0: 49 89 c4                      movq    %rax, %r12
// 1e3: 48 8b 45 00                   movq    (%rbp), %rax
// 1e7: 48 85 c0                      testq   %rax, %rax
// 1ea: 7f 22                         jg      0x20e <_JIT_ENTRY+0x20e>
// 1ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ee:  R_X86_64_64  .rodata.str1.1
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_NegativeRefcount
// 200: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 205: 48 89 ea                      movq    %rbp, %rdx
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 45 00                   movq    (%rbp), %rax
// 20e: 85 c0                         testl   %eax, %eax
// 210: 78 21                         js      0x233 <_JIT_ENTRY+0x233>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21c: ff d0                         callq   *%rax
// 21e: 48 ff 4d 00                   decq    (%rbp)
// 222: 75 0f                         jne     0x233 <_JIT_ENTRY+0x233>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_Dealloc
// 22e: 48 89 ef                      movq    %rbp, %rdi
// 231: ff d0                         callq   *%rax
// 233: 49 8b 45 00                   movq    (%r13), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 7f 22                         jg      0x25e <_JIT_ENTRY+0x25e>
// 23c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_NegativeRefcount
// 250: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// 255: 4c 89 ea                      movq    %r13, %rdx
// 258: ff d0                         callq   *%rax
// 25a: 49 8b 45 00                   movq    (%r13), %rax
// 25e: 85 c0                         testl   %eax, %eax
// 260: 78 21                         js      0x283 <_JIT_ENTRY+0x283>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26c: ff d0                         callq   *%rax
// 26e: 49 ff 4d 00                   decq    (%r13)
// 272: 75 0f                         jne     0x283 <_JIT_ENTRY+0x283>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_Dealloc
// 27e: 4c 89 ef                      movq    %r13, %rdi
// 281: ff d0                         callq   *%rax
// 283: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 287: 4d 85 e4                      testq   %r12, %r12
// 28a: 74 2a                         je      0x2b6 <_JIT_ENTRY+0x2b6>
// 28c: 49 83 c6 f0                   addq    $-0x10, %r14
// 290: 4c 89 20                      movq    %r12, (%rax)
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _JIT_CONTINUE
// 29d: 48 89 df                      movq    %rbx, %rdi
// 2a0: 4c 89 f6                      movq    %r14, %rsi
// 2a3: 4c 89 fa                      movq    %r15, %rdx
// 2a6: 48 83 c4 08                   addq    $0x8, %rsp
// 2aa: 5b                            popq    %rbx
// 2ab: 41 5c                         popq    %r12
// 2ad: 41 5d                         popq    %r13
// 2af: 41 5e                         popq    %r14
// 2b1: 41 5f                         popq    %r15
// 2b3: 5d                            popq    %rbp
// 2b4: ff e0                         jmpq    *%rax
// 2b6: 48 29 d8                      subq    %rbx, %rax
// 2b9: 48 83 c0 b8                   addq    $-0x48, %rax
// 2bd: 48 c1 e8 03                   shrq    $0x3, %rax
// 2c1: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2c4: 31 c0                         xorl    %eax, %eax
// 2c6: e9 4f fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2cb: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_code_body[716] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x4f, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_DICT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 87 01 00 00             jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 6e 01 00 00             jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 63 01 00 00             ja      0x1b0 <_JIT_ENTRY+0x1b0>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 54 01 00 00             jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 ba 00 00 00             ja      0x1b0 <_JIT_ENTRY+0x1b0>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 197: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  PyDict_Type
// 1a5: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1aa: 74 3b                         je      0x1e7 <_JIT_ENTRY+0x1e7>
// 1ac: 49 83 c6 f8                   addq    $-0x8, %r14
// 1b0: 49 29 de                      subq    %rbx, %r14
// 1b3: 49 83 c6 b8                   addq    $-0x48, %r14
// 1b7: 49 c1 ee 03                   shrq    $0x3, %r14
// 1bb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1bf: 48 8b 03                      movq    (%rbx), %rax
// 1c2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c4:  R_X86_64_64  _JIT_TARGET
// 1cc: 89 c9                         movl    %ecx, %ecx
// 1ce: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d8: 48 83 c4 08                   addq    $0x8, %rsp
// 1dc: 5b                            popq    %rbx
// 1dd: 41 5c                         popq    %r12
// 1df: 41 5d                         popq    %r13
// 1e1: 41 5e                         popq    %r14
// 1e3: 41 5f                         popq    %r15
// 1e5: 5d                            popq    %rbp
// 1e6: c3                            retq
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  PyDict_GetItemRef
// 1f1: 48 89 e2                      movq    %rsp, %rdx
// 1f4: 4c 89 e7                      movq    %r12, %rdi
// 1f7: 4c 89 ee                      movq    %r13, %rsi
// 1fa: ff d0                         callq   *%rax
// 1fc: 89 c5                         movl    %eax, %ebp
// 1fe: 85 c0                         testl   %eax, %eax
// 200: 74 0f                         je      0x211 <_JIT_ENTRY+0x211>
// 202: 49 8b 04 24                   movq    (%r12), %rax
// 206: 48 85 c0                      testq   %rax, %rax
// 209: 7e 1e                         jle     0x229 <_JIT_ENTRY+0x229>
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 79 40                         jns     0x24f <_JIT_ENTRY+0x24f>
// 20f: eb 5f                         jmp     0x270 <_JIT_ENTRY+0x270>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _PyErr_SetKeyError
// 21b: 4c 89 ef                      movq    %r13, %rdi
// 21e: ff d0                         callq   *%rax
// 220: 49 8b 04 24                   movq    (%r12), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7f e2                         jg      0x20b <_JIT_ENTRY+0x20b>
// 229: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_NegativeRefcount
// 23d: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// 242: 4c 89 e2                      movq    %r12, %rdx
// 245: ff d0                         callq   *%rax
// 247: 49 8b 04 24                   movq    (%r12), %rax
// 24b: 85 c0                         testl   %eax, %eax
// 24d: 78 21                         js      0x270 <_JIT_ENTRY+0x270>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 259: ff d0                         callq   *%rax
// 25b: 49 ff 0c 24                   decq    (%r12)
// 25f: 75 0f                         jne     0x270 <_JIT_ENTRY+0x270>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_Dealloc
// 26b: 4c 89 e7                      movq    %r12, %rdi
// 26e: ff d0                         callq   *%rax
// 270: 49 8b 45 00                   movq    (%r13), %rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 7f 22                         jg      0x29b <_JIT_ENTRY+0x29b>
// 279: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027b:  R_X86_64_64  .rodata.str1.1
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_NegativeRefcount
// 28d: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 292: 4c 89 ea                      movq    %r13, %rdx
// 295: ff d0                         callq   *%rax
// 297: 49 8b 45 00                   movq    (%r13), %rax
// 29b: 85 c0                         testl   %eax, %eax
// 29d: 78 21                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a9: ff d0                         callq   *%rax
// 2ab: 49 ff 4d 00                   decq    (%r13)
// 2af: 75 0f                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_Dealloc
// 2bb: 4c 89 ef                      movq    %r13, %rdi
// 2be: ff d0                         callq   *%rax
// 2c0: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 2c4: 85 ed                         testl   %ebp, %ebp
// 2c6: 7e 2e                         jle     0x2f6 <_JIT_ENTRY+0x2f6>
// 2c8: 49 83 c6 f0                   addq    $-0x10, %r14
// 2cc: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2d0: 48 89 08                      movq    %rcx, (%rax)
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _JIT_CONTINUE
// 2dd: 48 89 df                      movq    %rbx, %rdi
// 2e0: 4c 89 f6                      movq    %r14, %rsi
// 2e3: 4c 89 fa                      movq    %r15, %rdx
// 2e6: 48 83 c4 08                   addq    $0x8, %rsp
// 2ea: 5b                            popq    %rbx
// 2eb: 41 5c                         popq    %r12
// 2ed: 41 5d                         popq    %r13
// 2ef: 41 5e                         popq    %r14
// 2f1: 41 5f                         popq    %r15
// 2f3: 5d                            popq    %rbp
// 2f4: ff e0                         jmpq    *%rax
// 2f6: 48 29 d8                      subq    %rbx, %rax
// 2f9: 48 83 c0 b8                   addq    $-0x48, %rax
// 2fd: 48 c1 e8 03                   shrq    $0x3, %rax
// 301: 89 43 40                      movl    %eax, 0x40(%rbx)
// 304: 31 c0                         xorl    %eax, %eax
// 306: e9 cd fe ff ff                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// 30b: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_DICT_code_body[780] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x87, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x6e, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x63, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x54, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xba, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x3b, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x85, 0xed, 0x7e, 0x2e, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xcd, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_DICT_code_holes[23] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_DICT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_LIST_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 39                         jbe     0x12b <_JIT_ENTRY+0x12b>
// f2: 4c 89 f0                      movq    %r14, %rax
// f5: 48 29 d8                      subq    %rbx, %rax
// f8: 48 83 c0 b8                   addq    $-0x48, %rax
// fc: 48 c1 e8 03                   shrq    $0x3, %rax
// 100: 89 43 40                      movl    %eax, 0x40(%rbx)
// 103: 48 8b 03                      movq    (%rbx), %rax
// 106: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000108:  R_X86_64_64  _JIT_TARGET
// 110: 89 c9                         movl    %ecx, %ecx
// 112: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 116: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11c: 48 83 c4 08                   addq    $0x8, %rsp
// 120: 5b                            popq    %rbx
// 121: 41 5c                         popq    %r12
// 123: 41 5d                         popq    %r13
// 125: 41 5e                         popq    %r14
// 127: 41 5f                         popq    %r15
// 129: 5d                            popq    %rbp
// 12a: c3                            retq
// 12b: 89 c0                         movl    %eax, %eax
// 12d: 48 8d 0c 40                   leaq    (%rax,%rax,2), %rcx
// 131: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 136: 75 34                         jne     0x16c <_JIT_ENTRY+0x16c>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  PyInterpreterState_Get
// 142: 48 89 0c 24                   movq    %rcx, (%rsp)
// 146: ff d0                         callq   *%rax
// 148: 48 8b 0c 24                   movq    (%rsp), %rcx
// 14c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 153: 49 ff 4d 00                   decq    (%r13)
// 157: 75 13                         jne     0x16c <_JIT_ENTRY+0x16c>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  PyObject_Free
// 163: 4c 89 ef                      movq    %r13, %rdi
// 166: ff d0                         callq   *%rax
// 168: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16c: 48 c1 e1 04                   shlq    $0x4, %rcx
// 170: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000172:  R_X86_64_64  _PyRuntime
// 17a: 49 8b 04 24                   movq    (%r12), %rax
// 17e: 48 85 c0                      testq   %rax, %rax
// 181: 7f 32                         jg      0x1b5 <_JIT_ENTRY+0x1b5>
// 183: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000185:  R_X86_64_64  .rodata.str1.1
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_NegativeRefcount
// 197: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 19c: 4c 89 e2                      movq    %r12, %rdx
// 19f: 49 89 cd                      movq    %rcx, %r13
// 1a2: ff d0                         callq   *%rax
// 1a4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a6:  R_X86_64_64  _PyRuntime
// 1ae: 4c 89 e9                      movq    %r13, %rcx
// 1b1: 49 8b 04 24                   movq    (%r12), %rax
// 1b5: 4c 8d 2c 0a                   leaq    (%rdx,%rcx), %r13
// 1b9: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1c0: 85 c0                         testl   %eax, %eax
// 1c2: 78 21                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ce: ff d0                         callq   *%rax
// 1d0: 49 ff 0c 24                   decq    (%r12)
// 1d4: 75 0f                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_Dealloc
// 1e0: 4c 89 e7                      movq    %r12, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 1e9: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ed: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 1f1: 0f 85 fe fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 1f7: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fd:  R_X86_64_64  PyList_Type
// 205: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 20a: 0f 85 e5 fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 210: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 215: 0f 87 da fe ff ff             ja      0xf5 <_JIT_ENTRY+0xf5>
// 21b: 41 8b 4d 18                   movl    0x18(%r13), %ecx
// 21f: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 224: 0f 8e cb fe ff ff             jle     0xf5 <_JIT_ENTRY+0xf5>
// 22a: 49 8b 44 24 18                movq    0x18(%r12), %rax
// 22f: 48 8b 2c c8                   movq    (%rax,%rcx,8), %rbp
// 233: 8b 45 00                      movl    (%rbp), %eax
// 236: ff c0                         incl    %eax
// 238: 74 0f                         je      0x249 <_JIT_ENTRY+0x249>
// 23a: 89 45 00                      movl    %eax, (%rbp)
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 247: ff d0                         callq   *%rax
// 249: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 24e: 75 28                         jne     0x278 <_JIT_ENTRY+0x278>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  PyInterpreterState_Get
// 25a: ff d0                         callq   *%rax
// 25c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 263: 49 ff 4d 00                   decq    (%r13)
// 267: 75 0f                         jne     0x278 <_JIT_ENTRY+0x278>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  PyObject_Free
// 273: 4c 89 ef                      movq    %r13, %rdi
// 276: ff d0                         callq   *%rax
// 278: 49 8b 04 24                   movq    (%r12), %rax
// 27c: 48 85 c0                      testq   %rax, %rax
// 27f: 7f 22                         jg      0x2a3 <_JIT_ENTRY+0x2a3>
// 281: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000283:  R_X86_64_64  .rodata.str1.1
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_NegativeRefcount
// 295: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 29a: 4c 89 e2                      movq    %r12, %rdx
// 29d: ff d0                         callq   *%rax
// 29f: 49 8b 04 24                   movq    (%r12), %rax
// 2a3: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 2a7: 85 c0                         testl   %eax, %eax
// 2a9: 78 21                         js      0x2cc <_JIT_ENTRY+0x2cc>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b5: ff d0                         callq   *%rax
// 2b7: 49 ff 0c 24                   decq    (%r12)
// 2bb: 75 0f                         jne     0x2cc <_JIT_ENTRY+0x2cc>
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _Py_Dealloc
// 2c7: 4c 89 e7                      movq    %r12, %rdi
// 2ca: ff d0                         callq   *%rax
// 2cc: 49 89 6e e8                   movq    %rbp, -0x18(%r14)
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _JIT_CONTINUE
// 2da: 48 89 df                      movq    %rbx, %rdi
// 2dd: 4c 89 ee                      movq    %r13, %rsi
// 2e0: 4c 89 fa                      movq    %r15, %rdx
// 2e3: 48 83 c4 08                   addq    $0x8, %rsp
// 2e7: 5b                            popq    %rbx
// 2e8: 41 5c                         popq    %r12
// 2ea: 41 5d                         popq    %r13
// 2ec: 41 5e                         popq    %r14
// 2ee: 41 5f                         popq    %r15
// 2f0: 5d                            popq    %rbp
// 2f1: ff e0                         jmpq    *%rax
// 2f3: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_LIST_INT_code_body[756] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x6d, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x0c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x32, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x2c, 0x0a, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x39, 0x6d, 0x08, 0x0f, 0x85, 0xfe, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x66, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xe5, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xda, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x4d, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0xcb, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xc8, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_LIST_INT_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_STR_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 39                         jbe     0x12b <_JIT_ENTRY+0x12b>
// f2: 4c 89 f0                      movq    %r14, %rax
// f5: 48 29 d8                      subq    %rbx, %rax
// f8: 48 83 c0 b8                   addq    $-0x48, %rax
// fc: 48 c1 e8 03                   shrq    $0x3, %rax
// 100: 89 43 40                      movl    %eax, 0x40(%rbx)
// 103: 48 8b 03                      movq    (%rbx), %rax
// 106: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000108:  R_X86_64_64  _JIT_TARGET
// 110: 89 c9                         movl    %ecx, %ecx
// 112: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 116: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11c: 48 83 c4 08                   addq    $0x8, %rsp
// 120: 5b                            popq    %rbx
// 121: 41 5c                         popq    %r12
// 123: 41 5d                         popq    %r13
// 125: 41 5e                         popq    %r14
// 127: 41 5f                         popq    %r15
// 129: 5d                            popq    %rbp
// 12a: c3                            retq
// 12b: 89 c0                         movl    %eax, %eax
// 12d: 48 8d 0c 40                   leaq    (%rax,%rax,2), %rcx
// 131: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 136: 75 48                         jne     0x180 <_JIT_ENTRY+0x180>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  PyInterpreterState_Get
// 142: 48 89 0c 24                   movq    %rcx, (%rsp)
// 146: ff d0                         callq   *%rax
// 148: 48 8b 0c 24                   movq    (%rsp), %rcx
// 14c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000014e:  R_X86_64_64  PyUnicode_Type
// 156: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 15d: 49 ff 4d 00                   decq    (%r13)
// 161: 75 1d                         jne     0x180 <_JIT_ENTRY+0x180>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  PyObject_Free
// 16d: 4c 89 ef                      movq    %r13, %rdi
// 170: ff d0                         callq   *%rax
// 172: 48 8b 0c 24                   movq    (%rsp), %rcx
// 176: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000178:  R_X86_64_64  PyUnicode_Type
// 180: 48 c1 e1 04                   shlq    $0x4, %rcx
// 184: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000186:  R_X86_64_64  _PyRuntime
// 18e: 49 8b 04 24                   movq    (%r12), %rax
// 192: 48 85 c0                      testq   %rax, %rax
// 195: 7f 34                         jg      0x1cb <_JIT_ENTRY+0x1cb>
// 197: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000199:  R_X86_64_64  .rodata.str1.1
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NegativeRefcount
// 1ab: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 1b0: 4c 89 e2                      movq    %r12, %rdx
// 1b3: 48 89 0c 24                   movq    %rcx, (%rsp)
// 1b7: ff d0                         callq   *%rax
// 1b9: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1bd: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001bf:  R_X86_64_64  PyUnicode_Type
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 49 01 cd                      addq    %rcx, %r13
// 1ce: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1d5: 85 c0                         testl   %eax, %eax
// 1d7: 78 35                         js      0x20e <_JIT_ENTRY+0x20e>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e3: ff d0                         callq   *%rax
// 1e5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e7:  R_X86_64_64  PyUnicode_Type
// 1ef: 49 ff 0c 24                   decq    (%r12)
// 1f3: 75 19                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_Dealloc
// 1ff: 4c 89 e7                      movq    %r12, %rdi
// 202: ff d0                         callq   *%rax
// 204: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000206:  R_X86_64_64  PyUnicode_Type
// 20e: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 212: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 216: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 21a: 0f 85 d5 fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 220: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 224: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 229: 0f 85 c6 fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 22f: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 234: 0f 87 bb fe ff ff             ja      0xf5 <_JIT_ENTRY+0xf5>
// 23a: 41 8b 4d 18                   movl    0x18(%r13), %ecx
// 23e: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 243: 0f 8e ac fe ff ff             jle     0xf5 <_JIT_ENTRY+0xf5>
// 249: 41 8b 54 24 20                movl    0x20(%r12), %edx
// 24e: 89 d6                         movl    %edx, %esi
// 250: c1 ee 02                      shrl    $0x2, %esi
// 253: 83 e6 07                      andl    $0x7, %esi
// 256: 83 fe 02                      cmpl    $0x2, %esi
// 259: 74 15                         je      0x270 <_JIT_ENTRY+0x270>
// 25b: 83 fe 01                      cmpl    $0x1, %esi
// 25e: 75 20                         jne     0x280 <_JIT_ENTRY+0x280>
// 260: f6 c2 20                      testb   $0x20, %dl
// 263: 75 27                         jne     0x28c <_JIT_ENTRY+0x28c>
// 265: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 26a: 0f b6 2c 0a                   movzbl  (%rdx,%rcx), %ebp
// 26e: eb 6a                         jmp     0x2da <_JIT_ENTRY+0x2da>
// 270: f6 c2 20                      testb   $0x20, %dl
// 273: 75 32                         jne     0x2a7 <_JIT_ENTRY+0x2a7>
// 275: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 27a: 0f b7 2c 4a                   movzwl  (%rdx,%rcx,2), %ebp
// 27e: eb 5a                         jmp     0x2da <_JIT_ENTRY+0x2da>
// 280: f6 c2 20                      testb   $0x20, %dl
// 283: 75 3d                         jne     0x2c2 <_JIT_ENTRY+0x2c2>
// 285: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 28a: eb 4b                         jmp     0x2d7 <_JIT_ENTRY+0x2d7>
// 28c: 31 f6                         xorl    %esi, %esi
// 28e: f6 c2 40                      testb   $0x40, %dl
// 291: 40 0f 94 c6                   sete    %sil
// 295: 48 c1 e6 04                   shlq    $0x4, %rsi
// 299: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 29d: 48 83 c2 28                   addq    $0x28, %rdx
// 2a1: 0f b6 2c 0a                   movzbl  (%rdx,%rcx), %ebp
// 2a5: eb 33                         jmp     0x2da <_JIT_ENTRY+0x2da>
// 2a7: 31 f6                         xorl    %esi, %esi
// 2a9: f6 c2 40                      testb   $0x40, %dl
// 2ac: 40 0f 94 c6                   sete    %sil
// 2b0: 48 c1 e6 04                   shlq    $0x4, %rsi
// 2b4: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 2b8: 48 83 c2 28                   addq    $0x28, %rdx
// 2bc: 0f b7 2c 4a                   movzwl  (%rdx,%rcx,2), %ebp
// 2c0: eb 18                         jmp     0x2da <_JIT_ENTRY+0x2da>
// 2c2: 31 f6                         xorl    %esi, %esi
// 2c4: f6 c2 40                      testb   $0x40, %dl
// 2c7: 40 0f 94 c6                   sete    %sil
// 2cb: 48 c1 e6 04                   shlq    $0x4, %rsi
// 2cf: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 2d3: 48 83 c2 28                   addq    $0x28, %rdx
// 2d7: 8b 2c 8a                      movl    (%rdx,%rcx,4), %ebp
// 2da: 83 fd 7f                      cmpl    $0x7f, %ebp
// 2dd: 0f 87 12 fe ff ff             ja      0xf5 <_JIT_ENTRY+0xf5>
// 2e3: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2e8: 75 28                         jne     0x312 <_JIT_ENTRY+0x312>
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  PyInterpreterState_Get
// 2f4: ff d0                         callq   *%rax
// 2f6: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2fd: 49 ff 4d 00                   decq    (%r13)
// 301: 75 0f                         jne     0x312 <_JIT_ENTRY+0x312>
// 303: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000305:  R_X86_64_64  PyObject_Free
// 30d: 4c 89 ef                      movq    %r13, %rdi
// 310: ff d0                         callq   *%rax
// 312: 49 8b 04 24                   movq    (%r12), %rax
// 316: 48 85 c0                      testq   %rax, %rax
// 319: 7f 22                         jg      0x33d <_JIT_ENTRY+0x33d>
// 31b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031d:  R_X86_64_64  .rodata.str1.1
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  _Py_NegativeRefcount
// 32f: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 334: 4c 89 e2                      movq    %r12, %rdx
// 337: ff d0                         callq   *%rax
// 339: 49 8b 04 24                   movq    (%r12), %rax
// 33d: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 341: 85 c0                         testl   %eax, %eax
// 343: 78 21                         js      0x366 <_JIT_ENTRY+0x366>
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34f: ff d0                         callq   *%rax
// 351: 49 ff 0c 24                   decq    (%r12)
// 355: 75 0f                         jne     0x366 <_JIT_ENTRY+0x366>
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  _Py_Dealloc
// 361: 4c 89 e7                      movq    %r12, %rdi
// 364: ff d0                         callq   *%rax
// 366: 89 e8                         movl    %ebp, %eax
// 368: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 36c: 48 c1 e0 04                   shlq    $0x4, %rax
// 370: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000372:  R_X86_64_64  _PyRuntime
// 37a: 48 01 c8                      addq    %rcx, %rax
// 37d: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 383: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 387: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000389:  R_X86_64_64  _JIT_CONTINUE
// 391: 48 89 df                      movq    %rbx, %rdi
// 394: 4c 89 ee                      movq    %r13, %rsi
// 397: 4c 89 fa                      movq    %r15, %rdx
// 39a: 48 83 c4 08                   addq    $0x8, %rsp
// 39e: 5b                            popq    %rbx
// 39f: 41 5c                         popq    %r12
// 3a1: 41 5d                         popq    %r13
// 3a3: 41 5e                         popq    %r14
// 3a5: 41 5f                         popq    %r15
// 3a7: 5d                            popq    %rbp
// 3a8: ff e0                         jmpq    *%rax
// 3aa: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_STR_INT_code_body[939] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x6d, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x0c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x1d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc1, 0xe1, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x34, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xcd, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x46, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x39, 0x6d, 0x08, 0x0f, 0x85, 0xd5, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x66, 0xe8, 0x49, 0x39, 0x74, 0x24, 0x08, 0x0f, 0x85, 0xc6, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xbb, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x4d, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0xac, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x54, 0x24, 0x20, 0x89, 0xd6, 0xc1, 0xee, 0x02, 0x83, 0xe6, 0x07, 0x83, 0xfe, 0x02, 0x74, 0x15, 0x83, 0xfe, 0x01, 0x75, 0x20, 0xf6, 0xc2, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x54, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x0a, 0xeb, 0x6a, 0xf6, 0xc2, 0x20, 0x75, 0x32, 0x49, 0x8b, 0x54, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x4a, 0xeb, 0x5a, 0xf6, 0xc2, 0x20, 0x75, 0x3d, 0x49, 0x8b, 0x54, 0x24, 0x38, 0xeb, 0x4b, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x0f, 0xb6, 0x2c, 0x0a, 0xeb, 0x33, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x0f, 0xb7, 0x2c, 0x4a, 0xeb, 0x18, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x8b, 0x2c, 0x8a, 0x83, 0xfd, 0x7f, 0x0f, 0x87, 0x12, 0xfe, 0xff, 0xff, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x49, 0x89, 0x46, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_STR_INT_code_holes[24] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x372, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x389, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_STR_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_TUPLE_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 39                         jbe     0x12b <_JIT_ENTRY+0x12b>
// f2: 4c 89 f0                      movq    %r14, %rax
// f5: 48 29 d8                      subq    %rbx, %rax
// f8: 48 83 c0 b8                   addq    $-0x48, %rax
// fc: 48 c1 e8 03                   shrq    $0x3, %rax
// 100: 89 43 40                      movl    %eax, 0x40(%rbx)
// 103: 48 8b 03                      movq    (%rbx), %rax
// 106: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000108:  R_X86_64_64  _JIT_TARGET
// 110: 89 c9                         movl    %ecx, %ecx
// 112: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 116: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11c: 48 83 c4 08                   addq    $0x8, %rsp
// 120: 5b                            popq    %rbx
// 121: 41 5c                         popq    %r12
// 123: 41 5d                         popq    %r13
// 125: 41 5e                         popq    %r14
// 127: 41 5f                         popq    %r15
// 129: 5d                            popq    %rbp
// 12a: c3                            retq
// 12b: 89 c0                         movl    %eax, %eax
// 12d: 48 8d 0c 40                   leaq    (%rax,%rax,2), %rcx
// 131: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 136: 75 34                         jne     0x16c <_JIT_ENTRY+0x16c>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  PyInterpreterState_Get
// 142: 48 89 0c 24                   movq    %rcx, (%rsp)
// 146: ff d0                         callq   *%rax
// 148: 48 8b 0c 24                   movq    (%rsp), %rcx
// 14c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 153: 49 ff 4d 00                   decq    (%r13)
// 157: 75 13                         jne     0x16c <_JIT_ENTRY+0x16c>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  PyObject_Free
// 163: 4c 89 ef                      movq    %r13, %rdi
// 166: ff d0                         callq   *%rax
// 168: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16c: 48 c1 e1 04                   shlq    $0x4, %rcx
// 170: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000172:  R_X86_64_64  _PyRuntime
// 17a: 49 8b 04 24                   movq    (%r12), %rax
// 17e: 48 85 c0                      testq   %rax, %rax
// 181: 7f 32                         jg      0x1b5 <_JIT_ENTRY+0x1b5>
// 183: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000185:  R_X86_64_64  .rodata.str1.1
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_NegativeRefcount
// 197: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 19c: 4c 89 e2                      movq    %r12, %rdx
// 19f: 49 89 cd                      movq    %rcx, %r13
// 1a2: ff d0                         callq   *%rax
// 1a4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a6:  R_X86_64_64  _PyRuntime
// 1ae: 4c 89 e9                      movq    %r13, %rcx
// 1b1: 49 8b 04 24                   movq    (%r12), %rax
// 1b5: 4c 8d 2c 0a                   leaq    (%rdx,%rcx), %r13
// 1b9: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1c0: 85 c0                         testl   %eax, %eax
// 1c2: 78 21                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ce: ff d0                         callq   *%rax
// 1d0: 49 ff 0c 24                   decq    (%r12)
// 1d4: 75 0f                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_Dealloc
// 1e0: 4c 89 e7                      movq    %r12, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 1e9: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ed: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 1f1: 0f 85 fe fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 1f7: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fd:  R_X86_64_64  PyTuple_Type
// 205: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 20a: 0f 85 e5 fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 210: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 215: 0f 87 da fe ff ff             ja      0xf5 <_JIT_ENTRY+0xf5>
// 21b: 41 8b 4d 18                   movl    0x18(%r13), %ecx
// 21f: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 224: 0f 8e cb fe ff ff             jle     0xf5 <_JIT_ENTRY+0xf5>
// 22a: 49 8b 6c cc 18                movq    0x18(%r12,%rcx,8), %rbp
// 22f: 8b 45 00                      movl    (%rbp), %eax
// 232: ff c0                         incl    %eax
// 234: 74 0f                         je      0x245 <_JIT_ENTRY+0x245>
// 236: 89 45 00                      movl    %eax, (%rbp)
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 243: ff d0                         callq   *%rax
// 245: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 24a: 75 28                         jne     0x274 <_JIT_ENTRY+0x274>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  PyInterpreterState_Get
// 256: ff d0                         callq   *%rax
// 258: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 25f: 49 ff 4d 00                   decq    (%r13)
// 263: 75 0f                         jne     0x274 <_JIT_ENTRY+0x274>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  PyObject_Free
// 26f: 4c 89 ef                      movq    %r13, %rdi
// 272: ff d0                         callq   *%rax
// 274: 49 8b 04 24                   movq    (%r12), %rax
// 278: 48 85 c0                      testq   %rax, %rax
// 27b: 7f 22                         jg      0x29f <_JIT_ENTRY+0x29f>
// 27d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027f:  R_X86_64_64  .rodata.str1.1
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _Py_NegativeRefcount
// 291: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 296: 4c 89 e2                      movq    %r12, %rdx
// 299: ff d0                         callq   *%rax
// 29b: 49 8b 04 24                   movq    (%r12), %rax
// 29f: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 2a3: 85 c0                         testl   %eax, %eax
// 2a5: 78 21                         js      0x2c8 <_JIT_ENTRY+0x2c8>
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b1: ff d0                         callq   *%rax
// 2b3: 49 ff 0c 24                   decq    (%r12)
// 2b7: 75 0f                         jne     0x2c8 <_JIT_ENTRY+0x2c8>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_Dealloc
// 2c3: 4c 89 e7                      movq    %r12, %rdi
// 2c6: ff d0                         callq   *%rax
// 2c8: 49 89 6e e8                   movq    %rbp, -0x18(%r14)
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _JIT_CONTINUE
// 2d6: 48 89 df                      movq    %rbx, %rdi
// 2d9: 4c 89 ee                      movq    %r13, %rsi
// 2dc: 4c 89 fa                      movq    %r15, %rdx
// 2df: 48 83 c4 08                   addq    $0x8, %rsp
// 2e3: 5b                            popq    %rbx
// 2e4: 41 5c                         popq    %r12
// 2e6: 41 5d                         popq    %r13
// 2e8: 41 5e                         popq    %r14
// 2ea: 41 5f                         popq    %r15
// 2ec: 5d                            popq    %rbp
// 2ed: ff e0                         jmpq    *%rax
// 2ef: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_TUPLE_INT_code_body[752] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x6d, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x0c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x32, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x2c, 0x0a, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x39, 0x6d, 0x08, 0x0f, 0x85, 0xfe, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x66, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xe5, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xda, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x4d, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0xcb, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x6c, 0xcc, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_TUPLE_INT_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_TUPLE_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BUILD_CONST_KEY_MAP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 c9 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 b0 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 a5 00 00 00             ja      0xf5 <_JIT_ENTRY+0xf5>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 96 00 00 00             jle     0xf5 <_JIT_ENTRY+0xf5>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 76 37                         jbe     0x12c <_JIT_ENTRY+0x12c>
// f5: 49 29 de                      subq    %rbx, %r14
// f8: 49 83 c6 b8                   addq    $-0x48, %r14
// fc: 49 c1 ee 03                   shrq    $0x3, %r14
// 100: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 104: 48 8b 03                      movq    (%rbx), %rax
// 107: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000109:  R_X86_64_64  _JIT_TARGET
// 111: 89 c9                         movl    %ecx, %ecx
// 113: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 117: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11d: 48 83 c4 18                   addq    $0x18, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5d                         popq    %r13
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: 5d                            popq    %rbp
// 12b: c3                            retq
// 12c: 89 c0                         movl    %eax, %eax
// 12e: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 132: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 137: 75 28                         jne     0x161 <_JIT_ENTRY+0x161>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyInterpreterState_Get
// 143: ff d0                         callq   *%rax
// 145: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14c: 49 ff 4d 00                   decq    (%r13)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  PyObject_Free
// 15c: 4c 89 ef                      movq    %r13, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 c1 e5 04                   shlq    $0x4, %rbp
// 165: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000167:  R_X86_64_64  _PyRuntime
// 16f: 49 8b 04 24                   movq    (%r12), %rax
// 173: 48 85 c0                      testq   %rax, %rax
// 176: 7f 22                         jg      0x19a <_JIT_ENTRY+0x19a>
// 178: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017a:  R_X86_64_64  .rodata.str1.1
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_NegativeRefcount
// 18c: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 191: 4c 89 e2                      movq    %r12, %rdx
// 194: ff d0                         callq   *%rax
// 196: 49 8b 04 24                   movq    (%r12), %rax
// 19a: 49 01 ed                      addq    %rbp, %r13
// 19d: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a4: 85 c0                         testl   %eax, %eax
// 1a6: 78 21                         js      0x1c9 <_JIT_ENTRY+0x1c9>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b2: ff d0                         callq   *%rax
// 1b4: 49 ff 0c 24                   decq    (%r12)
// 1b8: 75 0f                         jne     0x1c9 <_JIT_ENTRY+0x1c9>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_Dealloc
// 1c4: 4c 89 e7                      movq    %r12, %rdi
// 1c7: ff d0                         callq   *%rax
// 1c9: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  PyTuple_Type
// 1d7: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1db: 0f 85 ee 00 00 00             jne     0x2cf <_JIT_ENTRY+0x2cf>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_OPARG
// 1eb: 0f b7 c0                      movzwl  %ax, %eax
// 1ee: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 1f2: 0f 85 d7 00 00 00             jne     0x2cf <_JIT_ENTRY+0x2cf>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _JIT_OPARG
// 202: f7 d0                         notl    %eax
// 204: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 209: 48 98                         cltq
// 20b: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 20f: 49 83 c4 f8                   addq    $-0x8, %r12
// 213: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 218: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 21c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000021e:  R_X86_64_64  _JIT_OPARG
// 226: 45 0f b7 c5                   movzwl  %r13w, %r8d
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _PyDict_FromItems
// 234: be 01 00 00 00                movl    $0x1, %esi
// 239: b9 01 00 00 00                movl    $0x1, %ecx
// 23e: 4c 89 e2                      movq    %r12, %rdx
// 241: ff d0                         callq   *%rax
// 243: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 248: 41 f7 c5 ff ff 00 00          testl   $0xffff, %r13d          # imm = 0xFFFF
// 24f: 0f 8e bd 00 00 00             jle     0x312 <_JIT_ENTRY+0x312>
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _JIT_OPARG
// 25f: 44 0f b7 e8                   movzwl  %ax, %r13d
// 263: 49 ff c5                      incq    %r13
// 266: eb 0d                         jmp     0x275 <_JIT_ENTRY+0x275>
// 268: 49 ff cd                      decq    %r13
// 26b: 49 83 fd 01                   cmpq    $0x1, %r13
// 26f: 0f 8e 9d 00 00 00             jle     0x312 <_JIT_ENTRY+0x312>
// 275: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 279: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// 27d: 48 8b 45 00                   movq    (%rbp), %rax
// 281: 48 85 c0                      testq   %rax, %rax
// 284: 7f 22                         jg      0x2a8 <_JIT_ENTRY+0x2a8>
// 286: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000288:  R_X86_64_64  .rodata.str1.1
// 290: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 295: 48 89 ea                      movq    %rbp, %rdx
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_NegativeRefcount
// 2a2: ff d0                         callq   *%rax
// 2a4: 48 8b 45 00                   movq    (%rbp), %rax
// 2a8: 85 c0                         testl   %eax, %eax
// 2aa: 78 bc                         js      0x268 <_JIT_ENTRY+0x268>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b6: ff d0                         callq   *%rax
// 2b8: 48 ff 4d 00                   decq    (%rbp)
// 2bc: 75 aa                         jne     0x268 <_JIT_ENTRY+0x268>
// 2be: 48 89 ef                      movq    %rbp, %rdi
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_Dealloc
// 2cb: ff d0                         callq   *%rax
// 2cd: eb 99                         jmp     0x268 <_JIT_ENTRY+0x268>
// 2cf: 49 83 c6 f8                   addq    $-0x8, %r14
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  PyExc_SystemError
// 2dd: 48 8b 30                      movq    (%rax), %rsi
// 2e0: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002e2:  R_X86_64_64  .rodata.str1.1+0x39
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _PyErr_SetString
// 2f4: 4c 89 ff                      movq    %r15, %rdi
// 2f7: ff d0                         callq   *%rax
// 2f9: 4d 89 f4                      movq    %r14, %r12
// 2fc: 49 29 dc                      subq    %rbx, %r12
// 2ff: 49 83 c4 b8                   addq    $-0x48, %r12
// 303: 49 c1 ec 03                   shrq    $0x3, %r12
// 307: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 30b: 31 c0                         xorl    %eax, %eax
// 30d: e9 0b fe ff ff                jmp     0x11d <_JIT_ENTRY+0x11d>
// 312: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 317: 49 8b 45 00                   movq    (%r13), %rax
// 31b: 48 85 c0                      testq   %rax, %rax
// 31e: 7f 22                         jg      0x342 <_JIT_ENTRY+0x342>
// 320: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000322:  R_X86_64_64  .rodata.str1.1
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _Py_NegativeRefcount
// 334: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 339: 4c 89 ea                      movq    %r13, %rdx
// 33c: ff d0                         callq   *%rax
// 33e: 49 8b 45 00                   movq    (%r13), %rax
// 342: 85 c0                         testl   %eax, %eax
// 344: 78 21                         js      0x367 <_JIT_ENTRY+0x367>
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 350: ff d0                         callq   *%rax
// 352: 49 ff 4d 00                   decq    (%r13)
// 356: 75 0f                         jne     0x367 <_JIT_ENTRY+0x367>
// 358: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035a:  R_X86_64_64  _Py_Dealloc
// 362: 4c 89 ef                      movq    %r13, %rdi
// 365: ff d0                         callq   *%rax
// 367: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 36c: 48 85 d2                      testq   %rdx, %rdx
// 36f: 74 8b                         je      0x2fc <_JIT_ENTRY+0x2fc>
// 371: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000373:  R_X86_64_64  _JIT_OPARG
// 37b: 0f b7 c8                      movzwl  %ax, %ecx
// 37e: f7 d0                         notl    %eax
// 380: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 385: 48 98                         cltq
// 387: 49 89 54 c6 f8                movq    %rdx, -0x8(%r14,%rax,8)
// 38c: 48 c1 e1 03                   shlq    $0x3, %rcx
// 390: 48 f7 d9                      negq    %rcx
// 393: 49 8d 34 0e                   leaq    (%r14,%rcx), %rsi
// 397: 48 83 c6 f8                   addq    $-0x8, %rsi
// 39b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039d:  R_X86_64_64  _JIT_CONTINUE
// 3a5: 48 89 df                      movq    %rbx, %rdi
// 3a8: 4c 89 fa                      movq    %r15, %rdx
// 3ab: 48 83 c4 18                   addq    $0x18, %rsp
// 3af: 5b                            popq    %rbx
// 3b0: 41 5c                         popq    %r12
// 3b2: 41 5d                         popq    %r13
// 3b4: 41 5e                         popq    %r14
// 3b6: 41 5f                         popq    %r15
// 3b8: 5d                            popq    %rbp
// 3b9: ff e0                         jmpq    *%rax
// 3bb: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_CONST_KEY_MAP_code_body[956] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xee, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xd7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x83, 0xc4, 0xf8, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf7, 0xc5, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xbd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0xeb, 0x0d, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0x9d, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x45, 0xfe, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xbc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xaa, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x0b, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x8b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x54, 0xc6, 0xf8, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x8d, 0x34, 0x0e, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_CONST_KEY_MAP_code_holes[30] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x373, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_CONST_KEY_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BUILD_LIST
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BUILD_LIST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b7 f0                      movzwl  %ax, %esi
// 1d7: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 1df: 48 f7 d8                      negq    %rax
// 1e2: 4d 8d 24 06                   leaq    (%r14,%rax), %r12
// 1e6: 49 83 c4 f8                   addq    $-0x8, %r12
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _PyList_FromArraySteal
// 1f4: 4c 89 e7                      movq    %r12, %rdi
// 1f7: ff d0                         callq   *%rax
// 1f9: 48 85 c0                      testq   %rax, %rax
// 1fc: 74 4d                         je      0x24b <_JIT_ENTRY+0x24b>
// 1fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000200:  R_X86_64_64  _JIT_OPARG
// 208: 0f b7 d1                      movzwl  %cx, %edx
// 20b: 0f b7 c9                      movzwl  %cx, %ecx
// 20e: 48 c1 e1 03                   shlq    $0x3, %rcx
// 212: 48 f7 d9                      negq    %rcx
// 215: 49 89 44 0e f8                movq    %rax, -0x8(%r14,%rcx)
// 21a: b8 01 00 00 00                movl    $0x1, %eax
// 21f: 29 d0                         subl    %edx, %eax
// 221: 48 98                         cltq
// 223: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 227: 48 83 c6 f8                   addq    $-0x8, %rsi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _JIT_CONTINUE
// 235: 48 89 df                      movq    %rbx, %rdi
// 238: 4c 89 fa                      movq    %r15, %rdx
// 23b: 48 83 c4 08                   addq    $0x8, %rsp
// 23f: 5b                            popq    %rbx
// 240: 41 5c                         popq    %r12
// 242: 41 5d                         popq    %r13
// 244: 41 5e                         popq    %r14
// 246: 41 5f                         popq    %r15
// 248: 5d                            popq    %rbp
// 249: ff e0                         jmpq    *%rax
// 24b: 49 29 dc                      subq    %rbx, %r12
// 24e: 49 83 c4 b8                   addq    $-0x48, %r12
// 252: 49 c1 ec 03                   shrq    $0x3, %r12
// 256: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 25a: 31 c0                         xorl    %eax, %eax
// 25c: e9 b9 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 261: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_LIST_code_body[610] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4d, 0x8d, 0x24, 0x06, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x44, 0x0e, 0xf8, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xb9, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_LIST_code_holes[15] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_LIST_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BUILD_MAP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BUILD_MAP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b7 e8                      movzwl  %ax, %ebp
// 1d7: 89 e9                         movl    %ebp, %ecx
// 1d9: f7 d9                         negl    %ecx
// 1db: 01 c9                         addl    %ecx, %ecx
// 1dd: 48 63 c9                      movslq  %ecx, %rcx
// 1e0: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 1e4: 49 83 c4 f8                   addq    $-0x8, %r12
// 1e8: 49 8d 14 ce                   leaq    (%r14,%rcx,8), %rdx
// 1ec: 44 0f b7 c0                   movzwl  %ax, %r8d
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _PyDict_FromItems
// 1fa: be 02 00 00 00                movl    $0x2, %esi
// 1ff: b9 02 00 00 00                movl    $0x2, %ecx
// 204: 4c 89 e7                      movq    %r12, %rdi
// 207: ff d0                         callq   *%rax
// 209: 48 89 04 24                   movq    %rax, (%rsp)
// 20d: 01 ed                         addl    %ebp, %ebp
// 20f: 85 ed                         testl   %ebp, %ebp
// 211: 7e 7f                         jle     0x292 <_JIT_ENTRY+0x292>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_OPARG
// 21d: 0f b7 c0                      movzwl  %ax, %eax
// 220: 48 8d 2c 00                   leaq    (%rax,%rax), %rbp
// 224: 48 ff c5                      incq    %rbp
// 227: eb 10                         jmp     0x239 <_JIT_ENTRY+0x239>
// 229: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 230: 48 ff cd                      decq    %rbp
// 233: 48 83 fd 01                   cmpq    $0x1, %rbp
// 237: 7e 59                         jle     0x292 <_JIT_ENTRY+0x292>
// 239: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 23c: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 240: 49 8b 45 00                   movq    (%r13), %rax
// 244: 48 85 c0                      testq   %rax, %rax
// 247: 7f 22                         jg      0x26b <_JIT_ENTRY+0x26b>
// 249: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024b:  R_X86_64_64  .rodata.str1.1
// 253: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// 258: 4c 89 ea                      movq    %r13, %rdx
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_NegativeRefcount
// 265: ff d0                         callq   *%rax
// 267: 49 8b 45 00                   movq    (%r13), %rax
// 26b: 85 c0                         testl   %eax, %eax
// 26d: 78 c1                         js      0x230 <_JIT_ENTRY+0x230>
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 279: ff d0                         callq   *%rax
// 27b: 49 ff 4d 00                   decq    (%r13)
// 27f: 75 af                         jne     0x230 <_JIT_ENTRY+0x230>
// 281: 4c 89 ef                      movq    %r13, %rdi
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_Dealloc
// 28e: ff d0                         callq   *%rax
// 290: eb 9e                         jmp     0x230 <_JIT_ENTRY+0x230>
// 292: 48 8b 14 24                   movq    (%rsp), %rdx
// 296: 48 85 d2                      testq   %rdx, %rdx
// 299: 74 4f                         je      0x2ea <_JIT_ENTRY+0x2ea>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _JIT_OPARG
// 2a5: 0f b7 c0                      movzwl  %ax, %eax
// 2a8: 89 c1                         movl    %eax, %ecx
// 2aa: f7 d9                         negl    %ecx
// 2ac: 01 c9                         addl    %ecx, %ecx
// 2ae: 48 63 c9                      movslq  %ecx, %rcx
// 2b1: 49 89 54 ce f8                movq    %rdx, -0x8(%r14,%rcx,8)
// 2b6: 01 c0                         addl    %eax, %eax
// 2b8: b9 01 00 00 00                movl    $0x1, %ecx
// 2bd: 29 c1                         subl    %eax, %ecx
// 2bf: 48 63 c1                      movslq  %ecx, %rax
// 2c2: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2c6: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _JIT_CONTINUE
// 2d4: 48 89 df                      movq    %rbx, %rdi
// 2d7: 4c 89 fa                      movq    %r15, %rdx
// 2da: 48 83 c4 08                   addq    $0x8, %rsp
// 2de: 5b                            popq    %rbx
// 2df: 41 5c                         popq    %r12
// 2e1: 41 5d                         popq    %r13
// 2e3: 41 5e                         popq    %r14
// 2e5: 41 5f                         popq    %r15
// 2e7: 5d                            popq    %rbp
// 2e8: ff e0                         jmpq    *%rax
// 2ea: 49 29 dc                      subq    %rbx, %r12
// 2ed: 49 83 c4 b8                   addq    $-0x48, %r12
// 2f1: 49 c1 ec 03                   shrq    $0x3, %r12
// 2f5: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2f9: 31 c0                         xorl    %eax, %eax
// 2fb: e9 1a fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 300: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_MAP_code_body[769] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x89, 0xe9, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x4d, 0x8d, 0x24, 0xce, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8d, 0x14, 0xce, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x01, 0xed, 0x85, 0xed, 0x7e, 0x7f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x2c, 0x00, 0x48, 0xff, 0xc5, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x7e, 0x59, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xaf, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9e, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x54, 0xce, 0xf8, 0x01, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x1a, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_MAP_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_MAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_MAP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BUILD_SET
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BUILD_SET.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 c9 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 b0 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 a5 00 00 00             ja      0xf5 <_JIT_ENTRY+0xf5>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 96 00 00 00             jle     0xf5 <_JIT_ENTRY+0xf5>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 76 37                         jbe     0x12c <_JIT_ENTRY+0x12c>
// f5: 49 29 de                      subq    %rbx, %r14
// f8: 49 83 c6 b8                   addq    $-0x48, %r14
// fc: 49 c1 ee 03                   shrq    $0x3, %r14
// 100: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 104: 48 8b 03                      movq    (%rbx), %rax
// 107: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000109:  R_X86_64_64  _JIT_TARGET
// 111: 89 c9                         movl    %ecx, %ecx
// 113: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 117: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11d: 48 83 c4 18                   addq    $0x18, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5d                         popq    %r13
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: 5d                            popq    %rbp
// 12b: c3                            retq
// 12c: 89 c0                         movl    %eax, %eax
// 12e: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 132: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 137: 75 28                         jne     0x161 <_JIT_ENTRY+0x161>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyInterpreterState_Get
// 143: ff d0                         callq   *%rax
// 145: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14c: 49 ff 4d 00                   decq    (%r13)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  PyObject_Free
// 15c: 4c 89 ef                      movq    %r13, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 c1 e5 04                   shlq    $0x4, %rbp
// 165: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000167:  R_X86_64_64  _PyRuntime
// 16f: 49 8b 04 24                   movq    (%r12), %rax
// 173: 48 85 c0                      testq   %rax, %rax
// 176: 7f 22                         jg      0x19a <_JIT_ENTRY+0x19a>
// 178: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017a:  R_X86_64_64  .rodata.str1.1
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_NegativeRefcount
// 18c: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 191: 4c 89 e2                      movq    %r12, %rdx
// 194: ff d0                         callq   *%rax
// 196: 49 8b 04 24                   movq    (%r12), %rax
// 19a: 49 01 ed                      addq    %rbp, %r13
// 19d: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a4: 85 c0                         testl   %eax, %eax
// 1a6: 78 21                         js      0x1c9 <_JIT_ENTRY+0x1c9>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b2: ff d0                         callq   *%rax
// 1b4: 49 ff 0c 24                   decq    (%r12)
// 1b8: 75 0f                         jne     0x1c9 <_JIT_ENTRY+0x1c9>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_Dealloc
// 1c4: 4c 89 e7                      movq    %r12, %rdi
// 1c7: ff d0                         callq   *%rax
// 1c9: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  PySet_New
// 1d7: 31 ff                         xorl    %edi, %edi
// 1d9: ff d0                         callq   *%rax
// 1db: 48 85 c0                      testq   %rax, %rax
// 1de: 0f 84 ef 00 00 00             je      0x2d3 <_JIT_ENTRY+0x2d3>
// 1e4: 49 89 c4                      movq    %rax, %r12
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: 66 85 c0                      testw   %ax, %ax
// 1f4: 0f 84 55 01 00 00             je      0x34f <_JIT_ENTRY+0x34f>
// 1fa: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 1ff: 4c 89 24 24                   movq    %r12, (%rsp)
// 203: 0f b7 c0                      movzwl  %ax, %eax
// 206: 48 c1 e0 03                   shlq    $0x3, %rax
// 20a: 48 f7 d8                      negq    %rax
// 20d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020f:  R_X86_64_64  _JIT_OPARG
// 217: 0f b7 c9                      movzwl  %cx, %ecx
// 21a: 83 f9 02                      cmpl    $0x2, %ecx
// 21d: ba 01 00 00 00                movl    $0x1, %edx
// 222: 0f 43 d1                      cmovael %ecx, %edx
// 225: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 22a: 4d 8d 2c 06                   leaq    (%r14,%rax), %r13
// 22e: 49 83 c5 f8                   addq    $-0x8, %r13
// 232: 45 31 e4                      xorl    %r12d, %r12d
// 235: 31 ed                         xorl    %ebp, %ebp
// 237: eb 11                         jmp     0x24a <_JIT_ENTRY+0x24a>
// 239: 49 ff c4                      incq    %r12
// 23c: 4c 39 64 24 10                cmpq    %r12, 0x10(%rsp)
// 241: 4d 89 fd                      movq    %r15, %r13
// 244: 0f 84 92 00 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 24a: 4d 89 ef                      movq    %r13, %r15
// 24d: 4f 8b 6c e5 00                movq    (%r13,%r12,8), %r13
// 252: 85 ed                         testl   %ebp, %ebp
// 254: 74 0f                         je      0x265 <_JIT_ENTRY+0x265>
// 256: 49 8b 45 00                   movq    (%r13), %rax
// 25a: 48 85 c0                      testq   %rax, %rax
// 25d: 7e 24                         jle     0x283 <_JIT_ENTRY+0x283>
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 d6                         js      0x239 <_JIT_ENTRY+0x239>
// 263: eb 44                         jmp     0x2a9 <_JIT_ENTRY+0x2a9>
// 265: 48 8b 3c 24                   movq    (%rsp), %rdi
// 269: 4c 89 ee                      movq    %r13, %rsi
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  PySet_Add
// 276: ff d0                         callq   *%rax
// 278: 89 c5                         movl    %eax, %ebp
// 27a: 49 8b 45 00                   movq    (%r13), %rax
// 27e: 48 85 c0                      testq   %rax, %rax
// 281: 7f dc                         jg      0x25f <_JIT_ENTRY+0x25f>
// 283: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000285:  R_X86_64_64  .rodata.str1.1
// 28d: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// 292: 4c 89 ea                      movq    %r13, %rdx
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_NegativeRefcount
// 29f: ff d0                         callq   *%rax
// 2a1: 49 8b 45 00                   movq    (%r13), %rax
// 2a5: 85 c0                         testl   %eax, %eax
// 2a7: 78 90                         js      0x239 <_JIT_ENTRY+0x239>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b3: ff d0                         callq   *%rax
// 2b5: 49 ff 4d 00                   decq    (%r13)
// 2b9: 0f 85 7a ff ff ff             jne     0x239 <_JIT_ENTRY+0x239>
// 2bf: 4c 89 ef                      movq    %r13, %rdi
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_Dealloc
// 2cc: ff d0                         callq   *%rax
// 2ce: e9 66 ff ff ff                jmp     0x239 <_JIT_ENTRY+0x239>
// 2d3: 49 83 c6 f8                   addq    $-0x8, %r14
// 2d7: 4d 89 f5                      movq    %r14, %r13
// 2da: eb 5d                         jmp     0x339 <_JIT_ENTRY+0x339>
// 2dc: 85 ed                         testl   %ebp, %ebp
// 2de: 4c 8b 24 24                   movq    (%rsp), %r12
// 2e2: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2e7: 74 66                         je      0x34f <_JIT_ENTRY+0x34f>
// 2e9: 49 8b 04 24                   movq    (%r12), %rax
// 2ed: 48 85 c0                      testq   %rax, %rax
// 2f0: 7f 22                         jg      0x314 <_JIT_ENTRY+0x314>
// 2f2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f4:  R_X86_64_64  .rodata.str1.1
// 2fc: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 301: 4c 89 e2                      movq    %r12, %rdx
// 304: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000306:  R_X86_64_64  _Py_NegativeRefcount
// 30e: ff d0                         callq   *%rax
// 310: 49 8b 04 24                   movq    (%r12), %rax
// 314: 85 c0                         testl   %eax, %eax
// 316: 78 21                         js      0x339 <_JIT_ENTRY+0x339>
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 322: ff d0                         callq   *%rax
// 324: 49 ff 0c 24                   decq    (%r12)
// 328: 75 0f                         jne     0x339 <_JIT_ENTRY+0x339>
// 32a: 4c 89 e7                      movq    %r12, %rdi
// 32d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032f:  R_X86_64_64  _Py_Dealloc
// 337: ff d0                         callq   *%rax
// 339: 49 29 dd                      subq    %rbx, %r13
// 33c: 49 83 c5 b8                   addq    $-0x48, %r13
// 340: 49 c1 ed 03                   shrq    $0x3, %r13
// 344: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 348: 31 c0                         xorl    %eax, %eax
// 34a: e9 ce fd ff ff                jmp     0x11d <_JIT_ENTRY+0x11d>
// 34f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000351:  R_X86_64_64  _JIT_OPARG
// 359: 0f b7 c8                      movzwl  %ax, %ecx
// 35c: 0f b7 c0                      movzwl  %ax, %eax
// 35f: 48 c1 e0 03                   shlq    $0x3, %rax
// 363: 48 f7 d8                      negq    %rax
// 366: 4d 89 64 06 f8                movq    %r12, -0x8(%r14,%rax)
// 36b: b8 01 00 00 00                movl    $0x1, %eax
// 370: 29 c8                         subl    %ecx, %eax
// 372: 48 98                         cltq
// 374: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 378: 48 83 c6 f8                   addq    $-0x8, %rsi
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _JIT_CONTINUE
// 386: 48 89 df                      movq    %rbx, %rdi
// 389: 4c 89 fa                      movq    %r15, %rdx
// 38c: 48 83 c4 18                   addq    $0x18, %rsp
// 390: 5b                            popq    %rbx
// 391: 41 5c                         popq    %r12
// 393: 41 5d                         popq    %r13
// 395: 41 5e                         popq    %r14
// 397: 41 5f                         popq    %r15
// 399: 5d                            popq    %rbp
// 39a: ff e0                         jmpq    *%rax
// 39c: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_SET_code_body[925] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x55, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x24, 0x24, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x83, 0xf9, 0x02, 0xba, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xd1, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8d, 0x2c, 0x06, 0x49, 0x83, 0xc5, 0xf8, 0x45, 0x31, 0xe4, 0x31, 0xed, 0xeb, 0x11, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0x64, 0x24, 0x10, 0x4d, 0x89, 0xfd, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xef, 0x4f, 0x8b, 0x6c, 0xe5, 0x00, 0x85, 0xed, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x24, 0x85, 0xc0, 0x78, 0xd6, 0xeb, 0x44, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xdc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x90, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x89, 0xf5, 0xeb, 0x5d, 0x85, 0xed, 0x4c, 0x8b, 0x24, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xce, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x06, 0xf8, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_SET_code_holes[25] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_SET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_SET_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BUILD_SLICE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BUILD_SLICE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 c9 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 b0 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 a5 00 00 00             ja      0xf5 <_JIT_ENTRY+0xf5>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 96 00 00 00             jle     0xf5 <_JIT_ENTRY+0xf5>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 76 37                         jbe     0x12c <_JIT_ENTRY+0x12c>
// f5: 49 29 de                      subq    %rbx, %r14
// f8: 49 83 c6 b8                   addq    $-0x48, %r14
// fc: 49 c1 ee 03                   shrq    $0x3, %r14
// 100: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 104: 48 8b 03                      movq    (%rbx), %rax
// 107: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000109:  R_X86_64_64  _JIT_TARGET
// 111: 89 c9                         movl    %ecx, %ecx
// 113: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 117: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11d: 48 83 c4 18                   addq    $0x18, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5d                         popq    %r13
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: 5d                            popq    %rbp
// 12b: c3                            retq
// 12c: 89 c0                         movl    %eax, %eax
// 12e: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 132: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 137: 75 28                         jne     0x161 <_JIT_ENTRY+0x161>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyInterpreterState_Get
// 143: ff d0                         callq   *%rax
// 145: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14c: 49 ff 4d 00                   decq    (%r13)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  PyObject_Free
// 15c: 4c 89 ef                      movq    %r13, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 c1 e5 04                   shlq    $0x4, %rbp
// 165: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000167:  R_X86_64_64  _PyRuntime
// 16f: 49 8b 04 24                   movq    (%r12), %rax
// 173: 48 85 c0                      testq   %rax, %rax
// 176: 7f 22                         jg      0x19a <_JIT_ENTRY+0x19a>
// 178: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017a:  R_X86_64_64  .rodata.str1.1
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_NegativeRefcount
// 18c: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 191: 4c 89 e2                      movq    %r12, %rdx
// 194: ff d0                         callq   *%rax
// 196: 49 8b 04 24                   movq    (%r12), %rax
// 19a: 49 01 ed                      addq    %rbp, %r13
// 19d: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a4: 85 c0                         testl   %eax, %eax
// 1a6: 78 21                         js      0x1c9 <_JIT_ENTRY+0x1c9>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b2: ff d0                         callq   *%rax
// 1b4: 49 ff 0c 24                   decq    (%r12)
// 1b8: 75 0f                         jne     0x1c9 <_JIT_ENTRY+0x1c9>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_Dealloc
// 1c4: 4c 89 e7                      movq    %r12, %rdi
// 1c7: ff d0                         callq   *%rax
// 1c9: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: 66 83 f8 03                   cmpw    $0x3, %ax
// 1db: 75 10                         jne     0x1ed <_JIT_ENTRY+0x1ed>
// 1dd: 31 c9                         xorl    %ecx, %ecx
// 1df: 66 83 f8 03                   cmpw    $0x3, %ax
// 1e3: 0f 95 c1                      setne   %cl
// 1e6: 4d 8b 64 ce f0                movq    -0x10(%r14,%rcx,8), %r12
// 1eb: eb 03                         jmp     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ed: 45 31 e4                      xorl    %r12d, %r12d
// 1f0: 31 c9                         xorl    %ecx, %ecx
// 1f2: 66 83 f8 03                   cmpw    $0x3, %ax
// 1f6: 0f 94 c1                      sete    %cl
// 1f9: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 1fe: 29 c8                         subl    %ecx, %eax
// 200: f7 d1                         notl    %ecx
// 202: 48 63 c9                      movslq  %ecx, %rcx
// 205: 48 89 0c 24                   movq    %rcx, (%rsp)
// 209: 49 8b 6c ce f8                movq    -0x8(%r14,%rcx,8), %rbp
// 20e: 48 98                         cltq
// 210: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 215: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  PySlice_New
// 224: 4c 89 ef                      movq    %r13, %rdi
// 227: 48 89 ee                      movq    %rbp, %rsi
// 22a: 4c 89 e2                      movq    %r12, %rdx
// 22d: ff d0                         callq   *%rax
// 22f: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 234: 49 8b 45 00                   movq    (%r13), %rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 7f 22                         jg      0x25f <_JIT_ENTRY+0x25f>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// 256: 4c 89 ea                      movq    %r13, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 45 00                   movq    (%r13), %rax
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 21                         js      0x284 <_JIT_ENTRY+0x284>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26d: ff d0                         callq   *%rax
// 26f: 49 ff 4d 00                   decq    (%r13)
// 273: 75 0f                         jne     0x284 <_JIT_ENTRY+0x284>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_Dealloc
// 27f: 4c 89 ef                      movq    %r13, %rdi
// 282: ff d0                         callq   *%rax
// 284: 48 8b 45 00                   movq    (%rbp), %rax
// 288: 48 85 c0                      testq   %rax, %rax
// 28b: 7f 22                         jg      0x2af <_JIT_ENTRY+0x2af>
// 28d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028f:  R_X86_64_64  .rodata.str1.1
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_NegativeRefcount
// 2a1: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 2a6: 48 89 ea                      movq    %rbp, %rdx
// 2a9: ff d0                         callq   *%rax
// 2ab: 48 8b 45 00                   movq    (%rbp), %rax
// 2af: 85 c0                         testl   %eax, %eax
// 2b1: 78 21                         js      0x2d4 <_JIT_ENTRY+0x2d4>
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bd: ff d0                         callq   *%rax
// 2bf: 48 ff 4d 00                   decq    (%rbp)
// 2c3: 75 0f                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_Dealloc
// 2cf: 48 89 ef                      movq    %rbp, %rdi
// 2d2: ff d0                         callq   *%rax
// 2d4: 4d 85 e4                      testq   %r12, %r12
// 2d7: 74 50                         je      0x329 <_JIT_ENTRY+0x329>
// 2d9: 49 8b 04 24                   movq    (%r12), %rax
// 2dd: 48 85 c0                      testq   %rax, %rax
// 2e0: 7f 22                         jg      0x304 <_JIT_ENTRY+0x304>
// 2e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e4:  R_X86_64_64  .rodata.str1.1+0x39
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _Py_NegativeRefcount
// 2f6: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 2fb: 4c 89 e2                      movq    %r12, %rdx
// 2fe: ff d0                         callq   *%rax
// 300: 49 8b 04 24                   movq    (%r12), %rax
// 304: 85 c0                         testl   %eax, %eax
// 306: 78 21                         js      0x329 <_JIT_ENTRY+0x329>
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 312: ff d0                         callq   *%rax
// 314: 49 ff 0c 24                   decq    (%r12)
// 318: 75 0f                         jne     0x329 <_JIT_ENTRY+0x329>
// 31a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031c:  R_X86_64_64  _Py_Dealloc
// 324: 4c 89 e7                      movq    %r12, %rdi
// 327: ff d0                         callq   *%rax
// 329: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 32e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 332: 48 83 c0 f8                   addq    $-0x8, %rax
// 336: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 33b: 48 85 d2                      testq   %rdx, %rdx
// 33e: 74 2f                         je      0x36f <_JIT_ENTRY+0x36f>
// 340: 48 8b 0c 24                   movq    (%rsp), %rcx
// 344: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 348: 48 83 c6 f8                   addq    $-0x8, %rsi
// 34c: 48 89 10                      movq    %rdx, (%rax)
// 34f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000351:  R_X86_64_64  _JIT_CONTINUE
// 359: 48 89 df                      movq    %rbx, %rdi
// 35c: 4c 89 fa                      movq    %r15, %rdx
// 35f: 48 83 c4 18                   addq    $0x18, %rsp
// 363: 5b                            popq    %rbx
// 364: 41 5c                         popq    %r12
// 366: 41 5d                         popq    %r13
// 368: 41 5e                         popq    %r14
// 36a: 41 5f                         popq    %r15
// 36c: 5d                            popq    %rbp
// 36d: ff e0                         jmpq    *%rax
// 36f: 48 29 d8                      subq    %rbx, %rax
// 372: 48 83 c0 b8                   addq    $-0x48, %rax
// 376: 48 c1 e8 03                   shrq    $0x3, %rax
// 37a: 89 43 40                      movl    %eax, 0x40(%rbx)
// 37d: 31 c0                         xorl    %eax, %eax
// 37f: e9 99 fd ff ff                jmp     0x11d <_JIT_ENTRY+0x11d>
// 384: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_SLICE_code_body[901] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x10, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x95, 0xc1, 0x4d, 0x8b, 0x64, 0xce, 0xf0, 0xeb, 0x03, 0x45, 0x31, 0xe4, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc1, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc8, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x8b, 0x6c, 0xce, 0xf8, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x10, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x2f, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x99, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_SLICE_code_holes[26] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_SLICE_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_SLICE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BUILD_STRING
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BUILD_STRING.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 4c 01 ed                      addq    %r13, %rbp
// 19a: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 1ca: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b7 d5                      movzwl  %bp, %edx
// 1d7: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 1df: 48 f7 d8                      negq    %rax
// 1e2: 4d 8d 24 06                   leaq    (%r14,%rax), %r12
// 1e6: 49 83 c4 f8                   addq    $-0x8, %r12
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _PyUnicode_JoinArray
// 1f4: 49 81 c5 00 a1 00 00          addq    $0xa100, %r13           # imm = 0xA100
// 1fb: 4c 89 ef                      movq    %r13, %rdi
// 1fe: 4c 89 e6                      movq    %r12, %rsi
// 201: ff d0                         callq   *%rax
// 203: 48 89 04 24                   movq    %rax, (%rsp)
// 207: f7 c5 ff ff 00 00             testl   $0xffff, %ebp           # imm = 0xFFFF
// 20d: 0f 8e 7f 00 00 00             jle     0x292 <_JIT_ENTRY+0x292>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_OPARG
// 21d: 0f b7 e8                      movzwl  %ax, %ebp
// 220: 48 ff c5                      incq    %rbp
// 223: eb 14                         jmp     0x239 <_JIT_ENTRY+0x239>
// 225: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 230: 48 ff cd                      decq    %rbp
// 233: 48 83 fd 01                   cmpq    $0x1, %rbp
// 237: 7e 59                         jle     0x292 <_JIT_ENTRY+0x292>
// 239: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 23c: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 240: 49 8b 45 00                   movq    (%r13), %rax
// 244: 48 85 c0                      testq   %rax, %rax
// 247: 7f 22                         jg      0x26b <_JIT_ENTRY+0x26b>
// 249: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024b:  R_X86_64_64  .rodata.str1.1
// 253: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// 258: 4c 89 ea                      movq    %r13, %rdx
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_NegativeRefcount
// 265: ff d0                         callq   *%rax
// 267: 49 8b 45 00                   movq    (%r13), %rax
// 26b: 85 c0                         testl   %eax, %eax
// 26d: 78 c1                         js      0x230 <_JIT_ENTRY+0x230>
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 279: ff d0                         callq   *%rax
// 27b: 49 ff 4d 00                   decq    (%r13)
// 27f: 75 af                         jne     0x230 <_JIT_ENTRY+0x230>
// 281: 4c 89 ef                      movq    %r13, %rdi
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_Dealloc
// 28e: ff d0                         callq   *%rax
// 290: eb 9e                         jmp     0x230 <_JIT_ENTRY+0x230>
// 292: 48 8b 14 24                   movq    (%rsp), %rdx
// 296: 48 85 d2                      testq   %rdx, %rdx
// 299: 74 4d                         je      0x2e8 <_JIT_ENTRY+0x2e8>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _JIT_OPARG
// 2a5: 0f b7 c8                      movzwl  %ax, %ecx
// 2a8: 0f b7 c0                      movzwl  %ax, %eax
// 2ab: 48 c1 e0 03                   shlq    $0x3, %rax
// 2af: 48 f7 d8                      negq    %rax
// 2b2: 49 89 54 06 f8                movq    %rdx, -0x8(%r14,%rax)
// 2b7: b8 01 00 00 00                movl    $0x1, %eax
// 2bc: 29 c8                         subl    %ecx, %eax
// 2be: 48 98                         cltq
// 2c0: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2c4: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _JIT_CONTINUE
// 2d2: 48 89 df                      movq    %rbx, %rdi
// 2d5: 4c 89 fa                      movq    %r15, %rdx
// 2d8: 48 83 c4 08                   addq    $0x8, %rsp
// 2dc: 5b                            popq    %rbx
// 2dd: 41 5c                         popq    %r12
// 2df: 41 5d                         popq    %r13
// 2e1: 41 5e                         popq    %r14
// 2e3: 41 5f                         popq    %r15
// 2e5: 5d                            popq    %rbp
// 2e6: ff e0                         jmpq    *%rax
// 2e8: 49 29 dc                      subq    %rbx, %r12
// 2eb: 49 83 c4 b8                   addq    $-0x48, %r12
// 2ef: 49 c1 ec 03                   shrq    $0x3, %r12
// 2f3: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2f7: 31 c0                         xorl    %eax, %eax
// 2f9: e9 1c fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2fe: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_STRING_code_body[767] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x01, 0xed, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd5, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4d, 0x8d, 0x24, 0x06, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc5, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x7f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x14, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x7e, 0x59, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xaf, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9e, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x49, 0x89, 0x54, 0x06, 0xf8, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x1c, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_STRING_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_STRING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_STRING_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_BUILD_TUPLE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_BUILD_TUPLE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b7 f0                      movzwl  %ax, %esi
// 1d7: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 1df: 48 f7 d8                      negq    %rax
// 1e2: 4d 8d 24 06                   leaq    (%r14,%rax), %r12
// 1e6: 49 83 c4 f8                   addq    $-0x8, %r12
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _PyTuple_FromArraySteal
// 1f4: 4c 89 e7                      movq    %r12, %rdi
// 1f7: ff d0                         callq   *%rax
// 1f9: 48 85 c0                      testq   %rax, %rax
// 1fc: 74 4d                         je      0x24b <_JIT_ENTRY+0x24b>
// 1fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000200:  R_X86_64_64  _JIT_OPARG
// 208: 0f b7 d1                      movzwl  %cx, %edx
// 20b: 0f b7 c9                      movzwl  %cx, %ecx
// 20e: 48 c1 e1 03                   shlq    $0x3, %rcx
// 212: 48 f7 d9                      negq    %rcx
// 215: 49 89 44 0e f8                movq    %rax, -0x8(%r14,%rcx)
// 21a: b8 01 00 00 00                movl    $0x1, %eax
// 21f: 29 d0                         subl    %edx, %eax
// 221: 48 98                         cltq
// 223: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 227: 48 83 c6 f8                   addq    $-0x8, %rsi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _JIT_CONTINUE
// 235: 48 89 df                      movq    %rbx, %rdi
// 238: 4c 89 fa                      movq    %r15, %rdx
// 23b: 48 83 c4 08                   addq    $0x8, %rsp
// 23f: 5b                            popq    %rbx
// 240: 41 5c                         popq    %r12
// 242: 41 5d                         popq    %r13
// 244: 41 5e                         popq    %r14
// 246: 41 5f                         popq    %r15
// 248: 5d                            popq    %rbp
// 249: ff e0                         jmpq    *%rax
// 24b: 49 29 dc                      subq    %rbx, %r12
// 24e: 49 83 c4 b8                   addq    $-0x48, %r12
// 252: 49 c1 ec 03                   shrq    $0x3, %r12
// 256: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 25a: 31 c0                         xorl    %eax, %eax
// 25c: e9 b9 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 261: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_TUPLE_code_body[610] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4d, 0x8d, 0x24, 0x06, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x44, 0x0e, 0xf8, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xb9, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_TUPLE_code_holes[15] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_BUILD_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_BUILD_TUPLE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_CLASS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 d0 02 00 00             jne     0x2fc <_JIT_ENTRY+0x2fc>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 b7 02 00 00             jne     0x2fc <_JIT_ENTRY+0x2fc>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 ac 02 00 00             ja      0x2fc <_JIT_ENTRY+0x2fc>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 9d 02 00 00             jle     0x2fc <_JIT_ENTRY+0x2fc>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 0f 87 03 02 00 00             ja      0x2fc <_JIT_ENTRY+0x2fc>
// f9: 89 c0                         movl    %eax, %eax
// fb: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// ff: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 104: 75 28                         jne     0x12e <_JIT_ENTRY+0x12e>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  PyInterpreterState_Get
// 110: ff d0                         callq   *%rax
// 112: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 119: 49 ff 4d 00                   decq    (%r13)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  PyObject_Free
// 129: 4c 89 ef                      movq    %r13, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 132: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000134:  R_X86_64_64  _PyRuntime
// 13c: 49 8b 04 24                   movq    (%r12), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 22                         jg      0x167 <_JIT_ENTRY+0x167>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15e: 4c 89 e2                      movq    %r12, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 04 24                   movq    (%r12), %rax
// 167: 49 01 ed                      addq    %rbp, %r13
// 16a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 21                         js      0x196 <_JIT_ENTRY+0x196>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 49 ff 0c 24                   decq    (%r12)
// 185: 75 0f                         jne     0x196 <_JIT_ENTRY+0x196>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_Dealloc
// 191: 4c 89 e7                      movq    %r12, %rdi
// 194: ff d0                         callq   *%rax
// 196: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 19a: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 f2                      movzwl  %dx, %esi
// 1ab: 89 f1                         movl    %esi, %ecx
// 1ad: f7 d1                         notl    %ecx
// 1af: 4c 63 c9                      movslq  %ecx, %r9
// 1b2: 4b 8b 4c ce f8                movq    -0x8(%r14,%r9,8), %rcx
// 1b7: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 1bc: 29 f7                         subl    %esi, %edi
// 1be: 4c 63 d7                      movslq  %edi, %r10
// 1c1: 0f b7 d2                      movzwl  %dx, %edx
// 1c4: 48 89 d7                      movq    %rdx, %rdi
// 1c7: 48 f7 df                      negq    %rdi
// 1ca: 8d 6e 01                      leal    0x1(%rsi), %ebp
// 1cd: 48 85 c9                      testq   %rcx, %rcx
// 1d0: 48 f7 d2                      notq    %rdx
// 1d3: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 1d7: 0f 44 ee                      cmovel  %esi, %ebp
// 1da: 4b 8b 7c d6 f8                movq    -0x8(%r14,%r10,8), %rdi
// 1df: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 1e3: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 1ea: 0f 84 09 01 00 00             je      0x2f9 <_JIT_ENTRY+0x2f9>
// 1f0: 4c 8b 87 90 01 00 00          movq    0x190(%rdi), %r8
// 1f7: 4d 85 c0                      testq   %r8, %r8
// 1fa: 0f 84 f9 00 00 00             je      0x2f9 <_JIT_ENTRY+0x2f9>
// 200: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 205: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 20a: 48 8d 34 d0                   leaq    (%rax,%rdx,8), %rsi
// 20e: 48 85 c9                      testq   %rcx, %rcx
// 211: 41 0f 94 c4                   sete    %r12b
// 215: 89 ea                         movl    %ebp, %edx
// 217: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 21c: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// 221: 31 c9                         xorl    %ecx, %ecx
// 223: 41 ff d0                      callq   *%r8
// 226: 48 89 04 24                   movq    %rax, (%rsp)
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _JIT_OPARG
// 234: 66 85 c0                      testw   %ax, %ax
// 237: 0f 94 c0                      sete    %al
// 23a: 41 84 c4                      testb   %al, %r12b
// 23d: 0f 84 f0 00 00 00             je      0x333 <_JIT_ENTRY+0x333>
// 243: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 248: 49 8b 45 00                   movq    (%r13), %rax
// 24c: 48 85 c0                      testq   %rax, %rax
// 24f: 7f 22                         jg      0x273 <_JIT_ENTRY+0x273>
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  .rodata.str1.1
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_NegativeRefcount
// 265: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 26a: 4c 89 ea                      movq    %r13, %rdx
// 26d: ff d0                         callq   *%rax
// 26f: 49 8b 45 00                   movq    (%r13), %rax
// 273: 85 c0                         testl   %eax, %eax
// 275: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 27a: 78 21                         js      0x29d <_JIT_ENTRY+0x29d>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 286: ff d0                         callq   *%rax
// 288: 49 ff 4d 00                   decq    (%r13)
// 28c: 75 0f                         jne     0x29d <_JIT_ENTRY+0x29d>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_Dealloc
// 298: 4c 89 ef                      movq    %r13, %rdi
// 29b: ff d0                         callq   *%rax
// 29d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2a2: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2a6: 48 83 c0 f8                   addq    $-0x8, %rax
// 2aa: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2ae: 48 85 c9                      testq   %rcx, %rcx
// 2b1: 74 34                         je      0x2e7 <_JIT_ENTRY+0x2e7>
// 2b3: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 2b7: 49 83 c6 f8                   addq    $-0x8, %r14
// 2bb: 48 89 08                      movq    %rcx, (%rax)
// 2be: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2c2: 48 8b 00                      movq    (%rax), %rax
// 2c5: 84 c0                         testb   %al, %al
// 2c7: 0f 84 de 00 00 00             je      0x3ab <_JIT_ENTRY+0x3ab>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_HandlePending
// 2d7: 4c 89 ff                      movq    %r15, %rdi
// 2da: ff d0                         callq   *%rax
// 2dc: 85 c0                         testl   %eax, %eax
// 2de: 0f 84 c7 00 00 00             je      0x3ab <_JIT_ENTRY+0x3ab>
// 2e4: 4c 89 f0                      movq    %r14, %rax
// 2e7: 48 29 d8                      subq    %rbx, %rax
// 2ea: 48 83 c0 b8                   addq    $-0x48, %rax
// 2ee: 48 c1 e8 03                   shrq    $0x3, %rax
// 2f2: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2f5: 31 c0                         xorl    %eax, %eax
// 2f7: eb 2b                         jmp     0x324 <_JIT_ENTRY+0x324>
// 2f9: 49 89 c6                      movq    %rax, %r14
// 2fc: 49 29 de                      subq    %rbx, %r14
// 2ff: 49 83 c6 b8                   addq    $-0x48, %r14
// 303: 49 c1 ee 03                   shrq    $0x3, %r14
// 307: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 30b: 48 8b 03                      movq    (%rbx), %rax
// 30e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000310:  R_X86_64_64  _JIT_TARGET
// 318: 89 c9                         movl    %ecx, %ecx
// 31a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 31e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 324: 48 83 c4 28                   addq    $0x28, %rsp
// 328: 5b                            popq    %rbx
// 329: 41 5c                         popq    %r12
// 32b: 41 5d                         popq    %r13
// 32d: 41 5e                         popq    %r14
// 32f: 41 5f                         popq    %r15
// 331: 5d                            popq    %rbp
// 332: c3                            retq
// 333: 83 fd 02                      cmpl    $0x2, %ebp
// 336: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 33c: 44 0f 43 e5                   cmovael %ebp, %r12d
// 340: 31 ed                         xorl    %ebp, %ebp
// 342: eb 0c                         jmp     0x350 <_JIT_ENTRY+0x350>
// 344: 48 ff c5                      incq    %rbp
// 347: 49 39 ec                      cmpq    %rbp, %r12
// 34a: 0f 84 f3 fe ff ff             je      0x243 <_JIT_ENTRY+0x243>
// 350: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 355: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 359: 49 8b 45 00                   movq    (%r13), %rax
// 35d: 48 85 c0                      testq   %rax, %rax
// 360: 7f 22                         jg      0x384 <_JIT_ENTRY+0x384>
// 362: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000364:  R_X86_64_64  .rodata.str1.1
// 36c: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 371: 4c 89 ea                      movq    %r13, %rdx
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_NegativeRefcount
// 37e: ff d0                         callq   *%rax
// 380: 49 8b 45 00                   movq    (%r13), %rax
// 384: 85 c0                         testl   %eax, %eax
// 386: 78 bc                         js      0x344 <_JIT_ENTRY+0x344>
// 388: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 392: ff d0                         callq   *%rax
// 394: 49 ff 4d 00                   decq    (%r13)
// 398: 75 aa                         jne     0x344 <_JIT_ENTRY+0x344>
// 39a: 4c 89 ef                      movq    %r13, %rdi
// 39d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039f:  R_X86_64_64  _Py_Dealloc
// 3a7: ff d0                         callq   *%rax
// 3a9: eb 99                         jmp     0x344 <_JIT_ENTRY+0x344>
// 3ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ad:  R_X86_64_64  _JIT_CONTINUE
// 3b5: 48 89 df                      movq    %rbx, %rdi
// 3b8: 4c 89 f6                      movq    %r14, %rsi
// 3bb: 4c 89 fa                      movq    %r15, %rdx
// 3be: 48 83 c4 28                   addq    $0x28, %rsp
// 3c2: 5b                            popq    %rbx
// 3c3: 41 5c                         popq    %r12
// 3c5: 41 5d                         popq    %r13
// 3c7: 41 5e                         popq    %r14
// 3c9: 41 5f                         popq    %r15
// 3cb: 5d                            popq    %rbp
// 3cc: ff e0                         jmpq    *%rax
// 3ce: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_CLASS_code_body[975] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xd0, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb7, 0x02, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xac, 0x02, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x9d, 0x02, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x03, 0x02, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0x89, 0xf1, 0xf7, 0xd1, 0x4c, 0x63, 0xc9, 0x4b, 0x8b, 0x4c, 0xce, 0xf8, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x4c, 0x63, 0xd7, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x8d, 0x6e, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x0f, 0x44, 0xee, 0x4b, 0x8b, 0x7c, 0xd6, 0xf8, 0x48, 0x8b, 0x77, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x09, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x87, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x8d, 0x34, 0xd0, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc4, 0x89, 0xea, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x20, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc4, 0x0f, 0x84, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x34, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfd, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe5, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xec, 0x0f, 0x84, 0xf3, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xbc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xaa, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_CLASS_code_holes[23] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x38a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_CLASS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 d8 02 00 00             jne     0x304 <_JIT_ENTRY+0x304>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 bf 02 00 00             jne     0x304 <_JIT_ENTRY+0x304>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 b4 02 00 00             ja      0x304 <_JIT_ENTRY+0x304>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e a5 02 00 00             jle     0x304 <_JIT_ENTRY+0x304>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 0f 87 0b 02 00 00             ja      0x304 <_JIT_ENTRY+0x304>
// f9: 89 c0                         movl    %eax, %eax
// fb: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// ff: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 104: 75 28                         jne     0x12e <_JIT_ENTRY+0x12e>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  PyInterpreterState_Get
// 110: ff d0                         callq   *%rax
// 112: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 119: 49 ff 4d 00                   decq    (%r13)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  PyObject_Free
// 129: 4c 89 ef                      movq    %r13, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 132: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000134:  R_X86_64_64  _PyRuntime
// 13c: 49 8b 04 24                   movq    (%r12), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 22                         jg      0x167 <_JIT_ENTRY+0x167>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15e: 4c 89 e2                      movq    %r12, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 04 24                   movq    (%r12), %rax
// 167: 49 01 ed                      addq    %rbp, %r13
// 16a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 21                         js      0x196 <_JIT_ENTRY+0x196>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 49 ff 0c 24                   decq    (%r12)
// 185: 75 0f                         jne     0x196 <_JIT_ENTRY+0x196>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_Dealloc
// 191: 4c 89 e7                      movq    %r12, %rdi
// 194: ff d0                         callq   *%rax
// 196: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 19a: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 f2                      movzwl  %dx, %esi
// 1ab: 89 f1                         movl    %esi, %ecx
// 1ad: f7 d1                         notl    %ecx
// 1af: 4c 63 c9                      movslq  %ecx, %r9
// 1b2: 4b 8b 4c ce f8                movq    -0x8(%r14,%r9,8), %rcx
// 1b7: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 1bc: 29 f7                         subl    %esi, %edi
// 1be: 4c 63 d7                      movslq  %edi, %r10
// 1c1: 0f b7 d2                      movzwl  %dx, %edx
// 1c4: 48 89 d7                      movq    %rdx, %rdi
// 1c7: 48 f7 df                      negq    %rdi
// 1ca: 8d 6e 01                      leal    0x1(%rsi), %ebp
// 1cd: 48 85 c9                      testq   %rcx, %rcx
// 1d0: 48 f7 d2                      notq    %rdx
// 1d3: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 1d7: 0f 44 ee                      cmovel  %esi, %ebp
// 1da: 4b 8b 7c d6 f8                movq    -0x8(%r14,%r10,8), %rdi
// 1df: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e1:  R_X86_64_64  PyCFunction_Type
// 1e9: 48 39 77 08                   cmpq    %rsi, 0x8(%rdi)
// 1ed: 0f 85 0e 01 00 00             jne     0x301 <_JIT_ENTRY+0x301>
// 1f3: 4c 8b 47 10                   movq    0x10(%rdi), %r8
// 1f7: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 1ff: 0f 85 fc 00 00 00             jne     0x301 <_JIT_ENTRY+0x301>
// 205: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 20a: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 20f: 48 8d 34 d0                   leaq    (%rax,%rdx,8), %rsi
// 213: 48 85 c9                      testq   %rcx, %rcx
// 216: 41 0f 94 c4                   sete    %r12b
// 21a: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 21f: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 223: 89 ea                         movl    %ebp, %edx
// 225: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// 22a: 41 ff 50 08                   callq   *0x8(%r8)
// 22e: 48 89 04 24                   movq    %rax, (%rsp)
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _JIT_OPARG
// 23c: 66 85 c0                      testw   %ax, %ax
// 23f: 0f 94 c0                      sete    %al
// 242: 41 84 c4                      testb   %al, %r12b
// 245: 0f 84 f0 00 00 00             je      0x33b <_JIT_ENTRY+0x33b>
// 24b: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 250: 49 8b 45 00                   movq    (%r13), %rax
// 254: 48 85 c0                      testq   %rax, %rax
// 257: 7f 22                         jg      0x27b <_JIT_ENTRY+0x27b>
// 259: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025b:  R_X86_64_64  .rodata.str1.1
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_NegativeRefcount
// 26d: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 272: 4c 89 ea                      movq    %r13, %rdx
// 275: ff d0                         callq   *%rax
// 277: 49 8b 45 00                   movq    (%r13), %rax
// 27b: 85 c0                         testl   %eax, %eax
// 27d: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 282: 78 21                         js      0x2a5 <_JIT_ENTRY+0x2a5>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28e: ff d0                         callq   *%rax
// 290: 49 ff 4d 00                   decq    (%r13)
// 294: 75 0f                         jne     0x2a5 <_JIT_ENTRY+0x2a5>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_Dealloc
// 2a0: 4c 89 ef                      movq    %r13, %rdi
// 2a3: ff d0                         callq   *%rax
// 2a5: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2aa: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2ae: 48 83 c0 f8                   addq    $-0x8, %rax
// 2b2: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2b6: 48 85 c9                      testq   %rcx, %rcx
// 2b9: 74 34                         je      0x2ef <_JIT_ENTRY+0x2ef>
// 2bb: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 2bf: 49 83 c6 f8                   addq    $-0x8, %r14
// 2c3: 48 89 08                      movq    %rcx, (%rax)
// 2c6: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2ca: 48 8b 00                      movq    (%rax), %rax
// 2cd: 84 c0                         testb   %al, %al
// 2cf: 0f 84 de 00 00 00             je      0x3b3 <_JIT_ENTRY+0x3b3>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_HandlePending
// 2df: 4c 89 ff                      movq    %r15, %rdi
// 2e2: ff d0                         callq   *%rax
// 2e4: 85 c0                         testl   %eax, %eax
// 2e6: 0f 84 c7 00 00 00             je      0x3b3 <_JIT_ENTRY+0x3b3>
// 2ec: 4c 89 f0                      movq    %r14, %rax
// 2ef: 48 29 d8                      subq    %rbx, %rax
// 2f2: 48 83 c0 b8                   addq    $-0x48, %rax
// 2f6: 48 c1 e8 03                   shrq    $0x3, %rax
// 2fa: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2fd: 31 c0                         xorl    %eax, %eax
// 2ff: eb 2b                         jmp     0x32c <_JIT_ENTRY+0x32c>
// 301: 49 89 c6                      movq    %rax, %r14
// 304: 49 29 de                      subq    %rbx, %r14
// 307: 49 83 c6 b8                   addq    $-0x48, %r14
// 30b: 49 c1 ee 03                   shrq    $0x3, %r14
// 30f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 313: 48 8b 03                      movq    (%rbx), %rax
// 316: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000318:  R_X86_64_64  _JIT_TARGET
// 320: 89 c9                         movl    %ecx, %ecx
// 322: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 326: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 32c: 48 83 c4 28                   addq    $0x28, %rsp
// 330: 5b                            popq    %rbx
// 331: 41 5c                         popq    %r12
// 333: 41 5d                         popq    %r13
// 335: 41 5e                         popq    %r14
// 337: 41 5f                         popq    %r15
// 339: 5d                            popq    %rbp
// 33a: c3                            retq
// 33b: 83 fd 02                      cmpl    $0x2, %ebp
// 33e: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 344: 44 0f 43 e5                   cmovael %ebp, %r12d
// 348: 31 ed                         xorl    %ebp, %ebp
// 34a: eb 0c                         jmp     0x358 <_JIT_ENTRY+0x358>
// 34c: 48 ff c5                      incq    %rbp
// 34f: 49 39 ec                      cmpq    %rbp, %r12
// 352: 0f 84 f3 fe ff ff             je      0x24b <_JIT_ENTRY+0x24b>
// 358: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 35d: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 361: 49 8b 45 00                   movq    (%r13), %rax
// 365: 48 85 c0                      testq   %rax, %rax
// 368: 7f 22                         jg      0x38c <_JIT_ENTRY+0x38c>
// 36a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000036c:  R_X86_64_64  .rodata.str1.1
// 374: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 379: 4c 89 ea                      movq    %r13, %rdx
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _Py_NegativeRefcount
// 386: ff d0                         callq   *%rax
// 388: 49 8b 45 00                   movq    (%r13), %rax
// 38c: 85 c0                         testl   %eax, %eax
// 38e: 78 bc                         js      0x34c <_JIT_ENTRY+0x34c>
// 390: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000392:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 39a: ff d0                         callq   *%rax
// 39c: 49 ff 4d 00                   decq    (%r13)
// 3a0: 75 aa                         jne     0x34c <_JIT_ENTRY+0x34c>
// 3a2: 4c 89 ef                      movq    %r13, %rdi
// 3a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a7:  R_X86_64_64  _Py_Dealloc
// 3af: ff d0                         callq   *%rax
// 3b1: eb 99                         jmp     0x34c <_JIT_ENTRY+0x34c>
// 3b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b5:  R_X86_64_64  _JIT_CONTINUE
// 3bd: 48 89 df                      movq    %rbx, %rdi
// 3c0: 4c 89 f6                      movq    %r14, %rsi
// 3c3: 4c 89 fa                      movq    %r15, %rdx
// 3c6: 48 83 c4 28                   addq    $0x28, %rsp
// 3ca: 5b                            popq    %rbx
// 3cb: 41 5c                         popq    %r12
// 3cd: 41 5d                         popq    %r13
// 3cf: 41 5e                         popq    %r14
// 3d1: 41 5f                         popq    %r15
// 3d3: 5d                            popq    %rbp
// 3d4: ff e0                         jmpq    *%rax
// 3d6: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST_code_body[983] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xd8, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xbf, 0x02, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xb4, 0x02, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xa5, 0x02, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x0b, 0x02, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0x89, 0xf1, 0xf7, 0xd1, 0x4c, 0x63, 0xc9, 0x4b, 0x8b, 0x4c, 0xce, 0xf8, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x4c, 0x63, 0xd7, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x8d, 0x6e, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x0f, 0x44, 0xee, 0x4b, 0x8b, 0x7c, 0xd6, 0xf8, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x77, 0x08, 0x0f, 0x85, 0x0e, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x47, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xfc, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x8d, 0x34, 0xd0, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x7f, 0x18, 0x89, 0xea, 0x48, 0x89, 0x74, 0x24, 0x20, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc4, 0x0f, 0x84, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x34, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfd, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe5, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xec, 0x0f, 0x84, 0xf3, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xbc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xaa, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST_code_holes[24] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x392, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3b5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 da 02 00 00             jne     0x306 <_JIT_ENTRY+0x306>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 c1 02 00 00             jne     0x306 <_JIT_ENTRY+0x306>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 b6 02 00 00             ja      0x306 <_JIT_ENTRY+0x306>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e a7 02 00 00             jle     0x306 <_JIT_ENTRY+0x306>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 0f 87 0d 02 00 00             ja      0x306 <_JIT_ENTRY+0x306>
// f9: 89 c0                         movl    %eax, %eax
// fb: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// ff: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 104: 75 28                         jne     0x12e <_JIT_ENTRY+0x12e>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  PyInterpreterState_Get
// 110: ff d0                         callq   *%rax
// 112: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 119: 49 ff 4d 00                   decq    (%r13)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  PyObject_Free
// 129: 4c 89 ef                      movq    %r13, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 132: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000134:  R_X86_64_64  _PyRuntime
// 13c: 49 8b 04 24                   movq    (%r12), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 22                         jg      0x167 <_JIT_ENTRY+0x167>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15e: 4c 89 e2                      movq    %r12, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 04 24                   movq    (%r12), %rax
// 167: 49 01 ed                      addq    %rbp, %r13
// 16a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 21                         js      0x196 <_JIT_ENTRY+0x196>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 49 ff 0c 24                   decq    (%r12)
// 185: 75 0f                         jne     0x196 <_JIT_ENTRY+0x196>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_Dealloc
// 191: 4c 89 e7                      movq    %r12, %rdi
// 194: ff d0                         callq   *%rax
// 196: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 19a: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 f2                      movzwl  %dx, %esi
// 1ab: 89 f1                         movl    %esi, %ecx
// 1ad: f7 d1                         notl    %ecx
// 1af: 4c 63 c9                      movslq  %ecx, %r9
// 1b2: 4b 8b 4c ce f8                movq    -0x8(%r14,%r9,8), %rcx
// 1b7: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 1bc: 29 f7                         subl    %esi, %edi
// 1be: 4c 63 d7                      movslq  %edi, %r10
// 1c1: 0f b7 d2                      movzwl  %dx, %edx
// 1c4: 48 89 d7                      movq    %rdx, %rdi
// 1c7: 48 f7 df                      negq    %rdi
// 1ca: 8d 6e 01                      leal    0x1(%rsi), %ebp
// 1cd: 48 85 c9                      testq   %rcx, %rcx
// 1d0: 48 f7 d2                      notq    %rdx
// 1d3: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 1d7: 0f 44 ee                      cmovel  %esi, %ebp
// 1da: 4b 8b 7c d6 f8                movq    -0x8(%r14,%r10,8), %rdi
// 1df: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e1:  R_X86_64_64  PyCFunction_Type
// 1e9: 48 39 77 08                   cmpq    %rsi, 0x8(%rdi)
// 1ed: 0f 85 10 01 00 00             jne     0x303 <_JIT_ENTRY+0x303>
// 1f3: 4c 8b 47 10                   movq    0x10(%rdi), %r8
// 1f7: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 1ff: 0f 85 fe 00 00 00             jne     0x303 <_JIT_ENTRY+0x303>
// 205: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 20a: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 20f: 48 8d 34 d0                   leaq    (%rax,%rdx,8), %rsi
// 213: 48 85 c9                      testq   %rcx, %rcx
// 216: 41 0f 94 c4                   sete    %r12b
// 21a: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 21f: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 223: 89 ea                         movl    %ebp, %edx
// 225: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// 22a: 31 c9                         xorl    %ecx, %ecx
// 22c: 41 ff 50 08                   callq   *0x8(%r8)
// 230: 48 89 04 24                   movq    %rax, (%rsp)
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _JIT_OPARG
// 23e: 66 85 c0                      testw   %ax, %ax
// 241: 0f 94 c0                      sete    %al
// 244: 41 84 c4                      testb   %al, %r12b
// 247: 0f 84 f0 00 00 00             je      0x33d <_JIT_ENTRY+0x33d>
// 24d: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 252: 49 8b 45 00                   movq    (%r13), %rax
// 256: 48 85 c0                      testq   %rax, %rax
// 259: 7f 22                         jg      0x27d <_JIT_ENTRY+0x27d>
// 25b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025d:  R_X86_64_64  .rodata.str1.1
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_NegativeRefcount
// 26f: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 274: 4c 89 ea                      movq    %r13, %rdx
// 277: ff d0                         callq   *%rax
// 279: 49 8b 45 00                   movq    (%r13), %rax
// 27d: 85 c0                         testl   %eax, %eax
// 27f: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 284: 78 21                         js      0x2a7 <_JIT_ENTRY+0x2a7>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 0f                         jne     0x2a7 <_JIT_ENTRY+0x2a7>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_Dealloc
// 2a2: 4c 89 ef                      movq    %r13, %rdi
// 2a5: ff d0                         callq   *%rax
// 2a7: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2ac: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2b0: 48 83 c0 f8                   addq    $-0x8, %rax
// 2b4: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2b8: 48 85 c9                      testq   %rcx, %rcx
// 2bb: 74 34                         je      0x2f1 <_JIT_ENTRY+0x2f1>
// 2bd: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 2c1: 49 83 c6 f8                   addq    $-0x8, %r14
// 2c5: 48 89 08                      movq    %rcx, (%rax)
// 2c8: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2cc: 48 8b 00                      movq    (%rax), %rax
// 2cf: 84 c0                         testb   %al, %al
// 2d1: 0f 84 de 00 00 00             je      0x3b5 <_JIT_ENTRY+0x3b5>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_HandlePending
// 2e1: 4c 89 ff                      movq    %r15, %rdi
// 2e4: ff d0                         callq   *%rax
// 2e6: 85 c0                         testl   %eax, %eax
// 2e8: 0f 84 c7 00 00 00             je      0x3b5 <_JIT_ENTRY+0x3b5>
// 2ee: 4c 89 f0                      movq    %r14, %rax
// 2f1: 48 29 d8                      subq    %rbx, %rax
// 2f4: 48 83 c0 b8                   addq    $-0x48, %rax
// 2f8: 48 c1 e8 03                   shrq    $0x3, %rax
// 2fc: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2ff: 31 c0                         xorl    %eax, %eax
// 301: eb 2b                         jmp     0x32e <_JIT_ENTRY+0x32e>
// 303: 49 89 c6                      movq    %rax, %r14
// 306: 49 29 de                      subq    %rbx, %r14
// 309: 49 83 c6 b8                   addq    $-0x48, %r14
// 30d: 49 c1 ee 03                   shrq    $0x3, %r14
// 311: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 315: 48 8b 03                      movq    (%rbx), %rax
// 318: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000031a:  R_X86_64_64  _JIT_TARGET
// 322: 89 c9                         movl    %ecx, %ecx
// 324: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 328: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 32e: 48 83 c4 28                   addq    $0x28, %rsp
// 332: 5b                            popq    %rbx
// 333: 41 5c                         popq    %r12
// 335: 41 5d                         popq    %r13
// 337: 41 5e                         popq    %r14
// 339: 41 5f                         popq    %r15
// 33b: 5d                            popq    %rbp
// 33c: c3                            retq
// 33d: 83 fd 02                      cmpl    $0x2, %ebp
// 340: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 346: 44 0f 43 e5                   cmovael %ebp, %r12d
// 34a: 31 ed                         xorl    %ebp, %ebp
// 34c: eb 0c                         jmp     0x35a <_JIT_ENTRY+0x35a>
// 34e: 48 ff c5                      incq    %rbp
// 351: 49 39 ec                      cmpq    %rbp, %r12
// 354: 0f 84 f3 fe ff ff             je      0x24d <_JIT_ENTRY+0x24d>
// 35a: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 35f: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 363: 49 8b 45 00                   movq    (%r13), %rax
// 367: 48 85 c0                      testq   %rax, %rax
// 36a: 7f 22                         jg      0x38e <_JIT_ENTRY+0x38e>
// 36c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000036e:  R_X86_64_64  .rodata.str1.1
// 376: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 37b: 4c 89 ea                      movq    %r13, %rdx
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _Py_NegativeRefcount
// 388: ff d0                         callq   *%rax
// 38a: 49 8b 45 00                   movq    (%r13), %rax
// 38e: 85 c0                         testl   %eax, %eax
// 390: 78 bc                         js      0x34e <_JIT_ENTRY+0x34e>
// 392: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000394:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 39c: ff d0                         callq   *%rax
// 39e: 49 ff 4d 00                   decq    (%r13)
// 3a2: 75 aa                         jne     0x34e <_JIT_ENTRY+0x34e>
// 3a4: 4c 89 ef                      movq    %r13, %rdi
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _Py_Dealloc
// 3b1: ff d0                         callq   *%rax
// 3b3: eb 99                         jmp     0x34e <_JIT_ENTRY+0x34e>
// 3b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b7:  R_X86_64_64  _JIT_CONTINUE
// 3bf: 48 89 df                      movq    %rbx, %rdi
// 3c2: 4c 89 f6                      movq    %r14, %rsi
// 3c5: 4c 89 fa                      movq    %r15, %rdx
// 3c8: 48 83 c4 28                   addq    $0x28, %rsp
// 3cc: 5b                            popq    %rbx
// 3cd: 41 5c                         popq    %r12
// 3cf: 41 5d                         popq    %r13
// 3d1: 41 5e                         popq    %r14
// 3d3: 41 5f                         popq    %r15
// 3d5: 5d                            popq    %rbp
// 3d6: ff e0                         jmpq    *%rax
// 3d8: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[985] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xda, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xc1, 0x02, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xb6, 0x02, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xa7, 0x02, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x0d, 0x02, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0x89, 0xf1, 0xf7, 0xd1, 0x4c, 0x63, 0xc9, 0x4b, 0x8b, 0x4c, 0xce, 0xf8, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x4c, 0x63, 0xd7, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x8d, 0x6e, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x0f, 0x44, 0xee, 0x4b, 0x8b, 0x7c, 0xd6, 0xf8, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x77, 0x08, 0x0f, 0x85, 0x10, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x47, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x8d, 0x34, 0xd0, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x7f, 0x18, 0x89, 0xea, 0x48, 0x89, 0x74, 0x24, 0x20, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc4, 0x0f, 0x84, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x34, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfd, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe5, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xec, 0x0f, 0x84, 0xf3, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xbc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xaa, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[24] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x394, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3b7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_O
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_O.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 12 02 00 00             jne     0x23e <_JIT_ENTRY+0x23e>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 f9 01 00 00             jne     0x23e <_JIT_ENTRY+0x23e>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 ee 01 00 00             ja      0x23e <_JIT_ENTRY+0x23e>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e df 01 00 00             jle     0x23e <_JIT_ENTRY+0x23e>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 0f 87 45 01 00 00             ja      0x23e <_JIT_ENTRY+0x23e>
// f9: 89 c0                         movl    %eax, %eax
// fb: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// ff: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 104: 75 28                         jne     0x12e <_JIT_ENTRY+0x12e>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  PyInterpreterState_Get
// 110: ff d0                         callq   *%rax
// 112: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 119: 49 ff 4d 00                   decq    (%r13)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  PyObject_Free
// 129: 4c 89 ef                      movq    %r13, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 132: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000134:  R_X86_64_64  _PyRuntime
// 13c: 49 8b 04 24                   movq    (%r12), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 22                         jg      0x167 <_JIT_ENTRY+0x167>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15e: 4c 89 e2                      movq    %r12, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 04 24                   movq    (%r12), %rax
// 167: 49 01 ed                      addq    %rbp, %r13
// 16a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 21                         js      0x196 <_JIT_ENTRY+0x196>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 49 ff 0c 24                   decq    (%r12)
// 185: 75 0f                         jne     0x196 <_JIT_ENTRY+0x196>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_Dealloc
// 191: 4c 89 e7                      movq    %r12, %rdi
// 194: ff d0                         callq   *%rax
// 196: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _JIT_OPARG
// 1a4: 0f b7 c1                      movzwl  %cx, %eax
// 1a7: 89 c2                         movl    %eax, %edx
// 1a9: f7 d2                         notl    %edx
// 1ab: 4c 63 ea                      movslq  %edx, %r13
// 1ae: 44 0f b7 e1                   movzwl  %cx, %r12d
// 1b2: 4c 89 e1                      movq    %r12, %rcx
// 1b5: 48 f7 d9                      negq    %rcx
// 1b8: 31 d2                         xorl    %edx, %edx
// 1ba: 66 45 85 e4                   testw   %r12w, %r12w
// 1be: 0f 94 c2                      sete    %dl
// 1c1: 31 f6                         xorl    %esi, %esi
// 1c3: 66 41 83 fc 01                cmpw    $0x1, %r12w
// 1c8: 40 0f 94 c6                   sete    %sil
// 1cc: 4b 83 7c ee f8 00             cmpq    $0x0, -0x8(%r14,%r13,8)
// 1d2: 49 f7 d4                      notq    %r12
// 1d5: 4c 0f 44 e1                   cmoveq  %rcx, %r12
// 1d9: 49 8d 6e f8                   leaq    -0x8(%r14), %rbp
// 1dd: 0f 44 d6                      cmovel  %esi, %edx
// 1e0: 80 fa 01                      cmpb    $0x1, %dl
// 1e3: 75 56                         jne     0x23b <_JIT_ENTRY+0x23b>
// 1e5: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ea: 29 c1                         subl    %eax, %ecx
// 1ec: 48 63 c9                      movslq  %ecx, %rcx
// 1ef: 49 8b 74 ce f8                movq    -0x8(%r14,%rcx,8), %rsi
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  PyCFunction_Type
// 1fe: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 202: 75 37                         jne     0x23b <_JIT_ENTRY+0x23b>
// 204: 48 8b 46 10                   movq    0x10(%rsi), %rax
// 208: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 20c: 75 2d                         jne     0x23b <_JIT_ENTRY+0x23b>
// 20e: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 213: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 217: 41 8b 4f 2c                   movl    0x2c(%r15), %ecx
// 21b: 8d 51 ff                      leal    -0x1(%rcx), %edx
// 21e: 41 89 57 2c                   movl    %edx, 0x2c(%r15)
// 222: 85 c9                         testl   %ecx, %ecx
// 224: 48 89 34 24                   movq    %rsi, (%rsp)
// 228: 7e 4b                         jle     0x275 <_JIT_ENTRY+0x275>
// 22a: 4a 8b 6c e5 00                movq    (%rbp,%r12,8), %rbp
// 22f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 233: 75 7e                         jne     0x2b3 <_JIT_ENTRY+0x2b3>
// 235: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 239: eb 7a                         jmp     0x2b5 <_JIT_ENTRY+0x2b5>
// 23b: 49 89 ee                      movq    %rbp, %r14
// 23e: 49 29 de                      subq    %rbx, %r14
// 241: 49 83 c6 b8                   addq    $-0x48, %r14
// 245: 49 c1 ee 03                   shrq    $0x3, %r14
// 249: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24d: 48 8b 03                      movq    (%rbx), %rax
// 250: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000252:  R_X86_64_64  _JIT_TARGET
// 25a: 89 c9                         movl    %ecx, %ecx
// 25c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 260: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 266: 48 83 c4 18                   addq    $0x18, %rsp
// 26a: 5b                            popq    %rbx
// 26b: 41 5c                         popq    %r12
// 26d: 41 5d                         popq    %r13
// 26f: 41 5e                         popq    %r14
// 271: 41 5f                         popq    %r15
// 273: 5d                            popq    %rbp
// 274: c3                            retq
// 275: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// 27a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000027c:  R_X86_64_64  .rodata.str1.1+0x39
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_CheckRecursiveCall
// 28e: 4c 89 ff                      movq    %r15, %rdi
// 291: ff d0                         callq   *%rax
// 293: 85 c0                         testl   %eax, %eax
// 295: 0f 85 09 01 00 00             jne     0x3a4 <_JIT_ENTRY+0x3a4>
// 29b: 48 8b 34 24                   movq    (%rsp), %rsi
// 29f: 48 8b 46 10                   movq    0x10(%rsi), %rax
// 2a3: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 2a8: 4a 8b 6c e5 00                movq    (%rbp,%r12,8), %rbp
// 2ad: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 2b1: 74 82                         je      0x235 <_JIT_ENTRY+0x235>
// 2b3: 31 ff                         xorl    %edi, %edi
// 2b5: 48 89 ee                      movq    %rbp, %rsi
// 2b8: 41 ff d0                      callq   *%r8
// 2bb: 41 ff 47 2c                   incl    0x2c(%r15)
// 2bf: 49 89 c4                      movq    %rax, %r12
// 2c2: 48 8b 45 00                   movq    (%rbp), %rax
// 2c6: 48 85 c0                      testq   %rax, %rax
// 2c9: 7f 22                         jg      0x2ed <_JIT_ENTRY+0x2ed>
// 2cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cd:  R_X86_64_64  .rodata.str1.1
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_NegativeRefcount
// 2df: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 2e4: 48 89 ea                      movq    %rbp, %rdx
// 2e7: ff d0                         callq   *%rax
// 2e9: 48 8b 45 00                   movq    (%rbp), %rax
// 2ed: 85 c0                         testl   %eax, %eax
// 2ef: 78 21                         js      0x312 <_JIT_ENTRY+0x312>
// 2f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2fb: ff d0                         callq   *%rax
// 2fd: 48 ff 4d 00                   decq    (%rbp)
// 301: 75 0f                         jne     0x312 <_JIT_ENTRY+0x312>
// 303: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000305:  R_X86_64_64  _Py_Dealloc
// 30d: 48 89 ef                      movq    %rbp, %rdi
// 310: ff d0                         callq   *%rax
// 312: 48 8b 14 24                   movq    (%rsp), %rdx
// 316: 48 8b 02                      movq    (%rdx), %rax
// 319: 48 85 c0                      testq   %rax, %rax
// 31c: 7f 22                         jg      0x340 <_JIT_ENTRY+0x340>
// 31e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000320:  R_X86_64_64  .rodata.str1.1
// 328: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032a:  R_X86_64_64  _Py_NegativeRefcount
// 332: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 337: ff d0                         callq   *%rax
// 339: 48 8b 04 24                   movq    (%rsp), %rax
// 33d: 48 8b 00                      movq    (%rax), %rax
// 340: 85 c0                         testl   %eax, %eax
// 342: 78 21                         js      0x365 <_JIT_ENTRY+0x365>
// 344: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000346:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34e: ff d0                         callq   *%rax
// 350: 48 8b 3c 24                   movq    (%rsp), %rdi
// 354: 48 ff 0f                      decq    (%rdi)
// 357: 75 0c                         jne     0x365 <_JIT_ENTRY+0x365>
// 359: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035b:  R_X86_64_64  _Py_Dealloc
// 363: ff d0                         callq   *%rax
// 365: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 36a: 49 8d 2c c6                   leaq    (%r14,%rax,8), %rbp
// 36e: 48 83 c5 f8                   addq    $-0x8, %rbp
// 372: 4d 85 e4                      testq   %r12, %r12
// 375: 74 2d                         je      0x3a4 <_JIT_ENTRY+0x3a4>
// 377: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 37b: 49 83 c6 f8                   addq    $-0x8, %r14
// 37f: 4c 89 65 00                   movq    %r12, (%rbp)
// 383: 49 8b 47 10                   movq    0x10(%r15), %rax
// 387: 48 8b 00                      movq    (%rax), %rax
// 38a: 84 c0                         testb   %al, %al
// 38c: 74 2b                         je      0x3b9 <_JIT_ENTRY+0x3b9>
// 38e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000390:  R_X86_64_64  _Py_HandlePending
// 398: 4c 89 ff                      movq    %r15, %rdi
// 39b: ff d0                         callq   *%rax
// 39d: 85 c0                         testl   %eax, %eax
// 39f: 74 18                         je      0x3b9 <_JIT_ENTRY+0x3b9>
// 3a1: 4c 89 f5                      movq    %r14, %rbp
// 3a4: 48 29 dd                      subq    %rbx, %rbp
// 3a7: 48 83 c5 b8                   addq    $-0x48, %rbp
// 3ab: 48 c1 ed 03                   shrq    $0x3, %rbp
// 3af: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 3b2: 31 c0                         xorl    %eax, %eax
// 3b4: e9 ad fe ff ff                jmp     0x266 <_JIT_ENTRY+0x266>
// 3b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bb:  R_X86_64_64  _JIT_CONTINUE
// 3c3: 48 89 df                      movq    %rbx, %rdi
// 3c6: 4c 89 f6                      movq    %r14, %rsi
// 3c9: 4c 89 fa                      movq    %r15, %rdx
// 3cc: 48 83 c4 18                   addq    $0x18, %rsp
// 3d0: 5b                            popq    %rbx
// 3d1: 41 5c                         popq    %r12
// 3d3: 41 5d                         popq    %r13
// 3d5: 41 5e                         popq    %r14
// 3d7: 41 5f                         popq    %r15
// 3d9: 5d                            popq    %rbp
// 3da: ff e0                         jmpq    *%rax
// 3dc: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_O_code_body[989] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x12, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf9, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xee, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xdf, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x45, 0x01, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x44, 0x0f, 0xb7, 0xe1, 0x4c, 0x89, 0xe1, 0x48, 0xf7, 0xd9, 0x31, 0xd2, 0x66, 0x45, 0x85, 0xe4, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x41, 0x83, 0xfc, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x4b, 0x83, 0x7c, 0xee, 0xf8, 0x00, 0x49, 0xf7, 0xd4, 0x4c, 0x0f, 0x44, 0xe1, 0x49, 0x8d, 0x6e, 0xf8, 0x0f, 0x44, 0xd6, 0x80, 0xfa, 0x01, 0x75, 0x56, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x74, 0xce, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x46, 0x08, 0x75, 0x37, 0x48, 0x8b, 0x46, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2d, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x8b, 0x40, 0x08, 0x41, 0x8b, 0x4f, 0x2c, 0x8d, 0x51, 0xff, 0x41, 0x89, 0x57, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x34, 0x24, 0x7e, 0x4b, 0x4a, 0x8b, 0x6c, 0xe5, 0x00, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7e, 0x48, 0x8b, 0x7e, 0x18, 0xeb, 0x7a, 0x49, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x46, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4a, 0x8b, 0x6c, 0xe5, 0x00, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x82, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x41, 0xff, 0x47, 0x2c, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x2c, 0xc6, 0x48, 0x83, 0xc5, 0xf8, 0x4d, 0x85, 0xe4, 0x74, 0x2d, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x65, 0x00, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x18, 0x4c, 0x89, 0xf5, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xad, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_O_code_holes[25] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x390, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3bb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_O_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_1
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_1.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 8d 4e f0                   leaq    -0x10(%r14), %rcx
// 19b: 48 89 0c 24                   movq    %rcx, (%rsp)
// 19f: 49 01 ed                      addq    %rbp, %r13
// 1a2: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 78 17                         js      0x1ce <_JIT_ENTRY+0x1ce>
// 1b7: ff d1                         callq   *%rcx
// 1b9: 49 ff 0c 24                   decq    (%r12)
// 1bd: 75 0f                         jne     0x1ce <_JIT_ENTRY+0x1ce>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_Dealloc
// 1c9: 4c 89 e7                      movq    %r12, %rdi
// 1cc: ff d0                         callq   *%rax
// 1ce: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1d2: 4c 89 6d 00                   movq    %r13, (%rbp)
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _JIT_OPARG
// 1e0: 0f b7 c8                      movzwl  %ax, %ecx
// 1e3: 48 c1 e1 04                   shlq    $0x4, %rcx
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 1f1: 4c 89 ff                      movq    %r15, %rdi
// 1f4: 4c 89 ee                      movq    %r13, %rsi
// 1f7: ff 14 01                      callq   *(%rcx,%rax)
// 1fa: 49 89 c4                      movq    %rax, %r12
// 1fd: 49 8b 45 00                   movq    (%r13), %rax
// 201: 48 85 c0                      testq   %rax, %rax
// 204: 7f 22                         jg      0x228 <_JIT_ENTRY+0x228>
// 206: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000208:  R_X86_64_64  .rodata.str1.1
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _Py_NegativeRefcount
// 21a: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 21f: 4c 89 ea                      movq    %r13, %rdx
// 222: ff d0                         callq   *%rax
// 224: 49 8b 45 00                   movq    (%r13), %rax
// 228: 85 c0                         testl   %eax, %eax
// 22a: 78 21                         js      0x24d <_JIT_ENTRY+0x24d>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 236: ff d0                         callq   *%rax
// 238: 49 ff 4d 00                   decq    (%r13)
// 23c: 75 0f                         jne     0x24d <_JIT_ENTRY+0x24d>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_Dealloc
// 248: 4c 89 ef                      movq    %r13, %rdi
// 24b: ff d0                         callq   *%rax
// 24d: 4d 85 e4                      testq   %r12, %r12
// 250: 74 2b                         je      0x27d <_JIT_ENTRY+0x27d>
// 252: 49 83 c6 f8                   addq    $-0x8, %r14
// 256: 4c 89 65 00                   movq    %r12, (%rbp)
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _JIT_CONTINUE
// 264: 48 89 df                      movq    %rbx, %rdi
// 267: 4c 89 f6                      movq    %r14, %rsi
// 26a: 4c 89 fa                      movq    %r15, %rdx
// 26d: 48 83 c4 08                   addq    $0x8, %rsp
// 271: 5b                            popq    %rbx
// 272: 41 5c                         popq    %r12
// 274: 41 5d                         popq    %r13
// 276: 41 5e                         popq    %r14
// 278: 41 5f                         popq    %r15
// 27a: 5d                            popq    %rbp
// 27b: ff e0                         jmpq    *%rax
// 27d: 48 29 dd                      subq    %rbx, %rbp
// 280: 48 83 c5 b8                   addq    $-0x48, %rbp
// 284: 48 c1 ed 03                   shrq    $0x3, %rbp
// 288: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 28b: 31 c0                         xorl    %eax, %eax
// 28d: e9 88 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 292: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_1_code_body[659] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x4e, 0xf0, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x2b, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x88, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_1_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_1_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_2
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_2.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 49 8b 6e e8                   movq    -0x18(%r14), %rbp
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: 0f b7 c8                      movzwl  %ax, %ecx
// 1db: 48 c1 e1 04                   shlq    $0x4, %rcx
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 1e9: 4c 89 ff                      movq    %r15, %rdi
// 1ec: 48 89 ee                      movq    %rbp, %rsi
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: ff 14 01                      callq   *(%rcx,%rax)
// 1f5: 49 89 c4                      movq    %rax, %r12
// 1f8: 48 8b 45 00                   movq    (%rbp), %rax
// 1fc: 48 85 c0                      testq   %rax, %rax
// 1ff: 7f 22                         jg      0x223 <_JIT_ENTRY+0x223>
// 201: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000203:  R_X86_64_64  .rodata.str1.1
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_NegativeRefcount
// 215: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 21a: 48 89 ea                      movq    %rbp, %rdx
// 21d: ff d0                         callq   *%rax
// 21f: 48 8b 45 00                   movq    (%rbp), %rax
// 223: 85 c0                         testl   %eax, %eax
// 225: 78 21                         js      0x248 <_JIT_ENTRY+0x248>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 231: ff d0                         callq   *%rax
// 233: 48 ff 4d 00                   decq    (%rbp)
// 237: 75 0f                         jne     0x248 <_JIT_ENTRY+0x248>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_Dealloc
// 243: 48 89 ef                      movq    %rbp, %rdi
// 246: ff d0                         callq   *%rax
// 248: 49 8b 45 00                   movq    (%r13), %rax
// 24c: 48 85 c0                      testq   %rax, %rax
// 24f: 7f 22                         jg      0x273 <_JIT_ENTRY+0x273>
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  .rodata.str1.1
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_NegativeRefcount
// 265: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 26a: 4c 89 ea                      movq    %r13, %rdx
// 26d: ff d0                         callq   *%rax
// 26f: 49 8b 45 00                   movq    (%r13), %rax
// 273: 85 c0                         testl   %eax, %eax
// 275: 78 21                         js      0x298 <_JIT_ENTRY+0x298>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 281: ff d0                         callq   *%rax
// 283: 49 ff 4d 00                   decq    (%r13)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 4c 89 ef                      movq    %r13, %rdi
// 296: ff d0                         callq   *%rax
// 298: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 29c: 4d 85 e4                      testq   %r12, %r12
// 29f: 74 2a                         je      0x2cb <_JIT_ENTRY+0x2cb>
// 2a1: 49 83 c6 f0                   addq    $-0x10, %r14
// 2a5: 4c 89 20                      movq    %r12, (%rax)
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _JIT_CONTINUE
// 2b2: 48 89 df                      movq    %rbx, %rdi
// 2b5: 4c 89 f6                      movq    %r14, %rsi
// 2b8: 4c 89 fa                      movq    %r15, %rdx
// 2bb: 48 83 c4 08                   addq    $0x8, %rsp
// 2bf: 5b                            popq    %rbx
// 2c0: 41 5c                         popq    %r12
// 2c2: 41 5d                         popq    %r13
// 2c4: 41 5e                         popq    %r14
// 2c6: 41 5f                         popq    %r15
// 2c8: 5d                            popq    %rbp
// 2c9: ff e0                         jmpq    *%rax
// 2cb: 48 29 d8                      subq    %rbx, %rax
// 2ce: 48 83 c0 b8                   addq    $-0x48, %rax
// 2d2: 48 c1 e8 03                   shrq    $0x3, %rax
// 2d6: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2d9: 31 c0                         xorl    %eax, %eax
// 2db: e9 3a fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2e0: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_2_code_body[737] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x3a, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_2_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_2_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_2_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_ISINSTANCE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_ISINSTANCE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 d8 01 00 00             jne     0x204 <_JIT_ENTRY+0x204>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 bf 01 00 00             jne     0x204 <_JIT_ENTRY+0x204>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 b4 01 00 00             ja      0x204 <_JIT_ENTRY+0x204>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e a5 01 00 00             jle     0x204 <_JIT_ENTRY+0x204>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 0f 87 0b 01 00 00             ja      0x204 <_JIT_ENTRY+0x204>
// f9: 89 c0                         movl    %eax, %eax
// fb: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// ff: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 104: 75 28                         jne     0x12e <_JIT_ENTRY+0x12e>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  PyInterpreterState_Get
// 110: ff d0                         callq   *%rax
// 112: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 119: 49 ff 4d 00                   decq    (%r13)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  PyObject_Free
// 129: 4c 89 ef                      movq    %r13, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 132: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000134:  R_X86_64_64  _PyRuntime
// 13c: 49 8b 04 24                   movq    (%r12), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 22                         jg      0x167 <_JIT_ENTRY+0x167>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15e: 4c 89 e2                      movq    %r12, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 04 24                   movq    (%r12), %rax
// 167: 49 01 ed                      addq    %rbp, %r13
// 16a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 21                         js      0x196 <_JIT_ENTRY+0x196>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 49 ff 0c 24                   decq    (%r12)
// 185: 75 0f                         jne     0x196 <_JIT_ENTRY+0x196>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_Dealloc
// 191: 4c 89 e7                      movq    %r12, %rdi
// 194: ff d0                         callq   *%rax
// 196: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _JIT_OPARG
// 1a4: 0f b7 c8                      movzwl  %ax, %ecx
// 1a7: 89 ca                         movl    %ecx, %edx
// 1a9: f7 d2                         notl    %edx
// 1ab: 48 63 ea                      movslq  %edx, %rbp
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 89 c2                      movq    %rax, %rdx
// 1b4: 48 f7 da                      negq    %rdx
// 1b7: 31 f6                         xorl    %esi, %esi
// 1b9: 66 83 f8 01                   cmpw    $0x1, %ax
// 1bd: 40 0f 94 c6                   sete    %sil
// 1c1: 31 ff                         xorl    %edi, %edi
// 1c3: 66 83 f8 02                   cmpw    $0x2, %ax
// 1c7: 40 0f 94 c7                   sete    %dil
// 1cb: 49 83 7c ee f8 00             cmpq    $0x0, -0x8(%r14,%rbp,8)
// 1d1: 48 f7 d0                      notq    %rax
// 1d4: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1d8: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1dc: 0f 44 f7                      cmovel  %edi, %esi
// 1df: 40 80 fe 01                   cmpb    $0x1, %sil
// 1e3: 75 1c                         jne     0x201 <_JIT_ENTRY+0x201>
// 1e5: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1ea: 29 ca                         subl    %ecx, %edx
// 1ec: 48 63 d2                      movslq  %edx, %rdx
// 1ef: 49 8b 74 d6 f8                movq    -0x8(%r14,%rdx,8), %rsi
// 1f4: 49 8b 4f 10                   movq    0x10(%r15), %rcx
// 1f8: 48 3b b1 b8 54 06 00          cmpq    0x654b8(%rcx), %rsi
// 1ff: 74 3a                         je      0x23b <_JIT_ENTRY+0x23b>
// 201: 4d 89 e6                      movq    %r12, %r14
// 204: 49 29 de                      subq    %rbx, %r14
// 207: 49 83 c6 b8                   addq    $-0x48, %r14
// 20b: 49 c1 ee 03                   shrq    $0x3, %r14
// 20f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 213: 48 8b 03                      movq    (%rbx), %rax
// 216: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000218:  R_X86_64_64  _JIT_TARGET
// 220: 89 c9                         movl    %ecx, %ecx
// 222: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 226: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22c: 48 83 c4 28                   addq    $0x28, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: c3                            retq
// 23b: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 240: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 245: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 249: 49 8b 74 c4 08                movq    0x8(%r12,%rax,8), %rsi
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  PyObject_IsInstance
// 258: 4c 89 ef                      movq    %r13, %rdi
// 25b: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 260: ff d0                         callq   *%rax
// 262: 85 c0                         testl   %eax, %eax
// 264: 0f 88 50 01 00 00             js      0x3ba <_JIT_ENTRY+0x3ba>
// 26a: 89 c7                         movl    %eax, %edi
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  PyBool_FromLong
// 276: ff d0                         callq   *%rax
// 278: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 27d: 49 8b 45 00                   movq    (%r13), %rax
// 281: 48 85 c0                      testq   %rax, %rax
// 284: 7f 22                         jg      0x2a8 <_JIT_ENTRY+0x2a8>
// 286: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000288:  R_X86_64_64  .rodata.str1.1
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _Py_NegativeRefcount
// 29a: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 29f: 4c 89 ea                      movq    %r13, %rdx
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 8b 45 00                   movq    (%r13), %rax
// 2a8: 85 c0                         testl   %eax, %eax
// 2aa: 78 21                         js      0x2cd <_JIT_ENTRY+0x2cd>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b6: ff d0                         callq   *%rax
// 2b8: 49 ff 4d 00                   decq    (%r13)
// 2bc: 75 0f                         jne     0x2cd <_JIT_ENTRY+0x2cd>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_Dealloc
// 2c8: 4c 89 ef                      movq    %r13, %rdi
// 2cb: ff d0                         callq   *%rax
// 2cd: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 2d2: 49 8b 45 00                   movq    (%r13), %rax
// 2d6: 48 85 c0                      testq   %rax, %rax
// 2d9: 7f 22                         jg      0x2fd <_JIT_ENTRY+0x2fd>
// 2db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002dd:  R_X86_64_64  .rodata.str1.1
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_NegativeRefcount
// 2ef: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 2f4: 4c 89 ea                      movq    %r13, %rdx
// 2f7: ff d0                         callq   *%rax
// 2f9: 49 8b 45 00                   movq    (%r13), %rax
// 2fd: 85 c0                         testl   %eax, %eax
// 2ff: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 304: 78 21                         js      0x327 <_JIT_ENTRY+0x327>
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 310: ff d0                         callq   *%rax
// 312: 49 ff 4d 00                   decq    (%r13)
// 316: 75 0f                         jne     0x327 <_JIT_ENTRY+0x327>
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_Dealloc
// 322: 4c 89 ef                      movq    %r13, %rdi
// 325: ff d0                         callq   *%rax
// 327: 49 8b 04 24                   movq    (%r12), %rax
// 32b: 48 85 c0                      testq   %rax, %rax
// 32e: 7f 22                         jg      0x352 <_JIT_ENTRY+0x352>
// 330: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000332:  R_X86_64_64  .rodata.str1.1
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _Py_NegativeRefcount
// 344: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 349: 4c 89 e2                      movq    %r12, %rdx
// 34c: ff d0                         callq   *%rax
// 34e: 49 8b 04 24                   movq    (%r12), %rax
// 352: 85 c0                         testl   %eax, %eax
// 354: 78 21                         js      0x377 <_JIT_ENTRY+0x377>
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 360: ff d0                         callq   *%rax
// 362: 49 ff 0c 24                   decq    (%r12)
// 366: 75 0f                         jne     0x377 <_JIT_ENTRY+0x377>
// 368: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036a:  R_X86_64_64  _Py_Dealloc
// 372: 4c 89 e7                      movq    %r12, %rdi
// 375: ff d0                         callq   *%rax
// 377: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 37c: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 380: 49 83 c4 f8                   addq    $-0x8, %r12
// 384: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 389: 48 85 c0                      testq   %rax, %rax
// 38c: 74 2c                         je      0x3ba <_JIT_ENTRY+0x3ba>
// 38e: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 392: 48 83 c6 f8                   addq    $-0x8, %rsi
// 396: 49 89 04 24                   movq    %rax, (%r12)
// 39a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039c:  R_X86_64_64  _JIT_CONTINUE
// 3a4: 48 89 df                      movq    %rbx, %rdi
// 3a7: 4c 89 fa                      movq    %r15, %rdx
// 3aa: 48 83 c4 28                   addq    $0x28, %rsp
// 3ae: 5b                            popq    %rbx
// 3af: 41 5c                         popq    %r12
// 3b1: 41 5d                         popq    %r13
// 3b3: 41 5e                         popq    %r14
// 3b5: 41 5f                         popq    %r15
// 3b7: 5d                            popq    %rbp
// 3b8: ff e0                         jmpq    *%rax
// 3ba: 49 29 dc                      subq    %rbx, %r12
// 3bd: 49 83 c4 b8                   addq    $-0x48, %r12
// 3c1: 49 c1 ec 03                   shrq    $0x3, %r12
// 3c5: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 3c9: 31 c0                         xorl    %eax, %eax
// 3cb: e9 5c fe ff ff                jmp     0x22c <_JIT_ENTRY+0x22c>
// 3d0: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_ISINSTANCE_code_body[977] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xd8, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xbf, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xb4, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xa5, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x0b, 0x01, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x49, 0x83, 0x7c, 0xee, 0xf8, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x4d, 0x8d, 0x66, 0xf8, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1c, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x8b, 0x74, 0xd6, 0xf8, 0x49, 0x8b, 0x4f, 0x10, 0x48, 0x3b, 0xb1, 0xb8, 0x54, 0x06, 0x00, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x74, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x74, 0xc4, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x10, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x50, 0x01, 0x00, 0x00, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x2c, 0x49, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x5c, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_ISINSTANCE_code_holes[27] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x39c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_ISINSTANCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_ISINSTANCE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_LEN
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_LEN.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 d7 01 00 00             jne     0x203 <_JIT_ENTRY+0x203>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 be 01 00 00             jne     0x203 <_JIT_ENTRY+0x203>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 b3 01 00 00             ja      0x203 <_JIT_ENTRY+0x203>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e a4 01 00 00             jle     0x203 <_JIT_ENTRY+0x203>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 0f 87 0a 01 00 00             ja      0x203 <_JIT_ENTRY+0x203>
// f9: 89 c0                         movl    %eax, %eax
// fb: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// ff: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 104: 75 28                         jne     0x12e <_JIT_ENTRY+0x12e>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  PyInterpreterState_Get
// 110: ff d0                         callq   *%rax
// 112: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 119: 49 ff 4d 00                   decq    (%r13)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  PyObject_Free
// 129: 4c 89 ef                      movq    %r13, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 132: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000134:  R_X86_64_64  _PyRuntime
// 13c: 49 8b 04 24                   movq    (%r12), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 22                         jg      0x167 <_JIT_ENTRY+0x167>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15e: 4c 89 e2                      movq    %r12, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 04 24                   movq    (%r12), %rax
// 167: 49 01 ed                      addq    %rbp, %r13
// 16a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 21                         js      0x196 <_JIT_ENTRY+0x196>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 49 ff 0c 24                   decq    (%r12)
// 185: 75 0f                         jne     0x196 <_JIT_ENTRY+0x196>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_Dealloc
// 191: 4c 89 e7                      movq    %r12, %rdi
// 194: ff d0                         callq   *%rax
// 196: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _JIT_OPARG
// 1a4: 0f b7 c8                      movzwl  %ax, %ecx
// 1a7: 89 ca                         movl    %ecx, %edx
// 1a9: f7 d2                         notl    %edx
// 1ab: 4c 63 ea                      movslq  %edx, %r13
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 89 c2                      movq    %rax, %rdx
// 1b4: 48 f7 da                      negq    %rdx
// 1b7: 31 f6                         xorl    %esi, %esi
// 1b9: 66 85 c0                      testw   %ax, %ax
// 1bc: 40 0f 94 c6                   sete    %sil
// 1c0: 31 ff                         xorl    %edi, %edi
// 1c2: 66 83 f8 01                   cmpw    $0x1, %ax
// 1c6: 40 0f 94 c7                   sete    %dil
// 1ca: 4b 83 7c ee f8 00             cmpq    $0x0, -0x8(%r14,%r13,8)
// 1d0: 48 f7 d0                      notq    %rax
// 1d3: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1d7: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1db: 0f 44 f7                      cmovel  %edi, %esi
// 1de: 40 80 fe 01                   cmpb    $0x1, %sil
// 1e2: 75 1c                         jne     0x200 <_JIT_ENTRY+0x200>
// 1e4: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1e9: 29 ca                         subl    %ecx, %edx
// 1eb: 48 63 d2                      movslq  %edx, %rdx
// 1ee: 49 8b 6c d6 f8                movq    -0x8(%r14,%rdx,8), %rbp
// 1f3: 49 8b 4f 10                   movq    0x10(%r15), %rcx
// 1f7: 48 3b a9 c0 54 06 00          cmpq    0x654c0(%rcx), %rbp
// 1fe: 74 3a                         je      0x23a <_JIT_ENTRY+0x23a>
// 200: 4d 89 e6                      movq    %r12, %r14
// 203: 49 29 de                      subq    %rbx, %r14
// 206: 49 83 c6 b8                   addq    $-0x48, %r14
// 20a: 49 c1 ee 03                   shrq    $0x3, %r14
// 20e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 212: 48 8b 03                      movq    (%rbx), %rax
// 215: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000217:  R_X86_64_64  _JIT_TARGET
// 21f: 89 c9                         movl    %ecx, %ecx
// 221: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 225: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22b: 48 83 c4 18                   addq    $0x18, %rsp
// 22f: 5b                            popq    %rbx
// 230: 41 5c                         popq    %r12
// 232: 41 5d                         popq    %r13
// 234: 41 5e                         popq    %r14
// 236: 41 5f                         popq    %r15
// 238: 5d                            popq    %rbp
// 239: c3                            retq
// 23a: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 23f: 49 8b 3c c4                   movq    (%r12,%rax,8), %rdi
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  PyObject_Size
// 24d: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 252: ff d0                         callq   *%rax
// 254: 48 85 c0                      testq   %rax, %rax
// 257: 0f 88 f2 00 00 00             js      0x34f <_JIT_ENTRY+0x34f>
// 25d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025f:  R_X86_64_64  PyLong_FromSsize_t
// 267: 48 89 c7                      movq    %rax, %rdi
// 26a: ff d1                         callq   *%rcx
// 26c: 48 89 04 24                   movq    %rax, (%rsp)
// 270: 48 8b 45 00                   movq    (%rbp), %rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 7f 22                         jg      0x29b <_JIT_ENTRY+0x29b>
// 279: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027b:  R_X86_64_64  .rodata.str1.1
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_NegativeRefcount
// 28d: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 292: 48 89 ea                      movq    %rbp, %rdx
// 295: ff d0                         callq   *%rax
// 297: 48 8b 45 00                   movq    (%rbp), %rax
// 29b: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000029d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a5: 85 c0                         testl   %eax, %eax
// 2a7: 78 18                         js      0x2c1 <_JIT_ENTRY+0x2c1>
// 2a9: 41 ff d4                      callq   *%r12
// 2ac: 48 ff 4d 00                   decq    (%rbp)
// 2b0: 75 0f                         jne     0x2c1 <_JIT_ENTRY+0x2c1>
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_Dealloc
// 2bc: 48 89 ef                      movq    %rbp, %rdi
// 2bf: ff d0                         callq   *%rax
// 2c1: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 2c6: 48 8b 45 00                   movq    (%rbp), %rax
// 2ca: 48 85 c0                      testq   %rax, %rax
// 2cd: 7f 22                         jg      0x2f1 <_JIT_ENTRY+0x2f1>
// 2cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d1:  R_X86_64_64  .rodata.str1.1
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_NegativeRefcount
// 2e3: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 2e8: 48 89 ea                      movq    %rbp, %rdx
// 2eb: ff d0                         callq   *%rax
// 2ed: 48 8b 45 00                   movq    (%rbp), %rax
// 2f1: 85 c0                         testl   %eax, %eax
// 2f3: 78 18                         js      0x30d <_JIT_ENTRY+0x30d>
// 2f5: 41 ff d4                      callq   *%r12
// 2f8: 48 ff 4d 00                   decq    (%rbp)
// 2fc: 75 0f                         jne     0x30d <_JIT_ENTRY+0x30d>
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  _Py_Dealloc
// 308: 48 89 ef                      movq    %rbp, %rdi
// 30b: ff d0                         callq   *%rax
// 30d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 312: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 316: 49 83 c4 f8                   addq    $-0x8, %r12
// 31a: 48 8b 04 24                   movq    (%rsp), %rax
// 31e: 48 85 c0                      testq   %rax, %rax
// 321: 74 2c                         je      0x34f <_JIT_ENTRY+0x34f>
// 323: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 327: 48 83 c6 f8                   addq    $-0x8, %rsi
// 32b: 49 89 04 24                   movq    %rax, (%r12)
// 32f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000331:  R_X86_64_64  _JIT_CONTINUE
// 339: 48 89 df                      movq    %rbx, %rdi
// 33c: 4c 89 fa                      movq    %r15, %rdx
// 33f: 48 83 c4 18                   addq    $0x18, %rsp
// 343: 5b                            popq    %rbx
// 344: 41 5c                         popq    %r12
// 346: 41 5d                         popq    %r13
// 348: 41 5e                         popq    %r14
// 34a: 41 5f                         popq    %r15
// 34c: 5d                            popq    %rbp
// 34d: ff e0                         jmpq    *%rax
// 34f: 49 29 dc                      subq    %rbx, %r12
// 352: 49 83 c4 b8                   addq    $-0x48, %r12
// 356: 49 c1 ec 03                   shrq    $0x3, %r12
// 35a: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 35e: 31 c0                         xorl    %eax, %eax
// 360: e9 c6 fe ff ff                jmp     0x22b <_JIT_ENTRY+0x22b>
// 365: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_LEN_code_body[870] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xd7, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xbe, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xb3, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xa4, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x0a, 0x01, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x7c, 0xee, 0xf8, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x4d, 0x8d, 0x66, 0xf8, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1c, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x8b, 0x6c, 0xd6, 0xf8, 0x49, 0x8b, 0x4f, 0x10, 0x48, 0x3b, 0xa9, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x8b, 0x3c, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xf2, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd4, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd4, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x2c, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xc6, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_LEN_code_holes[22] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_LEN_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 c9 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 2c: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 b0 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 a5 00 00 00             ja      0xf5 <_JIT_ENTRY+0xf5>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 96 00 00 00             jle     0xf5 <_JIT_ENTRY+0xf5>
// 5f: 49 89 d6                      movq    %rdx, %r14
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 76 39                         jbe     0x12e <_JIT_ENTRY+0x12e>
// f5: 4c 89 f8                      movq    %r15, %rax
// f8: 48 29 d8                      subq    %rbx, %rax
// fb: 48 83 c0 b8                   addq    $-0x48, %rax
// ff: 48 c1 e8 03                   shrq    $0x3, %rax
// 103: 89 43 40                      movl    %eax, 0x40(%rbx)
// 106: 48 8b 03                      movq    (%rbx), %rax
// 109: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010b:  R_X86_64_64  _JIT_TARGET
// 113: 89 c9                         movl    %ecx, %ecx
// 115: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 119: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11f: 48 83 c4 28                   addq    $0x28, %rsp
// 123: 5b                            popq    %rbx
// 124: 41 5c                         popq    %r12
// 126: 41 5d                         popq    %r13
// 128: 41 5e                         popq    %r14
// 12a: 41 5f                         popq    %r15
// 12c: 5d                            popq    %rbp
// 12d: c3                            retq
// 12e: 89 c0                         movl    %eax, %eax
// 130: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 134: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 139: 75 28                         jne     0x163 <_JIT_ENTRY+0x163>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  PyInterpreterState_Get
// 145: ff d0                         callq   *%rax
// 147: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14e: 49 ff 4d 00                   decq    (%r13)
// 152: 75 0f                         jne     0x163 <_JIT_ENTRY+0x163>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  PyObject_Free
// 15e: 4c 89 ef                      movq    %r13, %rdi
// 161: ff d0                         callq   *%rax
// 163: 48 c1 e5 04                   shlq    $0x4, %rbp
// 167: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000169:  R_X86_64_64  _PyRuntime
// 171: 49 8b 04 24                   movq    (%r12), %rax
// 175: 48 85 c0                      testq   %rax, %rax
// 178: 7f 22                         jg      0x19c <_JIT_ENTRY+0x19c>
// 17a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017c:  R_X86_64_64  .rodata.str1.1
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_NegativeRefcount
// 18e: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 193: 4c 89 e2                      movq    %r12, %rdx
// 196: ff d0                         callq   *%rax
// 198: 49 8b 04 24                   movq    (%r12), %rax
// 19c: 49 01 ed                      addq    %rbp, %r13
// 19f: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a6: 85 c0                         testl   %eax, %eax
// 1a8: 78 21                         js      0x1cb <_JIT_ENTRY+0x1cb>
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b4: ff d0                         callq   *%rax
// 1b6: 49 ff 0c 24                   decq    (%r12)
// 1ba: 75 0f                         jne     0x1cb <_JIT_ENTRY+0x1cb>
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_Dealloc
// 1c6: 4c 89 e7                      movq    %r12, %rdi
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 8d 47 f8                   leaq    -0x8(%r15), %rax
// 1cf: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 1d3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d5:  R_X86_64_64  _JIT_OPARG
// 1dd: 0f b7 f2                      movzwl  %dx, %esi
// 1e0: 89 f1                         movl    %esi, %ecx
// 1e2: f7 d1                         notl    %ecx
// 1e4: 4c 63 c9                      movslq  %ecx, %r9
// 1e7: 4b 8b 4c cf f8                movq    -0x8(%r15,%r9,8), %rcx
// 1ec: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 1f1: 29 f7                         subl    %esi, %edi
// 1f3: 4c 63 d7                      movslq  %edi, %r10
// 1f6: 0f b7 d2                      movzwl  %dx, %edx
// 1f9: 48 89 d7                      movq    %rdx, %rdi
// 1fc: 48 f7 df                      negq    %rdi
// 1ff: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 203: 48 85 c9                      testq   %rcx, %rcx
// 206: 48 f7 d2                      notq    %rdx
// 209: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 20d: 44 0f 44 ee                   cmovel  %esi, %r13d
// 211: 4f 8b 64 d7 f8                movq    -0x8(%r15,%r10,8), %r12
// 216: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000218:  R_X86_64_64  PyMethodDescr_Type
// 220: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 225: 0f 85 cd fe ff ff             jne     0xf8 <_JIT_ENTRY+0xf8>
// 22b: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 230: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 238: 0f 85 ba fe ff ff             jne     0xf8 <_JIT_ENTRY+0xf8>
// 23e: 48 8d 34 d0                   leaq    (%rax,%rdx,8), %rsi
// 242: 48 8b 3e                      movq    (%rsi), %rdi
// 245: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 249: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 24e: 0f 85 a4 fe ff ff             jne     0xf8 <_JIT_ENTRY+0xf8>
// 254: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 259: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 25e: 48 85 c9                      testq   %rcx, %rcx
// 261: 40 0f 94 c5                   sete    %bpl
// 265: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// 269: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// 26e: 48 83 c6 08                   addq    $0x8, %rsi
// 272: 48 63 d0                      movslq  %eax, %rdx
// 275: 41 ff 50 08                   callq   *0x8(%r8)
// 279: 48 89 04 24                   movq    %rax, (%rsp)
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _JIT_OPARG
// 287: 66 85 c0                      testw   %ax, %ax
// 28a: 0f 94 c0                      sete    %al
// 28d: 40 84 c5                      testb   %al, %bpl
// 290: 0f 84 b4 00 00 00             je      0x34a <_JIT_ENTRY+0x34a>
// 296: 49 8b 04 24                   movq    (%r12), %rax
// 29a: 48 85 c0                      testq   %rax, %rax
// 29d: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 2a2: 7f 22                         jg      0x2c6 <_JIT_ENTRY+0x2c6>
// 2a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a6:  R_X86_64_64  .rodata.str1.1
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_NegativeRefcount
// 2b8: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 2bd: 4c 89 e2                      movq    %r12, %rdx
// 2c0: ff d0                         callq   *%rax
// 2c2: 49 8b 04 24                   movq    (%r12), %rax
// 2c6: 85 c0                         testl   %eax, %eax
// 2c8: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 2cd: 78 21                         js      0x2f0 <_JIT_ENTRY+0x2f0>
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d9: ff d0                         callq   *%rax
// 2db: 49 ff 0c 24                   decq    (%r12)
// 2df: 75 0f                         jne     0x2f0 <_JIT_ENTRY+0x2f0>
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _Py_Dealloc
// 2eb: 4c 89 e7                      movq    %r12, %rdi
// 2ee: ff d0                         callq   *%rax
// 2f0: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 2f4: 48 83 c0 f8                   addq    $-0x8, %rax
// 2f8: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2fc: 48 85 c9                      testq   %rcx, %rcx
// 2ff: 74 34                         je      0x335 <_JIT_ENTRY+0x335>
// 301: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 305: 49 83 c7 f8                   addq    $-0x8, %r15
// 309: 48 89 08                      movq    %rcx, (%rax)
// 30c: 49 8b 46 10                   movq    0x10(%r14), %rax
// 310: 48 8b 00                      movq    (%rax), %rax
// 313: 84 c0                         testb   %al, %al
// 315: 0f 84 ae 00 00 00             je      0x3c9 <_JIT_ENTRY+0x3c9>
// 31b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031d:  R_X86_64_64  _Py_HandlePending
// 325: 4c 89 f7                      movq    %r14, %rdi
// 328: ff d0                         callq   *%rax
// 32a: 85 c0                         testl   %eax, %eax
// 32c: 0f 84 97 00 00 00             je      0x3c9 <_JIT_ENTRY+0x3c9>
// 332: 4c 89 f8                      movq    %r15, %rax
// 335: 48 29 d8                      subq    %rbx, %rax
// 338: 48 83 c0 b8                   addq    $-0x48, %rax
// 33c: 48 c1 e8 03                   shrq    $0x3, %rax
// 340: 89 43 40                      movl    %eax, 0x40(%rbx)
// 343: 31 c0                         xorl    %eax, %eax
// 345: e9 d5 fd ff ff                jmp     0x11f <_JIT_ENTRY+0x11f>
// 34a: 41 83 fd 02                   cmpl    $0x2, %r13d
// 34e: b8 01 00 00 00                movl    $0x1, %eax
// 353: 41 0f 43 c5                   cmovael %r13d, %eax
// 357: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 35c: 31 ed                         xorl    %ebp, %ebp
// 35e: eb 0e                         jmp     0x36e <_JIT_ENTRY+0x36e>
// 360: 48 ff c5                      incq    %rbp
// 363: 48 39 6c 24 18                cmpq    %rbp, 0x18(%rsp)
// 368: 0f 84 28 ff ff ff             je      0x296 <_JIT_ENTRY+0x296>
// 36e: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 373: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 377: 49 8b 45 00                   movq    (%r13), %rax
// 37b: 48 85 c0                      testq   %rax, %rax
// 37e: 7f 22                         jg      0x3a2 <_JIT_ENTRY+0x3a2>
// 380: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000382:  R_X86_64_64  .rodata.str1.1
// 38a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 38f: 4c 89 ea                      movq    %r13, %rdx
// 392: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000394:  R_X86_64_64  _Py_NegativeRefcount
// 39c: ff d0                         callq   *%rax
// 39e: 49 8b 45 00                   movq    (%r13), %rax
// 3a2: 85 c0                         testl   %eax, %eax
// 3a4: 78 ba                         js      0x360 <_JIT_ENTRY+0x360>
// 3a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3b0: ff d0                         callq   *%rax
// 3b2: 49 ff 4d 00                   decq    (%r13)
// 3b6: 75 a8                         jne     0x360 <_JIT_ENTRY+0x360>
// 3b8: 4c 89 ef                      movq    %r13, %rdi
// 3bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bd:  R_X86_64_64  _Py_Dealloc
// 3c5: ff d0                         callq   *%rax
// 3c7: eb 97                         jmp     0x360 <_JIT_ENTRY+0x360>
// 3c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cb:  R_X86_64_64  _JIT_CONTINUE
// 3d3: 48 89 df                      movq    %rbx, %rdi
// 3d6: 4c 89 fe                      movq    %r15, %rsi
// 3d9: 4c 89 f2                      movq    %r14, %rdx
// 3dc: 48 83 c4 28                   addq    $0x28, %rsp
// 3e0: 5b                            popq    %rbx
// 3e1: 41 5c                         popq    %r12
// 3e3: 41 5d                         popq    %r13
// 3e5: 41 5e                         popq    %r14
// 3e7: 41 5f                         popq    %r15
// 3e9: 5d                            popq    %rbp
// 3ea: ff e0                         jmpq    *%rax
// 3ec: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[1005] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x47, 0xf8, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0x89, 0xf1, 0xf7, 0xd1, 0x4c, 0x63, 0xc9, 0x4b, 0x8b, 0x4c, 0xcf, 0xf8, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x4c, 0x63, 0xd7, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x6e, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x44, 0x0f, 0x44, 0xee, 0x4f, 0x8b, 0x64, 0xd7, 0xf8, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x0f, 0x85, 0xcd, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xba, 0xfe, 0xff, 0xff, 0x48, 0x8d, 0x34, 0xd0, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x0f, 0x85, 0xa4, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x74, 0x24, 0x20, 0x48, 0x83, 0xc6, 0x08, 0x48, 0x63, 0xd0, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x34, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xd5, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xc5, 0x48, 0x89, 0x44, 0x24, 0x18, 0x31, 0xed, 0xeb, 0x0e, 0x48, 0xff, 0xc5, 0x48, 0x39, 0x6c, 0x24, 0x18, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[24] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x382, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x394, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3cb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 c9 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 2c: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 b0 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 a5 00 00 00             ja      0xf5 <_JIT_ENTRY+0xf5>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 96 00 00 00             jle     0xf5 <_JIT_ENTRY+0xf5>
// 5f: 49 89 d6                      movq    %rdx, %r14
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 76 39                         jbe     0x12e <_JIT_ENTRY+0x12e>
// f5: 4c 89 f8                      movq    %r15, %rax
// f8: 48 29 d8                      subq    %rbx, %rax
// fb: 48 83 c0 b8                   addq    $-0x48, %rax
// ff: 48 c1 e8 03                   shrq    $0x3, %rax
// 103: 89 43 40                      movl    %eax, 0x40(%rbx)
// 106: 48 8b 03                      movq    (%rbx), %rax
// 109: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010b:  R_X86_64_64  _JIT_TARGET
// 113: 89 c9                         movl    %ecx, %ecx
// 115: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 119: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11f: 48 83 c4 28                   addq    $0x28, %rsp
// 123: 5b                            popq    %rbx
// 124: 41 5c                         popq    %r12
// 126: 41 5d                         popq    %r13
// 128: 41 5e                         popq    %r14
// 12a: 41 5f                         popq    %r15
// 12c: 5d                            popq    %rbp
// 12d: c3                            retq
// 12e: 89 c0                         movl    %eax, %eax
// 130: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 134: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 139: 75 28                         jne     0x163 <_JIT_ENTRY+0x163>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  PyInterpreterState_Get
// 145: ff d0                         callq   *%rax
// 147: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14e: 49 ff 4d 00                   decq    (%r13)
// 152: 75 0f                         jne     0x163 <_JIT_ENTRY+0x163>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  PyObject_Free
// 15e: 4c 89 ef                      movq    %r13, %rdi
// 161: ff d0                         callq   *%rax
// 163: 48 c1 e5 04                   shlq    $0x4, %rbp
// 167: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000169:  R_X86_64_64  _PyRuntime
// 171: 49 8b 04 24                   movq    (%r12), %rax
// 175: 48 85 c0                      testq   %rax, %rax
// 178: 7f 22                         jg      0x19c <_JIT_ENTRY+0x19c>
// 17a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017c:  R_X86_64_64  .rodata.str1.1
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_NegativeRefcount
// 18e: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 193: 4c 89 e2                      movq    %r12, %rdx
// 196: ff d0                         callq   *%rax
// 198: 49 8b 04 24                   movq    (%r12), %rax
// 19c: 49 01 ed                      addq    %rbp, %r13
// 19f: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a6: 85 c0                         testl   %eax, %eax
// 1a8: 78 21                         js      0x1cb <_JIT_ENTRY+0x1cb>
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b4: ff d0                         callq   *%rax
// 1b6: 49 ff 0c 24                   decq    (%r12)
// 1ba: 75 0f                         jne     0x1cb <_JIT_ENTRY+0x1cb>
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_Dealloc
// 1c6: 4c 89 e7                      movq    %r12, %rdi
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 8d 47 f8                   leaq    -0x8(%r15), %rax
// 1cf: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 1d3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d5:  R_X86_64_64  _JIT_OPARG
// 1dd: 0f b7 f2                      movzwl  %dx, %esi
// 1e0: 89 f1                         movl    %esi, %ecx
// 1e2: f7 d1                         notl    %ecx
// 1e4: 4c 63 c9                      movslq  %ecx, %r9
// 1e7: 4b 8b 4c cf f8                movq    -0x8(%r15,%r9,8), %rcx
// 1ec: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 1f1: 29 f7                         subl    %esi, %edi
// 1f3: 4c 63 d7                      movslq  %edi, %r10
// 1f6: 0f b7 d2                      movzwl  %dx, %edx
// 1f9: 48 89 d7                      movq    %rdx, %rdi
// 1fc: 48 f7 df                      negq    %rdi
// 1ff: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 203: 48 85 c9                      testq   %rcx, %rcx
// 206: 48 f7 d2                      notq    %rdx
// 209: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 20d: 44 0f 44 ee                   cmovel  %esi, %r13d
// 211: 4f 8b 64 d7 f8                movq    -0x8(%r15,%r10,8), %r12
// 216: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000218:  R_X86_64_64  PyMethodDescr_Type
// 220: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 225: 0f 85 cd fe ff ff             jne     0xf8 <_JIT_ENTRY+0xf8>
// 22b: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 230: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 238: 0f 85 ba fe ff ff             jne     0xf8 <_JIT_ENTRY+0xf8>
// 23e: 48 8d 34 d0                   leaq    (%rax,%rdx,8), %rsi
// 242: 48 8b 3e                      movq    (%rsi), %rdi
// 245: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 249: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 24e: 0f 85 a4 fe ff ff             jne     0xf8 <_JIT_ENTRY+0xf8>
// 254: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 259: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 25e: 48 85 c9                      testq   %rcx, %rcx
// 261: 40 0f 94 c5                   sete    %bpl
// 265: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// 269: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// 26e: 48 83 c6 08                   addq    $0x8, %rsi
// 272: 48 63 d0                      movslq  %eax, %rdx
// 275: 31 c9                         xorl    %ecx, %ecx
// 277: 41 ff 50 08                   callq   *0x8(%r8)
// 27b: 48 89 04 24                   movq    %rax, (%rsp)
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _JIT_OPARG
// 289: 66 85 c0                      testw   %ax, %ax
// 28c: 0f 94 c0                      sete    %al
// 28f: 40 84 c5                      testb   %al, %bpl
// 292: 0f 84 b4 00 00 00             je      0x34c <_JIT_ENTRY+0x34c>
// 298: 49 8b 04 24                   movq    (%r12), %rax
// 29c: 48 85 c0                      testq   %rax, %rax
// 29f: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 2a4: 7f 22                         jg      0x2c8 <_JIT_ENTRY+0x2c8>
// 2a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a8:  R_X86_64_64  .rodata.str1.1
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_NegativeRefcount
// 2ba: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 2bf: 4c 89 e2                      movq    %r12, %rdx
// 2c2: ff d0                         callq   *%rax
// 2c4: 49 8b 04 24                   movq    (%r12), %rax
// 2c8: 85 c0                         testl   %eax, %eax
// 2ca: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 2cf: 78 21                         js      0x2f2 <_JIT_ENTRY+0x2f2>
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2db: ff d0                         callq   *%rax
// 2dd: 49 ff 0c 24                   decq    (%r12)
// 2e1: 75 0f                         jne     0x2f2 <_JIT_ENTRY+0x2f2>
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  _Py_Dealloc
// 2ed: 4c 89 e7                      movq    %r12, %rdi
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 2f6: 48 83 c0 f8                   addq    $-0x8, %rax
// 2fa: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2fe: 48 85 c9                      testq   %rcx, %rcx
// 301: 74 34                         je      0x337 <_JIT_ENTRY+0x337>
// 303: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 307: 49 83 c7 f8                   addq    $-0x8, %r15
// 30b: 48 89 08                      movq    %rcx, (%rax)
// 30e: 49 8b 46 10                   movq    0x10(%r14), %rax
// 312: 48 8b 00                      movq    (%rax), %rax
// 315: 84 c0                         testb   %al, %al
// 317: 0f 84 ae 00 00 00             je      0x3cb <_JIT_ENTRY+0x3cb>
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _Py_HandlePending
// 327: 4c 89 f7                      movq    %r14, %rdi
// 32a: ff d0                         callq   *%rax
// 32c: 85 c0                         testl   %eax, %eax
// 32e: 0f 84 97 00 00 00             je      0x3cb <_JIT_ENTRY+0x3cb>
// 334: 4c 89 f8                      movq    %r15, %rax
// 337: 48 29 d8                      subq    %rbx, %rax
// 33a: 48 83 c0 b8                   addq    $-0x48, %rax
// 33e: 48 c1 e8 03                   shrq    $0x3, %rax
// 342: 89 43 40                      movl    %eax, 0x40(%rbx)
// 345: 31 c0                         xorl    %eax, %eax
// 347: e9 d3 fd ff ff                jmp     0x11f <_JIT_ENTRY+0x11f>
// 34c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 350: b8 01 00 00 00                movl    $0x1, %eax
// 355: 41 0f 43 c5                   cmovael %r13d, %eax
// 359: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 35e: 31 ed                         xorl    %ebp, %ebp
// 360: eb 0e                         jmp     0x370 <_JIT_ENTRY+0x370>
// 362: 48 ff c5                      incq    %rbp
// 365: 48 39 6c 24 18                cmpq    %rbp, 0x18(%rsp)
// 36a: 0f 84 28 ff ff ff             je      0x298 <_JIT_ENTRY+0x298>
// 370: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 375: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 379: 49 8b 45 00                   movq    (%r13), %rax
// 37d: 48 85 c0                      testq   %rax, %rax
// 380: 7f 22                         jg      0x3a4 <_JIT_ENTRY+0x3a4>
// 382: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000384:  R_X86_64_64  .rodata.str1.1
// 38c: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 391: 4c 89 ea                      movq    %r13, %rdx
// 394: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000396:  R_X86_64_64  _Py_NegativeRefcount
// 39e: ff d0                         callq   *%rax
// 3a0: 49 8b 45 00                   movq    (%r13), %rax
// 3a4: 85 c0                         testl   %eax, %eax
// 3a6: 78 ba                         js      0x362 <_JIT_ENTRY+0x362>
// 3a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3b2: ff d0                         callq   *%rax
// 3b4: 49 ff 4d 00                   decq    (%r13)
// 3b8: 75 a8                         jne     0x362 <_JIT_ENTRY+0x362>
// 3ba: 4c 89 ef                      movq    %r13, %rdi
// 3bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bf:  R_X86_64_64  _Py_Dealloc
// 3c7: ff d0                         callq   *%rax
// 3c9: eb 97                         jmp     0x362 <_JIT_ENTRY+0x362>
// 3cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cd:  R_X86_64_64  _JIT_CONTINUE
// 3d5: 48 89 df                      movq    %rbx, %rdi
// 3d8: 4c 89 fe                      movq    %r15, %rsi
// 3db: 4c 89 f2                      movq    %r14, %rdx
// 3de: 48 83 c4 28                   addq    $0x28, %rsp
// 3e2: 5b                            popq    %rbx
// 3e3: 41 5c                         popq    %r12
// 3e5: 41 5d                         popq    %r13
// 3e7: 41 5e                         popq    %r14
// 3e9: 41 5f                         popq    %r15
// 3eb: 5d                            popq    %rbp
// 3ec: ff e0                         jmpq    *%rax
// 3ee: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[1007] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x47, 0xf8, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0x89, 0xf1, 0xf7, 0xd1, 0x4c, 0x63, 0xc9, 0x4b, 0x8b, 0x4c, 0xcf, 0xf8, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x4c, 0x63, 0xd7, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x6e, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x44, 0x0f, 0x44, 0xee, 0x4f, 0x8b, 0x64, 0xd7, 0xf8, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x0f, 0x85, 0xcd, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xba, 0xfe, 0xff, 0xff, 0x48, 0x8d, 0x34, 0xd0, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x0f, 0x85, 0xa4, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x74, 0x24, 0x20, 0x48, 0x83, 0xc6, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x34, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xd3, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xc5, 0x48, 0x89, 0x44, 0x24, 0x18, 0x31, 0xed, 0xeb, 0x0e, 0x48, 0xff, 0xc5, 0x48, 0x39, 0x6c, 0x24, 0x18, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[24] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x384, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3cd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_NOARGS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 a4 02 00 00             jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 8b 02 00 00             jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 80 02 00 00             ja      0x2d0 <_JIT_ENTRY+0x2d0>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 71 02 00 00             jle     0x2d0 <_JIT_ENTRY+0x2d0>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 0f 87 d7 01 00 00             ja      0x2d0 <_JIT_ENTRY+0x2d0>
// f9: 89 c0                         movl    %eax, %eax
// fb: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// ff: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 104: 75 28                         jne     0x12e <_JIT_ENTRY+0x12e>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  PyInterpreterState_Get
// 110: ff d0                         callq   *%rax
// 112: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 119: 49 ff 4d 00                   decq    (%r13)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  PyObject_Free
// 129: 4c 89 ef                      movq    %r13, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 132: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000134:  R_X86_64_64  _PyRuntime
// 13c: 49 8b 04 24                   movq    (%r12), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 22                         jg      0x167 <_JIT_ENTRY+0x167>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15e: 4c 89 e2                      movq    %r12, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 04 24                   movq    (%r12), %rax
// 167: 49 01 ed                      addq    %rbp, %r13
// 16a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 21                         js      0x196 <_JIT_ENTRY+0x196>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 49 ff 0c 24                   decq    (%r12)
// 185: 75 0f                         jne     0x196 <_JIT_ENTRY+0x196>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_Dealloc
// 191: 4c 89 e7                      movq    %r12, %rdi
// 194: ff d0                         callq   *%rax
// 196: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _JIT_OPARG
// 1a4: 0f b7 c8                      movzwl  %ax, %ecx
// 1a7: 89 ca                         movl    %ecx, %edx
// 1a9: f7 d2                         notl    %edx
// 1ab: 4c 63 ea                      movslq  %edx, %r13
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 89 c2                      movq    %rax, %rdx
// 1b4: 48 f7 da                      negq    %rdx
// 1b7: 31 f6                         xorl    %esi, %esi
// 1b9: 66 85 c0                      testw   %ax, %ax
// 1bc: 40 0f 94 c6                   sete    %sil
// 1c0: 31 ff                         xorl    %edi, %edi
// 1c2: 66 83 f8 01                   cmpw    $0x1, %ax
// 1c6: 40 0f 94 c7                   sete    %dil
// 1ca: 4b 83 7c ee f8 00             cmpq    $0x0, -0x8(%r14,%r13,8)
// 1d0: 48 f7 d0                      notq    %rax
// 1d3: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1d7: 49 8d 6e f8                   leaq    -0x8(%r14), %rbp
// 1db: 0f 44 f7                      cmovel  %edi, %esi
// 1de: 40 80 fe 01                   cmpb    $0x1, %sil
// 1e2: 0f 85 e5 00 00 00             jne     0x2cd <_JIT_ENTRY+0x2cd>
// 1e8: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1ed: 29 ca                         subl    %ecx, %edx
// 1ef: 4c 63 e2                      movslq  %edx, %r12
// 1f2: 4b 8b 54 e6 f8                movq    -0x8(%r14,%r12,8), %rdx
// 1f7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f9:  R_X86_64_64  PyMethodDescr_Type
// 201: 48 39 4a 08                   cmpq    %rcx, 0x8(%rdx)
// 205: 0f 85 c2 00 00 00             jne     0x2cd <_JIT_ENTRY+0x2cd>
// 20b: 48 8b 7c c5 00                movq    (%rbp,%rax,8), %rdi
// 210: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 214: 48 3b 42 10                   cmpq    0x10(%rdx), %rax
// 218: 0f 85 af 00 00 00             jne     0x2cd <_JIT_ENTRY+0x2cd>
// 21e: 48 8b 42 28                   movq    0x28(%rdx), %rax
// 222: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// 226: 0f 85 a1 00 00 00             jne     0x2cd <_JIT_ENTRY+0x2cd>
// 22c: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 231: 48 8b 50 08                   movq    0x8(%rax), %rdx
// 235: 41 8b 47 2c                   movl    0x2c(%r15), %eax
// 239: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 23c: 41 89 4f 2c                   movl    %ecx, 0x2c(%r15)
// 240: 85 c0                         testl   %eax, %eax
// 242: 0f 8e bf 00 00 00             jle     0x307 <_JIT_ENTRY+0x307>
// 248: 4b 8d 2c e6                   leaq    (%r14,%r12,8), %rbp
// 24c: 48 83 c5 f8                   addq    $-0x8, %rbp
// 250: 49 89 fc                      movq    %rdi, %r12
// 253: 31 f6                         xorl    %esi, %esi
// 255: ff d2                         callq   *%rdx
// 257: 48 89 04 24                   movq    %rax, (%rsp)
// 25b: 41 ff 47 2c                   incl    0x2c(%r15)
// 25f: bf 10 0c 00 00                movl    $0xc10, %edi            # imm = 0xC10
// 264: 4c 89 e6                      movq    %r12, %rsi
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  .text+0x370
// 271: ff d0                         callq   *%rax
// 273: bf 11 0c 00 00                movl    $0xc11, %edi            # imm = 0xC11
// 278: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  .text+0x370
// 287: ff d0                         callq   *%rax
// 289: 48 8b 04 24                   movq    (%rsp), %rax
// 28d: 48 85 c0                      testq   %rax, %rax
// 290: 0f 84 a4 00 00 00             je      0x33a <_JIT_ENTRY+0x33a>
// 296: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 29a: 49 83 c6 f8                   addq    $-0x8, %r14
// 29e: 48 89 45 00                   movq    %rax, (%rbp)
// 2a2: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2a6: 48 8b 00                      movq    (%rax), %rax
// 2a9: 84 c0                         testb   %al, %al
// 2ab: 0f 84 9b 00 00 00             je      0x34c <_JIT_ENTRY+0x34c>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_HandlePending
// 2bb: 4c 89 ff                      movq    %r15, %rdi
// 2be: ff d0                         callq   *%rax
// 2c0: 85 c0                         testl   %eax, %eax
// 2c2: 0f 84 84 00 00 00             je      0x34c <_JIT_ENTRY+0x34c>
// 2c8: 4c 89 f5                      movq    %r14, %rbp
// 2cb: eb 6d                         jmp     0x33a <_JIT_ENTRY+0x33a>
// 2cd: 49 89 ee                      movq    %rbp, %r14
// 2d0: 49 29 de                      subq    %rbx, %r14
// 2d3: 49 83 c6 b8                   addq    $-0x48, %r14
// 2d7: 49 c1 ee 03                   shrq    $0x3, %r14
// 2db: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2df: 48 8b 03                      movq    (%rbx), %rax
// 2e2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e4:  R_X86_64_64  _JIT_TARGET
// 2ec: 89 c9                         movl    %ecx, %ecx
// 2ee: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2f2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2f8: 48 83 c4 18                   addq    $0x18, %rsp
// 2fc: 5b                            popq    %rbx
// 2fd: 41 5c                         popq    %r12
// 2ff: 41 5d                         popq    %r13
// 301: 41 5e                         popq    %r14
// 303: 41 5f                         popq    %r15
// 305: 5d                            popq    %rbp
// 306: c3                            retq
// 307: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000309:  R_X86_64_64  .rodata.str1.1+0x39
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _Py_CheckRecursiveCall
// 31b: 48 89 3c 24                   movq    %rdi, (%rsp)
// 31f: 4c 89 ff                      movq    %r15, %rdi
// 322: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 327: ff d0                         callq   *%rax
// 329: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 32e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 332: 85 c0                         testl   %eax, %eax
// 334: 0f 84 0e ff ff ff             je      0x248 <_JIT_ENTRY+0x248>
// 33a: 48 29 dd                      subq    %rbx, %rbp
// 33d: 48 83 c5 b8                   addq    $-0x48, %rbp
// 341: 48 c1 ed 03                   shrq    $0x3, %rbp
// 345: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 348: 31 c0                         xorl    %eax, %eax
// 34a: eb ac                         jmp     0x2f8 <_JIT_ENTRY+0x2f8>
// 34c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034e:  R_X86_64_64  _JIT_CONTINUE
// 356: 48 89 df                      movq    %rbx, %rdi
// 359: 4c 89 f6                      movq    %r14, %rsi
// 35c: 4c 89 fa                      movq    %r15, %rdx
// 35f: 48 83 c4 18                   addq    $0x18, %rsp
// 363: 5b                            popq    %rbx
// 364: 41 5c                         popq    %r12
// 366: 41 5d                         popq    %r13
// 368: 41 5e                         popq    %r14
// 36a: 41 5f                         popq    %r15
// 36c: 5d                            popq    %rbp
// 36d: ff e0                         jmpq    *%rax
// 36f: 90                            nop
// 
// 0000000000000370 <Py_DECREF>:
// 370: 53                            pushq   %rbx
// 371: 48 89 f3                      movq    %rsi, %rbx
// 374: 48 8b 06                      movq    (%rsi), %rax
// 377: 48 85 c0                      testq   %rax, %rax
// 37a: 7e 06                         jle     0x382 <Py_DECREF+0x12>
// 37c: 85 c0                         testl   %eax, %eax
// 37e: 79 24                         jns     0x3a4 <Py_DECREF+0x34>
// 380: eb 33                         jmp     0x3b5 <Py_DECREF+0x45>
// 382: 89 fe                         movl    %edi, %esi
// 384: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000386:  R_X86_64_64  .rodata.str1.1
// 38e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000390:  R_X86_64_64  _Py_NegativeRefcount
// 398: 48 89 da                      movq    %rbx, %rdx
// 39b: ff d0                         callq   *%rax
// 39d: 48 8b 03                      movq    (%rbx), %rax
// 3a0: 85 c0                         testl   %eax, %eax
// 3a2: 78 11                         js      0x3b5 <Py_DECREF+0x45>
// 3a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ae: ff d0                         callq   *%rax
// 3b0: 48 ff 0b                      decq    (%rbx)
// 3b3: 74 02                         je      0x3b7 <Py_DECREF+0x47>
// 3b5: 5b                            popq    %rbx
// 3b6: c3                            retq
// 3b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b9:  R_X86_64_64  _Py_Dealloc
// 3c1: 48 89 df                      movq    %rbx, %rdi
// 3c4: 5b                            popq    %rbx
// 3c5: ff e0                         jmpq    *%rax
// 3c7: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[968] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xa4, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x8b, 0x02, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x80, 0x02, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x71, 0x02, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xd7, 0x01, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x7c, 0xee, 0xf8, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x49, 0x8d, 0x6e, 0xf8, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x0f, 0x85, 0xe5, 0x00, 0x00, 0x00, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x54, 0xe6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4a, 0x08, 0x0f, 0x85, 0xc2, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0x8b, 0x47, 0x08, 0x48, 0x3b, 0x42, 0x10, 0x0f, 0x85, 0xaf, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x42, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0xa1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x8b, 0x50, 0x08, 0x41, 0x8b, 0x47, 0x2c, 0x8d, 0x48, 0xff, 0x41, 0x89, 0x4f, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0xbf, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xe6, 0x48, 0x83, 0xc5, 0xf8, 0x49, 0x89, 0xfc, 0x31, 0xf6, 0xff, 0xd2, 0x48, 0x89, 0x04, 0x24, 0x41, 0xff, 0x47, 0x2c, 0xbf, 0x10, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0x11, 0x0c, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x45, 0x00, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf5, 0xeb, 0x6d, 0x49, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x3c, 0x24, 0x4c, 0x89, 0xff, 0x48, 0x89, 0x54, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x0f, 0x84, 0x0e, 0xff, 0xff, 0xff, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xeb, 0xac, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x90, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[23] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x370},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x370},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x313, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x34e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x390, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_O.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 f4 01 00 00             jne     0x220 <_JIT_ENTRY+0x220>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 db 01 00 00             jne     0x220 <_JIT_ENTRY+0x220>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 d0 01 00 00             ja      0x220 <_JIT_ENTRY+0x220>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e c1 01 00 00             jle     0x220 <_JIT_ENTRY+0x220>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 0f 87 27 01 00 00             ja      0x220 <_JIT_ENTRY+0x220>
// f9: 89 c0                         movl    %eax, %eax
// fb: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// ff: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 104: 75 28                         jne     0x12e <_JIT_ENTRY+0x12e>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  PyInterpreterState_Get
// 110: ff d0                         callq   *%rax
// 112: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 119: 49 ff 4d 00                   decq    (%r13)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  PyObject_Free
// 129: 4c 89 ef                      movq    %r13, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 132: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000134:  R_X86_64_64  _PyRuntime
// 13c: 49 8b 04 24                   movq    (%r12), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 22                         jg      0x167 <_JIT_ENTRY+0x167>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15e: 4c 89 e2                      movq    %r12, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 04 24                   movq    (%r12), %rax
// 167: 49 01 ed                      addq    %rbp, %r13
// 16a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 21                         js      0x196 <_JIT_ENTRY+0x196>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 49 ff 0c 24                   decq    (%r12)
// 185: 75 0f                         jne     0x196 <_JIT_ENTRY+0x196>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_Dealloc
// 191: 4c 89 e7                      movq    %r12, %rdi
// 194: ff d0                         callq   *%rax
// 196: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _JIT_OPARG
// 1a4: 0f b7 c8                      movzwl  %ax, %ecx
// 1a7: 89 ca                         movl    %ecx, %edx
// 1a9: f7 d2                         notl    %edx
// 1ab: 48 63 ea                      movslq  %edx, %rbp
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 89 c2                      movq    %rax, %rdx
// 1b4: 48 f7 da                      negq    %rdx
// 1b7: 31 f6                         xorl    %esi, %esi
// 1b9: 66 83 f8 01                   cmpw    $0x1, %ax
// 1bd: 40 0f 94 c6                   sete    %sil
// 1c1: 31 ff                         xorl    %edi, %edi
// 1c3: 66 83 f8 02                   cmpw    $0x2, %ax
// 1c7: 40 0f 94 c7                   sete    %dil
// 1cb: 49 83 7c ee f8 00             cmpq    $0x0, -0x8(%r14,%rbp,8)
// 1d1: 48 f7 d0                      notq    %rax
// 1d4: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1d8: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 1dc: 0f 44 f7                      cmovel  %edi, %esi
// 1df: 40 80 fe 01                   cmpb    $0x1, %sil
// 1e3: 75 38                         jne     0x21d <_JIT_ENTRY+0x21d>
// 1e5: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1ea: 29 ca                         subl    %ecx, %edx
// 1ec: 4c 63 e2                      movslq  %edx, %r12
// 1ef: 4b 8b 74 e6 f8                movq    -0x8(%r14,%r12,8), %rsi
// 1f4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f6:  R_X86_64_64  PyMethodDescr_Type
// 1fe: 48 39 4e 08                   cmpq    %rcx, 0x8(%rsi)
// 202: 75 19                         jne     0x21d <_JIT_ENTRY+0x21d>
// 204: 48 8b 4e 28                   movq    0x28(%rsi), %rcx
// 208: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 20c: 75 0f                         jne     0x21d <_JIT_ENTRY+0x21d>
// 20e: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
// 213: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 217: 48 3b 56 10                   cmpq    0x10(%rsi), %rdx
// 21b: 74 3a                         je      0x257 <_JIT_ENTRY+0x257>
// 21d: 4d 89 ee                      movq    %r13, %r14
// 220: 49 29 de                      subq    %rbx, %r14
// 223: 49 83 c6 b8                   addq    $-0x48, %r14
// 227: 49 c1 ee 03                   shrq    $0x3, %r14
// 22b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 22f: 48 8b 03                      movq    (%rbx), %rax
// 232: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000234:  R_X86_64_64  _JIT_TARGET
// 23c: 89 c9                         movl    %ecx, %ecx
// 23e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 242: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 248: 48 83 c4 28                   addq    $0x28, %rsp
// 24c: 5b                            popq    %rbx
// 24d: 41 5c                         popq    %r12
// 24f: 41 5d                         popq    %r13
// 251: 41 5e                         popq    %r14
// 253: 41 5f                         popq    %r15
// 255: 5d                            popq    %rbp
// 256: c3                            retq
// 257: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// 25c: 49 8b 54 c5 08                movq    0x8(%r13,%rax,8), %rdx
// 261: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 265: 41 8b 47 2c                   movl    0x2c(%r15), %eax
// 269: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 26c: 41 89 4f 2c                   movl    %ecx, 0x2c(%r15)
// 270: 85 c0                         testl   %eax, %eax
// 272: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 277: 0f 8e 8b 00 00 00             jle     0x308 <_JIT_ENTRY+0x308>
// 27d: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 281: 49 83 c5 f8                   addq    $-0x8, %r13
// 285: 49 89 fc                      movq    %rdi, %r12
// 288: 48 89 d6                      movq    %rdx, %rsi
// 28b: 41 ff d0                      callq   *%r8
// 28e: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 293: 41 ff 47 2c                   incl    0x2c(%r15)
// 297: bf bf 0b 00 00                movl    $0xbbf, %edi            # imm = 0xBBF
// 29c: 4c 89 e6                      movq    %r12, %rsi
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  .text+0x380
// 2a9: ff d0                         callq   *%rax
// 2ab: bf c0 0b 00 00                movl    $0xbc0, %edi            # imm = 0xBC0
// 2b0: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 2b5: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000002b7:  R_X86_64_64  .text+0x380
// 2bf: 41 ff d4                      callq   *%r12
// 2c2: bf c1 0b 00 00                movl    $0xbc1, %edi            # imm = 0xBC1
// 2c7: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// 2cc: 41 ff d4                      callq   *%r12
// 2cf: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2d4: 48 85 c0                      testq   %rax, %rax
// 2d7: 74 69                         je      0x342 <_JIT_ENTRY+0x342>
// 2d9: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 2dd: 49 83 c6 f8                   addq    $-0x8, %r14
// 2e1: 49 89 45 00                   movq    %rax, (%r13)
// 2e5: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2e9: 48 8b 00                      movq    (%rax), %rax
// 2ec: 84 c0                         testb   %al, %al
// 2ee: 74 68                         je      0x358 <_JIT_ENTRY+0x358>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_HandlePending
// 2fa: 4c 89 ff                      movq    %r15, %rdi
// 2fd: ff d0                         callq   *%rax
// 2ff: 85 c0                         testl   %eax, %eax
// 301: 74 55                         je      0x358 <_JIT_ENTRY+0x358>
// 303: 4d 89 f5                      movq    %r14, %r13
// 306: eb 3a                         jmp     0x342 <_JIT_ENTRY+0x342>
// 308: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000030a:  R_X86_64_64  .rodata.str1.1+0x39
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_CheckRecursiveCall
// 31c: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 321: 4c 89 ff                      movq    %r15, %rdi
// 324: 4c 89 44 24 18                movq    %r8, 0x18(%rsp)
// 329: ff d0                         callq   *%rax
// 32b: 4c 8b 44 24 18                movq    0x18(%rsp), %r8
// 330: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 335: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 33a: 85 c0                         testl   %eax, %eax
// 33c: 0f 84 3b ff ff ff             je      0x27d <_JIT_ENTRY+0x27d>
// 342: 49 29 dd                      subq    %rbx, %r13
// 345: 49 83 c5 b8                   addq    $-0x48, %r13
// 349: 49 c1 ed 03                   shrq    $0x3, %r13
// 34d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 351: 31 c0                         xorl    %eax, %eax
// 353: e9 f0 fe ff ff                jmp     0x248 <_JIT_ENTRY+0x248>
// 358: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035a:  R_X86_64_64  _JIT_CONTINUE
// 362: 48 89 df                      movq    %rbx, %rdi
// 365: 4c 89 f6                      movq    %r14, %rsi
// 368: 4c 89 fa                      movq    %r15, %rdx
// 36b: 48 83 c4 28                   addq    $0x28, %rsp
// 36f: 5b                            popq    %rbx
// 370: 41 5c                         popq    %r12
// 372: 41 5d                         popq    %r13
// 374: 41 5e                         popq    %r14
// 376: 41 5f                         popq    %r15
// 378: 5d                            popq    %rbp
// 379: ff e0                         jmpq    *%rax
// 37b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 
// 0000000000000380 <Py_DECREF>:
// 380: 53                            pushq   %rbx
// 381: 48 89 f3                      movq    %rsi, %rbx
// 384: 48 8b 06                      movq    (%rsi), %rax
// 387: 48 85 c0                      testq   %rax, %rax
// 38a: 7e 06                         jle     0x392 <Py_DECREF+0x12>
// 38c: 85 c0                         testl   %eax, %eax
// 38e: 79 24                         jns     0x3b4 <Py_DECREF+0x34>
// 390: eb 33                         jmp     0x3c5 <Py_DECREF+0x45>
// 392: 89 fe                         movl    %edi, %esi
// 394: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000396:  R_X86_64_64  .rodata.str1.1
// 39e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a0:  R_X86_64_64  _Py_NegativeRefcount
// 3a8: 48 89 da                      movq    %rbx, %rdx
// 3ab: ff d0                         callq   *%rax
// 3ad: 48 8b 03                      movq    (%rbx), %rax
// 3b0: 85 c0                         testl   %eax, %eax
// 3b2: 78 11                         js      0x3c5 <Py_DECREF+0x45>
// 3b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3be: ff d0                         callq   *%rax
// 3c0: 48 ff 0b                      decq    (%rbx)
// 3c3: 74 02                         je      0x3c7 <Py_DECREF+0x47>
// 3c5: 5b                            popq    %rbx
// 3c6: c3                            retq
// 3c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c9:  R_X86_64_64  _Py_Dealloc
// 3d1: 48 89 df                      movq    %rbx, %rdi
// 3d4: 5b                            popq    %rbx
// 3d5: ff e0                         jmpq    *%rax
// 3d7: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_O_code_body[984] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xf4, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xdb, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xd0, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xc1, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x27, 0x01, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x49, 0x83, 0x7c, 0xee, 0xf8, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x4d, 0x8d, 0x6e, 0xf8, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x38, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x74, 0xe6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4e, 0x08, 0x75, 0x19, 0x48, 0x8b, 0x4e, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x0f, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0x8b, 0x57, 0x08, 0x48, 0x3b, 0x56, 0x10, 0x74, 0x3a, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0xc5, 0x08, 0x4c, 0x8b, 0x41, 0x08, 0x41, 0x8b, 0x47, 0x2c, 0x8d, 0x48, 0xff, 0x41, 0x89, 0x4f, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x54, 0x24, 0x10, 0x0f, 0x8e, 0x8b, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xe6, 0x49, 0x83, 0xc5, 0xf8, 0x49, 0x89, 0xfc, 0x48, 0x89, 0xd6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xff, 0x47, 0x2c, 0xbf, 0xbf, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0xc0, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xff, 0xd4, 0xbf, 0xc1, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x41, 0xff, 0xd4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x69, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x89, 0x45, 0x00, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x55, 0x4d, 0x89, 0xf5, 0xeb, 0x3a, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x18, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x85, 0xc0, 0x0f, 0x84, 0x3b, 0xff, 0xff, 0xff, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xf0, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_O_code_holes[23] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x380},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x380},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_STR_1
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_STR_1.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 8b 6e f8                   movq    -0x8(%rsi), %rbp
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 26: 0f 85 c2 00 00 00             jne     0xee <_JIT_ENTRY+0xee>
// 2c: 4d 8b 6f f0                   movq    -0x10(%r15), %r13
// 30: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 4d 39 65 08                   cmpq    %r12, 0x8(%r13)
// 3e: 0f 85 aa 00 00 00             jne     0xee <_JIT_ENTRY+0xee>
// 44: 48 83 7d 10 08                cmpq    $0x8, 0x10(%rbp)
// 49: 0f 87 9f 00 00 00             ja      0xee <_JIT_ENTRY+0xee>
// 4f: 8b 45 18                      movl    0x18(%rbp), %eax
// 52: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 56: 0f 8e 92 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4d 20                   movl    0x20(%r13), %ecx
// 63: 89 ca                         movl    %ecx, %edx
// 65: c1 ea 02                      shrl    $0x2, %edx
// 68: 83 e2 07                      andl    $0x7, %edx
// 6b: 83 fa 02                      cmpl    $0x2, %edx
// 6e: 74 14                         je      0x84 <_JIT_ENTRY+0x84>
// 70: 83 fa 01                      cmpl    $0x1, %edx
// 73: 75 1e                         jne     0x93 <_JIT_ENTRY+0x93>
// 75: f6 c1 20                      testb   $0x20, %cl
// 78: 75 24                         jne     0x9e <_JIT_ENTRY+0x9e>
// 7a: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// 7e: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 82: eb 65                         jmp     0xe9 <_JIT_ENTRY+0xe9>
// 84: f6 c1 20                      testb   $0x20, %cl
// 87: 75 2f                         jne     0xb8 <_JIT_ENTRY+0xb8>
// 89: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// 8d: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 91: eb 56                         jmp     0xe9 <_JIT_ENTRY+0xe9>
// 93: f6 c1 20                      testb   $0x20, %cl
// 96: 75 3a                         jne     0xd2 <_JIT_ENTRY+0xd2>
// 98: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// 9c: eb 48                         jmp     0xe6 <_JIT_ENTRY+0xe6>
// 9e: 31 d2                         xorl    %edx, %edx
// a0: f6 c1 40                      testb   $0x40, %cl
// a3: 0f 94 c2                      sete    %dl
// a6: 48 c1 e2 04                   shlq    $0x4, %rdx
// aa: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// ae: 48 83 c1 28                   addq    $0x28, %rcx
// b2: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// b6: eb 31                         jmp     0xe9 <_JIT_ENTRY+0xe9>
// b8: 31 d2                         xorl    %edx, %edx
// ba: f6 c1 40                      testb   $0x40, %cl
// bd: 0f 94 c2                      sete    %dl
// c0: 48 c1 e2 04                   shlq    $0x4, %rdx
// c4: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// c8: 48 83 c1 28                   addq    $0x28, %rcx
// cc: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d0: eb 17                         jmp     0xe9 <_JIT_ENTRY+0xe9>
// d2: 31 d2                         xorl    %edx, %edx
// d4: f6 c1 40                      testb   $0x40, %cl
// d7: 0f 94 c2                      sete    %dl
// da: 48 c1 e2 04                   shlq    $0x4, %rdx
// de: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// e2: 48 83 c1 28                   addq    $0x28, %rcx
// e6: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// e9: 83 f8 7f                      cmpl    $0x7f, %eax
// ec: 76 39                         jbe     0x127 <_JIT_ENTRY+0x127>
// ee: 4c 89 f8                      movq    %r15, %rax
// f1: 48 29 d8                      subq    %rbx, %rax
// f4: 48 83 c0 b8                   addq    $-0x48, %rax
// f8: 48 c1 e8 03                   shrq    $0x3, %rax
// fc: 89 43 40                      movl    %eax, 0x40(%rbx)
// ff: 48 8b 03                      movq    (%rbx), %rax
// 102: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000104:  R_X86_64_64  _JIT_TARGET
// 10c: 89 c9                         movl    %ecx, %ecx
// 10e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 112: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 118: 48 83 c4 18                   addq    $0x18, %rsp
// 11c: 5b                            popq    %rbx
// 11d: 41 5c                         popq    %r12
// 11f: 41 5d                         popq    %r13
// 121: 41 5e                         popq    %r14
// 123: 41 5f                         popq    %r15
// 125: 5d                            popq    %rbp
// 126: c3                            retq
// 127: 89 c0                         movl    %eax, %eax
// 129: 48 8d 0c 40                   leaq    (%rax,%rax,2), %rcx
// 12d: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 131: 75 34                         jne     0x167 <_JIT_ENTRY+0x167>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  PyInterpreterState_Get
// 13d: 48 89 0c 24                   movq    %rcx, (%rsp)
// 141: ff d0                         callq   *%rax
// 143: 48 8b 0c 24                   movq    (%rsp), %rcx
// 147: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14e: 48 ff 4d 00                   decq    (%rbp)
// 152: 75 13                         jne     0x167 <_JIT_ENTRY+0x167>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  PyObject_Free
// 15e: 48 89 ef                      movq    %rbp, %rdi
// 161: ff d0                         callq   *%rax
// 163: 48 8b 0c 24                   movq    (%rsp), %rcx
// 167: 48 c1 e1 04                   shlq    $0x4, %rcx
// 16b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000016d:  R_X86_64_64  _PyRuntime
// 175: 49 8b 45 00                   movq    (%r13), %rax
// 179: 48 85 c0                      testq   %rax, %rax
// 17c: 7f 32                         jg      0x1b0 <_JIT_ENTRY+0x1b0>
// 17e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000180:  R_X86_64_64  .rodata.str1.1
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _Py_NegativeRefcount
// 192: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 197: 4c 89 ea                      movq    %r13, %rdx
// 19a: 48 89 cd                      movq    %rcx, %rbp
// 19d: ff d0                         callq   *%rax
// 19f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a1:  R_X86_64_64  _PyRuntime
// 1a9: 48 89 e9                      movq    %rbp, %rcx
// 1ac: 49 8b 45 00                   movq    (%r13), %rax
// 1b0: 48 8d 2c 0a                   leaq    (%rdx,%rcx), %rbp
// 1b4: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 1bb: 85 c0                         testl   %eax, %eax
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 4d 00                   decq    (%r13)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 ef                      movq    %r13, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 49 8d 47 f8                   leaq    -0x8(%r15), %rax
// 1e4: 49 89 6f f0                   movq    %rbp, -0x10(%r15)
// 1e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ea:  R_X86_64_64  _JIT_OPARG
// 1f2: 0f b7 c9                      movzwl  %cx, %ecx
// 1f5: 89 ca                         movl    %ecx, %edx
// 1f7: f7 d2                         notl    %edx
// 1f9: 48 63 ea                      movslq  %edx, %rbp
// 1fc: 49 83 7c ef f8 00             cmpq    $0x0, -0x8(%r15,%rbp,8)
// 202: 0f 85 e9 fe ff ff             jne     0xf1 <_JIT_ENTRY+0xf1>
// 208: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 20d: 29 ca                         subl    %ecx, %edx
// 20f: 48 63 ca                      movslq  %edx, %rcx
// 212: 49 8d 0c cf                   leaq    (%r15,%rcx,8), %rcx
// 216: 48 83 c1 f8                   addq    $-0x8, %rcx
// 21a: 4c 39 21                      cmpq    %r12, (%rcx)
// 21d: 0f 85 ce fe ff ff             jne     0xf1 <_JIT_ENTRY+0xf1>
// 223: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _JIT_OPARG
// 232: 0f b7 c0                      movzwl  %ax, %eax
// 235: 48 c1 e0 03                   shlq    $0x3, %rax
// 239: 4c 89 f9                      movq    %r15, %rcx
// 23c: 48 29 c1                      subq    %rax, %rcx
// 23f: 4c 8b 69 f8                   movq    -0x8(%rcx), %r13
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  PyObject_Str
// 24d: 4c 89 ef                      movq    %r13, %rdi
// 250: ff d0                         callq   *%rax
// 252: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 257: 4c 89 2c 24                   movq    %r13, (%rsp)
// 25b: 49 8b 45 00                   movq    (%r13), %rax
// 25f: 48 85 c0                      testq   %rax, %rax
// 262: 7f 26                         jg      0x28a <_JIT_ENTRY+0x28a>
// 264: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000266:  R_X86_64_64  .rodata.str1.1
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_NegativeRefcount
// 278: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// 27d: 4c 8b 2c 24                   movq    (%rsp), %r13
// 281: 4c 89 ea                      movq    %r13, %rdx
// 284: ff d0                         callq   *%rax
// 286: 49 8b 45 00                   movq    (%r13), %rax
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 25                         js      0x2b3 <_JIT_ENTRY+0x2b3>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 298: ff d0                         callq   *%rax
// 29a: 48 8b 04 24                   movq    (%rsp), %rax
// 29e: 48 ff 08                      decq    (%rax)
// 2a1: 75 10                         jne     0x2b3 <_JIT_ENTRY+0x2b3>
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_Dealloc
// 2ad: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2b1: ff d0                         callq   *%rax
// 2b3: 49 8b 04 24                   movq    (%r12), %rax
// 2b7: 48 85 c0                      testq   %rax, %rax
// 2ba: 7f 22                         jg      0x2de <_JIT_ENTRY+0x2de>
// 2bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002be:  R_X86_64_64  .rodata.str1.1
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_NegativeRefcount
// 2d0: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 2d5: 4c 89 e2                      movq    %r12, %rdx
// 2d8: ff d0                         callq   *%rax
// 2da: 49 8b 04 24                   movq    (%r12), %rax
// 2de: 85 c0                         testl   %eax, %eax
// 2e0: 78 28                         js      0x30a <_JIT_ENTRY+0x30a>
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 ff 0c 24                   decq    (%r12)
// 2f2: 75 16                         jne     0x30a <_JIT_ENTRY+0x30a>
// 2f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f6:  R_X86_64_64  PyUnicode_Type
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  _Py_Dealloc
// 308: ff d0                         callq   *%rax
// 30a: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 30f: 48 85 c0                      testq   %rax, %rax
// 312: 74 51                         je      0x365 <_JIT_ENTRY+0x365>
// 314: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 318: 49 83 c7 f8                   addq    $-0x8, %r15
// 31c: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 321: 48 89 01                      movq    %rax, (%rcx)
// 324: 49 8b 46 10                   movq    0x10(%r14), %rax
// 328: 48 8b 00                      movq    (%rax), %rax
// 32b: 84 c0                         testb   %al, %al
// 32d: 74 13                         je      0x342 <_JIT_ENTRY+0x342>
// 32f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000331:  R_X86_64_64  _Py_HandlePending
// 339: 4c 89 f7                      movq    %r14, %rdi
// 33c: ff d0                         callq   *%rax
// 33e: 85 c0                         testl   %eax, %eax
// 340: 75 28                         jne     0x36a <_JIT_ENTRY+0x36a>
// 342: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000344:  R_X86_64_64  _JIT_CONTINUE
// 34c: 48 89 df                      movq    %rbx, %rdi
// 34f: 4c 89 fe                      movq    %r15, %rsi
// 352: 4c 89 f2                      movq    %r14, %rdx
// 355: 48 83 c4 18                   addq    $0x18, %rsp
// 359: 5b                            popq    %rbx
// 35a: 41 5c                         popq    %r12
// 35c: 41 5d                         popq    %r13
// 35e: 41 5e                         popq    %r14
// 360: 41 5f                         popq    %r15
// 362: 5d                            popq    %rbp
// 363: ff e0                         jmpq    *%rax
// 365: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 36a: 49 29 df                      subq    %rbx, %r15
// 36d: 49 83 c7 b8                   addq    $-0x48, %r15
// 371: 49 c1 ef 03                   shrq    $0x3, %r15
// 375: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 379: 31 c0                         xorl    %eax, %eax
// 37b: e9 98 fd ff ff                jmp     0x118 <_JIT_ENTRY+0x118>
// 380: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_STR_1_code_body[897] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc2, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6f, 0xf0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x65, 0x08, 0x0f, 0x85, 0xaa, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x9f, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x8e, 0x92, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4d, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x14, 0x83, 0xfa, 0x01, 0x75, 0x1e, 0xf6, 0xc1, 0x20, 0x75, 0x24, 0x49, 0x8b, 0x4d, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x65, 0xf6, 0xc1, 0x20, 0x75, 0x2f, 0x49, 0x8b, 0x4d, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x56, 0xf6, 0xc1, 0x20, 0x75, 0x3a, 0x49, 0x8b, 0x4d, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x0c, 0x40, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x32, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0x89, 0xcd, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe9, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x2c, 0x0a, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x47, 0xf8, 0x49, 0x89, 0x6f, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x49, 0x83, 0x7c, 0xef, 0xf8, 0x00, 0x0f, 0x85, 0xe9, 0xfe, 0xff, 0xff, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x8d, 0x0c, 0xcf, 0x48, 0x83, 0xc1, 0xf8, 0x4c, 0x39, 0x21, 0x0f, 0x85, 0xce, 0xfe, 0xff, 0xff, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf9, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x69, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x4c, 0x89, 0x2c, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x4c, 0x8b, 0x2c, 0x24, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x51, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x01, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x98, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_STR_1_code_holes[26] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x344, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_STR_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_STR_1_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_TUPLE_1
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_TUPLE_1.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 39                         jbe     0x12b <_JIT_ENTRY+0x12b>
// f2: 4c 89 f8                      movq    %r15, %rax
// f5: 48 29 d8                      subq    %rbx, %rax
// f8: 48 83 c0 b8                   addq    $-0x48, %rax
// fc: 48 c1 e8 03                   shrq    $0x3, %rax
// 100: 89 43 40                      movl    %eax, 0x40(%rbx)
// 103: 48 8b 03                      movq    (%rbx), %rax
// 106: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000108:  R_X86_64_64  _JIT_TARGET
// 110: 89 c9                         movl    %ecx, %ecx
// 112: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 116: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11c: 48 83 c4 08                   addq    $0x8, %rsp
// 120: 5b                            popq    %rbx
// 121: 41 5c                         popq    %r12
// 123: 41 5d                         popq    %r13
// 125: 41 5e                         popq    %r14
// 127: 41 5f                         popq    %r15
// 129: 5d                            popq    %rbp
// 12a: c3                            retq
// 12b: 89 c0                         movl    %eax, %eax
// 12d: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 131: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 136: 75 28                         jne     0x160 <_JIT_ENTRY+0x160>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  PyInterpreterState_Get
// 142: ff d0                         callq   *%rax
// 144: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14b: 49 ff 4d 00                   decq    (%r13)
// 14f: 75 0f                         jne     0x160 <_JIT_ENTRY+0x160>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  PyObject_Free
// 15b: 4c 89 ef                      movq    %r13, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 48 c1 e5 04                   shlq    $0x4, %rbp
// 164: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000166:  R_X86_64_64  _PyRuntime
// 16e: 49 8b 04 24                   movq    (%r12), %rax
// 172: 48 85 c0                      testq   %rax, %rax
// 175: 7f 22                         jg      0x199 <_JIT_ENTRY+0x199>
// 177: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000179:  R_X86_64_64  .rodata.str1.1
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_NegativeRefcount
// 18b: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 190: 4c 89 e2                      movq    %r12, %rdx
// 193: ff d0                         callq   *%rax
// 195: 49 8b 04 24                   movq    (%r12), %rax
// 199: 49 01 ed                      addq    %rbp, %r13
// 19c: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a3: 85 c0                         testl   %eax, %eax
// 1a5: 78 21                         js      0x1c8 <_JIT_ENTRY+0x1c8>
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b1: ff d0                         callq   *%rax
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 0f                         jne     0x1c8 <_JIT_ENTRY+0x1c8>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 49 8d 47 f8                   leaq    -0x8(%r15), %rax
// 1cc: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 1d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d2:  R_X86_64_64  _JIT_OPARG
// 1da: 0f b7 c9                      movzwl  %cx, %ecx
// 1dd: 89 ca                         movl    %ecx, %edx
// 1df: f7 d2                         notl    %edx
// 1e1: 4c 63 e2                      movslq  %edx, %r12
// 1e4: 4b 83 7c e7 f8 00             cmpq    $0x0, -0x8(%r15,%r12,8)
// 1ea: 0f 85 05 ff ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 1f0: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1f5: 29 ca                         subl    %ecx, %edx
// 1f7: 48 63 ca                      movslq  %edx, %rcx
// 1fa: 4d 8d 2c cf                   leaq    (%r15,%rcx,8), %r13
// 1fe: 49 83 c5 f8                   addq    $-0x8, %r13
// 202: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000204:  R_X86_64_64  PyTuple_Type
// 20c: 49 39 4d 00                   cmpq    %rcx, (%r13)
// 210: 0f 85 df fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _JIT_OPARG
// 220: 0f b7 c0                      movzwl  %ax, %eax
// 223: 48 c1 e0 03                   shlq    $0x3, %rax
// 227: 4c 89 f9                      movq    %r15, %rcx
// 22a: 48 29 c1                      subq    %rax, %rcx
// 22d: 48 8b 69 f8                   movq    -0x8(%rcx), %rbp
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  PySequence_Tuple
// 23b: 48 89 ef                      movq    %rbp, %rdi
// 23e: ff d0                         callq   *%rax
// 240: 48 89 04 24                   movq    %rax, (%rsp)
// 244: 48 8b 45 00                   movq    (%rbp), %rax
// 248: 48 85 c0                      testq   %rax, %rax
// 24b: 7f 22                         jg      0x26f <_JIT_ENTRY+0x26f>
// 24d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024f:  R_X86_64_64  .rodata.str1.1
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_NegativeRefcount
// 261: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// 266: 48 89 ea                      movq    %rbp, %rdx
// 269: ff d0                         callq   *%rax
// 26b: 48 8b 45 00                   movq    (%rbp), %rax
// 26f: 85 c0                         testl   %eax, %eax
// 271: 78 21                         js      0x294 <_JIT_ENTRY+0x294>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27d: ff d0                         callq   *%rax
// 27f: 48 ff 4d 00                   decq    (%rbp)
// 283: 75 0f                         jne     0x294 <_JIT_ENTRY+0x294>
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_Dealloc
// 28f: 48 89 ef                      movq    %rbp, %rdi
// 292: ff d0                         callq   *%rax
// 294: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000296:  R_X86_64_64  PyTuple_Type
// 29e: 48 8b 45 00                   movq    (%rbp), %rax
// 2a2: 48 85 c0                      testq   %rax, %rax
// 2a5: 7f 22                         jg      0x2c9 <_JIT_ENTRY+0x2c9>
// 2a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a9:  R_X86_64_64  .rodata.str1.1
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_NegativeRefcount
// 2bb: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 2c0: 48 89 ea                      movq    %rbp, %rdx
// 2c3: ff d0                         callq   *%rax
// 2c5: 48 8b 45 00                   movq    (%rbp), %rax
// 2c9: 85 c0                         testl   %eax, %eax
// 2cb: 78 28                         js      0x2f5 <_JIT_ENTRY+0x2f5>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d7: ff d0                         callq   *%rax
// 2d9: 48 ff 4d 00                   decq    (%rbp)
// 2dd: 75 16                         jne     0x2f5 <_JIT_ENTRY+0x2f5>
// 2df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e1:  R_X86_64_64  PyTuple_Type
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _Py_Dealloc
// 2f3: ff d0                         callq   *%rax
// 2f5: 48 8b 04 24                   movq    (%rsp), %rax
// 2f9: 48 85 c0                      testq   %rax, %rax
// 2fc: 74 2d                         je      0x32b <_JIT_ENTRY+0x32b>
// 2fe: 4f 8d 3c e7                   leaq    (%r15,%r12,8), %r15
// 302: 49 83 c7 f8                   addq    $-0x8, %r15
// 306: 49 89 45 00                   movq    %rax, (%r13)
// 30a: 49 8b 46 10                   movq    0x10(%r14), %rax
// 30e: 48 8b 00                      movq    (%rax), %rax
// 311: 84 c0                         testb   %al, %al
// 313: 74 2c                         je      0x341 <_JIT_ENTRY+0x341>
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _Py_HandlePending
// 31f: 4c 89 f7                      movq    %r14, %rdi
// 322: ff d0                         callq   *%rax
// 324: 85 c0                         testl   %eax, %eax
// 326: 74 19                         je      0x341 <_JIT_ENTRY+0x341>
// 328: 4d 89 fd                      movq    %r15, %r13
// 32b: 49 29 dd                      subq    %rbx, %r13
// 32e: 49 83 c5 b8                   addq    $-0x48, %r13
// 332: 49 c1 ed 03                   shrq    $0x3, %r13
// 336: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 33a: 31 c0                         xorl    %eax, %eax
// 33c: e9 db fd ff ff                jmp     0x11c <_JIT_ENTRY+0x11c>
// 341: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000343:  R_X86_64_64  _JIT_CONTINUE
// 34b: 48 89 df                      movq    %rbx, %rdi
// 34e: 4c 89 fe                      movq    %r15, %rsi
// 351: 4c 89 f2                      movq    %r14, %rdx
// 354: 48 83 c4 08                   addq    $0x8, %rsp
// 358: 5b                            popq    %rbx
// 359: 41 5c                         popq    %r12
// 35b: 41 5d                         popq    %r13
// 35d: 41 5e                         popq    %r14
// 35f: 41 5f                         popq    %r15
// 361: 5d                            popq    %rbp
// 362: ff e0                         jmpq    *%rax
// 364: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_TUPLE_1_code_body[869] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x47, 0xf8, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x4b, 0x83, 0x7c, 0xe7, 0xf8, 0x00, 0x0f, 0x85, 0x05, 0xff, 0xff, 0xff, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4d, 0x8d, 0x2c, 0xcf, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x00, 0x0f, 0x85, 0xdf, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf9, 0x48, 0x29, 0xc1, 0x48, 0x8b, 0x69, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x2d, 0x4f, 0x8d, 0x3c, 0xe7, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0x89, 0x45, 0x00, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x19, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xdb, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_TUPLE_1_code_holes[27] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x343, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_TUPLE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_TUPLE_1_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CALL_TYPE_1
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CALL_TYPE_1.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 39                         jbe     0x12b <_JIT_ENTRY+0x12b>
// f2: 4c 89 f0                      movq    %r14, %rax
// f5: 48 29 d8                      subq    %rbx, %rax
// f8: 48 83 c0 b8                   addq    $-0x48, %rax
// fc: 48 c1 e8 03                   shrq    $0x3, %rax
// 100: 89 43 40                      movl    %eax, 0x40(%rbx)
// 103: 48 8b 03                      movq    (%rbx), %rax
// 106: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000108:  R_X86_64_64  _JIT_TARGET
// 110: 89 c9                         movl    %ecx, %ecx
// 112: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 116: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11c: 48 83 c4 08                   addq    $0x8, %rsp
// 120: 5b                            popq    %rbx
// 121: 41 5c                         popq    %r12
// 123: 41 5d                         popq    %r13
// 125: 41 5e                         popq    %r14
// 127: 41 5f                         popq    %r15
// 129: 5d                            popq    %rbp
// 12a: c3                            retq
// 12b: 89 c0                         movl    %eax, %eax
// 12d: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 131: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 136: 75 28                         jne     0x160 <_JIT_ENTRY+0x160>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  PyInterpreterState_Get
// 142: ff d0                         callq   *%rax
// 144: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14b: 49 ff 4d 00                   decq    (%r13)
// 14f: 75 0f                         jne     0x160 <_JIT_ENTRY+0x160>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  PyObject_Free
// 15b: 4c 89 ef                      movq    %r13, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 48 c1 e5 04                   shlq    $0x4, %rbp
// 164: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000166:  R_X86_64_64  _PyRuntime
// 16e: 49 8b 04 24                   movq    (%r12), %rax
// 172: 48 85 c0                      testq   %rax, %rax
// 175: 7f 22                         jg      0x199 <_JIT_ENTRY+0x199>
// 177: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000179:  R_X86_64_64  .rodata.str1.1
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_NegativeRefcount
// 18b: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 190: 4c 89 e2                      movq    %r12, %rdx
// 193: ff d0                         callq   *%rax
// 195: 49 8b 04 24                   movq    (%r12), %rax
// 199: 49 01 ed                      addq    %rbp, %r13
// 19c: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a3: 85 c0                         testl   %eax, %eax
// 1a5: 78 21                         js      0x1c8 <_JIT_ENTRY+0x1c8>
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b1: ff d0                         callq   *%rax
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 0f                         jne     0x1c8 <_JIT_ENTRY+0x1c8>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 1cc: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d2:  R_X86_64_64  _JIT_OPARG
// 1da: f7 d1                         notl    %ecx
// 1dc: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1e2: 48 63 e9                      movslq  %ecx, %rbp
// 1e5: 49 83 7c ee f8 00             cmpq    $0x0, -0x8(%r14,%rbp,8)
// 1eb: 0f 85 04 ff ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 1f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f3:  R_X86_64_64  _JIT_OPARG
// 1fb: 0f b7 c9                      movzwl  %cx, %ecx
// 1fe: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 203: 29 ca                         subl    %ecx, %edx
// 205: 48 63 ca                      movslq  %edx, %rcx
// 208: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000020a:  R_X86_64_64  PyType_Type
// 212: 4d 39 64 ce f8                cmpq    %r12, -0x8(%r14,%rcx,8)
// 217: 0f 85 d8 fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _JIT_OPARG
// 227: 0f b7 c0                      movzwl  %ax, %eax
// 22a: 48 c1 e0 03                   shlq    $0x3, %rax
// 22e: 4c 89 f1                      movq    %r14, %rcx
// 231: 48 29 c1                      subq    %rax, %rcx
// 234: 4c 8b 69 f8                   movq    -0x8(%rcx), %r13
// 238: 49 8b 45 08                   movq    0x8(%r13), %rax
// 23c: 48 89 04 24                   movq    %rax, (%rsp)
// 240: 8b 00                         movl    (%rax), %eax
// 242: ff c0                         incl    %eax
// 244: 75 0f                         jne     0x255 <_JIT_ENTRY+0x255>
// 246: 49 8b 45 00                   movq    (%r13), %rax
// 24a: 48 85 c0                      testq   %rax, %rax
// 24d: 7e 21                         jle     0x270 <_JIT_ENTRY+0x270>
// 24f: 85 c0                         testl   %eax, %eax
// 251: 79 43                         jns     0x296 <_JIT_ENTRY+0x296>
// 253: eb 62                         jmp     0x2b7 <_JIT_ENTRY+0x2b7>
// 255: 48 8b 0c 24                   movq    (%rsp), %rcx
// 259: 89 01                         movl    %eax, (%rcx)
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 265: ff d0                         callq   *%rax
// 267: 49 8b 45 00                   movq    (%r13), %rax
// 26b: 48 85 c0                      testq   %rax, %rax
// 26e: 7f df                         jg      0x24f <_JIT_ENTRY+0x24f>
// 270: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000272:  R_X86_64_64  .rodata.str1.1
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _Py_NegativeRefcount
// 284: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 289: 4c 89 ea                      movq    %r13, %rdx
// 28c: ff d0                         callq   *%rax
// 28e: 49 8b 45 00                   movq    (%r13), %rax
// 292: 85 c0                         testl   %eax, %eax
// 294: 78 21                         js      0x2b7 <_JIT_ENTRY+0x2b7>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 ff 4d 00                   decq    (%r13)
// 2a6: 75 0f                         jne     0x2b7 <_JIT_ENTRY+0x2b7>
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_Dealloc
// 2b2: 4c 89 ef                      movq    %r13, %rdi
// 2b5: ff d0                         callq   *%rax
// 2b7: 49 8b 04 24                   movq    (%r12), %rax
// 2bb: 48 85 c0                      testq   %rax, %rax
// 2be: 7f 22                         jg      0x2e2 <_JIT_ENTRY+0x2e2>
// 2c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_NegativeRefcount
// 2d4: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 2d9: 4c 89 e2                      movq    %r12, %rdx
// 2dc: ff d0                         callq   *%rax
// 2de: 49 8b 04 24                   movq    (%r12), %rax
// 2e2: 4d 8d 2c ee                   leaq    (%r14,%rbp,8), %r13
// 2e6: 49 83 c5 f8                   addq    $-0x8, %r13
// 2ea: 85 c0                         testl   %eax, %eax
// 2ec: 78 28                         js      0x316 <_JIT_ENTRY+0x316>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f8: ff d0                         callq   *%rax
// 2fa: 49 ff 0c 24                   decq    (%r12)
// 2fe: 75 16                         jne     0x316 <_JIT_ENTRY+0x316>
// 300: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000302:  R_X86_64_64  PyType_Type
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _Py_Dealloc
// 314: ff d0                         callq   *%rax
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  _JIT_OPARG
// 320: 0f b7 c0                      movzwl  %ax, %eax
// 323: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 328: 29 c1                         subl    %eax, %ecx
// 32a: 48 63 c1                      movslq  %ecx, %rax
// 32d: 48 8b 0c 24                   movq    (%rsp), %rcx
// 331: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 336: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000338:  R_X86_64_64  _JIT_CONTINUE
// 340: 48 89 df                      movq    %rbx, %rdi
// 343: 4c 89 ee                      movq    %r13, %rsi
// 346: 4c 89 fa                      movq    %r15, %rdx
// 349: 48 83 c4 08                   addq    $0x8, %rsp
// 34d: 5b                            popq    %rbx
// 34e: 41 5c                         popq    %r12
// 350: 41 5d                         popq    %r13
// 352: 41 5e                         popq    %r14
// 354: 41 5f                         popq    %r15
// 356: 5d                            popq    %rbp
// 357: ff e0                         jmpq    *%rax
// 359: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_TYPE_1_code_body[858] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe9, 0x49, 0x83, 0x7c, 0xee, 0xf8, 0x00, 0x0f, 0x85, 0x04, 0xff, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x64, 0xce, 0xf8, 0x0f, 0x85, 0xd8, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x69, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x89, 0x04, 0x24, 0x8b, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x85, 0xc0, 0x79, 0x43, 0xeb, 0x62, 0x48, 0x8b, 0x0c, 0x24, 0x89, 0x01, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xee, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_TYPE_1_code_holes[27] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x338, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CALL_TYPE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CALL_TYPE_1_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_CLASS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_CLASS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 b5 01 00 00             jne     0x1de <_JIT_ENTRY+0x1de>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 9c 01 00 00             jne     0x1de <_JIT_ENTRY+0x1de>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 91 01 00 00             ja      0x1de <_JIT_ENTRY+0x1de>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 82 01 00 00             jle     0x1de <_JIT_ENTRY+0x1de>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 e8 00 00 00             ja      0x1de <_JIT_ENTRY+0x1de>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 49 8b 45 08                   movq    0x8(%r13), %rax
// 19f: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 1a6: 74 36                         je      0x1de <_JIT_ENTRY+0x1de>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _JIT_OPERAND
// 1b2: 41 39 85 80 01 00 00          cmpl    %eax, 0x180(%r13)
// 1b9: 75 23                         jne     0x1de <_JIT_ENTRY+0x1de>
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _JIT_CONTINUE
// 1c5: 4c 89 f7                      movq    %r14, %rdi
// 1c8: 48 89 de                      movq    %rbx, %rsi
// 1cb: 4c 89 fa                      movq    %r15, %rdx
// 1ce: 48 83 c4 08                   addq    $0x8, %rsp
// 1d2: 5b                            popq    %rbx
// 1d3: 41 5c                         popq    %r12
// 1d5: 41 5d                         popq    %r13
// 1d7: 41 5e                         popq    %r14
// 1d9: 41 5f                         popq    %r15
// 1db: 5d                            popq    %rbp
// 1dc: ff e0                         jmpq    *%rax
// 1de: 4c 29 f3                      subq    %r14, %rbx
// 1e1: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1e5: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1e9: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1ed: 49 8b 06                      movq    (%r14), %rax
// 1f0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f2:  R_X86_64_64  _JIT_TARGET
// 1fa: 89 c9                         movl    %ecx, %ecx
// 1fc: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 200: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 206: 48 83 c4 08                   addq    $0x8, %rsp
// 20a: 5b                            popq    %rbx
// 20b: 41 5c                         popq    %r12
// 20d: 41 5d                         popq    %r13
// 20f: 41 5e                         popq    %r14
// 211: 41 5f                         popq    %r15
// 213: 5d                            popq    %rbp
// 214: c3                            retq
// 215: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_CLASS_code_body[534] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x9c, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x91, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x82, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xe8, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x39, 0x85, 0x80, 0x01, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_CLASS_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_CLASS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_METHOD_LAZY_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 85 01 00 00             jne     0x1ae <_JIT_ENTRY+0x1ae>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 6c 01 00 00             jne     0x1ae <_JIT_ENTRY+0x1ae>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 61 01 00 00             ja      0x1ae <_JIT_ENTRY+0x1ae>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 52 01 00 00             jle     0x1ae <_JIT_ENTRY+0x1ae>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 b8 00 00 00             ja      0x1ae <_JIT_ENTRY+0x1ae>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 49 8b 45 08                   movq    0x8(%r13), %rax
// 19f: 48 8b 80 20 01 00 00          movq    0x120(%rax), %rax
// 1a6: 49 83 7c 05 00 00             cmpq    $0x0, (%r13,%rax)
// 1ac: 74 37                         je      0x1e5 <_JIT_ENTRY+0x1e5>
// 1ae: 4c 29 f3                      subq    %r14, %rbx
// 1b1: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b5: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b9: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1bd: 49 8b 06                      movq    (%r14), %rax
// 1c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c2:  R_X86_64_64  _JIT_TARGET
// 1ca: 89 c9                         movl    %ecx, %ecx
// 1cc: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d6: 48 83 c4 08                   addq    $0x8, %rsp
// 1da: 5b                            popq    %rbx
// 1db: 41 5c                         popq    %r12
// 1dd: 41 5d                         popq    %r13
// 1df: 41 5e                         popq    %r14
// 1e1: 41 5f                         popq    %r15
// 1e3: 5d                            popq    %rbp
// 1e4: c3                            retq
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_CONTINUE
// 1ef: 4c 89 f7                      movq    %r14, %rdi
// 1f2: 48 89 de                      movq    %rbx, %rsi
// 1f5: 4c 89 fa                      movq    %r15, %rdx
// 1f8: 48 83 c4 08                   addq    $0x8, %rsp
// 1fc: 5b                            popq    %rbx
// 1fd: 41 5c                         popq    %r12
// 1ff: 41 5d                         popq    %r13
// 201: 41 5e                         popq    %r14
// 203: 41 5f                         popq    %r15
// 205: 5d                            popq    %rbp
// 206: ff e0                         jmpq    *%rax
// 208: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x85, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x6c, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x61, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x52, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xb8, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x80, 0x20, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7c, 0x05, 0x00, 0x00, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_MODULE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_MODULE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 bc 01 00 00             jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 a3 01 00 00             jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 98 01 00 00             ja      0x1e5 <_JIT_ENTRY+0x1e5>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 89 01 00 00             jle     0x1e5 <_JIT_ENTRY+0x1e5>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 ef 00 00 00             ja      0x1e5 <_JIT_ENTRY+0x1e5>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  PyModule_Type
// 1a5: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1a9: 75 3a                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 1ab: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1af: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b5:  R_X86_64_64  _JIT_OPERAND
// 1bd: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1c0: 75 23                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _JIT_CONTINUE
// 1cc: 4c 89 f7                      movq    %r14, %rdi
// 1cf: 48 89 de                      movq    %rbx, %rsi
// 1d2: 4c 89 fa                      movq    %r15, %rdx
// 1d5: 48 83 c4 08                   addq    $0x8, %rsp
// 1d9: 5b                            popq    %rbx
// 1da: 41 5c                         popq    %r12
// 1dc: 41 5d                         popq    %r13
// 1de: 41 5e                         popq    %r14
// 1e0: 41 5f                         popq    %r15
// 1e2: 5d                            popq    %rbp
// 1e3: ff e0                         jmpq    *%rax
// 1e5: 4c 29 f3                      subq    %r14, %rbx
// 1e8: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ec: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1f0: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1f4: 49 8b 06                      movq    (%r14), %rax
// 1f7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f9:  R_X86_64_64  _JIT_TARGET
// 201: 89 c9                         movl    %ecx, %ecx
// 203: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 207: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 20d: 48 83 c4 08                   addq    $0x8, %rsp
// 211: 5b                            popq    %rbx
// 212: 41 5c                         popq    %r12
// 214: 41 5d                         popq    %r13
// 216: 41 5e                         popq    %r14
// 218: 41 5f                         popq    %r15
// 21a: 5d                            popq    %rbp
// 21b: c3                            retq
// 21c: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_MODULE_code_body[541] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xbc, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xa3, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x98, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x89, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xef, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x75, 0x3a, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_MODULE_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_MODULE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_WITH_HINT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1ce: 49 8b 45 e8                   movq    -0x18(%r13), %rax
// 1d2: a8 01                         testb   $0x1, %al
// 1d4: 0f 85 18 ff ff ff             jne     0xf2 <_JIT_ENTRY+0xf2>
// 1da: 48 85 c0                      testq   %rax, %rax
// 1dd: 0f 84 0f ff ff ff             je      0xf2 <_JIT_ENTRY+0xf2>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _JIT_CONTINUE
// 1ed: 4c 89 f7                      movq    %r14, %rdi
// 1f0: 48 89 de                      movq    %rbx, %rsi
// 1f3: 4c 89 fa                      movq    %r15, %rdx
// 1f6: 48 83 c4 08                   addq    $0x8, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: ff e0                         jmpq    *%rax
// 206: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_WITH_HINT_code_body[519] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x45, 0xe8, 0xa8, 0x01, 0x0f, 0x85, 0x18, 0xff, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x0f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_WITH_HINT_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 bc 01 00 00             jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 a3 01 00 00             jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 98 01 00 00             ja      0x1e5 <_JIT_ENTRY+0x1e5>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 89 01 00 00             jle     0x1e5 <_JIT_ENTRY+0x1e5>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 ef 00 00 00             ja      0x1e5 <_JIT_ENTRY+0x1e5>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 197: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: f7 d0                         notl    %eax
// 1a7: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ac: 48 98                         cltq
// 1ae: 49 83 7c c6 f8 00             cmpq    $0x0, -0x8(%r14,%rax,8)
// 1b4: 75 2c                         jne     0x1e2 <_JIT_ENTRY+0x1e2>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _JIT_OPARG
// 1c0: 0f b7 c0                      movzwl  %ax, %eax
// 1c3: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1c8: 29 c1                         subl    %eax, %ecx
// 1ca: 48 63 c1                      movslq  %ecx, %rax
// 1cd: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1d2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d4:  R_X86_64_64  PyMethod_Type
// 1dc: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1e0: 74 3a                         je      0x21c <_JIT_ENTRY+0x21c>
// 1e2: 49 89 f6                      movq    %rsi, %r14
// 1e5: 49 29 de                      subq    %rbx, %r14
// 1e8: 49 83 c6 b8                   addq    $-0x48, %r14
// 1ec: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f0: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1f4: 48 8b 03                      movq    (%rbx), %rax
// 1f7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f9:  R_X86_64_64  _JIT_TARGET
// 201: 89 c9                         movl    %ecx, %ecx
// 203: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 207: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 20d: 48 83 c4 08                   addq    $0x8, %rsp
// 211: 5b                            popq    %rbx
// 212: 41 5c                         popq    %r12
// 214: 41 5d                         popq    %r13
// 216: 41 5e                         popq    %r14
// 218: 41 5f                         popq    %r15
// 21a: 5d                            popq    %rbp
// 21b: c3                            retq
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _JIT_CONTINUE
// 226: 48 89 df                      movq    %rbx, %rdi
// 229: 4c 89 fa                      movq    %r15, %rdx
// 22c: 48 83 c4 08                   addq    $0x8, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: ff e0                         jmpq    *%rax
// 23c: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[573] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xbc, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xa3, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x98, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x89, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xef, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x83, 0x7c, 0xc6, 0xf8, 0x00, 0x75, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x3a, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[15] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CHECK_EG_MATCH
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CHECK_EG_MATCH.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 27: 0f 85 c5 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 2d: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  PyUnicode_Type
// 3b: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 3f: 0f 85 ad 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 45: 49 83 7c 24 10 08             cmpq    $0x8, 0x10(%r12)
// 4b: 0f 87 a1 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 51: 41 8b 44 24 18                movl    0x18(%r12), %eax
// 56: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 5a: 0f 8e 92 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 60: 49 89 d7                      movq    %rdx, %r15
// 63: 41 8b 4d 20                   movl    0x20(%r13), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 14                         je      0x88 <_JIT_ENTRY+0x88>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 1e                         jne     0x97 <_JIT_ENTRY+0x97>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 24                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7e: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// 82: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 86: eb 65                         jmp     0xed <_JIT_ENTRY+0xed>
// 88: f6 c1 20                      testb   $0x20, %cl
// 8b: 75 2f                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8d: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// 91: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 95: eb 56                         jmp     0xed <_JIT_ENTRY+0xed>
// 97: f6 c1 20                      testb   $0x20, %cl
// 9a: 75 3a                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9c: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 18                   addq    $0x18, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 135: 75 28                         jne     0x15f <_JIT_ENTRY+0x15f>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyInterpreterState_Get
// 141: ff d0                         callq   *%rax
// 143: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14a: 49 ff 0c 24                   decq    (%r12)
// 14e: 75 0f                         jne     0x15f <_JIT_ENTRY+0x15f>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  PyObject_Free
// 15a: 4c 89 e7                      movq    %r12, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 48 c1 e5 04                   shlq    $0x4, %rbp
// 163: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000165:  R_X86_64_64  _PyRuntime
// 16d: 49 8b 45 00                   movq    (%r13), %rax
// 171: 48 85 c0                      testq   %rax, %rax
// 174: 7f 22                         jg      0x198 <_JIT_ENTRY+0x198>
// 176: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000178:  R_X86_64_64  .rodata.str1.1
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_NegativeRefcount
// 18a: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18f: 4c 89 ea                      movq    %r13, %rdx
// 192: ff d0                         callq   *%rax
// 194: 49 8b 45 00                   movq    (%r13), %rax
// 198: 49 01 ec                      addq    %rbp, %r12
// 19b: 49 81 c4 a0 32 01 00          addq    $0x132a0, %r12          # imm = 0x132A0
// 1a2: 85 c0                         testl   %eax, %eax
// 1a4: 78 21                         js      0x1c7 <_JIT_ENTRY+0x1c7>
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b0: ff d0                         callq   *%rax
// 1b2: 49 ff 4d 00                   decq    (%r13)
// 1b6: 75 0f                         jne     0x1c7 <_JIT_ENTRY+0x1c7>
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _Py_Dealloc
// 1c2: 4c 89 ef                      movq    %r13, %rdi
// 1c5: ff d0                         callq   *%rax
// 1c7: 4d 89 66 f0                   movq    %r12, -0x10(%r14)
// 1cb: 4d 8b 6e e8                   movq    -0x18(%r14), %r13
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 1d9: 4c 89 ff                      movq    %r15, %rdi
// 1dc: 4c 89 e6                      movq    %r12, %rsi
// 1df: ff d0                         callq   *%rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 0f 88 3a 01 00 00             js      0x323 <_JIT_ENTRY+0x323>
// 1e9: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 1f2: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 205: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 20a: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 20f: 4c 89 ef                      movq    %r13, %rdi
// 212: 4c 89 e6                      movq    %r12, %rsi
// 215: ff d0                         callq   *%rax
// 217: 89 c5                         movl    %eax, %ebp
// 219: 49 8b 45 00                   movq    (%r13), %rax
// 21d: 48 85 c0                      testq   %rax, %rax
// 220: 7f 22                         jg      0x244 <_JIT_ENTRY+0x244>
// 222: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000224:  R_X86_64_64  .rodata.str1.1
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_NegativeRefcount
// 236: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 23b: 4c 89 ea                      movq    %r13, %rdx
// 23e: ff d0                         callq   *%rax
// 240: 49 8b 45 00                   movq    (%r13), %rax
// 244: 85 c0                         testl   %eax, %eax
// 246: 78 21                         js      0x269 <_JIT_ENTRY+0x269>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 252: ff d0                         callq   *%rax
// 254: 49 ff 4d 00                   decq    (%r13)
// 258: 75 0f                         jne     0x269 <_JIT_ENTRY+0x269>
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_Dealloc
// 264: 4c 89 ef                      movq    %r13, %rdi
// 267: ff d0                         callq   *%rax
// 269: 49 8b 04 24                   movq    (%r12), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 7f 22                         jg      0x294 <_JIT_ENTRY+0x294>
// 272: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000274:  R_X86_64_64  .rodata.str1.1
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_NegativeRefcount
// 286: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 28b: 4c 89 e2                      movq    %r12, %rdx
// 28e: ff d0                         callq   *%rax
// 290: 49 8b 04 24                   movq    (%r12), %rax
// 294: 85 c0                         testl   %eax, %eax
// 296: 78 21                         js      0x2b9 <_JIT_ENTRY+0x2b9>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 ff 0c 24                   decq    (%r12)
// 2a8: 75 0f                         jne     0x2b9 <_JIT_ENTRY+0x2b9>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_Dealloc
// 2b4: 4c 89 e7                      movq    %r12, %rdi
// 2b7: ff d0                         callq   *%rax
// 2b9: 85 ed                         testl   %ebp, %ebp
// 2bb: 0f 88 02 01 00 00             js      0x3c3 <_JIT_ENTRY+0x3c3>
// 2c1: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2c6: 48 85 ff                      testq   %rdi, %rdi
// 2c9: 0f 84 f4 00 00 00             je      0x3c3 <_JIT_ENTRY+0x3c3>
// 2cf: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _Py_NoneStruct
// 2dd: 48 39 c7                      cmpq    %rax, %rdi
// 2e0: 74 11                         je      0x2f3 <_JIT_ENTRY+0x2f3>
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  PyErr_SetHandledException
// 2ec: ff d0                         callq   *%rax
// 2ee: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2f3: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 2f8: 49 89 4e e8                   movq    %rcx, -0x18(%r14)
// 2fc: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _JIT_CONTINUE
// 30a: 48 89 df                      movq    %rbx, %rdi
// 30d: 4c 89 e6                      movq    %r12, %rsi
// 310: 4c 89 fa                      movq    %r15, %rdx
// 313: 48 83 c4 18                   addq    $0x18, %rsp
// 317: 5b                            popq    %rbx
// 318: 41 5c                         popq    %r12
// 31a: 41 5d                         popq    %r13
// 31c: 41 5e                         popq    %r14
// 31e: 41 5f                         popq    %r15
// 320: 5d                            popq    %rbp
// 321: ff e0                         jmpq    *%rax
// 323: 49 8b 45 00                   movq    (%r13), %rax
// 327: 48 85 c0                      testq   %rax, %rax
// 32a: 7f 22                         jg      0x34e <_JIT_ENTRY+0x34e>
// 32c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000032e:  R_X86_64_64  .rodata.str1.1
// 336: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000338:  R_X86_64_64  _Py_NegativeRefcount
// 340: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 345: 4c 89 ea                      movq    %r13, %rdx
// 348: ff d0                         callq   *%rax
// 34a: 49 8b 45 00                   movq    (%r13), %rax
// 34e: 85 c0                         testl   %eax, %eax
// 350: 78 21                         js      0x373 <_JIT_ENTRY+0x373>
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 35c: ff d0                         callq   *%rax
// 35e: 49 ff 4d 00                   decq    (%r13)
// 362: 75 0f                         jne     0x373 <_JIT_ENTRY+0x373>
// 364: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000366:  R_X86_64_64  _Py_Dealloc
// 36e: 4c 89 ef                      movq    %r13, %rdi
// 371: ff d0                         callq   *%rax
// 373: 49 8b 04 24                   movq    (%r12), %rax
// 377: 48 85 c0                      testq   %rax, %rax
// 37a: 7f 22                         jg      0x39e <_JIT_ENTRY+0x39e>
// 37c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000037e:  R_X86_64_64  .rodata.str1.1
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _Py_NegativeRefcount
// 390: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 395: 4c 89 e2                      movq    %r12, %rdx
// 398: ff d0                         callq   *%rax
// 39a: 49 8b 04 24                   movq    (%r12), %rax
// 39e: 85 c0                         testl   %eax, %eax
// 3a0: 78 21                         js      0x3c3 <_JIT_ENTRY+0x3c3>
// 3a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ac: ff d0                         callq   *%rax
// 3ae: 49 ff 0c 24                   decq    (%r12)
// 3b2: 75 0f                         jne     0x3c3 <_JIT_ENTRY+0x3c3>
// 3b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b6:  R_X86_64_64  _Py_Dealloc
// 3be: 4c 89 e7                      movq    %r12, %rdi
// 3c1: ff d0                         callq   *%rax
// 3c3: 49 83 c6 e8                   addq    $-0x18, %r14
// 3c7: 49 29 de                      subq    %rbx, %r14
// 3ca: 49 83 c6 b8                   addq    $-0x48, %r14
// 3ce: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d2: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3d6: 31 c0                         xorl    %eax, %eax
// 3d8: e9 3d fd ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 3dd: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_EG_MATCH_code_body[990] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xc5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xad, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x08, 0x0f, 0x87, 0xa1, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x8e, 0x92, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4d, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x14, 0x83, 0xfa, 0x01, 0x75, 0x1e, 0xf6, 0xc1, 0x20, 0x75, 0x24, 0x49, 0x8b, 0x4d, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x65, 0xf6, 0xc1, 0x20, 0x75, 0x2f, 0x49, 0x8b, 0x4d, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x56, 0xf6, 0xc1, 0x20, 0x75, 0x3a, 0x49, 0x8b, 0x4d, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x01, 0xec, 0x49, 0x81, 0xc4, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0x66, 0xf0, 0x4d, 0x8b, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x3a, 0x01, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x88, 0x02, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf4, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x89, 0x4e, 0xe8, 0x49, 0x89, 0x46, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x3d, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_EG_MATCH_code_holes[32] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x32e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x338, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_EG_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_EG_MATCH_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CHECK_EXC_MATCH
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CHECK_EXC_MATCH.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 49 8d 6e f0                   leaq    -0x10(%r14), %rbp
// 1ca: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ce: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 1dc: 4c 89 ff                      movq    %r15, %rdi
// 1df: 4c 89 ee                      movq    %r13, %rsi
// 1e2: ff d0                         callq   *%rax
// 1e4: 85 c0                         testl   %eax, %eax
// 1e6: 0f 88 ab 00 00 00             js      0x297 <_JIT_ENTRY+0x297>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  PyErr_GivenExceptionMatches
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: 4c 89 ee                      movq    %r13, %rsi
// 1fc: ff d0                         callq   *%rax
// 1fe: 41 89 c4                      movl    %eax, %r12d
// 201: 49 8b 45 00                   movq    (%r13), %rax
// 205: 48 85 c0                      testq   %rax, %rax
// 208: 7f 22                         jg      0x22c <_JIT_ENTRY+0x22c>
// 20a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020c:  R_X86_64_64  .rodata.str1.1
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_NegativeRefcount
// 21e: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 223: 4c 89 ea                      movq    %r13, %rdx
// 226: ff d0                         callq   *%rax
// 228: 49 8b 45 00                   movq    (%r13), %rax
// 22c: 49 83 c6 f8                   addq    $-0x8, %r14
// 230: 85 c0                         testl   %eax, %eax
// 232: 78 21                         js      0x255 <_JIT_ENTRY+0x255>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23e: ff d0                         callq   *%rax
// 240: 49 ff 4d 00                   decq    (%r13)
// 244: 75 0f                         jne     0x255 <_JIT_ENTRY+0x255>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_Dealloc
// 250: 4c 89 ef                      movq    %r13, %rdi
// 253: ff d0                         callq   *%rax
// 255: 45 85 e4                      testl   %r12d, %r12d
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_FalseStruct
// 262: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000264:  R_X86_64_64  _Py_TrueStruct
// 26c: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 270: 48 89 4d 00                   movq    %rcx, (%rbp)
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _JIT_CONTINUE
// 27e: 48 89 df                      movq    %rbx, %rdi
// 281: 4c 89 f6                      movq    %r14, %rsi
// 284: 4c 89 fa                      movq    %r15, %rdx
// 287: 48 83 c4 08                   addq    $0x8, %rsp
// 28b: 5b                            popq    %rbx
// 28c: 41 5c                         popq    %r12
// 28e: 41 5d                         popq    %r13
// 290: 41 5e                         popq    %r14
// 292: 41 5f                         popq    %r15
// 294: 5d                            popq    %rbp
// 295: ff e0                         jmpq    *%rax
// 297: 49 8b 45 00                   movq    (%r13), %rax
// 29b: 48 85 c0                      testq   %rax, %rax
// 29e: 7f 22                         jg      0x2c2 <_JIT_ENTRY+0x2c2>
// 2a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a2:  R_X86_64_64  .rodata.str1.1
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_NegativeRefcount
// 2b4: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 2b9: 4c 89 ea                      movq    %r13, %rdx
// 2bc: ff d0                         callq   *%rax
// 2be: 49 8b 45 00                   movq    (%r13), %rax
// 2c2: 85 c0                         testl   %eax, %eax
// 2c4: 78 21                         js      0x2e7 <_JIT_ENTRY+0x2e7>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 ff 4d 00                   decq    (%r13)
// 2d6: 75 0f                         jne     0x2e7 <_JIT_ENTRY+0x2e7>
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _Py_Dealloc
// 2e2: 4c 89 ef                      movq    %r13, %rdi
// 2e5: ff d0                         callq   *%rax
// 2e7: 48 29 dd                      subq    %rbx, %rbp
// 2ea: 48 83 c5 b8                   addq    $-0x48, %rbp
// 2ee: 48 c1 ed 03                   shrq    $0x3, %rbp
// 2f2: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 2f5: 31 c0                         xorl    %eax, %eax
// 2f7: e9 1e fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2fc: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_EXC_MATCH_code_body[765] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x6e, 0xf0, 0x4d, 0x89, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xab, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x41, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xe4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x1e, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_EXC_MATCH_code_holes[24] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_EXC_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_EXC_MATCH_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CHECK_FUNCTION_EXACT_ARGS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 f6 01 00 00             jne     0x21f <_JIT_ENTRY+0x21f>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 dd 01 00 00             jne     0x21f <_JIT_ENTRY+0x21f>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 d2 01 00 00             ja      0x21f <_JIT_ENTRY+0x21f>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e c3 01 00 00             jle     0x21f <_JIT_ENTRY+0x21f>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 29 01 00 00             ja      0x21f <_JIT_ENTRY+0x21f>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 197: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 1b7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001b9:  R_X86_64_64  PyFunction_Type
// 1c1: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 1c5: 75 55                         jne     0x21c <_JIT_ENTRY+0x21c>
// 1c7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c9:  R_X86_64_64  _JIT_OPERAND
// 1d1: 39 91 88 00 00 00             cmpl    %edx, 0x88(%rcx)
// 1d7: 75 43                         jne     0x21c <_JIT_ENTRY+0x21c>
// 1d9: f7 d0                         notl    %eax
// 1db: 48 98                         cltq
// 1dd: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 1e1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001e3:  R_X86_64_64  _JIT_OPARG
// 1eb: 0f b7 d2                      movzwl  %dx, %edx
// 1ee: 49 83 7c c6 f8 01             cmpq    $0x1, -0x8(%r14,%rax,8)
// 1f4: 83 da ff                      sbbl    $-0x1, %edx
// 1f7: 39 51 34                      cmpl    %edx, 0x34(%rcx)
// 1fa: 75 20                         jne     0x21c <_JIT_ENTRY+0x21c>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _JIT_CONTINUE
// 206: 48 89 df                      movq    %rbx, %rdi
// 209: 4c 89 fa                      movq    %r15, %rdx
// 20c: 48 83 c4 08                   addq    $0x8, %rsp
// 210: 5b                            popq    %rbx
// 211: 41 5c                         popq    %r12
// 213: 41 5d                         popq    %r13
// 215: 41 5e                         popq    %r14
// 217: 41 5f                         popq    %r15
// 219: 5d                            popq    %rbp
// 21a: ff e0                         jmpq    *%rax
// 21c: 49 89 f6                      movq    %rsi, %r14
// 21f: 49 29 de                      subq    %rbx, %r14
// 222: 49 83 c6 b8                   addq    $-0x48, %r14
// 226: 49 c1 ee 03                   shrq    $0x3, %r14
// 22a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 22e: 48 8b 03                      movq    (%rbx), %rax
// 231: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000233:  R_X86_64_64  _JIT_TARGET
// 23b: 89 c9                         movl    %ecx, %ecx
// 23d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 241: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 247: 48 83 c4 08                   addq    $0x8, %rsp
// 24b: 5b                            popq    %rbx
// 24c: 41 5c                         popq    %r12
// 24e: 41 5d                         popq    %r13
// 250: 41 5e                         popq    %r14
// 252: 41 5f                         popq    %r15
// 254: 5d                            popq    %rbp
// 255: c3                            retq
// 256: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_FUNCTION_EXACT_ARGS_code_body[599] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xf6, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xdd, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xd2, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xc3, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x29, 0x01, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x55, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x91, 0x88, 0x00, 0x00, 0x00, 0x75, 0x43, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x8b, 0x49, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x83, 0x7c, 0xc6, 0xf8, 0x01, 0x83, 0xda, 0xff, 0x39, 0x51, 0x34, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[16] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_FUNCTION_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1ce: 41 f6 45 e8 01                testb   $0x1, -0x18(%r13)
// 1d3: 75 1b                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 1d5: 49 8d 75 e8                   leaq    -0x18(%r13), %rsi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 1e3: 4c 89 ef                      movq    %r13, %rdi
// 1e6: ff d0                         callq   *%rax
// 1e8: 84 c0                         testb   %al, %al
// 1ea: 0f 84 02 ff ff ff             je      0xf2 <_JIT_ENTRY+0xf2>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _JIT_CONTINUE
// 1fa: 4c 89 f7                      movq    %r14, %rdi
// 1fd: 48 89 de                      movq    %rbx, %rsi
// 200: 4c 89 fa                      movq    %r15, %rdx
// 203: 48 83 c4 08                   addq    $0x8, %rsp
// 207: 5b                            popq    %rbx
// 208: 41 5c                         popq    %r12
// 20a: 41 5d                         popq    %r13
// 20c: 41 5e                         popq    %r14
// 20e: 41 5f                         popq    %r15
// 210: 5d                            popq    %rbp
// 211: ff e0                         jmpq    *%rax
// 213: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[532] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x41, 0xf6, 0x45, 0xe8, 0x01, 0x75, 0x1b, 0x49, 0x8d, 0x75, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x84, 0xc0, 0x0f, 0x84, 0x02, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CHECK_PEP_523
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CHECK_PEP_523.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 80 01 00 00             jne     0x1a9 <_JIT_ENTRY+0x1a9>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 67 01 00 00             jne     0x1a9 <_JIT_ENTRY+0x1a9>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 5c 01 00 00             ja      0x1a9 <_JIT_ENTRY+0x1a9>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 4d 01 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 b3 00 00 00             ja      0x1a9 <_JIT_ENTRY+0x1a9>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 49 8b 47 10                   movq    0x10(%r15), %rax
// 19f: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// 1a7: 74 37                         je      0x1e0 <_JIT_ENTRY+0x1e0>
// 1a9: 4c 29 f3                      subq    %r14, %rbx
// 1ac: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b0: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b4: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1b8: 49 8b 06                      movq    (%r14), %rax
// 1bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bd:  R_X86_64_64  _JIT_TARGET
// 1c5: 89 c9                         movl    %ecx, %ecx
// 1c7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1cb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d1: 48 83 c4 08                   addq    $0x8, %rsp
// 1d5: 5b                            popq    %rbx
// 1d6: 41 5c                         popq    %r12
// 1d8: 41 5d                         popq    %r13
// 1da: 41 5e                         popq    %r14
// 1dc: 41 5f                         popq    %r15
// 1de: 5d                            popq    %rbp
// 1df: c3                            retq
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _JIT_CONTINUE
// 1ea: 4c 89 f7                      movq    %r14, %rdi
// 1ed: 48 89 de                      movq    %rbx, %rsi
// 1f0: 4c 89 fa                      movq    %r15, %rdx
// 1f3: 48 83 c4 08                   addq    $0x8, %rsp
// 1f7: 5b                            popq    %rbx
// 1f8: 41 5c                         popq    %r12
// 1fa: 41 5d                         popq    %r13
// 1fc: 41 5e                         popq    %r14
// 1fe: 41 5f                         popq    %r15
// 200: 5d                            popq    %rbp
// 201: ff e0                         jmpq    *%rax
// 203: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_PEP_523_code_body[516] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x80, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x67, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x5c, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x4d, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xb3, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_PEP_523_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_PEP_523_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_PEP_523_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CHECK_STACK_SPACE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CHECK_STACK_SPACE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 bf 01 00 00             jne     0x1e8 <_JIT_ENTRY+0x1e8>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 a6 01 00 00             jne     0x1e8 <_JIT_ENTRY+0x1e8>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 9b 01 00 00             ja      0x1e8 <_JIT_ENTRY+0x1e8>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 8c 01 00 00             jle     0x1e8 <_JIT_ENTRY+0x1e8>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 f2 00 00 00             ja      0x1e8 <_JIT_ENTRY+0x1e8>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 197: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19b: 49 8b 87 00 01 00 00          movq    0x100(%r15), %rax
// 1a2: 48 85 c0                      testq   %rax, %rax
// 1a5: 74 3e                         je      0x1e5 <_JIT_ENTRY+0x1e5>
// 1a7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a9:  R_X86_64_64  _JIT_OPARG
// 1b1: 0f b7 c9                      movzwl  %cx, %ecx
// 1b4: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1b9: 29 ca                         subl    %ecx, %edx
// 1bb: 48 63 ca                      movslq  %edx, %rcx
// 1be: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 1c3: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 1c7: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// 1cb: 49 8b 97 08 01 00 00          movq    0x108(%r15), %rdx
// 1d2: 48 29 c2                      subq    %rax, %rdx
// 1d5: 48 c1 fa 03                   sarq    $0x3, %rdx
// 1d9: 48 39 ca                      cmpq    %rcx, %rdx
// 1dc: 7e 07                         jle     0x1e5 <_JIT_ENTRY+0x1e5>
// 1de: 41 83 7f 24 02                cmpl    $0x2, 0x24(%r15)
// 1e3: 7d 3a                         jge     0x21f <_JIT_ENTRY+0x21f>
// 1e5: 49 89 f6                      movq    %rsi, %r14
// 1e8: 49 29 de                      subq    %rbx, %r14
// 1eb: 49 83 c6 b8                   addq    $-0x48, %r14
// 1ef: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f3: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1f7: 48 8b 03                      movq    (%rbx), %rax
// 1fa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fc:  R_X86_64_64  _JIT_TARGET
// 204: 89 c9                         movl    %ecx, %ecx
// 206: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 20a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 210: 48 83 c4 08                   addq    $0x8, %rsp
// 214: 5b                            popq    %rbx
// 215: 41 5c                         popq    %r12
// 217: 41 5d                         popq    %r13
// 219: 41 5e                         popq    %r14
// 21b: 41 5f                         popq    %r15
// 21d: 5d                            popq    %rbp
// 21e: c3                            retq
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _JIT_CONTINUE
// 229: 48 89 df                      movq    %rbx, %rdi
// 22c: 4c 89 fa                      movq    %r15, %rdx
// 22f: 48 83 c4 08                   addq    $0x8, %rsp
// 233: 5b                            popq    %rbx
// 234: 41 5c                         popq    %r12
// 236: 41 5d                         popq    %r13
// 238: 41 5e                         popq    %r14
// 23a: 41 5f                         popq    %r15
// 23c: 5d                            popq    %rbp
// 23d: ff e0                         jmpq    *%rax
// 23f: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_STACK_SPACE_code_body[576] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xbf, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xa6, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x9b, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x8c, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xf2, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x87, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x3e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x49, 0x8b, 0x97, 0x08, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc2, 0x48, 0xc1, 0xfa, 0x03, 0x48, 0x39, 0xca, 0x7e, 0x07, 0x41, 0x83, 0x7f, 0x24, 0x02, 0x7d, 0x3a, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_STACK_SPACE_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_STACK_SPACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_STACK_SPACE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CHECK_VALIDITY
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CHECK_VALIDITY.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 a5 01 00 00             jne     0x1ce <_JIT_ENTRY+0x1ce>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 8c 01 00 00             jne     0x1ce <_JIT_ENTRY+0x1ce>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 81 01 00 00             ja      0x1ce <_JIT_ENTRY+0x1ce>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 72 01 00 00             jle     0x1ce <_JIT_ENTRY+0x1ce>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 d8 00 00 00             ja      0x1ce <_JIT_ENTRY+0x1ce>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_EXECUTOR
// 1a5: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1a9: 74 23                         je      0x1ce <_JIT_ENTRY+0x1ce>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _JIT_CONTINUE
// 1b5: 4c 89 f7                      movq    %r14, %rdi
// 1b8: 48 89 de                      movq    %rbx, %rsi
// 1bb: 4c 89 fa                      movq    %r15, %rdx
// 1be: 48 83 c4 08                   addq    $0x8, %rsp
// 1c2: 5b                            popq    %rbx
// 1c3: 41 5c                         popq    %r12
// 1c5: 41 5d                         popq    %r13
// 1c7: 41 5e                         popq    %r14
// 1c9: 41 5f                         popq    %r15
// 1cb: 5d                            popq    %rbp
// 1cc: ff e0                         jmpq    *%rax
// 1ce: 4c 29 f3                      subq    %r14, %rbx
// 1d1: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d5: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1d9: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1dd: 49 8b 06                      movq    (%r14), %rax
// 1e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e2:  R_X86_64_64  _JIT_TARGET
// 1ea: 89 c9                         movl    %ecx, %ecx
// 1ec: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f6: 48 83 c4 08                   addq    $0x8, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: c3                            retq
// 205: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_VALIDITY_code_body[518] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xa5, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x8c, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x81, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x72, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xd8, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_VALIDITY_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CHECK_VALIDITY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CHECK_VALIDITY_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_COMPARE_OP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_COMPARE_OP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 49 8b 6e e8                   movq    -0x18(%r14), %rbp
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: 0f b7 d0                      movzwl  %ax, %edx
// 1db: c1 ea 05                      shrl    $0x5, %edx
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  PyObject_RichCompare
// 1e8: 48 89 ef                      movq    %rbp, %rdi
// 1eb: 4c 89 ee                      movq    %r13, %rsi
// 1ee: ff d0                         callq   *%rax
// 1f0: 49 89 c4                      movq    %rax, %r12
// 1f3: 48 8b 45 00                   movq    (%rbp), %rax
// 1f7: 48 85 c0                      testq   %rax, %rax
// 1fa: 7f 22                         jg      0x21e <_JIT_ENTRY+0x21e>
// 1fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fe:  R_X86_64_64  .rodata.str1.1
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_NegativeRefcount
// 210: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 215: 48 89 ea                      movq    %rbp, %rdx
// 218: ff d0                         callq   *%rax
// 21a: 48 8b 45 00                   movq    (%rbp), %rax
// 21e: 85 c0                         testl   %eax, %eax
// 220: 78 21                         js      0x243 <_JIT_ENTRY+0x243>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22c: ff d0                         callq   *%rax
// 22e: 48 ff 4d 00                   decq    (%rbp)
// 232: 75 0f                         jne     0x243 <_JIT_ENTRY+0x243>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_Dealloc
// 23e: 48 89 ef                      movq    %rbp, %rdi
// 241: ff d0                         callq   *%rax
// 243: 49 8b 45 00                   movq    (%r13), %rax
// 247: 48 85 c0                      testq   %rax, %rax
// 24a: 7f 22                         jg      0x26e <_JIT_ENTRY+0x26e>
// 24c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024e:  R_X86_64_64  .rodata.str1.1
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_NegativeRefcount
// 260: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 265: 4c 89 ea                      movq    %r13, %rdx
// 268: ff d0                         callq   *%rax
// 26a: 49 8b 45 00                   movq    (%r13), %rax
// 26e: 85 c0                         testl   %eax, %eax
// 270: 78 21                         js      0x293 <_JIT_ENTRY+0x293>
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27c: ff d0                         callq   *%rax
// 27e: 49 ff 4d 00                   decq    (%r13)
// 282: 75 0f                         jne     0x293 <_JIT_ENTRY+0x293>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_Dealloc
// 28e: 4c 89 ef                      movq    %r13, %rdi
// 291: ff d0                         callq   *%rax
// 293: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 297: 4d 85 e4                      testq   %r12, %r12
// 29a: 0f 84 b6 00 00 00             je      0x356 <_JIT_ENTRY+0x356>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _JIT_OPARG
// 2aa: a8 10                         testb   $0x10, %al
// 2ac: 74 7d                         je      0x32b <_JIT_ENTRY+0x32b>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  PyObject_IsTrue
// 2b8: 4c 89 e7                      movq    %r12, %rdi
// 2bb: ff d0                         callq   *%rax
// 2bd: 89 c5                         movl    %eax, %ebp
// 2bf: 49 8b 04 24                   movq    (%r12), %rax
// 2c3: 48 85 c0                      testq   %rax, %rax
// 2c6: 7f 22                         jg      0x2ea <_JIT_ENTRY+0x2ea>
// 2c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ca:  R_X86_64_64  .rodata.str1.1
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 2e1: 4c 89 e2                      movq    %r12, %rdx
// 2e4: ff d0                         callq   *%rax
// 2e6: 49 8b 04 24                   movq    (%r12), %rax
// 2ea: 85 c0                         testl   %eax, %eax
// 2ec: 78 21                         js      0x30f <_JIT_ENTRY+0x30f>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f8: ff d0                         callq   *%rax
// 2fa: 49 ff 0c 24                   decq    (%r12)
// 2fe: 75 0f                         jne     0x30f <_JIT_ENTRY+0x30f>
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _Py_Dealloc
// 30a: 4c 89 e7                      movq    %r12, %rdi
// 30d: ff d0                         callq   *%rax
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  _Py_FalseStruct
// 319: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000031b:  R_X86_64_64  _Py_TrueStruct
// 323: 85 ed                         testl   %ebp, %ebp
// 325: 4c 0f 44 e0                   cmoveq  %rax, %r12
// 329: 78 2b                         js      0x356 <_JIT_ENTRY+0x356>
// 32b: 49 83 c6 f0                   addq    $-0x10, %r14
// 32f: 4d 89 65 00                   movq    %r12, (%r13)
// 333: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000335:  R_X86_64_64  _JIT_CONTINUE
// 33d: 48 89 df                      movq    %rbx, %rdi
// 340: 4c 89 f6                      movq    %r14, %rsi
// 343: 4c 89 fa                      movq    %r15, %rdx
// 346: 48 83 c4 08                   addq    $0x8, %rsp
// 34a: 5b                            popq    %rbx
// 34b: 41 5c                         popq    %r12
// 34d: 41 5d                         popq    %r13
// 34f: 41 5e                         popq    %r14
// 351: 41 5f                         popq    %r15
// 353: 5d                            popq    %rbp
// 354: ff e0                         jmpq    *%rax
// 356: 49 29 dd                      subq    %rbx, %r13
// 359: 49 83 c5 b8                   addq    $-0x48, %r13
// 35d: 49 c1 ed 03                   shrq    $0x3, %r13
// 361: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 365: 31 c0                         xorl    %eax, %eax
// 367: e9 ae fd ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 36c: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_code_body[877] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x74, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe0, 0x78, 0x2b, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xae, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_code_holes[30] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x335, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_FLOAT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_COMPARE_OP_FLOAT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 c9 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 b0 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 a5 00 00 00             ja      0xf5 <_JIT_ENTRY+0xf5>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 96 00 00 00             jle     0xf5 <_JIT_ENTRY+0xf5>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 76 39                         jbe     0x12e <_JIT_ENTRY+0x12e>
// f5: 4c 89 f0                      movq    %r14, %rax
// f8: 48 29 d8                      subq    %rbx, %rax
// fb: 48 83 c0 b8                   addq    $-0x48, %rax
// ff: 48 c1 e8 03                   shrq    $0x3, %rax
// 103: 89 43 40                      movl    %eax, 0x40(%rbx)
// 106: 48 8b 03                      movq    (%rbx), %rax
// 109: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010b:  R_X86_64_64  _JIT_TARGET
// 113: 89 c9                         movl    %ecx, %ecx
// 115: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 119: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11f: 48 83 c4 18                   addq    $0x18, %rsp
// 123: 5b                            popq    %rbx
// 124: 41 5c                         popq    %r12
// 126: 41 5d                         popq    %r13
// 128: 41 5e                         popq    %r14
// 12a: 41 5f                         popq    %r15
// 12c: 5d                            popq    %rbp
// 12d: c3                            retq
// 12e: 89 c0                         movl    %eax, %eax
// 130: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 134: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 139: 75 28                         jne     0x163 <_JIT_ENTRY+0x163>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  PyInterpreterState_Get
// 145: ff d0                         callq   *%rax
// 147: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14e: 49 ff 4d 00                   decq    (%r13)
// 152: 75 0f                         jne     0x163 <_JIT_ENTRY+0x163>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  PyObject_Free
// 15e: 4c 89 ef                      movq    %r13, %rdi
// 161: ff d0                         callq   *%rax
// 163: 48 c1 e5 04                   shlq    $0x4, %rbp
// 167: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000169:  R_X86_64_64  _PyRuntime
// 171: 49 8b 04 24                   movq    (%r12), %rax
// 175: 48 85 c0                      testq   %rax, %rax
// 178: 7f 22                         jg      0x19c <_JIT_ENTRY+0x19c>
// 17a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017c:  R_X86_64_64  .rodata.str1.1
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_NegativeRefcount
// 18e: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 193: 4c 89 e2                      movq    %r12, %rdx
// 196: ff d0                         callq   *%rax
// 198: 49 8b 04 24                   movq    (%r12), %rax
// 19c: 49 01 ed                      addq    %rbp, %r13
// 19f: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a6: 85 c0                         testl   %eax, %eax
// 1a8: 78 21                         js      0x1cb <_JIT_ENTRY+0x1cb>
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b4: ff d0                         callq   *%rax
// 1b6: 49 ff 0c 24                   decq    (%r12)
// 1ba: 75 0f                         jne     0x1cb <_JIT_ENTRY+0x1cb>
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_Dealloc
// 1c6: 4c 89 e7                      movq    %r12, %rdi
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 1cf: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1d3: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1d7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d9:  R_X86_64_64  PyFloat_Type
// 1e1: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1e6: 0f 85 0c ff ff ff             jne     0xf8 <_JIT_ENTRY+0xf8>
// 1ec: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 1f0: 0f 85 02 ff ff ff             jne     0xf8 <_JIT_ENTRY+0xf8>
// 1f6: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 1fd: f2 0f 11 44 24 10             movsd   %xmm0, 0x10(%rsp)
// 203: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 209: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// 20f: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 215: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000217:  R_X86_64_64  PyInterpreterState_Get
// 21f: 75 1e                         jne     0x23f <_JIT_ENTRY+0x23f>
// 221: ff d5                         callq   *%rbp
// 223: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 22a: 49 ff 0c 24                   decq    (%r12)
// 22e: 75 0f                         jne     0x23f <_JIT_ENTRY+0x23f>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _PyFloat_ExactDealloc
// 23a: 4c 89 e7                      movq    %r12, %rdi
// 23d: ff d0                         callq   *%rax
// 23f: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 243: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 248: 75 1e                         jne     0x268 <_JIT_ENTRY+0x268>
// 24a: ff d5                         callq   *%rbp
// 24c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 253: 49 ff 4d 00                   decq    (%r13)
// 257: 75 0f                         jne     0x268 <_JIT_ENTRY+0x268>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _PyFloat_ExactDealloc
// 263: 4c 89 ef                      movq    %r13, %rdi
// 266: ff d0                         callq   *%rax
// 268: 31 c0                         xorl    %eax, %eax
// 26a: f2 0f 10 44 24 10             movsd   0x10(%rsp), %xmm0       # xmm0 = mem[0],zero
// 270: f2 0f 10 4c 24 08             movsd   0x8(%rsp), %xmm1        # xmm1 = mem[0],zero
// 276: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 27a: 0f 93 c0                      setae   %al
// 27d: 01 c0                         addl    %eax, %eax
// 27f: 31 c9                         xorl    %ecx, %ecx
// 281: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 285: 0f 93 c1                      setae   %cl
// 288: 09 c1                         orl     %eax, %ecx
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _JIT_OPARG
// 294: 0f a3 c8                      btl     %ecx, %eax
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_FalseStruct
// 2a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a3:  R_X86_64_64  _Py_TrueStruct
// 2ab: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 2af: 49 89 4e e8                   movq    %rcx, -0x18(%r14)
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _JIT_CONTINUE
// 2bd: 48 89 df                      movq    %rbx, %rdi
// 2c0: 4c 89 e6                      movq    %r12, %rsi
// 2c3: 4c 89 fa                      movq    %r15, %rdx
// 2c6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ca: 5b                            popq    %rbx
// 2cb: 41 5c                         popq    %r12
// 2cd: 41 5d                         popq    %r13
// 2cf: 41 5e                         popq    %r14
// 2d1: 41 5f                         popq    %r15
// 2d3: 5d                            popq    %rbp
// 2d4: ff e0                         jmpq    *%rax
// 2d6: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_FLOAT_code_body[727] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x0c, 0xff, 0xff, 0xff, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x02, 0xff, 0xff, 0xff, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x10, 0x4c, 0x24, 0x08, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x4e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_FLOAT_code_holes[19] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_FLOAT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_INT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_COMPARE_OP_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 26: 0f 85 c9 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 b0 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 a5 00 00 00             ja      0xf5 <_JIT_ENTRY+0xf5>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 96 00 00 00             jle     0xf5 <_JIT_ENTRY+0xf5>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 76 39                         jbe     0x12e <_JIT_ENTRY+0x12e>
// f5: 4c 89 f0                      movq    %r14, %rax
// f8: 48 29 d8                      subq    %rbx, %rax
// fb: 48 83 c0 b8                   addq    $-0x48, %rax
// ff: 48 c1 e8 03                   shrq    $0x3, %rax
// 103: 89 43 40                      movl    %eax, 0x40(%rbx)
// 106: 48 8b 03                      movq    (%rbx), %rax
// 109: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010b:  R_X86_64_64  _JIT_TARGET
// 113: 89 c9                         movl    %ecx, %ecx
// 115: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 119: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11f: 48 83 c4 18                   addq    $0x18, %rsp
// 123: 5b                            popq    %rbx
// 124: 41 5c                         popq    %r12
// 126: 41 5d                         popq    %r13
// 128: 41 5e                         popq    %r14
// 12a: 41 5f                         popq    %r15
// 12c: 5d                            popq    %rbp
// 12d: c3                            retq
// 12e: 89 c0                         movl    %eax, %eax
// 130: 48 8d 0c 40                   leaq    (%rax,%rax,2), %rcx
// 134: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 139: 75 34                         jne     0x16f <_JIT_ENTRY+0x16f>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  PyInterpreterState_Get
// 145: 48 89 0c 24                   movq    %rcx, (%rsp)
// 149: ff d0                         callq   *%rax
// 14b: 48 8b 0c 24                   movq    (%rsp), %rcx
// 14f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 156: 49 ff 4d 00                   decq    (%r13)
// 15a: 75 13                         jne     0x16f <_JIT_ENTRY+0x16f>
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  PyObject_Free
// 166: 4c 89 ef                      movq    %r13, %rdi
// 169: ff d0                         callq   *%rax
// 16b: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16f: 48 c1 e1 04                   shlq    $0x4, %rcx
// 173: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000175:  R_X86_64_64  _PyRuntime
// 17d: 49 8b 04 24                   movq    (%r12), %rax
// 181: 48 85 c0                      testq   %rax, %rax
// 184: 7f 32                         jg      0x1b8 <_JIT_ENTRY+0x1b8>
// 186: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000188:  R_X86_64_64  .rodata.str1.1
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_NegativeRefcount
// 19a: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 19f: 4c 89 e2                      movq    %r12, %rdx
// 1a2: 49 89 cd                      movq    %rcx, %r13
// 1a5: ff d0                         callq   *%rax
// 1a7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a9:  R_X86_64_64  _PyRuntime
// 1b1: 4c 89 e9                      movq    %r13, %rcx
// 1b4: 49 8b 04 24                   movq    (%r12), %rax
// 1b8: 4c 8d 2c 0a                   leaq    (%rdx,%rcx), %r13
// 1bc: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1c3: 85 c0                         testl   %eax, %eax
// 1c5: 78 21                         js      0x1e8 <_JIT_ENTRY+0x1e8>
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d1: ff d0                         callq   *%rax
// 1d3: 49 ff 0c 24                   decq    (%r12)
// 1d7: 75 0f                         jne     0x1e8 <_JIT_ENTRY+0x1e8>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: 4c 89 e7                      movq    %r12, %rdi
// 1e6: ff d0                         callq   *%rax
// 1e8: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 1ec: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1f0: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1f4: 49 39 6c 24 08                cmpq    %rbp, 0x8(%r12)
// 1f9: 0f 85 f9 fe ff ff             jne     0xf8 <_JIT_ENTRY+0xf8>
// 1ff: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 203: 0f 85 ef fe ff ff             jne     0xf8 <_JIT_ENTRY+0xf8>
// 209: 49 8b 6c 24 10                movq    0x10(%r12), %rbp
// 20e: 48 83 fd 0f                   cmpq    $0xf, %rbp
// 212: 0f 87 e0 fe ff ff             ja      0xf8 <_JIT_ENTRY+0xf8>
// 218: 49 8b 4d 10                   movq    0x10(%r13), %rcx
// 21c: 48 83 f9 0f                   cmpq    $0xf, %rcx
// 220: 0f 87 d2 fe ff ff             ja      0xf8 <_JIT_ENTRY+0xf8>
// 226: 48 89 0c 24                   movq    %rcx, (%rsp)
// 22a: 41 8b 44 24 18                movl    0x18(%r12), %eax
// 22f: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 234: 41 8b 45 18                   movl    0x18(%r13), %eax
// 238: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 23d: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 243: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000245:  R_X86_64_64  PyInterpreterState_Get
// 24d: 75 3c                         jne     0x28b <_JIT_ENTRY+0x28b>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  PyInterpreterState_Get
// 259: ff d0                         callq   *%rax
// 25b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 262: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000264:  R_X86_64_64  PyInterpreterState_Get
// 26c: 49 ff 0c 24                   decq    (%r12)
// 270: 75 19                         jne     0x28b <_JIT_ENTRY+0x28b>
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  PyObject_Free
// 27c: 4c 89 e7                      movq    %r12, %rdi
// 27f: ff d0                         callq   *%rax
// 281: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000283:  R_X86_64_64  PyInterpreterState_Get
// 28b: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 28f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 294: 75 1e                         jne     0x2b4 <_JIT_ENTRY+0x2b4>
// 296: ff d1                         callq   *%rcx
// 298: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 29f: 49 ff 4d 00                   decq    (%r13)
// 2a3: 75 0f                         jne     0x2b4 <_JIT_ENTRY+0x2b4>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  PyObject_Free
// 2af: 4c 89 ef                      movq    %r13, %rdi
// 2b2: ff d0                         callq   *%rax
// 2b4: 83 e5 03                      andl    $0x3, %ebp
// 2b7: b8 01 00 00 00                movl    $0x1, %eax
// 2bc: b9 01 00 00 00                movl    $0x1, %ecx
// 2c1: 48 29 e9                      subq    %rbp, %rcx
// 2c4: 48 0f af 4c 24 08             imulq   0x8(%rsp), %rcx
// 2ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ce: 83 e2 03                      andl    $0x3, %edx
// 2d1: 48 29 d0                      subq    %rdx, %rax
// 2d4: 48 0f af 44 24 10             imulq   0x10(%rsp), %rax
// 2da: 31 d2                         xorl    %edx, %edx
// 2dc: 31 f6                         xorl    %esi, %esi
// 2de: 48 39 c1                      cmpq    %rax, %rcx
// 2e1: 0f 9d c2                      setge   %dl
// 2e4: 40 0f 9e c6                   setle   %sil
// 2e8: 01 d2                         addl    %edx, %edx
// 2ea: 09 d6                         orl     %edx, %esi
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _JIT_OPARG
// 2f6: 0f a3 f0                      btl     %esi, %eax
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_FalseStruct
// 303: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000305:  R_X86_64_64  _Py_TrueStruct
// 30d: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 311: 49 89 4e e8                   movq    %rcx, -0x18(%r14)
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _JIT_CONTINUE
// 31f: 48 89 df                      movq    %rbx, %rdi
// 322: 4c 89 e6                      movq    %r12, %rsi
// 325: 4c 89 fa                      movq    %r15, %rdx
// 328: 48 83 c4 18                   addq    $0x18, %rsp
// 32c: 5b                            popq    %rbx
// 32d: 41 5c                         popq    %r12
// 32f: 41 5d                         popq    %r13
// 331: 41 5e                         popq    %r14
// 333: 41 5f                         popq    %r15
// 335: 5d                            popq    %rbp
// 336: ff e0                         jmpq    *%rax
// 338: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_INT_code_body[825] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x6d, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x0c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x32, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x2c, 0x0a, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xe8, 0x49, 0x39, 0x6c, 0x24, 0x08, 0x0f, 0x85, 0xf9, 0xfe, 0xff, 0xff, 0x49, 0x39, 0x6d, 0x08, 0x0f, 0x85, 0xef, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x83, 0xfd, 0x0f, 0x0f, 0x87, 0xe0, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x4d, 0x10, 0x48, 0x83, 0xf9, 0x0f, 0x0f, 0x87, 0xd2, 0xfe, 0xff, 0xff, 0x48, 0x89, 0x0c, 0x24, 0x41, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x66, 0xf0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0xe5, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x48, 0x29, 0xe9, 0x48, 0x0f, 0xaf, 0x4c, 0x24, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x83, 0xe2, 0x03, 0x48, 0x29, 0xd0, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x10, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x4e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_INT_code_holes[22] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_INT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_STR
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_COMPARE_OP_STR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 6c 24 08                cmpq    %rbp, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 39                         jbe     0x12b <_JIT_ENTRY+0x12b>
// f2: 4c 89 f0                      movq    %r14, %rax
// f5: 48 29 d8                      subq    %rbx, %rax
// f8: 48 83 c0 b8                   addq    $-0x48, %rax
// fc: 48 c1 e8 03                   shrq    $0x3, %rax
// 100: 89 43 40                      movl    %eax, 0x40(%rbx)
// 103: 48 8b 03                      movq    (%rbx), %rax
// 106: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000108:  R_X86_64_64  _JIT_TARGET
// 110: 89 c9                         movl    %ecx, %ecx
// 112: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 116: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11c: 48 83 c4 08                   addq    $0x8, %rsp
// 120: 5b                            popq    %rbx
// 121: 41 5c                         popq    %r12
// 123: 41 5d                         popq    %r13
// 125: 41 5e                         popq    %r14
// 127: 41 5f                         popq    %r15
// 129: 5d                            popq    %rbp
// 12a: c3                            retq
// 12b: 89 c0                         movl    %eax, %eax
// 12d: 48 8d 0c 40                   leaq    (%rax,%rax,2), %rcx
// 131: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 136: 75 34                         jne     0x16c <_JIT_ENTRY+0x16c>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  PyInterpreterState_Get
// 142: 48 89 0c 24                   movq    %rcx, (%rsp)
// 146: ff d0                         callq   *%rax
// 148: 48 8b 0c 24                   movq    (%rsp), %rcx
// 14c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 153: 49 ff 4d 00                   decq    (%r13)
// 157: 75 13                         jne     0x16c <_JIT_ENTRY+0x16c>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  PyObject_Free
// 163: 4c 89 ef                      movq    %r13, %rdi
// 166: ff d0                         callq   *%rax
// 168: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16c: 48 c1 e1 04                   shlq    $0x4, %rcx
// 170: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000172:  R_X86_64_64  _PyRuntime
// 17a: 49 8b 04 24                   movq    (%r12), %rax
// 17e: 48 85 c0                      testq   %rax, %rax
// 181: 7f 32                         jg      0x1b5 <_JIT_ENTRY+0x1b5>
// 183: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000185:  R_X86_64_64  .rodata.str1.1
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_NegativeRefcount
// 197: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 19c: 4c 89 e2                      movq    %r12, %rdx
// 19f: 49 89 cd                      movq    %rcx, %r13
// 1a2: ff d0                         callq   *%rax
// 1a4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a6:  R_X86_64_64  _PyRuntime
// 1ae: 4c 89 e9                      movq    %r13, %rcx
// 1b1: 49 8b 04 24                   movq    (%r12), %rax
// 1b5: 4c 8d 2c 0a                   leaq    (%rdx,%rcx), %r13
// 1b9: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1c0: 85 c0                         testl   %eax, %eax
// 1c2: 78 21                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ce: ff d0                         callq   *%rax
// 1d0: 49 ff 0c 24                   decq    (%r12)
// 1d4: 75 0f                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_Dealloc
// 1e0: 4c 89 e7                      movq    %r12, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 1e9: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ed: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1f1: 49 39 6c 24 08                cmpq    %rbp, 0x8(%r12)
// 1f6: 0f 85 f9 fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 1fc: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 200: 0f 85 ef fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _PyUnicode_Equal
// 210: 4c 89 e7                      movq    %r12, %rdi
// 213: 4c 89 ee                      movq    %r13, %rsi
// 216: ff d0                         callq   *%rax
// 218: 89 c5                         movl    %eax, %ebp
// 21a: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 220: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000222:  R_X86_64_64  PyInterpreterState_Get
// 22a: 75 3c                         jne     0x268 <_JIT_ENTRY+0x268>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  PyInterpreterState_Get
// 236: ff d0                         callq   *%rax
// 238: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 23f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000241:  R_X86_64_64  PyInterpreterState_Get
// 249: 49 ff 0c 24                   decq    (%r12)
// 24d: 75 19                         jne     0x268 <_JIT_ENTRY+0x268>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _PyUnicode_ExactDealloc
// 259: 4c 89 e7                      movq    %r12, %rdi
// 25c: ff d0                         callq   *%rax
// 25e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000260:  R_X86_64_64  PyInterpreterState_Get
// 268: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 26c: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 271: 75 1e                         jne     0x291 <_JIT_ENTRY+0x291>
// 273: ff d1                         callq   *%rcx
// 275: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 27c: 49 ff 4d 00                   decq    (%r13)
// 280: 75 0f                         jne     0x291 <_JIT_ENTRY+0x291>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _PyUnicode_ExactDealloc
// 28c: 4c 89 ef                      movq    %r13, %rdi
// 28f: ff d0                         callq   *%rax
// 291: 83 c5 07                      addl    $0x7, %ebp
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _JIT_OPARG
// 29e: 66 85 e8                      testw   %bp, %ax
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _Py_FalseStruct
// 2ab: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ad:  R_X86_64_64  _Py_TrueStruct
// 2b5: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 2b9: 49 89 4e e8                   movq    %rcx, -0x18(%r14)
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _JIT_CONTINUE
// 2c7: 48 89 df                      movq    %rbx, %rdi
// 2ca: 4c 89 e6                      movq    %r12, %rsi
// 2cd: 4c 89 fa                      movq    %r15, %rdx
// 2d0: 48 83 c4 08                   addq    $0x8, %rsp
// 2d4: 5b                            popq    %rbx
// 2d5: 41 5c                         popq    %r12
// 2d7: 41 5d                         popq    %r13
// 2d9: 41 5e                         popq    %r14
// 2db: 41 5f                         popq    %r15
// 2dd: 5d                            popq    %rbp
// 2de: ff e0                         jmpq    *%rax
// 2e0: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_STR_code_body[737] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x6c, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x0c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x32, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x2c, 0x0a, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xe8, 0x49, 0x39, 0x6c, 0x24, 0x08, 0x0f, 0x85, 0xf9, 0xfe, 0xff, 0xff, 0x49, 0x39, 0x6d, 0x08, 0x0f, 0x85, 0xef, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x66, 0xf0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0xc5, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_STR_code_holes[23] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_COMPARE_OP_STR_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CONTAINS_OP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CONTAINS_OP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  PySequence_Contains
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 4c 89 e6                      movq    %r12, %rsi
// 1de: ff d0                         callq   *%rax
// 1e0: 89 c5                         movl    %eax, %ebp
// 1e2: 49 8b 04 24                   movq    (%r12), %rax
// 1e6: 48 85 c0                      testq   %rax, %rax
// 1e9: 7f 22                         jg      0x20d <_JIT_ENTRY+0x20d>
// 1eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ed:  R_X86_64_64  .rodata.str1.1
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_NegativeRefcount
// 1ff: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 204: 4c 89 e2                      movq    %r12, %rdx
// 207: ff d0                         callq   *%rax
// 209: 49 8b 04 24                   movq    (%r12), %rax
// 20d: 85 c0                         testl   %eax, %eax
// 20f: 78 21                         js      0x232 <_JIT_ENTRY+0x232>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21b: ff d0                         callq   *%rax
// 21d: 49 ff 0c 24                   decq    (%r12)
// 221: 75 0f                         jne     0x232 <_JIT_ENTRY+0x232>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_Dealloc
// 22d: 4c 89 e7                      movq    %r12, %rdi
// 230: ff d0                         callq   *%rax
// 232: 49 8b 45 00                   movq    (%r13), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 7f 22                         jg      0x25d <_JIT_ENTRY+0x25d>
// 23b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_NegativeRefcount
// 24f: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// 254: 4c 89 ea                      movq    %r13, %rdx
// 257: ff d0                         callq   *%rax
// 259: 49 8b 45 00                   movq    (%r13), %rax
// 25d: 85 c0                         testl   %eax, %eax
// 25f: 78 21                         js      0x282 <_JIT_ENTRY+0x282>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26b: ff d0                         callq   *%rax
// 26d: 49 ff 4d 00                   decq    (%r13)
// 271: 75 0f                         jne     0x282 <_JIT_ENTRY+0x282>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_Dealloc
// 27d: 4c 89 ef                      movq    %r13, %rdi
// 280: ff d0                         callq   *%rax
// 282: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 286: 85 ed                         testl   %ebp, %ebp
// 288: 78 51                         js      0x2db <_JIT_ENTRY+0x2db>
// 28a: 49 83 c6 f0                   addq    $-0x10, %r14
// 28e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000290:  R_X86_64_64  _JIT_OPARG
// 298: 0f b7 c9                      movzwl  %cx, %ecx
// 29b: 39 cd                         cmpl    %ecx, %ebp
// 29d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029f:  R_X86_64_64  _Py_FalseStruct
// 2a7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a9:  R_X86_64_64  _Py_TrueStruct
// 2b1: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 2b5: 48 89 10                      movq    %rdx, (%rax)
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _JIT_CONTINUE
// 2c2: 48 89 df                      movq    %rbx, %rdi
// 2c5: 4c 89 f6                      movq    %r14, %rsi
// 2c8: 4c 89 fa                      movq    %r15, %rdx
// 2cb: 48 83 c4 08                   addq    $0x8, %rsp
// 2cf: 5b                            popq    %rbx
// 2d0: 41 5c                         popq    %r12
// 2d2: 41 5d                         popq    %r13
// 2d4: 41 5e                         popq    %r14
// 2d6: 41 5f                         popq    %r15
// 2d8: 5d                            popq    %rbp
// 2d9: ff e0                         jmpq    *%rax
// 2db: 48 29 d8                      subq    %rbx, %rax
// 2de: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e2: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e6: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2e9: 31 c0                         xorl    %eax, %eax
// 2eb: e9 2a fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2f0: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CONTAINS_OP_code_body[753] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x85, 0xed, 0x78, 0x51, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0xcd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x2a, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_CONTAINS_OP_code_holes[24] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CONTAINS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CONTAINS_OP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_CONVERT_VALUE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_CONVERT_VALUE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 8d 4e f0                   leaq    -0x10(%r14), %rcx
// 19b: 48 89 0c 24                   movq    %rcx, (%rsp)
// 19f: 49 01 ed                      addq    %rbp, %r13
// 1a2: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 78 17                         js      0x1ce <_JIT_ENTRY+0x1ce>
// 1b7: ff d1                         callq   *%rcx
// 1b9: 49 ff 0c 24                   decq    (%r12)
// 1bd: 75 0f                         jne     0x1ce <_JIT_ENTRY+0x1ce>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_Dealloc
// 1c9: 4c 89 e7                      movq    %r12, %rdi
// 1cc: ff d0                         callq   *%rax
// 1ce: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1d2: 4c 89 6d 00                   movq    %r13, (%rbp)
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _JIT_OPARG
// 1e0: 0f b7 c0                      movzwl  %ax, %eax
// 1e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e5:  R_X86_64_64  .rodata
// 1ed: 4c 89 ef                      movq    %r13, %rdi
// 1f0: ff 14 c1                      callq   *(%rcx,%rax,8)
// 1f3: 49 89 c4                      movq    %rax, %r12
// 1f6: 49 8b 45 00                   movq    (%r13), %rax
// 1fa: 48 85 c0                      testq   %rax, %rax
// 1fd: 7f 22                         jg      0x221 <_JIT_ENTRY+0x221>
// 1ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000201:  R_X86_64_64  .rodata.str1.1
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_NegativeRefcount
// 213: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 218: 4c 89 ea                      movq    %r13, %rdx
// 21b: ff d0                         callq   *%rax
// 21d: 49 8b 45 00                   movq    (%r13), %rax
// 221: 85 c0                         testl   %eax, %eax
// 223: 78 21                         js      0x246 <_JIT_ENTRY+0x246>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22f: ff d0                         callq   *%rax
// 231: 49 ff 4d 00                   decq    (%r13)
// 235: 75 0f                         jne     0x246 <_JIT_ENTRY+0x246>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_Dealloc
// 241: 4c 89 ef                      movq    %r13, %rdi
// 244: ff d0                         callq   *%rax
// 246: 4d 85 e4                      testq   %r12, %r12
// 249: 74 2b                         je      0x276 <_JIT_ENTRY+0x276>
// 24b: 49 83 c6 f8                   addq    $-0x8, %r14
// 24f: 4c 89 65 00                   movq    %r12, (%rbp)
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _JIT_CONTINUE
// 25d: 48 89 df                      movq    %rbx, %rdi
// 260: 4c 89 f6                      movq    %r14, %rsi
// 263: 4c 89 fa                      movq    %r15, %rdx
// 266: 48 83 c4 08                   addq    $0x8, %rsp
// 26a: 5b                            popq    %rbx
// 26b: 41 5c                         popq    %r12
// 26d: 41 5d                         popq    %r13
// 26f: 41 5e                         popq    %r14
// 271: 41 5f                         popq    %r15
// 273: 5d                            popq    %rbp
// 274: ff e0                         jmpq    *%rax
// 276: 48 29 dd                      subq    %rbx, %rbp
// 279: 48 83 c5 b8                   addq    $-0x48, %rbp
// 27d: 48 c1 ed 03                   shrq    $0x3, %rbp
// 281: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 284: 31 c0                         xorl    %eax, %eax
// 286: e9 8f fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 28b: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CONVERT_VALUE_code_body[652] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x4e, 0xf0, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x2b, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x8f, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_CONVERT_VALUE_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x201, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_CONVERT_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_CONVERT_VALUE_data_holes[4] = {
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _BINARY_SUBSCR_STR_INTplus_COPY
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_COPY.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b7 c0                      movzwl  %ax, %eax
// 1d7: 48 c1 e0 03                   shlq    $0x3, %rax
// 1db: 48 f7 d8                      negq    %rax
// 1de: 4c 8b 64 03 f8                movq    -0x8(%rbx,%rax), %r12
// 1e3: 41 8b 04 24                   movl    (%r12), %eax
// 1e7: ff c0                         incl    %eax
// 1e9: 74 10                         je      0x1fb <_JIT_ENTRY+0x1fb>
// 1eb: 41 89 04 24                   movl    %eax, (%r12)
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f9: ff d0                         callq   *%rax
// 1fb: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _JIT_CONTINUE
// 209: 4c 89 f7                      movq    %r14, %rdi
// 20c: 48 89 de                      movq    %rbx, %rsi
// 20f: 4c 89 fa                      movq    %r15, %rdx
// 212: 48 83 c4 08                   addq    $0x8, %rsp
// 216: 5b                            popq    %rbx
// 217: 41 5c                         popq    %r12
// 219: 41 5d                         popq    %r13
// 21b: 41 5e                         popq    %r14
// 21d: 41 5f                         popq    %r15
// 21f: 5d                            popq    %rbp
// 220: ff e0                         jmpq    *%rax
// 222: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_COPY_code_body[547] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x64, 0x03, 0xf8, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_COPY_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_COPY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_COPY_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_COPY_FREE_VARS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_COPY_FREE_VARS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 c9 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 2c: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 b0 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 a5 00 00 00             ja      0xf5 <_JIT_ENTRY+0xf5>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 96 00 00 00             jle     0xf5 <_JIT_ENTRY+0xf5>
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ce                         movl    %ecx, %esi
// 66: c1 ee 02                      shrl    $0x2, %esi
// 69: 83 e6 07                      andl    $0x7, %esi
// 6c: 83 fe 02                      cmpl    $0x2, %esi
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fe 01                      cmpl    $0x1, %esi
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 6a                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 32                         jne     0xbd <_JIT_ENTRY+0xbd>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 5a                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3d                         jne     0xd8 <_JIT_ENTRY+0xd8>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 4b                         jmp     0xed <_JIT_ENTRY+0xed>
// a2: 31 f6                         xorl    %esi, %esi
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 40 0f 94 c6                   sete    %sil
// ab: 48 c1 e6 04                   shlq    $0x4, %rsi
// af: 4a 8d 0c 26                   leaq    (%rsi,%r12), %rcx
// b3: 48 83 c1 28                   addq    $0x28, %rcx
// b7: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bb: eb 33                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bd: 31 f6                         xorl    %esi, %esi
// bf: f6 c1 40                      testb   $0x40, %cl
// c2: 40 0f 94 c6                   sete    %sil
// c6: 48 c1 e6 04                   shlq    $0x4, %rsi
// ca: 4a 8d 0c 26                   leaq    (%rsi,%r12), %rcx
// ce: 48 83 c1 28                   addq    $0x28, %rcx
// d2: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d6: eb 18                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d8: 31 f6                         xorl    %esi, %esi
// da: f6 c1 40                      testb   $0x40, %cl
// dd: 40 0f 94 c6                   sete    %sil
// e1: 48 c1 e6 04                   shlq    $0x4, %rsi
// e5: 4a 8d 0c 26                   leaq    (%rsi,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 76 37                         jbe     0x12c <_JIT_ENTRY+0x12c>
// f5: 4c 29 f3                      subq    %r14, %rbx
// f8: 48 83 c3 b8                   addq    $-0x48, %rbx
// fc: 48 c1 eb 03                   shrq    $0x3, %rbx
// 100: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 104: 49 8b 06                      movq    (%r14), %rax
// 107: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000109:  R_X86_64_64  _JIT_TARGET
// 111: 89 c9                         movl    %ecx, %ecx
// 113: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 117: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11d: 48 83 c4 18                   addq    $0x18, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5d                         popq    %r13
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: 5d                            popq    %rbp
// 12b: c3                            retq
// 12c: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 131: 89 c0                         movl    %eax, %eax
// 133: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 137: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 13c: 75 28                         jne     0x166 <_JIT_ENTRY+0x166>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  PyInterpreterState_Get
// 148: ff d0                         callq   *%rax
// 14a: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 151: 49 ff 4d 00                   decq    (%r13)
// 155: 75 0f                         jne     0x166 <_JIT_ENTRY+0x166>
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  PyObject_Free
// 161: 4c 89 ef                      movq    %r13, %rdi
// 164: ff d0                         callq   *%rax
// 166: 48 c1 e5 04                   shlq    $0x4, %rbp
// 16a: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000016c:  R_X86_64_64  _PyRuntime
// 174: 49 8b 04 24                   movq    (%r12), %rax
// 178: 48 85 c0                      testq   %rax, %rax
// 17b: 7f 22                         jg      0x19f <_JIT_ENTRY+0x19f>
// 17d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017f:  R_X86_64_64  .rodata.str1.1
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_NegativeRefcount
// 191: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 196: 4c 89 e2                      movq    %r12, %rdx
// 199: ff d0                         callq   *%rax
// 19b: 49 8b 04 24                   movq    (%r12), %rax
// 19f: 49 01 ef                      addq    %rbp, %r15
// 1a2: 49 81 c7 a0 32 01 00          addq    $0x132a0, %r15          # imm = 0x132A0
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 78 21                         js      0x1ce <_JIT_ENTRY+0x1ce>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b7: ff d0                         callq   *%rax
// 1b9: 49 ff 0c 24                   decq    (%r12)
// 1bd: 75 0f                         jne     0x1ce <_JIT_ENTRY+0x1ce>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_Dealloc
// 1c9: 4c 89 e7                      movq    %r12, %rdi
// 1cc: ff d0                         callq   *%rax
// 1ce: 4c 89 7b f0                   movq    %r15, -0x10(%rbx)
// 1d2: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _JIT_OPARG
// 1e0: 66 85 c0                      testw   %ax, %ax
// 1e3: 74 7b                         je      0x260 <_JIT_ENTRY+0x260>
// 1e5: 49 8b 46 10                   movq    0x10(%r14), %rax
// 1e9: 4c 8b 68 48                   movq    0x48(%rax), %r13
// 1ed: 49 8b 06                      movq    (%r14), %rax
// 1f0: 8b 40 48                      movl    0x48(%rax), %eax
// 1f3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f5:  R_X86_64_64  _JIT_OPARG
// 1fd: 0f b7 c9                      movzwl  %cx, %ecx
// 200: 29 c8                         subl    %ecx, %eax
// 202: 83 f9 02                      cmpl    $0x2, %ecx
// 205: bd 01 00 00 00                movl    $0x1, %ebp
// 20a: 0f 43 e9                      cmovael %ecx, %ebp
// 20d: 48 98                         cltq
// 20f: 49 8d 0c c6                   leaq    (%r14,%rax,8), %rcx
// 213: 48 83 c1 48                   addq    $0x48, %rcx
// 217: 45 31 ff                      xorl    %r15d, %r15d
// 21a: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 21f: eb 1b                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 221: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 230: 4e 89 24 f9                   movq    %r12, (%rcx,%r15,8)
// 234: 49 ff c7                      incq    %r15
// 237: 4c 39 fd                      cmpq    %r15, %rbp
// 23a: 74 24                         je      0x260 <_JIT_ENTRY+0x260>
// 23c: 4f 8b 64 fd 18                movq    0x18(%r13,%r15,8), %r12
// 241: 41 8b 04 24                   movl    (%r12), %eax
// 245: ff c0                         incl    %eax
// 247: 74 e7                         je      0x230 <_JIT_ENTRY+0x230>
// 249: 41 89 04 24                   movl    %eax, (%r12)
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 257: ff d0                         callq   *%rax
// 259: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 25e: eb d0                         jmp     0x230 <_JIT_ENTRY+0x230>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _JIT_CONTINUE
// 26a: 4c 89 f7                      movq    %r14, %rdi
// 26d: 48 89 de                      movq    %rbx, %rsi
// 270: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 275: 48 83 c4 18                   addq    $0x18, %rsp
// 279: 5b                            popq    %rbx
// 27a: 41 5c                         popq    %r12
// 27c: 41 5d                         popq    %r13
// 27e: 41 5e                         popq    %r14
// 280: 41 5f                         popq    %r15
// 282: 5d                            popq    %rbp
// 283: ff e0                         jmpq    *%rax
// 285: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_COPY_FREE_VARS_code_body[646] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xce, 0xc1, 0xee, 0x02, 0x83, 0xe6, 0x07, 0x83, 0xfe, 0x02, 0x74, 0x15, 0x83, 0xfe, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x6a, 0xf6, 0xc1, 0x20, 0x75, 0x32, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x5a, 0xf6, 0xc1, 0x20, 0x75, 0x3d, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x4b, 0x31, 0xf6, 0xf6, 0xc1, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x0c, 0x26, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x33, 0x31, 0xf6, 0xf6, 0xc1, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x0c, 0x26, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x18, 0x31, 0xf6, 0xf6, 0xc1, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x0c, 0x26, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xef, 0x49, 0x81, 0xc7, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x7b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x7b, 0x49, 0x8b, 0x46, 0x10, 0x4c, 0x8b, 0x68, 0x48, 0x49, 0x8b, 0x06, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe9, 0x48, 0x98, 0x49, 0x8d, 0x0c, 0xc6, 0x48, 0x83, 0xc1, 0x48, 0x45, 0x31, 0xff, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x89, 0x24, 0xf9, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x74, 0x24, 0x4f, 0x8b, 0x64, 0xfd, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0xe7, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0xeb, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_COPY_FREE_VARS_code_holes[15] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_COPY_FREE_VARS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_COPY_FREE_VARS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_DELETE_ATTR
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_DELETE_ATTR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 48 8d 4b f0                   leaq    -0x10(%rbx), %rcx
// 19b: 48 89 0c 24                   movq    %rcx, (%rsp)
// 19f: 49 01 ed                      addq    %rbp, %r13
// 1a2: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 78 17                         js      0x1ce <_JIT_ENTRY+0x1ce>
// 1b7: ff d1                         callq   *%rcx
// 1b9: 49 ff 0c 24                   decq    (%r12)
// 1bd: 75 0f                         jne     0x1ce <_JIT_ENTRY+0x1ce>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_Dealloc
// 1c9: 4c 89 e7                      movq    %r12, %rdi
// 1cc: ff d0                         callq   *%rax
// 1ce: 4c 8b 24 24                   movq    (%rsp), %r12
// 1d2: 4d 89 2c 24                   movq    %r13, (%r12)
// 1d6: 49 8b 06                      movq    (%r14), %rax
// 1d9: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001df:  R_X86_64_64  _JIT_OPARG
// 1e7: 0f b7 c9                      movzwl  %cx, %ecx
// 1ea: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  PyObject_DelAttr
// 1f9: 4c 89 ef                      movq    %r13, %rdi
// 1fc: ff d0                         callq   *%rax
// 1fe: 89 c5                         movl    %eax, %ebp
// 200: 49 8b 45 00                   movq    (%r13), %rax
// 204: 48 85 c0                      testq   %rax, %rax
// 207: 7f 22                         jg      0x22b <_JIT_ENTRY+0x22b>
// 209: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020b:  R_X86_64_64  .rodata.str1.1
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_NegativeRefcount
// 21d: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// 222: 4c 89 ea                      movq    %r13, %rdx
// 225: ff d0                         callq   *%rax
// 227: 49 8b 45 00                   movq    (%r13), %rax
// 22b: 48 83 c3 f8                   addq    $-0x8, %rbx
// 22f: 85 c0                         testl   %eax, %eax
// 231: 78 21                         js      0x254 <_JIT_ENTRY+0x254>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23d: ff d0                         callq   *%rax
// 23f: 49 ff 4d 00                   decq    (%r13)
// 243: 75 0f                         jne     0x254 <_JIT_ENTRY+0x254>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_Dealloc
// 24f: 4c 89 ef                      movq    %r13, %rdi
// 252: ff d0                         callq   *%rax
// 254: 85 ed                         testl   %ebp, %ebp
// 256: 49 0f 44 dc                   cmoveq  %r12, %rbx
// 25a: 74 16                         je      0x272 <_JIT_ENTRY+0x272>
// 25c: 4c 29 f3                      subq    %r14, %rbx
// 25f: 48 83 c3 b0                   addq    $-0x50, %rbx
// 263: 48 c1 eb 03                   shrq    $0x3, %rbx
// 267: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 26b: 31 c0                         xorl    %eax, %eax
// 26d: e9 a8 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _JIT_CONTINUE
// 27c: 4c 89 f7                      movq    %r14, %rdi
// 27f: 48 89 de                      movq    %rbx, %rsi
// 282: 4c 89 fa                      movq    %r15, %rdx
// 285: 48 83 c4 08                   addq    $0x8, %rsp
// 289: 5b                            popq    %rbx
// 28a: 41 5c                         popq    %r12
// 28c: 41 5d                         popq    %r13
// 28e: 41 5e                         popq    %r14
// 290: 41 5f                         popq    %r15
// 292: 5d                            popq    %rbp
// 293: ff e0                         jmpq    *%rax
// 295: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DELETE_ATTR_code_body[662] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x4b, 0xf0, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x4d, 0x89, 0x2c, 0x24, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdc, 0x74, 0x16, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xa8, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_DELETE_ATTR_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DELETE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_DELETE_ATTR_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_DELETE_DEREF
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_DELETE_DEREF.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: 0f b7 c0                      movzwl  %ax, %eax
// 1db: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// 1e0: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 1e4: 4d 85 e4                      testq   %r12, %r12
// 1e7: 74 7b                         je      0x264 <_JIT_ENTRY+0x264>
// 1e9: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 1f1: 49 8b 04 24                   movq    (%r12), %rax
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 7f 22                         jg      0x21c <_JIT_ENTRY+0x21c>
// 1fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fc:  R_X86_64_64  .rodata.str1.1
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_NegativeRefcount
// 20e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 213: 4c 89 e2                      movq    %r12, %rdx
// 216: ff d0                         callq   *%rax
// 218: 49 8b 04 24                   movq    (%r12), %rax
// 21c: 85 c0                         testl   %eax, %eax
// 21e: 78 21                         js      0x241 <_JIT_ENTRY+0x241>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22a: ff d0                         callq   *%rax
// 22c: 49 ff 0c 24                   decq    (%r12)
// 230: 75 0f                         jne     0x241 <_JIT_ENTRY+0x241>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_Dealloc
// 23c: 4c 89 e7                      movq    %r12, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_CONTINUE
// 24b: 4c 89 f7                      movq    %r14, %rdi
// 24e: 48 89 de                      movq    %rbx, %rsi
// 251: 4c 89 fa                      movq    %r15, %rdx
// 254: 48 83 c4 08                   addq    $0x8, %rsp
// 258: 5b                            popq    %rbx
// 259: 41 5c                         popq    %r12
// 25b: 41 5d                         popq    %r13
// 25d: 41 5e                         popq    %r14
// 25f: 41 5f                         popq    %r15
// 261: 5d                            popq    %rbp
// 262: ff e0                         jmpq    *%rax
// 264: 49 8b 36                      movq    (%r14), %rsi
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _JIT_OPARG
// 271: 0f b7 d0                      movzwl  %ax, %edx
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _PyEval_FormatExcUnbound
// 27e: 4c 89 ff                      movq    %r15, %rdi
// 281: ff d0                         callq   *%rax
// 283: 4c 29 f3                      subq    %r14, %rbx
// 286: 48 83 c3 b8                   addq    $-0x48, %rbx
// 28a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 28e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 292: 31 c0                         xorl    %eax, %eax
// 294: e9 81 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 299: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DELETE_DEREF_code_body[666] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x7b, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x81, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_DELETE_DEREF_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DELETE_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_DELETE_DEREF_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_DELETE_FAST
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_DELETE_FAST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: 0f b7 c0                      movzwl  %ax, %eax
// 1db: 4d 8b 64 c6 48                movq    0x48(%r14,%rax,8), %r12
// 1e0: 4d 85 e4                      testq   %r12, %r12
// 1e3: 0f 84 89 00 00 00             je      0x272 <_JIT_ENTRY+0x272>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: 0f b7 c0                      movzwl  %ax, %eax
// 1f6: 49 c7 44 c6 48 00 00 00 00    movq    $0x0, 0x48(%r14,%rax,8)
// 1ff: 49 8b 04 24                   movq    (%r12), %rax
// 203: 48 85 c0                      testq   %rax, %rax
// 206: 7f 22                         jg      0x22a <_JIT_ENTRY+0x22a>
// 208: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020a:  R_X86_64_64  .rodata.str1.1+0x83
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 221: 4c 89 e2                      movq    %r12, %rdx
// 224: ff d0                         callq   *%rax
// 226: 49 8b 04 24                   movq    (%r12), %rax
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 78 21                         js      0x24f <_JIT_ENTRY+0x24f>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 238: ff d0                         callq   *%rax
// 23a: 49 ff 0c 24                   decq    (%r12)
// 23e: 75 0f                         jne     0x24f <_JIT_ENTRY+0x24f>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_Dealloc
// 24a: 4c 89 e7                      movq    %r12, %rdi
// 24d: ff d0                         callq   *%rax
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _JIT_CONTINUE
// 259: 4c 89 f7                      movq    %r14, %rdi
// 25c: 48 89 de                      movq    %rbx, %rsi
// 25f: 4c 89 fa                      movq    %r15, %rdx
// 262: 48 83 c4 08                   addq    $0x8, %rsp
// 266: 5b                            popq    %rbx
// 267: 41 5c                         popq    %r12
// 269: 41 5d                         popq    %r13
// 26b: 41 5e                         popq    %r14
// 26d: 41 5f                         popq    %r15
// 26f: 5d                            popq    %rbp
// 270: ff e0                         jmpq    *%rax
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  PyExc_UnboundLocalError
// 27c: 4c 8b 20                      movq    (%rax), %r12
// 27f: 49 8b 06                      movq    (%r14), %rax
// 282: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _JIT_OPARG
// 290: 0f b7 f0                      movzwl  %ax, %esi
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  PyTuple_GetItem
// 29d: ff d0                         callq   *%rax
// 29f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a1:  R_X86_64_64  .rodata.str1.1+0x39
// 2a9: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002ab:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2b3: 4c 89 ff                      movq    %r15, %rdi
// 2b6: 4c 89 e6                      movq    %r12, %rsi
// 2b9: 48 89 c1                      movq    %rax, %rcx
// 2bc: 41 ff d0                      callq   *%r8
// 2bf: 4c 29 f3                      subq    %r14, %rbx
// 2c2: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2c6: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2ca: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2ce: 31 c0                         xorl    %eax, %eax
// 2d0: e9 45 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2d5: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DELETE_FAST_code_body[726] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x64, 0xc6, 0x48, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0xc7, 0x44, 0xc6, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x45, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_DELETE_FAST_code_holes[23] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x83},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// b3: 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DELETE_FAST_data_body[185] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_DELETE_FAST_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_DELETE_GLOBAL
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_DELETE_GLOBAL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1ce: 49 8b 06                      movq    (%r14), %rax
// 1d1: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 1d5: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001db:  R_X86_64_64  _JIT_OPARG
// 1e3: 0f b7 c9                      movzwl  %cx, %ecx
// 1e6: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  PyDict_DelItem
// 1f5: 4c 89 e6                      movq    %r12, %rsi
// 1f8: ff d0                         callq   *%rax
// 1fa: 85 c0                         testl   %eax, %eax
// 1fc: 74 5f                         je      0x25d <_JIT_ENTRY+0x25d>
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  PyExc_KeyError
// 208: 48 8b 30                      movq    (%rax), %rsi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _PyErr_ExceptionMatches
// 215: 4c 89 ff                      movq    %r15, %rdi
// 218: ff d0                         callq   *%rax
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 74 29                         je      0x247 <_JIT_ENTRY+0x247>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  PyExc_NameError
// 228: 48 8b 30                      movq    (%rax), %rsi
// 22b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000022d:  R_X86_64_64  .rodata.str1.1+0x39
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 23f: 4c 89 ff                      movq    %r15, %rdi
// 242: 4c 89 e1                      movq    %r12, %rcx
// 245: ff d0                         callq   *%rax
// 247: 4c 29 f3                      subq    %r14, %rbx
// 24a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 24e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 252: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 256: 31 c0                         xorl    %eax, %eax
// 258: e9 bd fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _JIT_CONTINUE
// 267: 4c 89 f7                      movq    %r14, %rdi
// 26a: 48 89 de                      movq    %rbx, %rsi
// 26d: 4c 89 fa                      movq    %r15, %rdx
// 270: 48 83 c4 08                   addq    $0x8, %rsp
// 274: 5b                            popq    %rbx
// 275: 41 5c                         popq    %r12
// 277: 41 5d                         popq    %r13
// 279: 41 5e                         popq    %r14
// 27b: 41 5f                         popq    %r15
// 27d: 5d                            popq    %rbp
// 27e: ff e0                         jmpq    *%rax
// 280: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DELETE_GLOBAL_code_body[641] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xbd, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_DELETE_GLOBAL_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DELETE_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_DELETE_GLOBAL_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_DELETE_NAME
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_DELETE_NAME.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1ce: 49 8b 06                      movq    (%r14), %rax
// 1d1: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 1d5: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001db:  R_X86_64_64  _JIT_OPARG
// 1e3: 0f b7 c9                      movzwl  %cx, %ecx
// 1e6: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1eb: 48 85 ff                      testq   %rdi, %rdi
// 1ee: 74 3e                         je      0x22e <_JIT_ENTRY+0x22e>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  PyObject_DelItem
// 1fa: 4c 89 e6                      movq    %r12, %rsi
// 1fd: ff d0                         callq   *%rax
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 74 6d                         je      0x270 <_JIT_ENTRY+0x270>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyExc_NameError
// 20d: 48 8b 30                      movq    (%rax), %rsi
// 210: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000212:  R_X86_64_64  .rodata.str1.1+0x54
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 224: 4c 89 ff                      movq    %r15, %rdi
// 227: 4c 89 e1                      movq    %r12, %rcx
// 22a: ff d0                         callq   *%rax
// 22c: eb 2c                         jmp     0x25a <_JIT_ENTRY+0x25a>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  PyExc_SystemError
// 238: 48 8b 30                      movq    (%rax), %rsi
// 23b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000023d:  R_X86_64_64  .rodata.str1.1+0x39
// 245: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000247:  R_X86_64_64  _PyErr_Format
// 24f: 4c 89 ff                      movq    %r15, %rdi
// 252: 4c 89 e1                      movq    %r12, %rcx
// 255: 31 c0                         xorl    %eax, %eax
// 257: 41 ff d0                      callq   *%r8
// 25a: 4c 29 f3                      subq    %r14, %rbx
// 25d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 261: 48 c1 eb 03                   shrq    $0x3, %rbx
// 265: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 269: 31 c0                         xorl    %eax, %eax
// 26b: e9 aa fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _JIT_CONTINUE
// 27a: 4c 89 f7                      movq    %r14, %rdi
// 27d: 48 89 de                      movq    %rbx, %rsi
// 280: 4c 89 fa                      movq    %r15, %rdx
// 283: 48 83 c4 08                   addq    $0x8, %rsp
// 287: 5b                            popq    %rbx
// 288: 41 5c                         popq    %r12
// 28a: 41 5d                         popq    %r13
// 28c: 41 5e                         popq    %r14
// 28e: 41 5f                         popq    %r15
// 290: 5d                            popq    %rbp
// 291: ff e0                         jmpq    *%rax
// 293: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DELETE_NAME_code_body[660] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x3e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x6d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xaa, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_DELETE_NAME_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x54},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals when deleting %R\x00name '%.200s' is not defined\x00"
// 71: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DELETE_NAME_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_DELETE_NAME_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_DELETE_SUBSCR
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_DELETE_SUBSCR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  PyObject_DelItem
// 1d8: 4c 89 e7                      movq    %r12, %rdi
// 1db: 4c 89 ee                      movq    %r13, %rsi
// 1de: ff d0                         callq   *%rax
// 1e0: 89 c5                         movl    %eax, %ebp
// 1e2: 49 8b 04 24                   movq    (%r12), %rax
// 1e6: 48 85 c0                      testq   %rax, %rax
// 1e9: 7f 22                         jg      0x20d <_JIT_ENTRY+0x20d>
// 1eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ed:  R_X86_64_64  .rodata.str1.1
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_NegativeRefcount
// 1ff: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 204: 4c 89 e2                      movq    %r12, %rdx
// 207: ff d0                         callq   *%rax
// 209: 49 8b 04 24                   movq    (%r12), %rax
// 20d: 85 c0                         testl   %eax, %eax
// 20f: 78 21                         js      0x232 <_JIT_ENTRY+0x232>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21b: ff d0                         callq   *%rax
// 21d: 49 ff 0c 24                   decq    (%r12)
// 221: 75 0f                         jne     0x232 <_JIT_ENTRY+0x232>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_Dealloc
// 22d: 4c 89 e7                      movq    %r12, %rdi
// 230: ff d0                         callq   *%rax
// 232: 49 8b 45 00                   movq    (%r13), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 7f 22                         jg      0x25d <_JIT_ENTRY+0x25d>
// 23b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_NegativeRefcount
// 24f: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// 254: 4c 89 ea                      movq    %r13, %rdx
// 257: ff d0                         callq   *%rax
// 259: 49 8b 45 00                   movq    (%r13), %rax
// 25d: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 261: 49 83 c6 e8                   addq    $-0x18, %r14
// 265: 85 c0                         testl   %eax, %eax
// 267: 78 21                         js      0x28a <_JIT_ENTRY+0x28a>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 49 ff 4d 00                   decq    (%r13)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: 4c 89 ef                      movq    %r13, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 85 ed                         testl   %ebp, %ebp
// 28c: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 290: 74 16                         je      0x2a8 <_JIT_ENTRY+0x2a8>
// 292: 49 29 dc                      subq    %rbx, %r12
// 295: 49 83 c4 a8                   addq    $-0x58, %r12
// 299: 49 c1 ec 03                   shrq    $0x3, %r12
// 29d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2a1: 31 c0                         xorl    %eax, %eax
// 2a3: e9 72 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _JIT_CONTINUE
// 2b2: 48 89 df                      movq    %rbx, %rdi
// 2b5: 4c 89 e6                      movq    %r12, %rsi
// 2b8: 4c 89 fa                      movq    %r15, %rdx
// 2bb: 48 83 c4 08                   addq    $0x8, %rsp
// 2bf: 5b                            popq    %rbx
// 2c0: 41 5c                         popq    %r12
// 2c2: 41 5d                         popq    %r13
// 2c4: 41 5e                         popq    %r14
// 2c6: 41 5f                         popq    %r15
// 2c8: 5d                            popq    %rbp
// 2c9: ff e0                         jmpq    *%rax
// 2cb: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DELETE_SUBSCR_code_body[716] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x66, 0xf8, 0x49, 0x83, 0xc6, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x16, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x72, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_DELETE_SUBSCR_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DELETE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_DELETE_SUBSCR_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_DICT_MERGE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_DICT_MERGE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 8d 67 f0                   leaq    -0x10(%r15), %r12
// 1ca: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: 0f b7 c0                      movzwl  %ax, %eax
// 1db: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       # imm = 0xFFFFFFFC
// 1e0: 29 c1                         subl    %eax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 48 98                         cltq
// 1e6: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// 1eb: 48 63 c1                      movslq  %ecx, %rax
// 1ee: 4d 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %r15
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _PyDict_MergeEx
// 1fd: 4c 89 ee                      movq    %r13, %rsi
// 200: ba 02 00 00 00                movl    $0x2, %edx
// 205: ff d0                         callq   *%rax
// 207: 85 c0                         testl   %eax, %eax
// 209: 78 73                         js      0x27e <_JIT_ENTRY+0x27e>
// 20b: 49 8b 45 00                   movq    (%r13), %rax
// 20f: 48 85 c0                      testq   %rax, %rax
// 212: 7f 22                         jg      0x236 <_JIT_ENTRY+0x236>
// 214: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000216:  R_X86_64_64  .rodata.str1.1
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_NegativeRefcount
// 228: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// 22d: 4c 89 ea                      movq    %r13, %rdx
// 230: ff d0                         callq   *%rax
// 232: 49 8b 45 00                   movq    (%r13), %rax
// 236: 85 c0                         testl   %eax, %eax
// 238: 78 21                         js      0x25b <_JIT_ENTRY+0x25b>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 244: ff d0                         callq   *%rax
// 246: 49 ff 4d 00                   decq    (%r13)
// 24a: 75 0f                         jne     0x25b <_JIT_ENTRY+0x25b>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_Dealloc
// 256: 4c 89 ef                      movq    %r13, %rdi
// 259: ff d0                         callq   *%rax
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _JIT_CONTINUE
// 265: 48 89 df                      movq    %rbx, %rdi
// 268: 4c 89 e6                      movq    %r12, %rsi
// 26b: 4c 89 f2                      movq    %r14, %rdx
// 26e: 48 83 c4 08                   addq    $0x8, %rsp
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: 5d                            popq    %rbp
// 27c: ff e0                         jmpq    *%rax
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _PyEval_FormatKwargsError
// 288: 4c 89 f7                      movq    %r14, %rdi
// 28b: 4c 89 fe                      movq    %r15, %rsi
// 28e: 4c 89 ea                      movq    %r13, %rdx
// 291: ff d0                         callq   *%rax
// 293: 49 8b 45 00                   movq    (%r13), %rax
// 297: 48 85 c0                      testq   %rax, %rax
// 29a: 7f 22                         jg      0x2be <_JIT_ENTRY+0x2be>
// 29c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029e:  R_X86_64_64  .rodata.str1.1
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_NegativeRefcount
// 2b0: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 2b5: 4c 89 ea                      movq    %r13, %rdx
// 2b8: ff d0                         callq   *%rax
// 2ba: 49 8b 45 00                   movq    (%r13), %rax
// 2be: 85 c0                         testl   %eax, %eax
// 2c0: 78 21                         js      0x2e3 <_JIT_ENTRY+0x2e3>
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 ff 4d 00                   decq    (%r13)
// 2d2: 75 0f                         jne     0x2e3 <_JIT_ENTRY+0x2e3>
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _Py_Dealloc
// 2de: 4c 89 ef                      movq    %r13, %rdi
// 2e1: ff d0                         callq   *%rax
// 2e3: 49 29 dc                      subq    %rbx, %r12
// 2e6: 49 83 c4 b8                   addq    $-0x48, %r12
// 2ea: 49 c1 ec 03                   shrq    $0x3, %r12
// 2ee: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2f2: 31 c0                         xorl    %eax, %eax
// 2f4: e9 21 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2f9: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DICT_MERGE_code_body[762] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x67, 0xf0, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0x63, 0xc1, 0x4d, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x73, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x21, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_DICT_MERGE_code_holes[23] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DICT_MERGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_DICT_MERGE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_DICT_UPDATE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_DICT_UPDATE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 8d 67 f0                   leaq    -0x10(%r15), %r12
// 1ca: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: f7 d0                         notl    %eax
// 1da: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1df: 48 98                         cltq
// 1e1: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  PyDict_Update
// 1f0: 4c 89 ee                      movq    %r13, %rsi
// 1f3: ff d0                         callq   *%rax
// 1f5: 85 c0                         testl   %eax, %eax
// 1f7: 78 73                         js      0x26c <_JIT_ENTRY+0x26c>
// 1f9: 49 8b 45 00                   movq    (%r13), %rax
// 1fd: 48 85 c0                      testq   %rax, %rax
// 200: 7f 22                         jg      0x224 <_JIT_ENTRY+0x224>
// 202: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000204:  R_X86_64_64  .rodata.str1.1
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_NegativeRefcount
// 216: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 21b: 4c 89 ea                      movq    %r13, %rdx
// 21e: ff d0                         callq   *%rax
// 220: 49 8b 45 00                   movq    (%r13), %rax
// 224: 85 c0                         testl   %eax, %eax
// 226: 78 21                         js      0x249 <_JIT_ENTRY+0x249>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 232: ff d0                         callq   *%rax
// 234: 49 ff 4d 00                   decq    (%r13)
// 238: 75 0f                         jne     0x249 <_JIT_ENTRY+0x249>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_Dealloc
// 244: 4c 89 ef                      movq    %r13, %rdi
// 247: ff d0                         callq   *%rax
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_CONTINUE
// 253: 48 89 df                      movq    %rbx, %rdi
// 256: 4c 89 e6                      movq    %r12, %rsi
// 259: 4c 89 f2                      movq    %r14, %rdx
// 25c: 48 83 c4 08                   addq    $0x8, %rsp
// 260: 5b                            popq    %rbx
// 261: 41 5c                         popq    %r12
// 263: 41 5d                         popq    %r13
// 265: 41 5e                         popq    %r14
// 267: 41 5f                         popq    %r15
// 269: 5d                            popq    %rbp
// 26a: ff e0                         jmpq    *%rax
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  PyExc_AttributeError
// 276: 48 8b 30                      movq    (%rax), %rsi
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _PyErr_ExceptionMatches
// 283: 4c 89 f7                      movq    %r14, %rdi
// 286: ff d0                         callq   *%rax
// 288: 85 c0                         testl   %eax, %eax
// 28a: 74 31                         je      0x2bd <_JIT_ENTRY+0x2bd>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  PyExc_TypeError
// 296: 48 8b 30                      movq    (%rax), %rsi
// 299: 49 8b 45 08                   movq    0x8(%r13), %rax
// 29d: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2a1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a3:  R_X86_64_64  .rodata.str1.1+0x39
// 2ab: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002ad:  R_X86_64_64  _PyErr_Format
// 2b5: 4c 89 f7                      movq    %r14, %rdi
// 2b8: 31 c0                         xorl    %eax, %eax
// 2ba: 41 ff d0                      callq   *%r8
// 2bd: 49 8b 45 00                   movq    (%r13), %rax
// 2c1: 48 85 c0                      testq   %rax, %rax
// 2c4: 7f 22                         jg      0x2e8 <_JIT_ENTRY+0x2e8>
// 2c6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c8:  R_X86_64_64  .rodata.str1.1
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_NegativeRefcount
// 2da: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 2df: 4c 89 ea                      movq    %r13, %rdx
// 2e2: ff d0                         callq   *%rax
// 2e4: 49 8b 45 00                   movq    (%r13), %rax
// 2e8: 85 c0                         testl   %eax, %eax
// 2ea: 78 21                         js      0x30d <_JIT_ENTRY+0x30d>
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f6: ff d0                         callq   *%rax
// 2f8: 49 ff 4d 00                   decq    (%r13)
// 2fc: 75 0f                         jne     0x30d <_JIT_ENTRY+0x30d>
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  _Py_Dealloc
// 308: 4c 89 ef                      movq    %r13, %rdi
// 30b: ff d0                         callq   *%rax
// 30d: 49 29 dc                      subq    %rbx, %r12
// 310: 49 83 c4 b8                   addq    $-0x48, %r12
// 314: 49 c1 ec 03                   shrq    $0x3, %r12
// 318: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 31c: 31 c0                         xorl    %eax, %eax
// 31e: e9 f7 fd ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 323: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DICT_UPDATE_code_body[804] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x67, 0xf0, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x73, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xf7, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_DICT_UPDATE_code_holes[27] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object is not a mapping\x00"
// 5a: 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_DICT_UPDATE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_DICT_UPDATE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_END_SEND
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_END_SEND.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 4c 01 ed                      addq    %r13, %rbp
// 19a: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 1a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 17                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1af: ff d1                         callq   *%rcx
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 1ca: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 48 85 c0                      testq   %rax, %rax
// 1d5: 7f 22                         jg      0x1f9 <_JIT_ENTRY+0x1f9>
// 1d7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d9:  R_X86_64_64  .rodata.str1.1
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_NegativeRefcount
// 1eb: be 66 00 00 00                movl    $0x66, %esi
// 1f0: 4c 89 e2                      movq    %r12, %rdx
// 1f3: ff d0                         callq   *%rax
// 1f5: 49 8b 04 24                   movq    (%r12), %rax
// 1f9: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 1fd: 85 c0                         testl   %eax, %eax
// 1ff: 78 21                         js      0x222 <_JIT_ENTRY+0x222>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20b: ff d0                         callq   *%rax
// 20d: 49 ff 0c 24                   decq    (%r12)
// 211: 75 0f                         jne     0x222 <_JIT_ENTRY+0x222>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_Dealloc
// 21d: 4c 89 e7                      movq    %r12, %rdi
// 220: ff d0                         callq   *%rax
// 222: 49 89 6e e8                   movq    %rbp, -0x18(%r14)
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_CONTINUE
// 230: 48 89 df                      movq    %rbx, %rdi
// 233: 4c 89 ee                      movq    %r13, %rsi
// 236: 4c 89 fa                      movq    %r15, %rdx
// 239: 48 83 c4 08                   addq    $0x8, %rsp
// 23d: 5b                            popq    %rbx
// 23e: 41 5c                         popq    %r12
// 240: 41 5d                         popq    %r13
// 242: 41 5e                         popq    %r14
// 244: 41 5f                         popq    %r15
// 246: 5d                            popq    %rbp
// 247: ff e0                         jmpq    *%rax
// 249: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_END_SEND_code_body[586] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x01, 0xed, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xe8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_END_SEND_code_holes[16] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_END_SEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_END_SEND_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_EXIT_INIT_CHECK
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_EXIT_INIT_CHECK.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 3b                         jbe     0x12d <_JIT_ENTRY+0x12d>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 4c 8d 3c 48                   leaq    (%rax,%rcx,2), %r15
// 114: 49 81 c7 c8 00 00 00          addq    $0xc8, %r15
// 11b: 4c 89 f8                      movq    %r15, %rax
// 11e: 48 83 c4 08                   addq    $0x8, %rsp
// 122: 5b                            popq    %rbx
// 123: 41 5c                         popq    %r12
// 125: 41 5d                         popq    %r13
// 127: 41 5e                         popq    %r14
// 129: 41 5f                         popq    %r15
// 12b: 5d                            popq    %rbp
// 12c: c3                            retq
// 12d: 89 c0                         movl    %eax, %eax
// 12f: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 133: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 138: 75 28                         jne     0x162 <_JIT_ENTRY+0x162>
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  PyInterpreterState_Get
// 144: ff d0                         callq   *%rax
// 146: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14d: 49 ff 4d 00                   decq    (%r13)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  PyObject_Free
// 15d: 4c 89 ef                      movq    %r13, %rdi
// 160: ff d0                         callq   *%rax
// 162: 48 c1 e5 04                   shlq    $0x4, %rbp
// 166: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000168:  R_X86_64_64  _PyRuntime
// 170: 49 8b 04 24                   movq    (%r12), %rax
// 174: 48 85 c0                      testq   %rax, %rax
// 177: 7f 28                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 179: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017b:  R_X86_64_64  .rodata.str1.1
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_NegativeRefcount
// 18d: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 192: 4c 89 e2                      movq    %r12, %rdx
// 195: 49 89 cd                      movq    %rcx, %r13
// 198: ff d0                         callq   *%rax
// 19a: 4c 89 e9                      movq    %r13, %rcx
// 19d: 49 8b 04 24                   movq    (%r12), %rax
// 1a1: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 1a5: 48 01 cd                      addq    %rcx, %rbp
// 1a8: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 1af: 85 c0                         testl   %eax, %eax
// 1b1: 78 21                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bd: ff d0                         callq   *%rax
// 1bf: 49 ff 0c 24                   decq    (%r12)
// 1c3: 75 0f                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_Dealloc
// 1cf: 4c 89 e7                      movq    %r12, %rdi
// 1d2: ff d0                         callq   *%rax
// 1d4: 49 89 6d 00                   movq    %rbp, (%r13)
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _Py_NoneStruct
// 1e2: 48 39 c5                      cmpq    %rax, %rbp
// 1e5: 74 48                         je      0x22f <_JIT_ENTRY+0x22f>
// 1e7: 49 83 c6 f8                   addq    $-0x8, %r14
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  PyExc_TypeError
// 1f5: 48 8b 38                      movq    (%rax), %rdi
// 1f8: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 1fc: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 200: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1+0x39
// 20a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020c:  R_X86_64_64  PyErr_Format
// 214: 45 31 ff                      xorl    %r15d, %r15d
// 217: 31 c0                         xorl    %eax, %eax
// 219: ff d1                         callq   *%rcx
// 21b: 49 29 de                      subq    %rbx, %r14
// 21e: 49 83 c6 b8                   addq    $-0x48, %r14
// 222: 49 c1 ee 03                   shrq    $0x3, %r14
// 226: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 22a: e9 ec fe ff ff                jmp     0x11b <_JIT_ENTRY+0x11b>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _JIT_CONTINUE
// 239: 48 89 df                      movq    %rbx, %rdi
// 23c: 4c 89 ee                      movq    %r13, %rsi
// 23f: 4c 89 fa                      movq    %r15, %rdx
// 242: 48 83 c4 08                   addq    $0x8, %rsp
// 246: 5b                            popq    %rbx
// 247: 41 5c                         popq    %r12
// 249: 41 5d                         popq    %r13
// 24b: 41 5e                         popq    %r14
// 24d: 41 5f                         popq    %r15
// 24f: 5d                            popq    %rbp
// 250: ff e0                         jmpq    *%rax
// 252: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_EXIT_INIT_CHECK_code_body[595] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x3b, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x4c, 0x8d, 0x3c, 0x48, 0x49, 0x81, 0xc7, 0xc8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf0, 0x48, 0x01, 0xcd, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc5, 0x74, 0x48, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x31, 0xff, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0xe9, 0xec, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_EXIT_INIT_CHECK_code_holes[16] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__init__() should return None, not '%.200s'\x00"
// 65: 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_EXIT_INIT_CHECK_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_EXIT_INIT_CHECK_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_EXIT_TRACE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_EXIT_TRACE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  PyLong_Type
// 1d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 22: 0f 85 69 01 00 00             jne     0x191 <_JIT_ENTRY+0x191>
// 28: 4d 8b 7e f0                   movq    -0x10(%r14), %r15
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  PyUnicode_Type
// 36: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 3a: 0f 85 51 01 00 00             jne     0x191 <_JIT_ENTRY+0x191>
// 40: 49 83 7c 24 10 08             cmpq    $0x8, 0x10(%r12)
// 46: 0f 87 45 01 00 00             ja      0x191 <_JIT_ENTRY+0x191>
// 4c: 41 8b 44 24 18                movl    0x18(%r12), %eax
// 51: 49 39 47 10                   cmpq    %rax, 0x10(%r15)
// 55: 0f 8e 36 01 00 00             jle     0x191 <_JIT_ENTRY+0x191>
// 5b: 41 8b 4f 20                   movl    0x20(%r15), %ecx
// 5f: 89 ca                         movl    %ecx, %edx
// 61: c1 ea 02                      shrl    $0x2, %edx
// 64: 83 e2 07                      andl    $0x7, %edx
// 67: 83 fa 02                      cmpl    $0x2, %edx
// 6a: 74 14                         je      0x80 <_JIT_ENTRY+0x80>
// 6c: 83 fa 01                      cmpl    $0x1, %edx
// 6f: 75 1e                         jne     0x8f <_JIT_ENTRY+0x8f>
// 71: f6 c1 20                      testb   $0x20, %cl
// 74: 75 24                         jne     0x9a <_JIT_ENTRY+0x9a>
// 76: 49 8b 4f 38                   movq    0x38(%r15), %rcx
// 7a: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 7e: eb 65                         jmp     0xe5 <_JIT_ENTRY+0xe5>
// 80: f6 c1 20                      testb   $0x20, %cl
// 83: 75 2f                         jne     0xb4 <_JIT_ENTRY+0xb4>
// 85: 49 8b 4f 38                   movq    0x38(%r15), %rcx
// 89: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 8d: eb 56                         jmp     0xe5 <_JIT_ENTRY+0xe5>
// 8f: f6 c1 20                      testb   $0x20, %cl
// 92: 75 3a                         jne     0xce <_JIT_ENTRY+0xce>
// 94: 49 8b 4f 38                   movq    0x38(%r15), %rcx
// 98: eb 48                         jmp     0xe2 <_JIT_ENTRY+0xe2>
// 9a: 31 d2                         xorl    %edx, %edx
// 9c: f6 c1 40                      testb   $0x40, %cl
// 9f: 0f 94 c2                      sete    %dl
// a2: 48 c1 e2 04                   shlq    $0x4, %rdx
// a6: 4a 8d 0c 3a                   leaq    (%rdx,%r15), %rcx
// aa: 48 83 c1 28                   addq    $0x28, %rcx
// ae: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// b2: eb 31                         jmp     0xe5 <_JIT_ENTRY+0xe5>
// b4: 31 d2                         xorl    %edx, %edx
// b6: f6 c1 40                      testb   $0x40, %cl
// b9: 0f 94 c2                      sete    %dl
// bc: 48 c1 e2 04                   shlq    $0x4, %rdx
// c0: 4a 8d 0c 3a                   leaq    (%rdx,%r15), %rcx
// c4: 48 83 c1 28                   addq    $0x28, %rcx
// c8: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// cc: eb 17                         jmp     0xe5 <_JIT_ENTRY+0xe5>
// ce: 31 d2                         xorl    %edx, %edx
// d0: f6 c1 40                      testb   $0x40, %cl
// d3: 0f 94 c2                      sete    %dl
// d6: 48 c1 e2 04                   shlq    $0x4, %rdx
// da: 4a 8d 0c 3a                   leaq    (%rdx,%r15), %rcx
// de: 48 83 c1 28                   addq    $0x28, %rcx
// e2: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// e5: 83 f8 7f                      cmpl    $0x7f, %eax
// e8: 0f 87 a3 00 00 00             ja      0x191 <_JIT_ENTRY+0x191>
// ee: 89 c0                         movl    %eax, %eax
// f0: 4c 8d 2c 40                   leaq    (%rax,%rax,2), %r13
// f4: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// fa: 75 28                         jne     0x124 <_JIT_ENTRY+0x124>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  PyInterpreterState_Get
// 106: ff d0                         callq   *%rax
// 108: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 10f: 49 ff 0c 24                   decq    (%r12)
// 113: 75 0f                         jne     0x124 <_JIT_ENTRY+0x124>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  PyObject_Free
// 11f: 4c 89 e7                      movq    %r12, %rdi
// 122: ff d0                         callq   *%rax
// 124: 49 c1 e5 04                   shlq    $0x4, %r13
// 128: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000012a:  R_X86_64_64  _PyRuntime
// 132: 49 8b 07                      movq    (%r15), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 21                         jg      0x15b <_JIT_ENTRY+0x15b>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 153: 4c 89 fa                      movq    %r15, %rdx
// 156: ff d0                         callq   *%rax
// 158: 49 8b 07                      movq    (%r15), %rax
// 15b: 4d 01 ec                      addq    %r13, %r12
// 15e: 49 81 c4 a0 32 01 00          addq    $0x132a0, %r12          # imm = 0x132A0
// 165: 85 c0                         testl   %eax, %eax
// 167: 78 20                         js      0x189 <_JIT_ENTRY+0x189>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0f                      decq    (%r15)
// 178: 75 0f                         jne     0x189 <_JIT_ENTRY+0x189>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_Dealloc
// 184: 4c 89 ff                      movq    %r15, %rdi
// 187: ff d0                         callq   *%rax
// 189: 4d 89 66 f0                   movq    %r12, -0x10(%r14)
// 18d: 49 83 c6 f8                   addq    $-0x8, %r14
// 191: 49 29 de                      subq    %rbx, %r14
// 194: 49 83 c6 b8                   addq    $-0x48, %r14
// 198: 49 c1 ee 03                   shrq    $0x3, %r14
// 19c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a0: 48 8b 03                      movq    (%rbx), %rax
// 1a3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a5:  R_X86_64_64  _JIT_TARGET
// 1ad: 89 c9                         movl    %ecx, %ecx
// 1af: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 1b7: 5b                            popq    %rbx
// 1b8: 41 5c                         popq    %r12
// 1ba: 41 5d                         popq    %r13
// 1bc: 41 5e                         popq    %r14
// 1be: 41 5f                         popq    %r15
// 1c0: c3                            retq
// 1c1: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_EXIT_TRACE_code_body[450] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x69, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x7e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x0f, 0x85, 0x51, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x08, 0x0f, 0x87, 0x45, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x39, 0x47, 0x10, 0x0f, 0x8e, 0x36, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x4f, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x14, 0x83, 0xfa, 0x01, 0x75, 0x1e, 0xf6, 0xc1, 0x20, 0x75, 0x24, 0x49, 0x8b, 0x4f, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x65, 0xf6, 0xc1, 0x20, 0x75, 0x2f, 0x49, 0x8b, 0x4f, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x56, 0xf6, 0xc1, 0x20, 0x75, 0x3a, 0x49, 0x8b, 0x4f, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x3a, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x3a, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x3a, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xa3, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x4c, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xc1, 0xe5, 0x04, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x4d, 0x01, 0xec, 0x49, 0x81, 0xc4, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0x66, 0xf0, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_EXIT_TRACE_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_EXIT_TRACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_EXIT_TRACE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_FORMAT_SIMPLE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_FORMAT_SIMPLE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 6c 24 08                cmpq    %rbp, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 14 40                   leaq    (%rax,%rax,2), %rdx
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 34                         jne     0x16a <_JIT_ENTRY+0x16a>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: 48 89 14 24                   movq    %rdx, (%rsp)
// 144: ff d0                         callq   *%rax
// 146: 48 8b 14 24                   movq    (%rsp), %rdx
// 14a: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 151: 49 ff 4d 00                   decq    (%r13)
// 155: 75 13                         jne     0x16a <_JIT_ENTRY+0x16a>
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  PyObject_Free
// 161: 4c 89 ef                      movq    %r13, %rdi
// 164: ff d0                         callq   *%rax
// 166: 48 8b 14 24                   movq    (%rsp), %rdx
// 16a: 48 c1 e2 04                   shlq    $0x4, %rdx
// 16e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000170:  R_X86_64_64  _PyRuntime
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 32                         jg      0x1b3 <_JIT_ENTRY+0x1b3>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 19a: 49 89 d5                      movq    %rdx, %r13
// 19d: 4c 89 e2                      movq    %r12, %rdx
// 1a0: ff d0                         callq   *%rax
// 1a2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001a4:  R_X86_64_64  _PyRuntime
// 1ac: 4c 89 ea                      movq    %r13, %rdx
// 1af: 49 8b 04 24                   movq    (%r12), %rax
// 1b3: 49 8d 4e f0                   leaq    -0x10(%r14), %rcx
// 1b7: 4c 8d 2c 16                   leaq    (%rsi,%rdx), %r13
// 1bb: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 2d                         js      0x1f3 <_JIT_ENTRY+0x1f3>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: 48 89 0c 24                   movq    %rcx, (%rsp)
// 1d4: ff d0                         callq   *%rax
// 1d6: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1da: 49 ff 0c 24                   decq    (%r12)
// 1de: 75 13                         jne     0x1f3 <_JIT_ENTRY+0x1f3>
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_Dealloc
// 1ea: 4c 89 e7                      movq    %r12, %rdi
// 1ed: ff d0                         callq   *%rax
// 1ef: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1f3: 4c 89 29                      movq    %r13, (%rcx)
// 1f6: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 1fa: 74 72                         je      0x26e <_JIT_ENTRY+0x26e>
// 1fc: 48 89 cd                      movq    %rcx, %rbp
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  PyObject_Format
// 209: 4c 89 ef                      movq    %r13, %rdi
// 20c: 31 f6                         xorl    %esi, %esi
// 20e: ff d0                         callq   *%rax
// 210: 49 89 c4                      movq    %rax, %r12
// 213: 49 8b 45 00                   movq    (%r13), %rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 7f 22                         jg      0x23e <_JIT_ENTRY+0x23e>
// 21c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021e:  R_X86_64_64  .rodata.str1.1
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_NegativeRefcount
// 230: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// 235: 4c 89 ea                      movq    %r13, %rdx
// 238: ff d0                         callq   *%rax
// 23a: 49 8b 45 00                   movq    (%r13), %rax
// 23e: 85 c0                         testl   %eax, %eax
// 240: 78 21                         js      0x263 <_JIT_ENTRY+0x263>
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24c: ff d0                         callq   *%rax
// 24e: 49 ff 4d 00                   decq    (%r13)
// 252: 75 0f                         jne     0x263 <_JIT_ENTRY+0x263>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_Dealloc
// 25e: 4c 89 ef                      movq    %r13, %rdi
// 261: ff d0                         callq   *%rax
// 263: 4d 89 e5                      movq    %r12, %r13
// 266: 4d 85 e4                      testq   %r12, %r12
// 269: 48 89 e9                      movq    %rbp, %rcx
// 26c: 74 2a                         je      0x298 <_JIT_ENTRY+0x298>
// 26e: 49 83 c6 f8                   addq    $-0x8, %r14
// 272: 4c 89 29                      movq    %r13, (%rcx)
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _JIT_CONTINUE
// 27f: 48 89 df                      movq    %rbx, %rdi
// 282: 4c 89 f6                      movq    %r14, %rsi
// 285: 4c 89 fa                      movq    %r15, %rdx
// 288: 48 83 c4 08                   addq    $0x8, %rsp
// 28c: 5b                            popq    %rbx
// 28d: 41 5c                         popq    %r12
// 28f: 41 5d                         popq    %r13
// 291: 41 5e                         popq    %r14
// 293: 41 5f                         popq    %r15
// 295: 5d                            popq    %rbp
// 296: ff e0                         jmpq    *%rax
// 298: 48 29 d9                      subq    %rbx, %rcx
// 29b: 48 83 c1 b8                   addq    $-0x48, %rcx
// 29f: 48 c1 e9 03                   shrq    $0x3, %rcx
// 2a3: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 2a6: 31 c0                         xorl    %eax, %eax
// 2a8: e9 6d fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2ad: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_FORMAT_SIMPLE_code_body[686] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x6c, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x14, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x14, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x32, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd5, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x4e, 0xf0, 0x4c, 0x8d, 0x2c, 0x16, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x4c, 0x89, 0x29, 0x49, 0x39, 0x6d, 0x08, 0x74, 0x72, 0x48, 0x89, 0xcd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xe5, 0x4d, 0x85, 0xe4, 0x48, 0x89, 0xe9, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0x31, 0xc0, 0xe9, 0x6d, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_FORMAT_SIMPLE_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_FORMAT_SIMPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_FORMAT_SIMPLE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_FORMAT_WITH_SPEC
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_FORMAT_WITH_SPEC.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 49 8b 6e e8                   movq    -0x18(%r14), %rbp
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  PyObject_Format
// 1d8: 48 89 ef                      movq    %rbp, %rdi
// 1db: 4c 89 ee                      movq    %r13, %rsi
// 1de: ff d0                         callq   *%rax
// 1e0: 49 89 c4                      movq    %rax, %r12
// 1e3: 48 8b 45 00                   movq    (%rbp), %rax
// 1e7: 48 85 c0                      testq   %rax, %rax
// 1ea: 7f 22                         jg      0x20e <_JIT_ENTRY+0x20e>
// 1ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ee:  R_X86_64_64  .rodata.str1.1
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_NegativeRefcount
// 200: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 205: 48 89 ea                      movq    %rbp, %rdx
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 45 00                   movq    (%rbp), %rax
// 20e: 85 c0                         testl   %eax, %eax
// 210: 78 21                         js      0x233 <_JIT_ENTRY+0x233>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21c: ff d0                         callq   *%rax
// 21e: 48 ff 4d 00                   decq    (%rbp)
// 222: 75 0f                         jne     0x233 <_JIT_ENTRY+0x233>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_Dealloc
// 22e: 48 89 ef                      movq    %rbp, %rdi
// 231: ff d0                         callq   *%rax
// 233: 49 8b 45 00                   movq    (%r13), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 7f 22                         jg      0x25e <_JIT_ENTRY+0x25e>
// 23c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_NegativeRefcount
// 250: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// 255: 4c 89 ea                      movq    %r13, %rdx
// 258: ff d0                         callq   *%rax
// 25a: 49 8b 45 00                   movq    (%r13), %rax
// 25e: 85 c0                         testl   %eax, %eax
// 260: 78 21                         js      0x283 <_JIT_ENTRY+0x283>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26c: ff d0                         callq   *%rax
// 26e: 49 ff 4d 00                   decq    (%r13)
// 272: 75 0f                         jne     0x283 <_JIT_ENTRY+0x283>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_Dealloc
// 27e: 4c 89 ef                      movq    %r13, %rdi
// 281: ff d0                         callq   *%rax
// 283: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 287: 4d 85 e4                      testq   %r12, %r12
// 28a: 74 2a                         je      0x2b6 <_JIT_ENTRY+0x2b6>
// 28c: 49 83 c6 f0                   addq    $-0x10, %r14
// 290: 4c 89 20                      movq    %r12, (%rax)
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _JIT_CONTINUE
// 29d: 48 89 df                      movq    %rbx, %rdi
// 2a0: 4c 89 f6                      movq    %r14, %rsi
// 2a3: 4c 89 fa                      movq    %r15, %rdx
// 2a6: 48 83 c4 08                   addq    $0x8, %rsp
// 2aa: 5b                            popq    %rbx
// 2ab: 41 5c                         popq    %r12
// 2ad: 41 5d                         popq    %r13
// 2af: 41 5e                         popq    %r14
// 2b1: 41 5f                         popq    %r15
// 2b3: 5d                            popq    %rbp
// 2b4: ff e0                         jmpq    *%rax
// 2b6: 48 29 d8                      subq    %rbx, %rax
// 2b9: 48 83 c0 b8                   addq    $-0x48, %rax
// 2bd: 48 c1 e8 03                   shrq    $0x3, %rax
// 2c1: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2c4: 31 c0                         xorl    %eax, %eax
// 2c6: e9 4f fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2cb: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_FORMAT_WITH_SPEC_code_body[716] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x4f, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_FORMAT_WITH_SPEC_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_FORMAT_WITH_SPEC_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_FORMAT_WITH_SPEC_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_FOR_ITER_TIER_TWO.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 39                         jbe     0x12b <_JIT_ENTRY+0x12b>
// f2: 4c 89 f5                      movq    %r14, %rbp
// f5: 48 29 dd                      subq    %rbx, %rbp
// f8: 48 83 c5 b8                   addq    $-0x48, %rbp
// fc: 48 c1 ed 03                   shrq    $0x3, %rbp
// 100: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 103: 48 8b 03                      movq    (%rbx), %rax
// 106: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000108:  R_X86_64_64  _JIT_TARGET
// 110: 89 c9                         movl    %ecx, %ecx
// 112: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 116: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11c: 48 83 c4 08                   addq    $0x8, %rsp
// 120: 5b                            popq    %rbx
// 121: 41 5c                         popq    %r12
// 123: 41 5d                         popq    %r13
// 125: 41 5e                         popq    %r14
// 127: 41 5f                         popq    %r15
// 129: 5d                            popq    %rbp
// 12a: c3                            retq
// 12b: 89 c0                         movl    %eax, %eax
// 12d: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 131: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 136: 75 28                         jne     0x160 <_JIT_ENTRY+0x160>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  PyInterpreterState_Get
// 142: ff d0                         callq   *%rax
// 144: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14b: 49 ff 4d 00                   decq    (%r13)
// 14f: 75 0f                         jne     0x160 <_JIT_ENTRY+0x160>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  PyObject_Free
// 15b: 4c 89 ef                      movq    %r13, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 48 c1 e5 04                   shlq    $0x4, %rbp
// 164: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000166:  R_X86_64_64  _PyRuntime
// 16e: 49 8b 04 24                   movq    (%r12), %rax
// 172: 48 85 c0                      testq   %rax, %rax
// 175: 49 89 ed                      movq    %rbp, %r13
// 178: 7f 28                         jg      0x1a2 <_JIT_ENTRY+0x1a2>
// 17a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017c:  R_X86_64_64  .rodata.str1.1
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_NegativeRefcount
// 18e: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 193: 4c 89 e2                      movq    %r12, %rdx
// 196: 48 89 cd                      movq    %rcx, %rbp
// 199: ff d0                         callq   *%rax
// 19b: 48 89 e9                      movq    %rbp, %rcx
// 19e: 49 8b 04 24                   movq    (%r12), %rax
// 1a2: 49 8d 6e f0                   leaq    -0x10(%r14), %rbp
// 1a6: 49 01 cd                      addq    %rcx, %r13
// 1a9: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1b0: 85 c0                         testl   %eax, %eax
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4c 89 6d 00                   movq    %r13, (%rbp)
// 1d9: 49 8b 45 08                   movq    0x8(%r13), %rax
// 1dd: 4c 89 ef                      movq    %r13, %rdi
// 1e0: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// 1e6: 48 85 c0                      testq   %rax, %rax
// 1e9: 74 27                         je      0x212 <_JIT_ENTRY+0x212>
// 1eb: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _JIT_CONTINUE
// 1f9: 48 89 df                      movq    %rbx, %rdi
// 1fc: 4c 89 f6                      movq    %r14, %rsi
// 1ff: 4c 89 fa                      movq    %r15, %rdx
// 202: 48 83 c4 08                   addq    $0x8, %rsp
// 206: 5b                            popq    %rbx
// 207: 41 5c                         popq    %r12
// 209: 41 5d                         popq    %r13
// 20b: 41 5e                         popq    %r14
// 20d: 41 5f                         popq    %r15
// 20f: 5d                            popq    %rbp
// 210: ff e0                         jmpq    *%rax
// 212: 49 8b 47 68                   movq    0x68(%r15), %rax
// 216: 48 85 c0                      testq   %rax, %rax
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 220: 74 2f                         je      0x251 <_JIT_ENTRY+0x251>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  PyExc_StopIteration
// 22c: 48 8b 30                      movq    (%rax), %rsi
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _PyErr_ExceptionMatches
// 239: 4c 89 ff                      movq    %r15, %rdi
// 23c: ff d0                         callq   *%rax
// 23e: 85 c0                         testl   %eax, %eax
// 240: 74 6c                         je      0x2ae <_JIT_ENTRY+0x2ae>
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _PyErr_Clear
// 24c: 4c 89 ff                      movq    %r15, %rdi
// 24f: ff d0                         callq   *%rax
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7f 22                         jg      0x27c <_JIT_ENTRY+0x27c>
// 25a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025c:  R_X86_64_64  .rodata.str1.1
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_NegativeRefcount
// 26e: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// 273: 4c 89 ea                      movq    %r13, %rdx
// 276: ff d0                         callq   *%rax
// 278: 49 8b 45 00                   movq    (%r13), %rax
// 27c: 85 c0                         testl   %eax, %eax
// 27e: 0f 88 71 fe ff ff             js      0xf5 <_JIT_ENTRY+0xf5>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28e: ff d0                         callq   *%rax
// 290: 49 ff 4d 00                   decq    (%r13)
// 294: 0f 85 5b fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_Dealloc
// 2a4: 4c 89 ef                      movq    %r13, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: e9 47 fe ff ff                jmp     0xf5 <_JIT_ENTRY+0xf5>
// 2ae: 49 83 c6 f8                   addq    $-0x8, %r14
// 2b2: 49 29 de                      subq    %rbx, %r14
// 2b5: 49 83 c6 b8                   addq    $-0x48, %r14
// 2b9: 49 c1 ee 03                   shrq    $0x3, %r14
// 2bd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2c1: 31 c0                         xorl    %eax, %eax
// 2c3: e9 54 fe ff ff                jmp     0x11c <_JIT_ENTRY+0x11c>
// 2c8: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_FOR_ITER_TIER_TWO_code_body[713] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf5, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x49, 0x89, 0xed, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0x89, 0xcd, 0xff, 0xd0, 0x48, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x6e, 0xf0, 0x49, 0x01, 0xcd, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6d, 0x00, 0x49, 0x8b, 0x45, 0x08, 0x4c, 0x89, 0xef, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x6c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x71, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x5b, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x47, 0xfe, 0xff, 0xff, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x54, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_FOR_ITER_TIER_TWO_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_FOR_ITER_TIER_TWO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_FOR_ITER_TIER_TWO_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GET_AITER
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GET_AITER.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 8d 4f f0                   leaq    -0x10(%r15), %rcx
// 19b: 48 89 0c 24                   movq    %rcx, (%rsp)
// 19f: 49 01 ed                      addq    %rbp, %r13
// 1a2: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 78 21                         js      0x1ce <_JIT_ENTRY+0x1ce>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b7: ff d0                         callq   *%rax
// 1b9: 49 ff 0c 24                   decq    (%r12)
// 1bd: 75 0f                         jne     0x1ce <_JIT_ENTRY+0x1ce>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_Dealloc
// 1c9: 4c 89 e7                      movq    %r12, %rdi
// 1cc: ff d0                         callq   *%rax
// 1ce: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1d2: 4c 89 6d 00                   movq    %r13, (%rbp)
// 1d6: 49 8b 45 08                   movq    0x8(%r13), %rax
// 1da: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 1de: 48 85 c9                      testq   %rcx, %rcx
// 1e1: 0f 84 b6 00 00 00             je      0x29d <_JIT_ENTRY+0x29d>
// 1e7: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 1eb: 48 85 c9                      testq   %rcx, %rcx
// 1ee: 0f 84 a9 00 00 00             je      0x29d <_JIT_ENTRY+0x29d>
// 1f4: 4c 89 ef                      movq    %r13, %rdi
// 1f7: ff d1                         callq   *%rcx
// 1f9: 49 89 c4                      movq    %rax, %r12
// 1fc: 49 8b 45 00                   movq    (%r13), %rax
// 200: 48 85 c0                      testq   %rax, %rax
// 203: 7f 22                         jg      0x227 <_JIT_ENTRY+0x227>
// 205: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000207:  R_X86_64_64  .rodata.str1.1
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_NegativeRefcount
// 219: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 21e: 4c 89 ea                      movq    %r13, %rdx
// 221: ff d0                         callq   *%rax
// 223: 49 8b 45 00                   movq    (%r13), %rax
// 227: 85 c0                         testl   %eax, %eax
// 229: 78 21                         js      0x24c <_JIT_ENTRY+0x24c>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 235: ff d0                         callq   *%rax
// 237: 49 ff 4d 00                   decq    (%r13)
// 23b: 75 0f                         jne     0x24c <_JIT_ENTRY+0x24c>
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _Py_Dealloc
// 247: 4c 89 ef                      movq    %r13, %rdi
// 24a: ff d0                         callq   *%rax
// 24c: 4d 85 e4                      testq   %r12, %r12
// 24f: 0f 84 44 01 00 00             je      0x399 <_JIT_ENTRY+0x399>
// 255: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 25a: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 25e: 48 85 c9                      testq   %rcx, %rcx
// 261: 0f 84 bd 00 00 00             je      0x324 <_JIT_ENTRY+0x324>
// 267: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 26c: 0f 84 b2 00 00 00             je      0x324 <_JIT_ENTRY+0x324>
// 272: 49 83 c7 f8                   addq    $-0x8, %r15
// 276: 4c 89 65 00                   movq    %r12, (%rbp)
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _JIT_CONTINUE
// 284: 48 89 df                      movq    %rbx, %rdi
// 287: 4c 89 fe                      movq    %r15, %rsi
// 28a: 4c 89 f2                      movq    %r14, %rdx
// 28d: 48 83 c4 08                   addq    $0x8, %rsp
// 291: 5b                            popq    %rbx
// 292: 41 5c                         popq    %r12
// 294: 41 5d                         popq    %r13
// 296: 41 5e                         popq    %r14
// 298: 41 5f                         popq    %r15
// 29a: 5d                            popq    %rbp
// 29b: ff e0                         jmpq    *%rax
// 29d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029f:  R_X86_64_64  PyExc_TypeError
// 2a7: 48 8b 31                      movq    (%rcx), %rsi
// 2aa: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2ae: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002b0:  R_X86_64_64  .rodata.str1.1+0x39
// 2b8: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002ba:  R_X86_64_64  _PyErr_Format
// 2c2: 4c 89 f7                      movq    %r14, %rdi
// 2c5: 31 c0                         xorl    %eax, %eax
// 2c7: 41 ff d0                      callq   *%r8
// 2ca: 49 8b 45 00                   movq    (%r13), %rax
// 2ce: 48 85 c0                      testq   %rax, %rax
// 2d1: 7f 22                         jg      0x2f5 <_JIT_ENTRY+0x2f5>
// 2d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d5:  R_X86_64_64  .rodata.str1.1
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_NegativeRefcount
// 2e7: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 2ec: 4c 89 ea                      movq    %r13, %rdx
// 2ef: ff d0                         callq   *%rax
// 2f1: 49 8b 45 00                   movq    (%r13), %rax
// 2f5: 85 c0                         testl   %eax, %eax
// 2f7: 0f 88 9c 00 00 00             js      0x399 <_JIT_ENTRY+0x399>
// 2fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 307: ff d0                         callq   *%rax
// 309: 49 ff 4d 00                   decq    (%r13)
// 30d: 0f 85 86 00 00 00             jne     0x399 <_JIT_ENTRY+0x399>
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _Py_Dealloc
// 31d: 4c 89 ef                      movq    %r13, %rdi
// 320: ff d0                         callq   *%rax
// 322: eb 75                         jmp     0x399 <_JIT_ENTRY+0x399>
// 324: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000326:  R_X86_64_64  PyExc_TypeError
// 32e: 48 8b 31                      movq    (%rcx), %rsi
// 331: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 335: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000337:  R_X86_64_64  .rodata.str1.1+0x7a
// 33f: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000341:  R_X86_64_64  _PyErr_Format
// 349: 4c 89 f7                      movq    %r14, %rdi
// 34c: 31 c0                         xorl    %eax, %eax
// 34e: 41 ff d0                      callq   *%r8
// 351: 49 8b 04 24                   movq    (%r12), %rax
// 355: 48 85 c0                      testq   %rax, %rax
// 358: 7f 22                         jg      0x37c <_JIT_ENTRY+0x37c>
// 35a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035c:  R_X86_64_64  .rodata.str1.1
// 364: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000366:  R_X86_64_64  _Py_NegativeRefcount
// 36e: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 373: 4c 89 e2                      movq    %r12, %rdx
// 376: ff d0                         callq   *%rax
// 378: 49 8b 04 24                   movq    (%r12), %rax
// 37c: 85 c0                         testl   %eax, %eax
// 37e: 78 19                         js      0x399 <_JIT_ENTRY+0x399>
// 380: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000382:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38a: ff d0                         callq   *%rax
// 38c: 49 ff 0c 24                   decq    (%r12)
// 390: 4d 89 e5                      movq    %r12, %r13
// 393: 0f 84 7a ff ff ff             je      0x313 <_JIT_ENTRY+0x313>
// 399: 48 29 dd                      subq    %rbx, %rbp
// 39c: 48 83 c5 b8                   addq    $-0x48, %rbp
// 3a0: 48 c1 ed 03                   shrq    $0x3, %rbp
// 3a4: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 3a7: 31 c0                         xorl    %eax, %eax
// 3a9: e9 6c fd ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 3ae: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GET_AITER_code_body[943] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x4f, 0xf0, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x89, 0x6d, 0x00, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd1, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x44, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xbd, 0x00, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x4c, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x75, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x4d, 0x89, 0xe5, 0x0f, 0x84, 0x7a, 0xff, 0xff, 0xff, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x6c, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_GET_AITER_code_holes[29] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x341, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x382, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
// d2: 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GET_AITER_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GET_AITER_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GET_ANEXT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GET_ANEXT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 49 8b 45 08                   movq    0x8(%r13), %rax
// 1ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d0:  R_X86_64_64  PyAsyncGen_Type
// 1d8: 48 39 c8                      cmpq    %rcx, %rax
// 1db: 0f 84 c6 00 00 00             je      0x2a7 <_JIT_ENTRY+0x2a7>
// 1e1: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 1e5: 48 85 c9                      testq   %rcx, %rcx
// 1e8: 0f 84 87 00 00 00             je      0x275 <_JIT_ENTRY+0x275>
// 1ee: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1f2: 48 85 c9                      testq   %rcx, %rcx
// 1f5: 74 7e                         je      0x275 <_JIT_ENTRY+0x275>
// 1f7: 4c 89 ef                      movq    %r13, %rdi
// 1fa: ff d1                         callq   *%rcx
// 1fc: 48 85 c0                      testq   %rax, %rax
// 1ff: 0f 84 5d 01 00 00             je      0x362 <_JIT_ENTRY+0x362>
// 205: 49 89 c4                      movq    %rax, %r12
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 212: 4c 89 e7                      movq    %r12, %rdi
// 215: ff d0                         callq   *%rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 0f 84 c4 00 00 00             je      0x2e4 <_JIT_ENTRY+0x2e4>
// 220: 49 89 c5                      movq    %rax, %r13
// 223: 49 8b 04 24                   movq    (%r12), %rax
// 227: 48 85 c0                      testq   %rax, %rax
// 22a: 7f 22                         jg      0x24e <_JIT_ENTRY+0x24e>
// 22c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022e:  R_X86_64_64  .rodata.str1.1
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_NegativeRefcount
// 240: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 245: 4c 89 e2                      movq    %r12, %rdx
// 248: ff d0                         callq   *%rax
// 24a: 49 8b 04 24                   movq    (%r12), %rax
// 24e: 85 c0                         testl   %eax, %eax
// 250: 78 6b                         js      0x2bd <_JIT_ENTRY+0x2bd>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25c: ff d0                         callq   *%rax
// 25e: 49 ff 0c 24                   decq    (%r12)
// 262: 75 59                         jne     0x2bd <_JIT_ENTRY+0x2bd>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_Dealloc
// 26e: 4c 89 e7                      movq    %r12, %rdi
// 271: ff d0                         callq   *%rax
// 273: eb 48                         jmp     0x2bd <_JIT_ENTRY+0x2bd>
// 275: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000277:  R_X86_64_64  PyExc_TypeError
// 27f: 48 8b 31                      movq    (%rcx), %rsi
// 282: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 286: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000288:  R_X86_64_64  .rodata.str1.1+0x39
// 290: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000292:  R_X86_64_64  _PyErr_Format
// 29a: 4c 89 ff                      movq    %r15, %rdi
// 29d: 31 c0                         xorl    %eax, %eax
// 29f: 41 ff d0                      callq   *%r8
// 2a2: e9 bb 00 00 00                jmp     0x362 <_JIT_ENTRY+0x362>
// 2a7: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 2ab: 4c 89 ef                      movq    %r13, %rdi
// 2ae: ff 50 10                      callq   *0x10(%rax)
// 2b1: 49 89 c5                      movq    %rax, %r13
// 2b4: 48 85 c0                      testq   %rax, %rax
// 2b7: 0f 84 a5 00 00 00             je      0x362 <_JIT_ENTRY+0x362>
// 2bd: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _JIT_CONTINUE
// 2cb: 4c 89 f7                      movq    %r14, %rdi
// 2ce: 48 89 de                      movq    %rbx, %rsi
// 2d1: 4c 89 fa                      movq    %r15, %rdx
// 2d4: 48 83 c4 08                   addq    $0x8, %rsp
// 2d8: 5b                            popq    %rbx
// 2d9: 41 5c                         popq    %r12
// 2db: 41 5d                         popq    %r13
// 2dd: 41 5e                         popq    %r14
// 2df: 41 5f                         popq    %r15
// 2e1: 5d                            popq    %rbp
// 2e2: ff e0                         jmpq    *%rax
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  PyExc_TypeError
// 2ee: 48 8b 38                      movq    (%rax), %rdi
// 2f1: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 2f6: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 2fa: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002fc:  R_X86_64_64  .rodata.str1.1+0x7c
// 304: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000306:  R_X86_64_64  _PyErr_FormatFromCause
// 30e: 31 c0                         xorl    %eax, %eax
// 310: ff d1                         callq   *%rcx
// 312: 49 8b 04 24                   movq    (%r12), %rax
// 316: 48 85 c0                      testq   %rax, %rax
// 319: 7f 22                         jg      0x33d <_JIT_ENTRY+0x33d>
// 31b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031d:  R_X86_64_64  .rodata.str1.1
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  _Py_NegativeRefcount
// 32f: be f8 02 00 00                movl    $0x2f8, %esi            # imm = 0x2F8
// 334: 4c 89 e2                      movq    %r12, %rdx
// 337: ff d0                         callq   *%rax
// 339: 49 8b 04 24                   movq    (%r12), %rax
// 33d: 85 c0                         testl   %eax, %eax
// 33f: 78 21                         js      0x362 <_JIT_ENTRY+0x362>
// 341: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000343:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34b: ff d0                         callq   *%rax
// 34d: 49 ff 0c 24                   decq    (%r12)
// 351: 75 0f                         jne     0x362 <_JIT_ENTRY+0x362>
// 353: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000355:  R_X86_64_64  _Py_Dealloc
// 35d: 4c 89 e7                      movq    %r12, %rdi
// 360: ff d0                         callq   *%rax
// 362: 48 83 c3 f8                   addq    $-0x8, %rbx
// 366: 4c 29 f3                      subq    %r14, %rbx
// 369: 48 83 c3 b8                   addq    $-0x48, %rbx
// 36d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 371: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 375: 31 c0                         xorl    %eax, %eax
// 377: e9 9e fd ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 37c: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GET_ANEXT_code_body[893] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xc6, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x7e, 0x4c, 0x89, 0xef, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc4, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x6b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x59, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xbb, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x50, 0x4c, 0x89, 0xef, 0xff, 0x50, 0x10, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x9e, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_GET_ANEXT_code_holes[28] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x306, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x343, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
// ba: 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GET_ANEXT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GET_ANEXT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GET_AWAITABLE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GET_AWAITABLE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 8d 4f f0                   leaq    -0x10(%r15), %rcx
// 19b: 48 89 0c 24                   movq    %rcx, (%rsp)
// 19f: 49 01 ed                      addq    %rbp, %r13
// 1a2: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 78 21                         js      0x1ce <_JIT_ENTRY+0x1ce>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b7: ff d0                         callq   *%rax
// 1b9: 49 ff 0c 24                   decq    (%r12)
// 1bd: 75 0f                         jne     0x1ce <_JIT_ENTRY+0x1ce>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_Dealloc
// 1c9: 4c 89 e7                      movq    %r12, %rdi
// 1cc: ff d0                         callq   *%rax
// 1ce: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1d2: 4c 89 6d 00                   movq    %r13, (%rbp)
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 1e0: 4c 89 ef                      movq    %r13, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 49 89 c4                      movq    %rax, %r12
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 74 0f                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 1ed: 49 8b 45 00                   movq    (%r13), %rax
// 1f1: 48 85 c0                      testq   %rax, %rax
// 1f4: 7e 2f                         jle     0x225 <_JIT_ENTRY+0x225>
// 1f6: 85 c0                         testl   %eax, %eax
// 1f8: 79 51                         jns     0x24b <_JIT_ENTRY+0x24b>
// 1fa: eb 70                         jmp     0x26c <_JIT_ENTRY+0x26c>
// 1fc: 49 8b 75 08                   movq    0x8(%r13), %rsi
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _JIT_OPARG
// 20a: 0f b7 d0                      movzwl  %ax, %edx
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _PyEval_FormatAwaitableError
// 217: 4c 89 f7                      movq    %r14, %rdi
// 21a: ff d0                         callq   *%rax
// 21c: 49 8b 45 00                   movq    (%r13), %rax
// 220: 48 85 c0                      testq   %rax, %rax
// 223: 7f d1                         jg      0x1f6 <_JIT_ENTRY+0x1f6>
// 225: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000227:  R_X86_64_64  .rodata.str1.1
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_NegativeRefcount
// 239: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 23e: 4c 89 ea                      movq    %r13, %rdx
// 241: ff d0                         callq   *%rax
// 243: 49 8b 45 00                   movq    (%r13), %rax
// 247: 85 c0                         testl   %eax, %eax
// 249: 78 21                         js      0x26c <_JIT_ENTRY+0x26c>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 255: ff d0                         callq   *%rax
// 257: 49 ff 4d 00                   decq    (%r13)
// 25b: 75 0f                         jne     0x26c <_JIT_ENTRY+0x26c>
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_Dealloc
// 267: 4c 89 ef                      movq    %r13, %rdi
// 26a: ff d0                         callq   *%rax
// 26c: 4d 85 e4                      testq   %r12, %r12
// 26f: 0f 84 10 01 00 00             je      0x385 <_JIT_ENTRY+0x385>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  PyCoro_Type
// 27f: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 284: 74 2b                         je      0x2b1 <_JIT_ENTRY+0x2b1>
// 286: 49 83 c7 f8                   addq    $-0x8, %r15
// 28a: 4c 89 65 00                   movq    %r12, (%rbp)
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _JIT_CONTINUE
// 298: 48 89 df                      movq    %rbx, %rdi
// 29b: 4c 89 fe                      movq    %r15, %rsi
// 29e: 4c 89 f2                      movq    %r14, %rdx
// 2a1: 48 83 c4 08                   addq    $0x8, %rsp
// 2a5: 5b                            popq    %rbx
// 2a6: 41 5c                         popq    %r12
// 2a8: 41 5d                         popq    %r13
// 2aa: 41 5e                         popq    %r14
// 2ac: 41 5f                         popq    %r15
// 2ae: 5d                            popq    %rbp
// 2af: ff e0                         jmpq    *%rax
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _PyGen_yf
// 2bb: 4c 89 e7                      movq    %r12, %rdi
// 2be: ff d0                         callq   *%rax
// 2c0: 48 85 c0                      testq   %rax, %rax
// 2c3: 74 c1                         je      0x286 <_JIT_ENTRY+0x286>
// 2c5: 49 89 c5                      movq    %rax, %r13
// 2c8: 48 8b 00                      movq    (%rax), %rax
// 2cb: 48 85 c0                      testq   %rax, %rax
// 2ce: 7f 22                         jg      0x2f2 <_JIT_ENTRY+0x2f2>
// 2d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d2:  R_X86_64_64  .rodata.str1.1
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_NegativeRefcount
// 2e4: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 2e9: 4c 89 ea                      movq    %r13, %rdx
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 8b 45 00                   movq    (%r13), %rax
// 2f2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000002f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2fc: 85 c0                         testl   %eax, %eax
// 2fe: 78 18                         js      0x318 <_JIT_ENTRY+0x318>
// 300: 41 ff d7                      callq   *%r15
// 303: 49 ff 4d 00                   decq    (%r13)
// 307: 75 0f                         jne     0x318 <_JIT_ENTRY+0x318>
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_Dealloc
// 313: 4c 89 ef                      movq    %r13, %rdi
// 316: ff d0                         callq   *%rax
// 318: 49 8b 04 24                   movq    (%r12), %rax
// 31c: 48 85 c0                      testq   %rax, %rax
// 31f: 7f 22                         jg      0x343 <_JIT_ENTRY+0x343>
// 321: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000323:  R_X86_64_64  .rodata.str1.1
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  _Py_NegativeRefcount
// 335: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 33a: 4c 89 e2                      movq    %r12, %rdx
// 33d: ff d0                         callq   *%rax
// 33f: 49 8b 04 24                   movq    (%r12), %rax
// 343: 85 c0                         testl   %eax, %eax
// 345: 78 18                         js      0x35f <_JIT_ENTRY+0x35f>
// 347: 41 ff d7                      callq   *%r15
// 34a: 49 ff 0c 24                   decq    (%r12)
// 34e: 75 0f                         jne     0x35f <_JIT_ENTRY+0x35f>
// 350: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000352:  R_X86_64_64  _Py_Dealloc
// 35a: 4c 89 e7                      movq    %r12, %rdi
// 35d: ff d0                         callq   *%rax
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  PyExc_RuntimeError
// 369: 48 8b 30                      movq    (%rax), %rsi
// 36c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000036e:  R_X86_64_64  .rodata.str1.1+0x39
// 376: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000378:  R_X86_64_64  _PyErr_SetString
// 380: 4c 89 f7                      movq    %r14, %rdi
// 383: ff d0                         callq   *%rax
// 385: 48 29 dd                      subq    %rbx, %rbp
// 388: 48 83 c5 b8                   addq    $-0x48, %rbp
// 38c: 48 c1 ed 03                   shrq    $0x3, %rbp
// 390: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 393: 31 c0                         xorl    %eax, %eax
// 395: e9 80 fd ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 39a: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GET_AWAITABLE_code_body[923] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x4f, 0xf0, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x2f, 0x85, 0xc0, 0x79, 0x51, 0xeb, 0x70, 0x49, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x10, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x2b, 0x49, 0x83, 0xc7, 0xf8, 0x4c, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xc1, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x80, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_GET_AWAITABLE_code_holes[31] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x352, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x378, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00'
// 5c: 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GET_AWAITABLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GET_AWAITABLE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GET_ITER
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GET_ITER.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 8d 4e f0                   leaq    -0x10(%r14), %rcx
// 19b: 48 89 0c 24                   movq    %rcx, (%rsp)
// 19f: 49 01 ed                      addq    %rbp, %r13
// 1a2: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 78 17                         js      0x1ce <_JIT_ENTRY+0x1ce>
// 1b7: ff d1                         callq   *%rcx
// 1b9: 49 ff 0c 24                   decq    (%r12)
// 1bd: 75 0f                         jne     0x1ce <_JIT_ENTRY+0x1ce>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_Dealloc
// 1c9: 4c 89 e7                      movq    %r12, %rdi
// 1cc: ff d0                         callq   *%rax
// 1ce: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1d2: 4c 89 6d 00                   movq    %r13, (%rbp)
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  PyObject_GetIter
// 1e0: 4c 89 ef                      movq    %r13, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 49 89 c4                      movq    %rax, %r12
// 1e8: 49 8b 45 00                   movq    (%r13), %rax
// 1ec: 48 85 c0                      testq   %rax, %rax
// 1ef: 7f 22                         jg      0x213 <_JIT_ENTRY+0x213>
// 1f1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f3:  R_X86_64_64  .rodata.str1.1
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_NegativeRefcount
// 205: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 20a: 4c 89 ea                      movq    %r13, %rdx
// 20d: ff d0                         callq   *%rax
// 20f: 49 8b 45 00                   movq    (%r13), %rax
// 213: 85 c0                         testl   %eax, %eax
// 215: 78 21                         js      0x238 <_JIT_ENTRY+0x238>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 221: ff d0                         callq   *%rax
// 223: 49 ff 4d 00                   decq    (%r13)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 4c 89 ef                      movq    %r13, %rdi
// 236: ff d0                         callq   *%rax
// 238: 4d 85 e4                      testq   %r12, %r12
// 23b: 74 2b                         je      0x268 <_JIT_ENTRY+0x268>
// 23d: 49 83 c6 f8                   addq    $-0x8, %r14
// 241: 4c 89 65 00                   movq    %r12, (%rbp)
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_CONTINUE
// 24f: 48 89 df                      movq    %rbx, %rdi
// 252: 4c 89 f6                      movq    %r14, %rsi
// 255: 4c 89 fa                      movq    %r15, %rdx
// 258: 48 83 c4 08                   addq    $0x8, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: ff e0                         jmpq    *%rax
// 268: 48 29 dd                      subq    %rbx, %rbp
// 26b: 48 83 c5 b8                   addq    $-0x48, %rbp
// 26f: 48 c1 ed 03                   shrq    $0x3, %rbp
// 273: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 276: 31 c0                         xorl    %eax, %eax
// 278: e9 9d fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 27d: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GET_ITER_code_body[638] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x4e, 0xf0, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x2b, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x9d, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_GET_ITER_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GET_ITER_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GET_ITER_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GET_LEN
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GET_LEN.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  PyObject_Size
// 1d4: 4c 89 ef                      movq    %r13, %rdi
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 85 c0                      testq   %rax, %rax
// 1dc: 78 3b                         js      0x219 <_JIT_ENTRY+0x219>
// 1de: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e0:  R_X86_64_64  PyLong_FromSsize_t
// 1e8: 48 89 c7                      movq    %rax, %rdi
// 1eb: ff d1                         callq   *%rcx
// 1ed: 48 85 c0                      testq   %rax, %rax
// 1f0: 74 27                         je      0x219 <_JIT_ENTRY+0x219>
// 1f2: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _JIT_CONTINUE
// 200: 4c 89 f7                      movq    %r14, %rdi
// 203: 48 89 de                      movq    %rbx, %rsi
// 206: 4c 89 fa                      movq    %r15, %rdx
// 209: 48 83 c4 08                   addq    $0x8, %rsp
// 20d: 5b                            popq    %rbx
// 20e: 41 5c                         popq    %r12
// 210: 41 5d                         popq    %r13
// 212: 41 5e                         popq    %r14
// 214: 41 5f                         popq    %r15
// 216: 5d                            popq    %rbp
// 217: ff e0                         jmpq    *%rax
// 219: 48 83 c3 f8                   addq    $-0x8, %rbx
// 21d: 4c 29 f3                      subq    %r14, %rbx
// 220: 48 83 c3 b8                   addq    $-0x48, %rbx
// 224: 48 c1 eb 03                   shrq    $0x3, %rbx
// 228: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 22c: 31 c0                         xorl    %eax, %eax
// 22e: e9 e7 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 233: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GET_LEN_code_body[564] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0x3b, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xe7, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_GET_LEN_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GET_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GET_LEN_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GET_YIELD_FROM_ITER.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 8d 67 f8                   leaq    -0x8(%r15), %r12
// 1ca: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 1ce: 49 8b 45 08                   movq    0x8(%r13), %rax
// 1d2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d4:  R_X86_64_64  PyCoro_Type
// 1dc: 48 39 c8                      cmpq    %rcx, %rax
// 1df: 74 7f                         je      0x260 <_JIT_ENTRY+0x260>
// 1e1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e3:  R_X86_64_64  PyGen_Type
// 1eb: 48 39 c8                      cmpq    %rcx, %rax
// 1ee: 74 7e                         je      0x26e <_JIT_ENTRY+0x26e>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  PyObject_GetIter
// 1fa: 4c 89 ef                      movq    %r13, %rdi
// 1fd: ff d0                         callq   *%rax
// 1ff: 48 85 c0                      testq   %rax, %rax
// 202: 0f 84 b3 00 00 00             je      0x2bb <_JIT_ENTRY+0x2bb>
// 208: 48 89 c5                      movq    %rax, %rbp
// 20b: 49 8b 45 00                   movq    (%r13), %rax
// 20f: 48 85 c0                      testq   %rax, %rax
// 212: 7f 22                         jg      0x236 <_JIT_ENTRY+0x236>
// 214: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000216:  R_X86_64_64  .rodata.str1.1
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_NegativeRefcount
// 228: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 22d: 4c 89 ea                      movq    %r13, %rdx
// 230: ff d0                         callq   *%rax
// 232: 49 8b 45 00                   movq    (%r13), %rax
// 236: 85 c0                         testl   %eax, %eax
// 238: 78 21                         js      0x25b <_JIT_ENTRY+0x25b>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 244: ff d0                         callq   *%rax
// 246: 49 ff 4d 00                   decq    (%r13)
// 24a: 75 0f                         jne     0x25b <_JIT_ENTRY+0x25b>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_Dealloc
// 256: 4c 89 ef                      movq    %r13, %rdi
// 259: ff d0                         callq   *%rax
// 25b: 49 89 ed                      movq    %rbp, %r13
// 25e: eb 0e                         jmp     0x26e <_JIT_ENTRY+0x26e>
// 260: 48 8b 03                      movq    (%rbx), %rax
// 263: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// 267: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// 26c: 74 27                         je      0x295 <_JIT_ENTRY+0x295>
// 26e: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _JIT_CONTINUE
// 27c: 48 89 df                      movq    %rbx, %rdi
// 27f: 4c 89 e6                      movq    %r12, %rsi
// 282: 4c 89 f2                      movq    %r14, %rdx
// 285: 48 83 c4 08                   addq    $0x8, %rsp
// 289: 5b                            popq    %rbx
// 28a: 41 5c                         popq    %r12
// 28c: 41 5d                         popq    %r13
// 28e: 41 5e                         popq    %r14
// 290: 41 5f                         popq    %r15
// 292: 5d                            popq    %rbp
// 293: ff e0                         jmpq    *%rax
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  PyExc_TypeError
// 29f: 48 8b 30                      movq    (%rax), %rsi
// 2a2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a4:  R_X86_64_64  .rodata.str1.1+0x39
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _PyErr_SetString
// 2b6: 4c 89 f7                      movq    %r14, %rdi
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 29 dc                      subq    %rbx, %r12
// 2be: 49 83 c4 b8                   addq    $-0x48, %r12
// 2c2: 49 c1 ec 03                   shrq    $0x3, %r12
// 2c6: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2ca: 31 c0                         xorl    %eax, %eax
// 2cc: e9 49 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2d1: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GET_YIELD_FROM_ITER_code_body[722] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x67, 0xf8, 0x4d, 0x89, 0x6f, 0xf0, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x7f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x7e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xed, 0xeb, 0x0e, 0x48, 0x8b, 0x03, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x27, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x49, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_GET_YIELD_FROM_ITER_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
// 7d: 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GET_YIELD_FROM_ITER_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GET_YIELD_FROM_ITER_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_FLOAT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 8f 01 00 00             jne     0x1b8 <_JIT_ENTRY+0x1b8>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 76 01 00 00             jne     0x1b8 <_JIT_ENTRY+0x1b8>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 6b 01 00 00             ja      0x1b8 <_JIT_ENTRY+0x1b8>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 5c 01 00 00             jle     0x1b8 <_JIT_ENTRY+0x1b8>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 c2 00 00 00             ja      0x1b8 <_JIT_ENTRY+0x1b8>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 197: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19b: 49 8b 4e e8                   movq    -0x18(%r14), %rcx
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyFloat_Type
// 1a9: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 1ad: 75 06                         jne     0x1b5 <_JIT_ENTRY+0x1b5>
// 1af: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1b3: 74 3a                         je      0x1ef <_JIT_ENTRY+0x1ef>
// 1b5: 49 89 f6                      movq    %rsi, %r14
// 1b8: 49 29 de                      subq    %rbx, %r14
// 1bb: 49 83 c6 b8                   addq    $-0x48, %r14
// 1bf: 49 c1 ee 03                   shrq    $0x3, %r14
// 1c3: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1c7: 48 8b 03                      movq    (%rbx), %rax
// 1ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cc:  R_X86_64_64  _JIT_TARGET
// 1d4: 89 c9                         movl    %ecx, %ecx
// 1d6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1da: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e0: 48 83 c4 08                   addq    $0x8, %rsp
// 1e4: 5b                            popq    %rbx
// 1e5: 41 5c                         popq    %r12
// 1e7: 41 5d                         popq    %r13
// 1e9: 41 5e                         popq    %r14
// 1eb: 41 5f                         popq    %r15
// 1ed: 5d                            popq    %rbp
// 1ee: c3                            retq
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _JIT_CONTINUE
// 1f9: 48 89 df                      movq    %rbx, %rdi
// 1fc: 4c 89 fa                      movq    %r15, %rdx
// 1ff: 48 83 c4 08                   addq    $0x8, %rsp
// 203: 5b                            popq    %rbx
// 204: 41 5c                         popq    %r12
// 206: 41 5d                         popq    %r13
// 208: 41 5e                         popq    %r14
// 20a: 41 5f                         popq    %r15
// 20c: 5d                            popq    %rbp
// 20d: ff e0                         jmpq    *%rax
// 20f: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_FLOAT_code_body[528] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x8f, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x76, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x6b, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x5c, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xc2, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x4e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x06, 0x49, 0x39, 0x45, 0x08, 0x74, 0x3a, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_FLOAT_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_FLOAT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_INT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 23: 0f 85 a2 01 00 00             jne     0x1cb <_JIT_ENTRY+0x1cb>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 89 01 00 00             jne     0x1cb <_JIT_ENTRY+0x1cb>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 7e 01 00 00             ja      0x1cb <_JIT_ENTRY+0x1cb>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 6f 01 00 00             jle     0x1cb <_JIT_ENTRY+0x1cb>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 d5 00 00 00             ja      0x1cb <_JIT_ENTRY+0x1cb>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 0c 40                   leaq    (%rax,%rax,2), %rcx
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 34                         jne     0x137 <_JIT_ENTRY+0x137>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: 48 89 0c 24                   movq    %rcx, (%rsp)
// 111: ff d0                         callq   *%rax
// 113: 48 8b 0c 24                   movq    (%rsp), %rcx
// 117: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 11e: 49 ff 4d 00                   decq    (%r13)
// 122: 75 13                         jne     0x137 <_JIT_ENTRY+0x137>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  PyObject_Free
// 12e: 4c 89 ef                      movq    %r13, %rdi
// 131: ff d0                         callq   *%rax
// 133: 48 8b 0c 24                   movq    (%rsp), %rcx
// 137: 48 c1 e1 04                   shlq    $0x4, %rcx
// 13b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013d:  R_X86_64_64  _PyRuntime
// 145: 49 8b 04 24                   movq    (%r12), %rax
// 149: 48 85 c0                      testq   %rax, %rax
// 14c: 7f 32                         jg      0x180 <_JIT_ENTRY+0x180>
// 14e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000150:  R_X86_64_64  .rodata.str1.1
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_NegativeRefcount
// 162: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 167: 4c 89 e2                      movq    %r12, %rdx
// 16a: 49 89 cd                      movq    %rcx, %r13
// 16d: ff d0                         callq   *%rax
// 16f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000171:  R_X86_64_64  _PyRuntime
// 179: 4c 89 e9                      movq    %r13, %rcx
// 17c: 49 8b 04 24                   movq    (%r12), %rax
// 180: 4c 8d 2c 0a                   leaq    (%rdx,%rcx), %r13
// 184: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 18b: 85 c0                         testl   %eax, %eax
// 18d: 78 21                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 199: ff d0                         callq   *%rax
// 19b: 49 ff 0c 24                   decq    (%r12)
// 19f: 75 0f                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_Dealloc
// 1ab: 4c 89 e7                      movq    %r12, %rdi
// 1ae: ff d0                         callq   *%rax
// 1b0: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 1b4: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1b8: 49 8b 46 e8                   movq    -0x18(%r14), %rax
// 1bc: 48 39 68 08                   cmpq    %rbp, 0x8(%rax)
// 1c0: 75 06                         jne     0x1c8 <_JIT_ENTRY+0x1c8>
// 1c2: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 1c6: 74 3a                         je      0x202 <_JIT_ENTRY+0x202>
// 1c8: 49 89 f6                      movq    %rsi, %r14
// 1cb: 49 29 de                      subq    %rbx, %r14
// 1ce: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d2: 49 c1 ee 03                   shrq    $0x3, %r14
// 1d6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1da: 48 8b 03                      movq    (%rbx), %rax
// 1dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001df:  R_X86_64_64  _JIT_TARGET
// 1e7: 89 c9                         movl    %ecx, %ecx
// 1e9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ed: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f3: 48 83 c4 08                   addq    $0x8, %rsp
// 1f7: 5b                            popq    %rbx
// 1f8: 41 5c                         popq    %r12
// 1fa: 41 5d                         popq    %r13
// 1fc: 41 5e                         popq    %r14
// 1fe: 41 5f                         popq    %r15
// 200: 5d                            popq    %rbp
// 201: c3                            retq
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _JIT_CONTINUE
// 20c: 48 89 df                      movq    %rbx, %rdi
// 20f: 4c 89 fa                      movq    %r15, %rdx
// 212: 48 83 c4 08                   addq    $0x8, %rsp
// 216: 5b                            popq    %rbx
// 217: 41 5c                         popq    %r12
// 219: 41 5d                         popq    %r13
// 21b: 41 5e                         popq    %r14
// 21d: 41 5f                         popq    %r15
// 21f: 5d                            popq    %rbp
// 220: ff e0                         jmpq    *%rax
// 222: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_INT_code_body[547] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x6d, 0x08, 0x0f, 0x85, 0xa2, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x89, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x7e, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x6f, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xd5, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x0c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x32, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x2c, 0x0a, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x46, 0xe8, 0x48, 0x39, 0x68, 0x08, 0x75, 0x06, 0x49, 0x39, 0x6d, 0x08, 0x74, 0x3a, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_INT_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_INT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_UNICODE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 a2 01 00 00             jne     0x1cb <_JIT_ENTRY+0x1cb>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 6c 24 08                cmpq    %rbp, 0x8(%r12)
// 3c: 0f 85 89 01 00 00             jne     0x1cb <_JIT_ENTRY+0x1cb>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 7e 01 00 00             ja      0x1cb <_JIT_ENTRY+0x1cb>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 6f 01 00 00             jle     0x1cb <_JIT_ENTRY+0x1cb>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 d5 00 00 00             ja      0x1cb <_JIT_ENTRY+0x1cb>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 0c 40                   leaq    (%rax,%rax,2), %rcx
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 34                         jne     0x137 <_JIT_ENTRY+0x137>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: 48 89 0c 24                   movq    %rcx, (%rsp)
// 111: ff d0                         callq   *%rax
// 113: 48 8b 0c 24                   movq    (%rsp), %rcx
// 117: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 11e: 49 ff 4d 00                   decq    (%r13)
// 122: 75 13                         jne     0x137 <_JIT_ENTRY+0x137>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  PyObject_Free
// 12e: 4c 89 ef                      movq    %r13, %rdi
// 131: ff d0                         callq   *%rax
// 133: 48 8b 0c 24                   movq    (%rsp), %rcx
// 137: 48 c1 e1 04                   shlq    $0x4, %rcx
// 13b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013d:  R_X86_64_64  _PyRuntime
// 145: 49 8b 04 24                   movq    (%r12), %rax
// 149: 48 85 c0                      testq   %rax, %rax
// 14c: 7f 32                         jg      0x180 <_JIT_ENTRY+0x180>
// 14e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000150:  R_X86_64_64  .rodata.str1.1
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_NegativeRefcount
// 162: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 167: 4c 89 e2                      movq    %r12, %rdx
// 16a: 49 89 cd                      movq    %rcx, %r13
// 16d: ff d0                         callq   *%rax
// 16f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000171:  R_X86_64_64  _PyRuntime
// 179: 4c 89 e9                      movq    %r13, %rcx
// 17c: 49 8b 04 24                   movq    (%r12), %rax
// 180: 4c 8d 2c 0a                   leaq    (%rdx,%rcx), %r13
// 184: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 18b: 85 c0                         testl   %eax, %eax
// 18d: 78 21                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 199: ff d0                         callq   *%rax
// 19b: 49 ff 0c 24                   decq    (%r12)
// 19f: 75 0f                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_Dealloc
// 1ab: 4c 89 e7                      movq    %r12, %rdi
// 1ae: ff d0                         callq   *%rax
// 1b0: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 1b4: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1b8: 49 8b 46 e8                   movq    -0x18(%r14), %rax
// 1bc: 48 39 68 08                   cmpq    %rbp, 0x8(%rax)
// 1c0: 75 06                         jne     0x1c8 <_JIT_ENTRY+0x1c8>
// 1c2: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 1c6: 74 3a                         je      0x202 <_JIT_ENTRY+0x202>
// 1c8: 49 89 f6                      movq    %rsi, %r14
// 1cb: 49 29 de                      subq    %rbx, %r14
// 1ce: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d2: 49 c1 ee 03                   shrq    $0x3, %r14
// 1d6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1da: 48 8b 03                      movq    (%rbx), %rax
// 1dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001df:  R_X86_64_64  _JIT_TARGET
// 1e7: 89 c9                         movl    %ecx, %ecx
// 1e9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ed: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f3: 48 83 c4 08                   addq    $0x8, %rsp
// 1f7: 5b                            popq    %rbx
// 1f8: 41 5c                         popq    %r12
// 1fa: 41 5d                         popq    %r13
// 1fc: 41 5e                         popq    %r14
// 1fe: 41 5f                         popq    %r15
// 200: 5d                            popq    %rbp
// 201: c3                            retq
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _JIT_CONTINUE
// 20c: 48 89 df                      movq    %rbx, %rdi
// 20f: 4c 89 fa                      movq    %r15, %rdx
// 212: 48 83 c4 08                   addq    $0x8, %rsp
// 216: 5b                            popq    %rbx
// 217: 41 5c                         popq    %r12
// 219: 41 5d                         popq    %r13
// 21b: 41 5e                         popq    %r14
// 21d: 41 5f                         popq    %r15
// 21f: 5d                            popq    %rbp
// 220: ff e0                         jmpq    *%rax
// 222: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_UNICODE_code_body[547] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xa2, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x6c, 0x24, 0x08, 0x0f, 0x85, 0x89, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x7e, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x6f, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xd5, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x0c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x32, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x2c, 0x0a, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x46, 0xe8, 0x48, 0x39, 0x68, 0x08, 0x75, 0x06, 0x49, 0x39, 0x6d, 0x08, 0x74, 0x3a, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_UNICODE_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_UNICODE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_BUILTINS_VERSION.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 bf 01 00 00             jne     0x1e8 <_JIT_ENTRY+0x1e8>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 a6 01 00 00             jne     0x1e8 <_JIT_ENTRY+0x1e8>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 9b 01 00 00             ja      0x1e8 <_JIT_ENTRY+0x1e8>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 8c 01 00 00             jle     0x1e8 <_JIT_ENTRY+0x1e8>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 f2 00 00 00             ja      0x1e8 <_JIT_ENTRY+0x1e8>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 49 8b 46 20                   movq    0x20(%r14), %rax
// 19f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a1:  R_X86_64_64  PyDict_Type
// 1a9: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1ad: 75 39                         jne     0x1e8 <_JIT_ENTRY+0x1e8>
// 1af: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b5:  R_X86_64_64  _JIT_OPERAND
// 1bd: 0f b7 c9                      movzwl  %cx, %ecx
// 1c0: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1c3: 75 23                         jne     0x1e8 <_JIT_ENTRY+0x1e8>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_CONTINUE
// 1cf: 4c 89 f7                      movq    %r14, %rdi
// 1d2: 48 89 de                      movq    %rbx, %rsi
// 1d5: 4c 89 fa                      movq    %r15, %rdx
// 1d8: 48 83 c4 08                   addq    $0x8, %rsp
// 1dc: 5b                            popq    %rbx
// 1dd: 41 5c                         popq    %r12
// 1df: 41 5d                         popq    %r13
// 1e1: 41 5e                         popq    %r14
// 1e3: 41 5f                         popq    %r15
// 1e5: 5d                            popq    %rbp
// 1e6: ff e0                         jmpq    *%rax
// 1e8: 4c 29 f3                      subq    %r14, %rbx
// 1eb: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ef: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1f3: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1f7: 49 8b 06                      movq    (%r14), %rax
// 1fa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fc:  R_X86_64_64  _JIT_TARGET
// 204: 89 c9                         movl    %ecx, %ecx
// 206: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 20a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 210: 48 83 c4 08                   addq    $0x8, %rsp
// 214: 5b                            popq    %rbx
// 215: 41 5c                         popq    %r12
// 217: 41 5d                         popq    %r13
// 219: 41 5e                         popq    %r14
// 21b: 41 5f                         popq    %r15
// 21d: 5d                            popq    %rbp
// 21e: c3                            retq
// 21f: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_BUILTINS_VERSION_code_body[544] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xbf, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xa6, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x9b, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x8c, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xf2, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x46, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x39, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_BUILTINS_VERSION_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_BUILTINS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 79 01 00 00             jne     0x1a2 <_JIT_ENTRY+0x1a2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 60 01 00 00             jne     0x1a2 <_JIT_ENTRY+0x1a2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 55 01 00 00             ja      0x1a2 <_JIT_ENTRY+0x1a2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 46 01 00 00             jle     0x1a2 <_JIT_ENTRY+0x1a2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 ac 00 00 00             ja      0x1a2 <_JIT_ENTRY+0x1a2>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 41 f6 45 e8 01                testb   $0x1, -0x18(%r13)
// 1a0: 75 37                         jne     0x1d9 <_JIT_ENTRY+0x1d9>
// 1a2: 4c 29 f3                      subq    %r14, %rbx
// 1a5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1a9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1ad: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1b1: 49 8b 06                      movq    (%r14), %rax
// 1b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b6:  R_X86_64_64  _JIT_TARGET
// 1be: 89 c9                         movl    %ecx, %ecx
// 1c0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1c4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ca: 48 83 c4 08                   addq    $0x8, %rsp
// 1ce: 5b                            popq    %rbx
// 1cf: 41 5c                         popq    %r12
// 1d1: 41 5d                         popq    %r13
// 1d3: 41 5e                         popq    %r14
// 1d5: 41 5f                         popq    %r15
// 1d7: 5d                            popq    %rbp
// 1d8: c3                            retq
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 4c 89 f7                      movq    %r14, %rdi
// 1e6: 48 89 de                      movq    %rbx, %rsi
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: 48 83 c4 08                   addq    $0x8, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: 5d                            popq    %rbp
// 1fa: ff e0                         jmpq    *%rax
// 1fc: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES_code_body[509] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x79, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x60, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x55, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x46, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xac, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x41, 0xf6, 0x45, 0xe8, 0x01, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1ce: 41 f6 45 e8 01                testb   $0x1, -0x18(%r13)
// 1d3: 75 1b                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 1d5: 49 8d 75 e8                   leaq    -0x18(%r13), %rsi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 1e3: 4c 89 ef                      movq    %r13, %rdi
// 1e6: ff d0                         callq   *%rax
// 1e8: 84 c0                         testb   %al, %al
// 1ea: 0f 84 02 ff ff ff             je      0xf2 <_JIT_ENTRY+0xf2>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _JIT_CONTINUE
// 1fa: 4c 89 f7                      movq    %r14, %rdi
// 1fd: 48 89 de                      movq    %rbx, %rsi
// 200: 4c 89 fa                      movq    %r15, %rdx
// 203: 48 83 c4 08                   addq    $0x8, %rsp
// 207: 5b                            popq    %rbx
// 208: 41 5c                         popq    %r12
// 20a: 41 5d                         popq    %r13
// 20c: 41 5e                         popq    %r14
// 20e: 41 5f                         popq    %r15
// 210: 5d                            popq    %rbp
// 211: ff e0                         jmpq    *%rax
// 213: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[532] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x41, 0xf6, 0x45, 0xe8, 0x01, 0x75, 0x1b, 0x49, 0x8d, 0x75, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x84, 0xc0, 0x0f, 0x84, 0x02, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_GLOBALS_VERSION.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 bf 01 00 00             jne     0x1e8 <_JIT_ENTRY+0x1e8>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 a6 01 00 00             jne     0x1e8 <_JIT_ENTRY+0x1e8>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 9b 01 00 00             ja      0x1e8 <_JIT_ENTRY+0x1e8>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 8c 01 00 00             jle     0x1e8 <_JIT_ENTRY+0x1e8>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 f2 00 00 00             ja      0x1e8 <_JIT_ENTRY+0x1e8>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 49 8b 46 18                   movq    0x18(%r14), %rax
// 19f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a1:  R_X86_64_64  PyDict_Type
// 1a9: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1ad: 75 39                         jne     0x1e8 <_JIT_ENTRY+0x1e8>
// 1af: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b5:  R_X86_64_64  _JIT_OPERAND
// 1bd: 0f b7 c9                      movzwl  %cx, %ecx
// 1c0: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1c3: 75 23                         jne     0x1e8 <_JIT_ENTRY+0x1e8>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_CONTINUE
// 1cf: 4c 89 f7                      movq    %r14, %rdi
// 1d2: 48 89 de                      movq    %rbx, %rsi
// 1d5: 4c 89 fa                      movq    %r15, %rdx
// 1d8: 48 83 c4 08                   addq    $0x8, %rsp
// 1dc: 5b                            popq    %rbx
// 1dd: 41 5c                         popq    %r12
// 1df: 41 5d                         popq    %r13
// 1e1: 41 5e                         popq    %r14
// 1e3: 41 5f                         popq    %r15
// 1e5: 5d                            popq    %rbp
// 1e6: ff e0                         jmpq    *%rax
// 1e8: 4c 29 f3                      subq    %r14, %rbx
// 1eb: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ef: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1f3: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1f7: 49 8b 06                      movq    (%r14), %rax
// 1fa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fc:  R_X86_64_64  _JIT_TARGET
// 204: 89 c9                         movl    %ecx, %ecx
// 206: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 20a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 210: 48 83 c4 08                   addq    $0x8, %rsp
// 214: 5b                            popq    %rbx
// 215: 41 5c                         popq    %r12
// 217: 41 5d                         popq    %r13
// 219: 41 5e                         popq    %r14
// 21b: 41 5f                         popq    %r15
// 21d: 5d                            popq    %rbp
// 21e: c3                            retq
// 21f: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_GLOBALS_VERSION_code_body[544] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xbf, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xa6, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x9b, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x8c, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xf2, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x46, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x39, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_GLOBALS_VERSION_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_GLOBALS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_IS_FALSE_POP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 ae 01 00 00             jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 95 01 00 00             jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 8a 01 00 00             ja      0x1d7 <_JIT_ENTRY+0x1d7>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 7b 01 00 00             jle     0x1d7 <_JIT_ENTRY+0x1d7>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 e1 00 00 00             ja      0x1d7 <_JIT_ENTRY+0x1d7>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 28                         jg      0x16a <_JIT_ENTRY+0x16a>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: 49 89 cd                      movq    %rcx, %r13
// 161: ff d0                         callq   *%rax
// 163: 4c 89 e9                      movq    %r13, %rcx
// 166: 49 8b 04 24                   movq    (%r12), %rax
// 16a: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 16e: 48 01 cd                      addq    %rcx, %rbp
// 171: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 178: 85 c0                         testl   %eax, %eax
// 17a: 78 21                         js      0x19d <_JIT_ENTRY+0x19d>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 186: ff d0                         callq   *%rax
// 188: 49 ff 0c 24                   decq    (%r12)
// 18c: 75 0f                         jne     0x19d <_JIT_ENTRY+0x19d>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 4c 89 e7                      movq    %r12, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 49 89 6d 00                   movq    %rbp, (%r13)
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_TrueStruct
// 1ab: 48 39 c5                      cmpq    %rax, %rbp
// 1ae: 74 23                         je      0x1d3 <_JIT_ENTRY+0x1d3>
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_CONTINUE
// 1ba: 48 89 df                      movq    %rbx, %rdi
// 1bd: 4c 89 ee                      movq    %r13, %rsi
// 1c0: 4c 89 fa                      movq    %r15, %rdx
// 1c3: 48 83 c4 08                   addq    $0x8, %rsp
// 1c7: 5b                            popq    %rbx
// 1c8: 41 5c                         popq    %r12
// 1ca: 41 5d                         popq    %r13
// 1cc: 41 5e                         popq    %r14
// 1ce: 41 5f                         popq    %r15
// 1d0: 5d                            popq    %rbp
// 1d1: ff e0                         jmpq    *%rax
// 1d3: 49 83 c6 f8                   addq    $-0x8, %r14
// 1d7: 49 29 de                      subq    %rbx, %r14
// 1da: 49 83 c6 b8                   addq    $-0x48, %r14
// 1de: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e2: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e6: 48 8b 03                      movq    (%rbx), %rax
// 1e9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001eb:  R_X86_64_64  _JIT_TARGET
// 1f3: 89 c9                         movl    %ecx, %ecx
// 1f5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ff: 48 83 c4 08                   addq    $0x8, %rsp
// 203: 5b                            popq    %rbx
// 204: 41 5c                         popq    %r12
// 206: 41 5d                         popq    %r13
// 208: 41 5e                         popq    %r14
// 20a: 41 5f                         popq    %r15
// 20c: 5d                            popq    %rbp
// 20d: c3                            retq
// 20e: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_IS_FALSE_POP_code_body[527] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xae, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x95, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x8a, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x7b, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xe1, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf0, 0x48, 0x01, 0xcd, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc5, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_IS_FALSE_POP_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_IS_FALSE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_IS_FALSE_POP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_IS_NONE_POP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_IS_NONE_POP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 8b 01 00 00             jne     0x1b4 <_JIT_ENTRY+0x1b4>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 72 01 00 00             jne     0x1b4 <_JIT_ENTRY+0x1b4>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 67 01 00 00             ja      0x1b4 <_JIT_ENTRY+0x1b4>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 58 01 00 00             jle     0x1b4 <_JIT_ENTRY+0x1b4>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 be 00 00 00             ja      0x1b4 <_JIT_ENTRY+0x1b4>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 28                         jg      0x16a <_JIT_ENTRY+0x16a>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: 49 89 cd                      movq    %rcx, %r13
// 161: ff d0                         callq   *%rax
// 163: 4c 89 e9                      movq    %r13, %rcx
// 166: 49 8b 04 24                   movq    (%r12), %rax
// 16a: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 16e: 48 01 cd                      addq    %rcx, %rbp
// 171: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 178: 85 c0                         testl   %eax, %eax
// 17a: 78 21                         js      0x19d <_JIT_ENTRY+0x19d>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 186: ff d0                         callq   *%rax
// 188: 49 ff 0c 24                   decq    (%r12)
// 18c: 75 0f                         jne     0x19d <_JIT_ENTRY+0x19d>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 4c 89 e7                      movq    %r12, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 49 89 6d 00                   movq    %rbp, (%r13)
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NoneStruct
// 1ab: 48 39 c5                      cmpq    %rax, %rbp
// 1ae: 74 3b                         je      0x1eb <_JIT_ENTRY+0x1eb>
// 1b0: 49 83 c6 f8                   addq    $-0x8, %r14
// 1b4: 49 29 de                      subq    %rbx, %r14
// 1b7: 49 83 c6 b8                   addq    $-0x48, %r14
// 1bb: 49 c1 ee 03                   shrq    $0x3, %r14
// 1bf: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1c3: 48 8b 03                      movq    (%rbx), %rax
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  _JIT_TARGET
// 1d0: 89 c9                         movl    %ecx, %ecx
// 1d2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1dc: 48 83 c4 08                   addq    $0x8, %rsp
// 1e0: 5b                            popq    %rbx
// 1e1: 41 5c                         popq    %r12
// 1e3: 41 5d                         popq    %r13
// 1e5: 41 5e                         popq    %r14
// 1e7: 41 5f                         popq    %r15
// 1e9: 5d                            popq    %rbp
// 1ea: c3                            retq
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _JIT_CONTINUE
// 1f5: 48 89 df                      movq    %rbx, %rdi
// 1f8: 4c 89 ee                      movq    %r13, %rsi
// 1fb: 4c 89 fa                      movq    %r15, %rdx
// 1fe: 48 83 c4 08                   addq    $0x8, %rsp
// 202: 5b                            popq    %rbx
// 203: 41 5c                         popq    %r12
// 205: 41 5d                         popq    %r13
// 207: 41 5e                         popq    %r14
// 209: 41 5f                         popq    %r15
// 20b: 5d                            popq    %rbp
// 20c: ff e0                         jmpq    *%rax
// 20e: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_IS_NONE_POP_code_body[527] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x8b, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x72, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x67, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x58, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xbe, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf0, 0x48, 0x01, 0xcd, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc5, 0x74, 0x3b, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_IS_NONE_POP_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_IS_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_IS_NONE_POP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_IS_NOT_NONE_POP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 fe 01 00 00             jne     0x227 <_JIT_ENTRY+0x227>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 e5 01 00 00             jne     0x227 <_JIT_ENTRY+0x227>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 da 01 00 00             ja      0x227 <_JIT_ENTRY+0x227>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e cb 01 00 00             jle     0x227 <_JIT_ENTRY+0x227>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 31 01 00 00             ja      0x227 <_JIT_ENTRY+0x227>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 28                         jg      0x16a <_JIT_ENTRY+0x16a>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: 49 89 cd                      movq    %rcx, %r13
// 161: ff d0                         callq   *%rax
// 163: 4c 89 e9                      movq    %r13, %rcx
// 166: 49 8b 04 24                   movq    (%r12), %rax
// 16a: 4d 8d 6f f0                   leaq    -0x10(%r15), %r13
// 16e: 48 01 cd                      addq    %rcx, %rbp
// 171: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 178: 85 c0                         testl   %eax, %eax
// 17a: 78 21                         js      0x19d <_JIT_ENTRY+0x19d>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 186: ff d0                         callq   *%rax
// 188: 49 ff 0c 24                   decq    (%r12)
// 18c: 75 0f                         jne     0x19d <_JIT_ENTRY+0x19d>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 4c 89 e7                      movq    %r12, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 49 89 6d 00                   movq    %rbp, (%r13)
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NoneStruct
// 1ab: 48 39 c5                      cmpq    %rax, %rbp
// 1ae: 74 73                         je      0x223 <_JIT_ENTRY+0x223>
// 1b0: 48 8b 45 00                   movq    (%rbp), %rax
// 1b4: 48 85 c0                      testq   %rax, %rax
// 1b7: 7f 22                         jg      0x1db <_JIT_ENTRY+0x1db>
// 1b9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bb:  R_X86_64_64  .rodata.str1.1
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_NegativeRefcount
// 1cd: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 1d2: 48 89 ea                      movq    %rbp, %rdx
// 1d5: ff d0                         callq   *%rax
// 1d7: 48 8b 45 00                   movq    (%rbp), %rax
// 1db: 85 c0                         testl   %eax, %eax
// 1dd: 78 21                         js      0x200 <_JIT_ENTRY+0x200>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 ff 4d 00                   decq    (%rbp)
// 1ef: 75 0f                         jne     0x200 <_JIT_ENTRY+0x200>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 48 89 ef                      movq    %rbp, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _JIT_CONTINUE
// 20a: 48 89 df                      movq    %rbx, %rdi
// 20d: 4c 89 ee                      movq    %r13, %rsi
// 210: 4c 89 f2                      movq    %r14, %rdx
// 213: 48 83 c4 08                   addq    $0x8, %rsp
// 217: 5b                            popq    %rbx
// 218: 41 5c                         popq    %r12
// 21a: 41 5d                         popq    %r13
// 21c: 41 5e                         popq    %r14
// 21e: 41 5f                         popq    %r15
// 220: 5d                            popq    %rbp
// 221: ff e0                         jmpq    *%rax
// 223: 49 83 c7 f8                   addq    $-0x8, %r15
// 227: 49 29 df                      subq    %rbx, %r15
// 22a: 49 83 c7 b8                   addq    $-0x48, %r15
// 22e: 49 c1 ef 03                   shrq    $0x3, %r15
// 232: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 236: 48 8b 03                      movq    (%rbx), %rax
// 239: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023b:  R_X86_64_64  _JIT_TARGET
// 243: 89 c9                         movl    %ecx, %ecx
// 245: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 249: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 24f: 48 83 c4 08                   addq    $0x8, %rsp
// 253: 5b                            popq    %rbx
// 254: 41 5c                         popq    %r12
// 256: 41 5d                         popq    %r13
// 258: 41 5e                         popq    %r14
// 25a: 41 5f                         popq    %r15
// 25c: 5d                            popq    %rbp
// 25d: c3                            retq
// 25e: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_IS_NOT_NONE_POP_code_body[607] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xe5, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xda, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xcb, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x31, 0x01, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6f, 0xf0, 0x48, 0x01, 0xcd, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc5, 0x74, 0x73, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_IS_NOT_NONE_POP_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_IS_NOT_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_IS_TRUE_POP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 ae 01 00 00             jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 95 01 00 00             jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 8a 01 00 00             ja      0x1d7 <_JIT_ENTRY+0x1d7>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 7b 01 00 00             jle     0x1d7 <_JIT_ENTRY+0x1d7>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 e1 00 00 00             ja      0x1d7 <_JIT_ENTRY+0x1d7>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 28                         jg      0x16a <_JIT_ENTRY+0x16a>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: 49 89 cd                      movq    %rcx, %r13
// 161: ff d0                         callq   *%rax
// 163: 4c 89 e9                      movq    %r13, %rcx
// 166: 49 8b 04 24                   movq    (%r12), %rax
// 16a: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 16e: 48 01 cd                      addq    %rcx, %rbp
// 171: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 178: 85 c0                         testl   %eax, %eax
// 17a: 78 21                         js      0x19d <_JIT_ENTRY+0x19d>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 186: ff d0                         callq   *%rax
// 188: 49 ff 0c 24                   decq    (%r12)
// 18c: 75 0f                         jne     0x19d <_JIT_ENTRY+0x19d>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 4c 89 e7                      movq    %r12, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 49 89 6d 00                   movq    %rbp, (%r13)
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_FalseStruct
// 1ab: 48 39 c5                      cmpq    %rax, %rbp
// 1ae: 74 23                         je      0x1d3 <_JIT_ENTRY+0x1d3>
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_CONTINUE
// 1ba: 48 89 df                      movq    %rbx, %rdi
// 1bd: 4c 89 ee                      movq    %r13, %rsi
// 1c0: 4c 89 fa                      movq    %r15, %rdx
// 1c3: 48 83 c4 08                   addq    $0x8, %rsp
// 1c7: 5b                            popq    %rbx
// 1c8: 41 5c                         popq    %r12
// 1ca: 41 5d                         popq    %r13
// 1cc: 41 5e                         popq    %r14
// 1ce: 41 5f                         popq    %r15
// 1d0: 5d                            popq    %rbp
// 1d1: ff e0                         jmpq    *%rax
// 1d3: 49 83 c6 f8                   addq    $-0x8, %r14
// 1d7: 49 29 de                      subq    %rbx, %r14
// 1da: 49 83 c6 b8                   addq    $-0x48, %r14
// 1de: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e2: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e6: 48 8b 03                      movq    (%rbx), %rax
// 1e9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001eb:  R_X86_64_64  _JIT_TARGET
// 1f3: 89 c9                         movl    %ecx, %ecx
// 1f5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ff: 48 83 c4 08                   addq    $0x8, %rsp
// 203: 5b                            popq    %rbx
// 204: 41 5c                         popq    %r12
// 206: 41 5d                         popq    %r13
// 208: 41 5e                         popq    %r14
// 20a: 41 5f                         popq    %r15
// 20c: 5d                            popq    %rbp
// 20d: c3                            retq
// 20e: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_IS_TRUE_POP_code_body[527] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xae, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x95, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x8a, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x7b, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xe1, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf0, 0x48, 0x01, 0xcd, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc5, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_IS_TRUE_POP_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_IS_TRUE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_IS_TRUE_POP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_KEYS_VERSION
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_KEYS_VERSION.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 af 01 00 00             jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 96 01 00 00             jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 8b 01 00 00             ja      0x1d8 <_JIT_ENTRY+0x1d8>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 7c 01 00 00             jle     0x1d8 <_JIT_ENTRY+0x1d8>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 e2 00 00 00             ja      0x1d8 <_JIT_ENTRY+0x1d8>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 49 8b 45 08                   movq    0x8(%r13), %rax
// 19f: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// 1a6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a8:  R_X86_64_64  _JIT_OPERAND
// 1b0: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1b3: 75 23                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  _JIT_CONTINUE
// 1bf: 4c 89 f7                      movq    %r14, %rdi
// 1c2: 48 89 de                      movq    %rbx, %rsi
// 1c5: 4c 89 fa                      movq    %r15, %rdx
// 1c8: 48 83 c4 08                   addq    $0x8, %rsp
// 1cc: 5b                            popq    %rbx
// 1cd: 41 5c                         popq    %r12
// 1cf: 41 5d                         popq    %r13
// 1d1: 41 5e                         popq    %r14
// 1d3: 41 5f                         popq    %r15
// 1d5: 5d                            popq    %rbp
// 1d6: ff e0                         jmpq    *%rax
// 1d8: 4c 29 f3                      subq    %r14, %rbx
// 1db: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1df: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1e3: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1e7: 49 8b 06                      movq    (%r14), %rax
// 1ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ec:  R_X86_64_64  _JIT_TARGET
// 1f4: 89 c9                         movl    %ecx, %ecx
// 1f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 200: 48 83 c4 08                   addq    $0x8, %rsp
// 204: 5b                            popq    %rbx
// 205: 41 5c                         popq    %r12
// 207: 41 5d                         popq    %r13
// 209: 41 5e                         popq    %r14
// 20b: 41 5f                         popq    %r15
// 20d: 5d                            popq    %rbp
// 20e: c3                            retq
// 20f: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_KEYS_VERSION_code_body[528] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xaf, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x96, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x8b, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x7c, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xe2, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_KEYS_VERSION_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_KEYS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_KEYS_VERSION_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_LIST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 a8 01 00 00             jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 8f 01 00 00             jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 84 01 00 00             ja      0x1d1 <_JIT_ENTRY+0x1d1>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 75 01 00 00             jle     0x1d1 <_JIT_ENTRY+0x1d1>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 db 00 00 00             ja      0x1d1 <_JIT_ENTRY+0x1d1>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 49 8b 45 18                   movq    0x18(%r13), %rax
// 19f: 48 85 c0                      testq   %rax, %rax
// 1a2: 74 2d                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 1a4: 49 8b 4d 10                   movq    0x10(%r13), %rcx
// 1a8: 48 3b 48 10                   cmpq    0x10(%rax), %rcx
// 1ac: 7d 23                         jge     0x1d1 <_JIT_ENTRY+0x1d1>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _JIT_CONTINUE
// 1b8: 4c 89 f7                      movq    %r14, %rdi
// 1bb: 48 89 de                      movq    %rbx, %rsi
// 1be: 4c 89 fa                      movq    %r15, %rdx
// 1c1: 48 83 c4 08                   addq    $0x8, %rsp
// 1c5: 5b                            popq    %rbx
// 1c6: 41 5c                         popq    %r12
// 1c8: 41 5d                         popq    %r13
// 1ca: 41 5e                         popq    %r14
// 1cc: 41 5f                         popq    %r15
// 1ce: 5d                            popq    %rbp
// 1cf: ff e0                         jmpq    *%rax
// 1d1: 4c 29 f3                      subq    %r14, %rbx
// 1d4: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d8: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1dc: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1e0: 49 8b 06                      movq    (%r14), %rax
// 1e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e5:  R_X86_64_64  _JIT_TARGET
// 1ed: 89 c9                         movl    %ecx, %ecx
// 1ef: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f9: 48 83 c4 08                   addq    $0x8, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: c3                            retq
// 208: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_LIST_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xa8, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x8f, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x84, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x75, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xdb, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x45, 0x18, 0x48, 0x85, 0xc0, 0x74, 0x2d, 0x49, 0x8b, 0x4d, 0x10, 0x48, 0x3b, 0x48, 0x10, 0x7d, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_RANGE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 9c 01 00 00             jne     0x1c5 <_JIT_ENTRY+0x1c5>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 83 01 00 00             jne     0x1c5 <_JIT_ENTRY+0x1c5>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 78 01 00 00             ja      0x1c5 <_JIT_ENTRY+0x1c5>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 69 01 00 00             jle     0x1c5 <_JIT_ENTRY+0x1c5>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 cf 00 00 00             ja      0x1c5 <_JIT_ENTRY+0x1c5>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 49 83 7d 20 00                cmpq    $0x0, 0x20(%r13)
// 1a0: 7e 23                         jle     0x1c5 <_JIT_ENTRY+0x1c5>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _JIT_CONTINUE
// 1ac: 4c 89 f7                      movq    %r14, %rdi
// 1af: 48 89 de                      movq    %rbx, %rsi
// 1b2: 4c 89 fa                      movq    %r15, %rdx
// 1b5: 48 83 c4 08                   addq    $0x8, %rsp
// 1b9: 5b                            popq    %rbx
// 1ba: 41 5c                         popq    %r12
// 1bc: 41 5d                         popq    %r13
// 1be: 41 5e                         popq    %r14
// 1c0: 41 5f                         popq    %r15
// 1c2: 5d                            popq    %rbp
// 1c3: ff e0                         jmpq    *%rax
// 1c5: 4c 29 f3                      subq    %r14, %rbx
// 1c8: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1cc: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1d0: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1d4: 49 8b 06                      movq    (%r14), %rax
// 1d7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d9:  R_X86_64_64  _JIT_TARGET
// 1e1: 89 c9                         movl    %ecx, %ecx
// 1e3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ed: 48 83 c4 08                   addq    $0x8, %rsp
// 1f1: 5b                            popq    %rbx
// 1f2: 41 5c                         popq    %r12
// 1f4: 41 5d                         popq    %r13
// 1f6: 41 5e                         popq    %r14
// 1f8: 41 5f                         popq    %r15
// 1fa: 5d                            popq    %rbp
// 1fb: c3                            retq
// 1fc: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[509] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x9c, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x83, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x78, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x69, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xcf, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x83, 0x7d, 0x20, 0x00, 0x7e, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_TUPLE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 a8 01 00 00             jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 8f 01 00 00             jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 84 01 00 00             ja      0x1d1 <_JIT_ENTRY+0x1d1>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 75 01 00 00             jle     0x1d1 <_JIT_ENTRY+0x1d1>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 db 00 00 00             ja      0x1d1 <_JIT_ENTRY+0x1d1>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 49 8b 45 18                   movq    0x18(%r13), %rax
// 19f: 48 85 c0                      testq   %rax, %rax
// 1a2: 74 2d                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 1a4: 49 8b 4d 10                   movq    0x10(%r13), %rcx
// 1a8: 48 3b 48 10                   cmpq    0x10(%rax), %rcx
// 1ac: 7d 23                         jge     0x1d1 <_JIT_ENTRY+0x1d1>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _JIT_CONTINUE
// 1b8: 4c 89 f7                      movq    %r14, %rdi
// 1bb: 48 89 de                      movq    %rbx, %rsi
// 1be: 4c 89 fa                      movq    %r15, %rdx
// 1c1: 48 83 c4 08                   addq    $0x8, %rsp
// 1c5: 5b                            popq    %rbx
// 1c6: 41 5c                         popq    %r12
// 1c8: 41 5d                         popq    %r13
// 1ca: 41 5e                         popq    %r14
// 1cc: 41 5f                         popq    %r15
// 1ce: 5d                            popq    %rbp
// 1cf: ff e0                         jmpq    *%rax
// 1d1: 4c 29 f3                      subq    %r14, %rbx
// 1d4: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d8: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1dc: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1e0: 49 8b 06                      movq    (%r14), %rax
// 1e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e5:  R_X86_64_64  _JIT_TARGET
// 1ed: 89 c9                         movl    %ecx, %ecx
// 1ef: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f9: 48 83 c4 08                   addq    $0x8, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: c3                            retq
// 208: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xa8, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x8f, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x84, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x75, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xdb, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x45, 0x18, 0x48, 0x85, 0xc0, 0x74, 0x2d, 0x49, 0x8b, 0x4d, 0x10, 0x48, 0x3b, 0x48, 0x10, 0x7d, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_GUARD_TYPE_VERSION
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_GUARD_TYPE_VERSION.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 ab 01 00 00             jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 92 01 00 00             jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 87 01 00 00             ja      0x1d4 <_JIT_ENTRY+0x1d4>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 78 01 00 00             jle     0x1d4 <_JIT_ENTRY+0x1d4>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 de 00 00 00             ja      0x1d4 <_JIT_ENTRY+0x1d4>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 49 8b 45 08                   movq    0x8(%r13), %rax
// 19f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a1:  R_X86_64_64  _JIT_OPERAND
// 1a9: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 1af: 75 23                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _JIT_CONTINUE
// 1bb: 4c 89 f7                      movq    %r14, %rdi
// 1be: 48 89 de                      movq    %rbx, %rsi
// 1c1: 4c 89 fa                      movq    %r15, %rdx
// 1c4: 48 83 c4 08                   addq    $0x8, %rsp
// 1c8: 5b                            popq    %rbx
// 1c9: 41 5c                         popq    %r12
// 1cb: 41 5d                         popq    %r13
// 1cd: 41 5e                         popq    %r14
// 1cf: 41 5f                         popq    %r15
// 1d1: 5d                            popq    %rbp
// 1d2: ff e0                         jmpq    *%rax
// 1d4: 4c 29 f3                      subq    %r14, %rbx
// 1d7: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1db: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1df: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1e3: 49 8b 06                      movq    (%r14), %rax
// 1e6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e8:  R_X86_64_64  _JIT_TARGET
// 1f0: 89 c9                         movl    %ecx, %ecx
// 1f2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fc: 48 83 c4 08                   addq    $0x8, %rsp
// 200: 5b                            popq    %rbx
// 201: 41 5c                         popq    %r12
// 203: 41 5d                         popq    %r13
// 205: 41 5e                         popq    %r14
// 207: 41 5f                         popq    %r15
// 209: 5d                            popq    %rbp
// 20a: c3                            retq
// 20b: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_TYPE_VERSION_code_body[524] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xab, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x92, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x87, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x78, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xde, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_TYPE_VERSION_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_GUARD_TYPE_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_GUARD_TYPE_VERSION_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 17                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1af: ff d1                         callq   *%rcx
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b7 c0                      movzwl  %ax, %eax
// 1d7: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1dc: 29 c1                         subl    %eax, %ecx
// 1de: 48 63 c1                      movslq  %ecx, %rax
// 1e1: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1e6: 49 8b 6c 24 18                movq    0x18(%r12), %rbp
// 1eb: 8b 45 00                      movl    (%rbp), %eax
// 1ee: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f8: ff c0                         incl    %eax
// 1fa: 74 0b                         je      0x207 <_JIT_ENTRY+0x207>
// 1fc: 89 45 00                      movl    %eax, (%rbp)
// 1ff: 49 89 cd                      movq    %rcx, %r13
// 202: ff d1                         callq   *%rcx
// 204: 4c 89 e9                      movq    %r13, %rcx
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _JIT_OPARG
// 211: f7 d0                         notl    %eax
// 213: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 218: 48 98                         cltq
// 21a: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 21f: 4d 8b 6c 24 10                movq    0x10(%r12), %r13
// 224: 41 8b 45 00                   movl    (%r13), %eax
// 228: ff c0                         incl    %eax
// 22a: 74 06                         je      0x232 <_JIT_ENTRY+0x232>
// 22c: 41 89 45 00                   movl    %eax, (%r13)
// 230: ff d1                         callq   *%rcx
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _JIT_OPARG
// 23c: 0f b7 c0                      movzwl  %ax, %eax
// 23f: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 244: 29 c1                         subl    %eax, %ecx
// 246: 48 63 c1                      movslq  %ecx, %rax
// 249: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 24e: 49 8b 04 24                   movq    (%r12), %rax
// 252: 48 85 c0                      testq   %rax, %rax
// 255: 7f 22                         jg      0x279 <_JIT_ENTRY+0x279>
// 257: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000259:  R_X86_64_64  .rodata.str1.1
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_NegativeRefcount
// 26b: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 270: 4c 89 e2                      movq    %r12, %rdx
// 273: ff d0                         callq   *%rax
// 275: 49 8b 04 24                   movq    (%r12), %rax
// 279: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 27d: 85 c0                         testl   %eax, %eax
// 27f: 78 2d                         js      0x2ae <_JIT_ENTRY+0x2ae>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28b: 48 89 34 24                   movq    %rsi, (%rsp)
// 28f: ff d0                         callq   *%rax
// 291: 48 8b 34 24                   movq    (%rsp), %rsi
// 295: 49 ff 0c 24                   decq    (%r12)
// 299: 75 13                         jne     0x2ae <_JIT_ENTRY+0x2ae>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: 4c 89 e7                      movq    %r12, %rdi
// 2a8: ff d0                         callq   *%rax
// 2aa: 48 8b 34 24                   movq    (%rsp), %rsi
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _JIT_OPARG
// 2b8: 0f b7 c0                      movzwl  %ax, %eax
// 2bb: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 2c0: 29 c1                         subl    %eax, %ecx
// 2c2: 48 63 c9                      movslq  %ecx, %rcx
// 2c5: 4d 89 6c ce f8                movq    %r13, -0x8(%r14,%rcx,8)
// 2ca: f7 d0                         notl    %eax
// 2cc: 48 98                         cltq
// 2ce: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _JIT_CONTINUE
// 2dd: 48 89 df                      movq    %rbx, %rdi
// 2e0: 4c 89 fa                      movq    %r15, %rdx
// 2e3: 48 83 c4 08                   addq    $0x8, %rsp
// 2e7: 5b                            popq    %rbx
// 2e8: 41 5c                         popq    %r12
// 2ea: 41 5d                         popq    %r13
// 2ec: 41 5e                         popq    %r14
// 2ee: 41 5f                         popq    %r15
// 2f0: 5d                            popq    %rbp
// 2f1: ff e0                         jmpq    *%rax
// 2f3: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[756] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0x18, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x0b, 0x89, 0x45, 0x00, 0x49, 0x89, 0xcd, 0xff, 0xd1, 0x4c, 0x89, 0xe9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0x10, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x41, 0x89, 0x45, 0x00, 0xff, 0xd1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x76, 0xf8, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x34, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x6c, 0xce, 0xf8, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_INIT_CALL_PY_EXACT_ARGS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b7 c0                      movzwl  %ax, %eax
// 1d7: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1dc: 29 c1                         subl    %eax, %ecx
// 1de: f7 d0                         notl    %eax
// 1e0: 48 63 d0                      movslq  %eax, %rdx
// 1e3: 48 63 c1                      movslq  %ecx, %rax
// 1e6: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1eb: 49 8b 4c d6 f8                movq    -0x8(%r14,%rdx,8), %rcx
// 1f0: 49 8b 6c 24 30                movq    0x30(%r12), %rbp
// 1f5: 4d 8b af 00 01 00 00          movq    0x100(%r15), %r13
// 1fc: 48 63 45 4c                   movslq  0x4c(%rbp), %rax
// 200: 49 8d 44 c5 00                leaq    (%r13,%rax,8), %rax
// 205: 49 89 87 00 01 00 00          movq    %rax, 0x100(%r15)
// 20c: 4d 89 65 10                   movq    %r12, 0x10(%r13)
// 210: 8b 45 00                      movl    (%rbp), %eax
// 213: ff c0                         incl    %eax
// 215: 49 8d 14 d6                   leaq    (%r14,%rdx,8), %rdx
// 219: 48 83 c2 f8                   addq    $-0x8, %rdx
// 21d: 48 85 c9                      testq   %rcx, %rcx
// 220: 48 89 14 24                   movq    %rdx, (%rsp)
// 224: 0f 84 c2 00 00 00             je      0x2ec <_JIT_ENTRY+0x2ec>
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 74 0f                         je      0x23d <_JIT_ENTRY+0x23d>
// 22e: 89 45 00                      movl    %eax, (%rbp)
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 23b: ff d0                         callq   *%rax
// 23d: 49 89 6d 00                   movq    %rbp, (%r13)
// 241: 41 0f 10 44 24 10             movups  0x10(%r12), %xmm0
// 247: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 24c: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 254: 8b 4d 48                      movl    0x48(%rbp), %ecx
// 257: 41 89 4d 40                   movl    %ecx, 0x40(%r13)
// 25b: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 263: 48 81 c5 c8 00 00 00          addq    $0xc8, %rbp
// 26a: 49 89 6d 38                   movq    %rbp, 0x38(%r13)
// 26e: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 275: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _JIT_OPARG
// 284: 0f b7 e8                      movzwl  %ax, %ebp
// 287: ff c5                         incl    %ebp
// 289: 85 ed                         testl   %ebp, %ebp
// 28b: 0f 9f c2                      setg    %dl
// 28e: 39 e9                         cmpl    %ebp, %ecx
// 290: 0f 8e 02 01 00 00             jle     0x398 <_JIT_ENTRY+0x398>
// 296: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000298:  R_X86_64_64  _JIT_OPARG
// 2a0: 41 0f b7 ec                   movzwl  %r12w, %ebp
// 2a4: ff c5                         incl    %ebp
// 2a6: 48 8d 3c ed 48 00 00 00       leaq    0x48(,%rbp,8), %rdi
// 2ae: 4c 01 ef                      addq    %r13, %rdi
// 2b1: 89 e8                         movl    %ebp, %eax
// 2b3: f7 d0                         notl    %eax
// 2b5: 01 c1                         addl    %eax, %ecx
// 2b7: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  memset
// 2c9: 31 f6                         xorl    %esi, %esi
// 2cb: ff d0                         callq   *%rax
// 2cd: 85 ed                         testl   %ebp, %ebp
// 2cf: 0f 8e 92 01 00 00             jle     0x467 <_JIT_ENTRY+0x467>
// 2d5: 41 0f b7 cc                   movzwl  %r12w, %ecx
// 2d9: 48 c1 e1 03                   shlq    $0x3, %rcx
// 2dd: 4c 89 f0                      movq    %r14, %rax
// 2e0: 48 29 c8                      subq    %rcx, %rax
// 2e3: 48 83 c0 f0                   addq    $-0x10, %rax
// 2e7: e9 cd 00 00 00                jmp     0x3b9 <_JIT_ENTRY+0x3b9>
// 2ec: 85 c0                         testl   %eax, %eax
// 2ee: 74 0f                         je      0x2ff <_JIT_ENTRY+0x2ff>
// 2f0: 89 45 00                      movl    %eax, (%rbp)
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2fd: ff d0                         callq   *%rax
// 2ff: 49 89 6d 00                   movq    %rbp, (%r13)
// 303: 41 0f 10 44 24 10             movups  0x10(%r12), %xmm0
// 309: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 30e: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 316: 8b 45 48                      movl    0x48(%rbp), %eax
// 319: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 31d: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 325: 48 81 c5 c8 00 00 00          addq    $0xc8, %rbp
// 32c: 49 89 6d 38                   movq    %rbp, 0x38(%r13)
// 330: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 337: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 33c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000033e:  R_X86_64_64  _JIT_OPARG
// 346: 0f b7 e9                      movzwl  %cx, %ebp
// 349: 85 ed                         testl   %ebp, %ebp
// 34b: 0f 9f c2                      setg    %dl
// 34e: 39 e8                         cmpl    %ebp, %eax
// 350: 7e 50                         jle     0x3a2 <_JIT_ENTRY+0x3a2>
// 352: 44 0f b7 e1                   movzwl  %cx, %r12d
// 356: 4a 8d 3c e5 48 00 00 00       leaq    0x48(,%r12,8), %rdi
// 35e: 4c 01 ef                      addq    %r13, %rdi
// 361: 0f b7 e9                      movzwl  %cx, %ebp
// 364: 89 e9                         movl    %ebp, %ecx
// 366: f7 d1                         notl    %ecx
// 368: 01 c8                         addl    %ecx, %eax
// 36a: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  memset
// 37c: 31 f6                         xorl    %esi, %esi
// 37e: ff d0                         callq   *%rax
// 380: 85 ed                         testl   %ebp, %ebp
// 382: 0f 8e df 00 00 00             jle     0x467 <_JIT_ENTRY+0x467>
// 388: 49 c1 e4 03                   shlq    $0x3, %r12
// 38c: 4c 89 f0                      movq    %r14, %rax
// 38f: 4c 29 e0                      subq    %r12, %rax
// 392: 48 83 c0 f8                   addq    $-0x8, %rax
// 396: eb 21                         jmp     0x3b9 <_JIT_ENTRY+0x3b9>
// 398: f7 d0                         notl    %eax
// 39a: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 3a0: eb 06                         jmp     0x3a8 <_JIT_ENTRY+0x3a8>
// 3a2: 0f b7 c1                      movzwl  %cx, %eax
// 3a5: 48 f7 d8                      negq    %rax
// 3a8: f6 c2 01                      testb   $0x1, %dl
// 3ab: 0f 84 b6 00 00 00             je      0x467 <_JIT_ENTRY+0x467>
// 3b1: 49 8d 4e f8                   leaq    -0x8(%r14), %rcx
// 3b5: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
// 3b9: 83 fd 02                      cmpl    $0x2, %ebp
// 3bc: b9 01 00 00 00                movl    $0x1, %ecx
// 3c1: 0f 4d cd                      cmovgel %ebp, %ecx
// 3c4: 83 f9 08                      cmpl    $0x8, %ecx
// 3c7: 72 10                         jb      0x3d9 <_JIT_ENTRY+0x3d9>
// 3c9: 4c 89 ea                      movq    %r13, %rdx
// 3cc: 48 29 c2                      subq    %rax, %rdx
// 3cf: 48 83 c2 48                   addq    $0x48, %rdx
// 3d3: 48 83 fa 20                   cmpq    $0x20, %rdx
// 3d7: 73 5d                         jae     0x436 <_JIT_ENTRY+0x436>
// 3d9: 31 d2                         xorl    %edx, %edx
// 3db: 48 89 d6                      movq    %rdx, %rsi
// 3de: 48 f7 d6                      notq    %rsi
// 3e1: 48 01 ce                      addq    %rcx, %rsi
// 3e4: 48 89 cf                      movq    %rcx, %rdi
// 3e7: 48 83 e7 03                   andq    $0x3, %rdi
// 3eb: 74 11                         je      0x3fe <_JIT_ENTRY+0x3fe>
// 3ed: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 3f1: 4d 89 44 d5 48                movq    %r8, 0x48(%r13,%rdx,8)
// 3f6: 48 ff c2                      incq    %rdx
// 3f9: 48 ff cf                      decq    %rdi
// 3fc: 75 ef                         jne     0x3ed <_JIT_ENTRY+0x3ed>
// 3fe: 48 83 fe 03                   cmpq    $0x3, %rsi
// 402: 72 63                         jb      0x467 <_JIT_ENTRY+0x467>
// 404: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 408: 49 89 74 d5 48                movq    %rsi, 0x48(%r13,%rdx,8)
// 40d: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 412: 49 89 74 d5 50                movq    %rsi, 0x50(%r13,%rdx,8)
// 417: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 41c: 49 89 74 d5 58                movq    %rsi, 0x58(%r13,%rdx,8)
// 421: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 426: 49 89 74 d5 60                movq    %rsi, 0x60(%r13,%rdx,8)
// 42b: 48 83 c2 04                   addq    $0x4, %rdx
// 42f: 48 39 d1                      cmpq    %rdx, %rcx
// 432: 75 d0                         jne     0x404 <_JIT_ENTRY+0x404>
// 434: eb 31                         jmp     0x467 <_JIT_ENTRY+0x467>
// 436: 89 ca                         movl    %ecx, %edx
// 438: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 43e: 31 f6                         xorl    %esi, %esi
// 440: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 444: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 449: 41 0f 11 44 f5 48             movups  %xmm0, 0x48(%r13,%rsi,8)
// 44f: 41 0f 11 4c f5 58             movups  %xmm1, 0x58(%r13,%rsi,8)
// 455: 48 83 c6 04                   addq    $0x4, %rsi
// 459: 48 39 f2                      cmpq    %rsi, %rdx
// 45c: 75 e2                         jne     0x440 <_JIT_ENTRY+0x440>
// 45e: 48 39 ca                      cmpq    %rcx, %rdx
// 461: 0f 85 74 ff ff ff             jne     0x3db <_JIT_ENTRY+0x3db>
// 467: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000469:  R_X86_64_64  _JIT_OPARG
// 471: 0f b7 c0                      movzwl  %ax, %eax
// 474: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 479: 29 c1                         subl    %eax, %ecx
// 47b: 48 63 c1                      movslq  %ecx, %rax
// 47e: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 483: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000485:  R_X86_64_64  _JIT_CONTINUE
// 48d: 48 89 df                      movq    %rbx, %rdi
// 490: 48 8b 34 24                   movq    (%rsp), %rsi
// 494: 4c 89 fa                      movq    %r15, %rdx
// 497: 48 83 c4 08                   addq    $0x8, %rsp
// 49b: 5b                            popq    %rbx
// 49c: 41 5c                         popq    %r12
// 49e: 41 5d                         popq    %r13
// 4a0: 41 5e                         popq    %r14
// 4a2: 41 5f                         popq    %r15
// 4a4: 5d                            popq    %rbp
// 4a5: ff e0                         jmpq    *%rax
// 4a7: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_INIT_CALL_PY_EXACT_ARGS_code_body[1192] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x48, 0x63, 0xc1, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x4c, 0xd6, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0x30, 0x4d, 0x8b, 0xaf, 0x00, 0x01, 0x00, 0x00, 0x48, 0x63, 0x45, 0x4c, 0x49, 0x8d, 0x44, 0xc5, 0x00, 0x49, 0x89, 0x87, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x10, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x49, 0x8d, 0x14, 0xd6, 0x48, 0x83, 0xc2, 0xf8, 0x48, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x4d, 0x48, 0x41, 0x89, 0x4d, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0xff, 0xc5, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe9, 0x0f, 0x8e, 0x02, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xec, 0xff, 0xc5, 0x48, 0x8d, 0x3c, 0xed, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x89, 0xe8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x8e, 0x92, 0x01, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xcc, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xf0, 0xe9, 0xcd, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x48, 0x41, 0x89, 0x45, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe9, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe8, 0x7e, 0x50, 0x44, 0x0f, 0xb7, 0xe1, 0x4a, 0x8d, 0x3c, 0xe5, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x0f, 0xb7, 0xe9, 0x89, 0xe9, 0xf7, 0xd1, 0x01, 0xc8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x8e, 0xdf, 0x00, 0x00, 0x00, 0x49, 0xc1, 0xe4, 0x03, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xe0, 0x48, 0x83, 0xc0, 0xf8, 0xeb, 0x21, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x06, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x4e, 0xf8, 0x48, 0x8d, 0x04, 0xc1, 0x83, 0xfd, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x4d, 0xcd, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x4c, 0x89, 0xea, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x73, 0x5d, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x48, 0x89, 0xcf, 0x48, 0x83, 0xe7, 0x03, 0x74, 0x11, 0x4c, 0x8b, 0x04, 0xd0, 0x4d, 0x89, 0x44, 0xd5, 0x48, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xcf, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x63, 0x48, 0x8b, 0x34, 0xd0, 0x49, 0x89, 0x74, 0xd5, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x49, 0x89, 0x74, 0xd5, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x49, 0x89, 0x74, 0xd5, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x49, 0x89, 0x74, 0xd5, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x31, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf5, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf5, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe2, 0x48, 0x39, 0xca, 0x0f, 0x85, 0x74, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x34, 0x24, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_INIT_CALL_PY_EXACT_ARGS_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x469, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x485, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_INIT_CALL_PY_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_INSERT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_INSERT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// ed: 83 fd 7f                      cmpl    $0x7f, %ebp
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 75 28                         jne     0x158 <_JIT_ENTRY+0x158>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyInterpreterState_Get
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 143: 49 ff 4d 00                   decq    (%r13)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyObject_Free
// 153: 4c 89 ef                      movq    %r13, %rdi
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f 22                         jg      0x183 <_JIT_ENTRY+0x183>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 17a: 4c 89 e2                      movq    %r12, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 187: 85 c0                         testl   %eax, %eax
// 189: 78 21                         js      0x1ac <_JIT_ENTRY+0x1ac>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 195: ff d0                         callq   *%rax
// 197: 49 ff 0c 24                   decq    (%r12)
// 19b: 75 0f                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 4c 89 e7                      movq    %r12, %rdi
// 1aa: ff d0                         callq   *%rax
// 1ac: 89 e8                         movl    %ebp, %eax
// 1ae: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 1b2: 48 c1 e0 04                   shlq    $0x4, %rax
// 1b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b8:  R_X86_64_64  _PyRuntime
// 1c0: 4c 8d 24 01                   leaq    (%rcx,%rax), %r12
// 1c4: 49 81 c4 a0 32 01 00          addq    $0x132a0, %r12          # imm = 0x132A0
// 1cb: 4d 89 66 f0                   movq    %r12, -0x10(%r14)
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _JIT_OPARG
// 1d9: 0f b7 d0                      movzwl  %ax, %edx
// 1dc: f7 d0                         notl    %eax
// 1de: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e3: 48 63 e8                      movslq  %eax, %rbp
// 1e6: 49 8d 3c ee                   leaq    (%r14,%rbp,8), %rdi
// 1ea: 48 83 c7 f8                   addq    $-0x8, %rdi
// 1ee: 48 c1 e2 03                   shlq    $0x3, %rdx
// 1f2: 4c 89 f6                      movq    %r14, %rsi
// 1f5: 48 29 d6                      subq    %rdx, %rsi
// 1f8: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  memmove
// 206: ff d0                         callq   *%rax
// 208: 4d 89 64 ee f8                movq    %r12, -0x8(%r14,%rbp,8)
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _JIT_CONTINUE
// 217: 48 89 df                      movq    %rbx, %rdi
// 21a: 4c 89 ee                      movq    %r13, %rsi
// 21d: 4c 89 fa                      movq    %r15, %rdx
// 220: 48 83 c4 08                   addq    $0x8, %rsp
// 224: 5b                            popq    %rbx
// 225: 41 5c                         popq    %r12
// 227: 41 5d                         popq    %r13
// 229: 41 5e                         popq    %r14
// 22b: 41 5f                         popq    %r15
// 22d: 5d                            popq    %rbp
// 22e: ff e0                         jmpq    *%rax
// 230: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_INSERT_code_body[561] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x24, 0x01, 0x49, 0x81, 0xc4, 0xa0, 0x32, 0x01, 0x00, 0x4d, 0x89, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x49, 0x8d, 0x3c, 0xee, 0x48, 0x83, 0xc7, 0xf8, 0x48, 0xc1, 0xe2, 0x03, 0x4c, 0x89, 0xf6, 0x48, 0x29, 0xd6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x64, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_INSERT_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_INSERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_INSERT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_IS_NONE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_IS_NONE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1ca: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_NoneStruct
// 1d8: 49 39 c5                      cmpq    %rax, %r13
// 1db: 74 5c                         je      0x239 <_JIT_ENTRY+0x239>
// 1dd: 49 8b 45 00                   movq    (%r13), %rax
// 1e1: 48 85 c0                      testq   %rax, %rax
// 1e4: 7f 22                         jg      0x208 <_JIT_ENTRY+0x208>
// 1e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e8:  R_X86_64_64  .rodata.str1.1
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_NegativeRefcount
// 1fa: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: ff d0                         callq   *%rax
// 204: 49 8b 45 00                   movq    (%r13), %rax
// 208: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000020a:  R_X86_64_64  _Py_FalseStruct
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 2d                         js      0x243 <_JIT_ENTRY+0x243>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 1b                         jne     0x243 <_JIT_ENTRY+0x243>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_Dealloc
// 232: 4c 89 ef                      movq    %r13, %rdi
// 235: ff d0                         callq   *%rax
// 237: eb 0a                         jmp     0x243 <_JIT_ENTRY+0x243>
// 239: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000023b:  R_X86_64_64  _Py_TrueStruct
// 243: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _JIT_CONTINUE
// 251: 48 89 df                      movq    %rbx, %rdi
// 254: 4c 89 e6                      movq    %r12, %rsi
// 257: 4c 89 fa                      movq    %r15, %rdx
// 25a: 48 83 c4 08                   addq    $0x8, %rsp
// 25e: 5b                            popq    %rbx
// 25f: 41 5c                         popq    %r12
// 261: 41 5d                         popq    %r13
// 263: 41 5e                         popq    %r14
// 265: 41 5f                         popq    %r15
// 267: 5d                            popq    %rbp
// 268: ff e0                         jmpq    *%rax
// 26a: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_IS_NONE_code_body[619] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc5, 0x74, 0x5c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x0a, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_IS_NONE_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_IS_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_IS_NONE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_IS_OP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_IS_OP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 17                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1af: ff d5                         callq   *%rbp
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 48 85 c0                      testq   %rax, %rax
// 1d5: 7f 22                         jg      0x1f9 <_JIT_ENTRY+0x1f9>
// 1d7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d9:  R_X86_64_64  .rodata.str1.1
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_NegativeRefcount
// 1eb: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 1f0: 4c 89 e2                      movq    %r12, %rdx
// 1f3: ff d0                         callq   *%rax
// 1f5: 49 8b 04 24                   movq    (%r12), %rax
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 78 17                         js      0x214 <_JIT_ENTRY+0x214>
// 1fd: ff d5                         callq   *%rbp
// 1ff: 49 ff 0c 24                   decq    (%r12)
// 203: 75 0f                         jne     0x214 <_JIT_ENTRY+0x214>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_Dealloc
// 20f: 4c 89 e7                      movq    %r12, %rdi
// 212: ff d0                         callq   *%rax
// 214: 49 8b 45 00                   movq    (%r13), %rax
// 218: 48 85 c0                      testq   %rax, %rax
// 21b: 7f 22                         jg      0x23f <_JIT_ENTRY+0x23f>
// 21d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021f:  R_X86_64_64  .rodata.str1.1
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_NegativeRefcount
// 231: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// 236: 4c 89 ea                      movq    %r13, %rdx
// 239: ff d0                         callq   *%rax
// 23b: 49 8b 45 00                   movq    (%r13), %rax
// 23f: 49 8d 6e f0                   leaq    -0x10(%r14), %rbp
// 243: 85 c0                         testl   %eax, %eax
// 245: 78 21                         js      0x268 <_JIT_ENTRY+0x268>
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 251: ff d0                         callq   *%rax
// 253: 49 ff 4d 00                   decq    (%r13)
// 257: 75 0f                         jne     0x268 <_JIT_ENTRY+0x268>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_Dealloc
// 263: 4c 89 ef                      movq    %r13, %rdi
// 266: ff d0                         callq   *%rax
// 268: 31 c0                         xorl    %eax, %eax
// 26a: 4d 39 ec                      cmpq    %r13, %r12
// 26d: 0f 94 c0                      sete    %al
// 270: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000272:  R_X86_64_64  _JIT_OPARG
// 27a: 66 39 c8                      cmpw    %cx, %ax
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_FalseStruct
// 287: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000289:  R_X86_64_64  _Py_TrueStruct
// 291: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 295: 49 89 4e e8                   movq    %rcx, -0x18(%r14)
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 48 89 df                      movq    %rbx, %rdi
// 2a6: 48 89 ee                      movq    %rbp, %rsi
// 2a9: 4c 89 fa                      movq    %r15, %rdx
// 2ac: 48 83 c4 08                   addq    $0x8, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: ff e0                         jmpq    *%rax
// 2bc: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_IS_OP_code_body[701] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xe8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x6e, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0x4d, 0x39, 0xec, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_IS_OP_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_IS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_IS_OP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_LIST
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_ITER_CHECK_LIST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 82 01 00 00             jne     0x1ab <_JIT_ENTRY+0x1ab>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 69 01 00 00             jne     0x1ab <_JIT_ENTRY+0x1ab>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 5e 01 00 00             ja      0x1ab <_JIT_ENTRY+0x1ab>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 4f 01 00 00             jle     0x1ab <_JIT_ENTRY+0x1ab>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 b5 00 00 00             ja      0x1ab <_JIT_ENTRY+0x1ab>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  PyListIter_Type
// 1a5: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1a9: 74 37                         je      0x1e2 <_JIT_ENTRY+0x1e2>
// 1ab: 4c 29 f3                      subq    %r14, %rbx
// 1ae: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b2: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1ba: 49 8b 06                      movq    (%r14), %rax
// 1bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bf:  R_X86_64_64  _JIT_TARGET
// 1c7: 89 c9                         movl    %ecx, %ecx
// 1c9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1cd: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d3: 48 83 c4 08                   addq    $0x8, %rsp
// 1d7: 5b                            popq    %rbx
// 1d8: 41 5c                         popq    %r12
// 1da: 41 5d                         popq    %r13
// 1dc: 41 5e                         popq    %r14
// 1de: 41 5f                         popq    %r15
// 1e0: 5d                            popq    %rbp
// 1e1: c3                            retq
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_CONTINUE
// 1ec: 4c 89 f7                      movq    %r14, %rdi
// 1ef: 48 89 de                      movq    %rbx, %rsi
// 1f2: 4c 89 fa                      movq    %r15, %rdx
// 1f5: 48 83 c4 08                   addq    $0x8, %rsp
// 1f9: 5b                            popq    %rbx
// 1fa: 41 5c                         popq    %r12
// 1fc: 41 5d                         popq    %r13
// 1fe: 41 5e                         popq    %r14
// 200: 41 5f                         popq    %r15
// 202: 5d                            popq    %rbp
// 203: ff e0                         jmpq    *%rax
// 205: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_LIST_code_body[518] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x69, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x5e, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x4f, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xb5, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_LIST_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_LIST_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_RANGE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_ITER_CHECK_RANGE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 82 01 00 00             jne     0x1ab <_JIT_ENTRY+0x1ab>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 69 01 00 00             jne     0x1ab <_JIT_ENTRY+0x1ab>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 5e 01 00 00             ja      0x1ab <_JIT_ENTRY+0x1ab>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 4f 01 00 00             jle     0x1ab <_JIT_ENTRY+0x1ab>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 b5 00 00 00             ja      0x1ab <_JIT_ENTRY+0x1ab>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  PyRangeIter_Type
// 1a5: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1a9: 74 37                         je      0x1e2 <_JIT_ENTRY+0x1e2>
// 1ab: 4c 29 f3                      subq    %r14, %rbx
// 1ae: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b2: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1ba: 49 8b 06                      movq    (%r14), %rax
// 1bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bf:  R_X86_64_64  _JIT_TARGET
// 1c7: 89 c9                         movl    %ecx, %ecx
// 1c9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1cd: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d3: 48 83 c4 08                   addq    $0x8, %rsp
// 1d7: 5b                            popq    %rbx
// 1d8: 41 5c                         popq    %r12
// 1da: 41 5d                         popq    %r13
// 1dc: 41 5e                         popq    %r14
// 1de: 41 5f                         popq    %r15
// 1e0: 5d                            popq    %rbp
// 1e1: c3                            retq
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_CONTINUE
// 1ec: 4c 89 f7                      movq    %r14, %rdi
// 1ef: 48 89 de                      movq    %rbx, %rsi
// 1f2: 4c 89 fa                      movq    %r15, %rdx
// 1f5: 48 83 c4 08                   addq    $0x8, %rsp
// 1f9: 5b                            popq    %rbx
// 1fa: 41 5c                         popq    %r12
// 1fc: 41 5d                         popq    %r13
// 1fe: 41 5e                         popq    %r14
// 200: 41 5f                         popq    %r15
// 202: 5d                            popq    %rbp
// 203: ff e0                         jmpq    *%rax
// 205: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_RANGE_code_body[518] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x69, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x5e, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x4f, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xb5, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_RANGE_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_RANGE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_TUPLE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_ITER_CHECK_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 82 01 00 00             jne     0x1ab <_JIT_ENTRY+0x1ab>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 69 01 00 00             jne     0x1ab <_JIT_ENTRY+0x1ab>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 5e 01 00 00             ja      0x1ab <_JIT_ENTRY+0x1ab>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 4f 01 00 00             jle     0x1ab <_JIT_ENTRY+0x1ab>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 b5 00 00 00             ja      0x1ab <_JIT_ENTRY+0x1ab>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  PyTupleIter_Type
// 1a5: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1a9: 74 37                         je      0x1e2 <_JIT_ENTRY+0x1e2>
// 1ab: 4c 29 f3                      subq    %r14, %rbx
// 1ae: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b2: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1ba: 49 8b 06                      movq    (%r14), %rax
// 1bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bf:  R_X86_64_64  _JIT_TARGET
// 1c7: 89 c9                         movl    %ecx, %ecx
// 1c9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1cd: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d3: 48 83 c4 08                   addq    $0x8, %rsp
// 1d7: 5b                            popq    %rbx
// 1d8: 41 5c                         popq    %r12
// 1da: 41 5d                         popq    %r13
// 1dc: 41 5e                         popq    %r14
// 1de: 41 5f                         popq    %r15
// 1e0: 5d                            popq    %rbp
// 1e1: c3                            retq
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_CONTINUE
// 1ec: 4c 89 f7                      movq    %r14, %rdi
// 1ef: 48 89 de                      movq    %rbx, %rsi
// 1f2: 4c 89 fa                      movq    %r15, %rdx
// 1f5: 48 83 c4 08                   addq    $0x8, %rsp
// 1f9: 5b                            popq    %rbx
// 1fa: 41 5c                         popq    %r12
// 1fc: 41 5d                         popq    %r13
// 1fe: 41 5e                         popq    %r14
// 200: 41 5f                         popq    %r15
// 202: 5d                            popq    %rbp
// 203: ff e0                         jmpq    *%rax
// 205: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_TUPLE_code_body[518] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x69, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x5e, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x4f, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xb5, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_TUPLE_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_ITER_CHECK_TUPLE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_LIST
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_ITER_NEXT_LIST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1ce: 49 8b 4d 18                   movq    0x18(%r13), %rcx
// 1d2: 48 8b 49 18                   movq    0x18(%rcx), %rcx
// 1d6: 48 8d 50 01                   leaq    0x1(%rax), %rdx
// 1da: 49 89 55 10                   movq    %rdx, 0x10(%r13)
// 1de: 4c 8b 24 c1                   movq    (%rcx,%rax,8), %r12
// 1e2: 41 8b 04 24                   movl    (%r12), %eax
// 1e6: ff c0                         incl    %eax
// 1e8: 74 10                         je      0x1fa <_JIT_ENTRY+0x1fa>
// 1ea: 41 89 04 24                   movl    %eax, (%r12)
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f8: ff d0                         callq   *%rax
// 1fa: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _JIT_CONTINUE
// 208: 4c 89 f7                      movq    %r14, %rdi
// 20b: 48 89 de                      movq    %rbx, %rsi
// 20e: 4c 89 fa                      movq    %r15, %rdx
// 211: 48 83 c4 08                   addq    $0x8, %rsp
// 215: 5b                            popq    %rbx
// 216: 41 5c                         popq    %r12
// 218: 41 5d                         popq    %r13
// 21a: 41 5e                         popq    %r14
// 21c: 41 5f                         popq    %r15
// 21e: 5d                            popq    %rbp
// 21f: ff e0                         jmpq    *%rax
// 221: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_LIST_code_body[546] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x49, 0x8b, 0x45, 0x10, 0x49, 0x8b, 0x4d, 0x18, 0x48, 0x8b, 0x49, 0x18, 0x48, 0x8d, 0x50, 0x01, 0x49, 0x89, 0x55, 0x10, 0x4c, 0x8b, 0x24, 0xc1, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_LIST_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_LIST_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_RANGE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_ITER_NEXT_RANGE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 49 8b 7d 10                   movq    0x10(%r13), %rdi
// 1ce: 49 8b 45 18                   movq    0x18(%r13), %rax
// 1d2: 48 01 f8                      addq    %rdi, %rax
// 1d5: 49 89 45 10                   movq    %rax, 0x10(%r13)
// 1d9: 49 ff 4d 20                   decq    0x20(%r13)
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  PyLong_FromLong
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 74 27                         je      0x215 <_JIT_ENTRY+0x215>
// 1ee: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _JIT_CONTINUE
// 1fc: 4c 89 f7                      movq    %r14, %rdi
// 1ff: 48 89 de                      movq    %rbx, %rsi
// 202: 4c 89 fa                      movq    %r15, %rdx
// 205: 48 83 c4 08                   addq    $0x8, %rsp
// 209: 5b                            popq    %rbx
// 20a: 41 5c                         popq    %r12
// 20c: 41 5d                         popq    %r13
// 20e: 41 5e                         popq    %r14
// 210: 41 5f                         popq    %r15
// 212: 5d                            popq    %rbp
// 213: ff e0                         jmpq    *%rax
// 215: 48 83 c3 f8                   addq    $-0x8, %rbx
// 219: 4c 29 f3                      subq    %r14, %rbx
// 21c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 220: 48 c1 eb 03                   shrq    $0x3, %rbx
// 224: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 228: 31 c0                         xorl    %eax, %eax
// 22a: e9 eb fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 22f: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_RANGE_code_body[560] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x49, 0x8b, 0x7d, 0x10, 0x49, 0x8b, 0x45, 0x18, 0x48, 0x01, 0xf8, 0x49, 0x89, 0x45, 0x10, 0x49, 0xff, 0x4d, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xeb, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_RANGE_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_RANGE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_TUPLE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_ITER_NEXT_TUPLE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1ce: 49 8b 4d 18                   movq    0x18(%r13), %rcx
// 1d2: 48 8d 50 01                   leaq    0x1(%rax), %rdx
// 1d6: 49 89 55 10                   movq    %rdx, 0x10(%r13)
// 1da: 4c 8b 64 c1 18                movq    0x18(%rcx,%rax,8), %r12
// 1df: 41 8b 04 24                   movl    (%r12), %eax
// 1e3: ff c0                         incl    %eax
// 1e5: 74 10                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 1e7: 41 89 04 24                   movl    %eax, (%r12)
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f5: ff d0                         callq   *%rax
// 1f7: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_CONTINUE
// 205: 4c 89 f7                      movq    %r14, %rdi
// 208: 48 89 de                      movq    %rbx, %rsi
// 20b: 4c 89 fa                      movq    %r15, %rdx
// 20e: 48 83 c4 08                   addq    $0x8, %rsp
// 212: 5b                            popq    %rbx
// 213: 41 5c                         popq    %r12
// 215: 41 5d                         popq    %r13
// 217: 41 5e                         popq    %r14
// 219: 41 5f                         popq    %r15
// 21b: 5d                            popq    %rbp
// 21c: ff e0                         jmpq    *%rax
// 21e: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_TUPLE_code_body[543] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x49, 0x8b, 0x45, 0x10, 0x49, 0x8b, 0x4d, 0x18, 0x48, 0x8d, 0x50, 0x01, 0x49, 0x89, 0x55, 0x10, 0x4c, 0x8b, 0x64, 0xc1, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_TUPLE_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_ITER_NEXT_TUPLE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_JUMP_TO_TOP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_JUMP_TO_TOP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1ce: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1d2: 48 8b 00                      movq    (%rax), %rax
// 1d5: 84 c0                         testb   %al, %al
// 1d7: 74 29                         je      0x202 <_JIT_ENTRY+0x202>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_HandlePending
// 1e3: 4c 89 ff                      movq    %r15, %rdi
// 1e6: ff d0                         callq   *%rax
// 1e8: 85 c0                         testl   %eax, %eax
// 1ea: 74 16                         je      0x202 <_JIT_ENTRY+0x202>
// 1ec: 4c 29 f3                      subq    %r14, %rbx
// 1ef: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1f3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1f7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1fb: 31 c0                         xorl    %eax, %eax
// 1fd: e9 18 ff ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _JIT_CONTINUE
// 20c: 4c 89 f7                      movq    %r14, %rdi
// 20f: 48 89 de                      movq    %rbx, %rsi
// 212: 4c 89 fa                      movq    %r15, %rdx
// 215: 48 83 c4 08                   addq    $0x8, %rsp
// 219: 5b                            popq    %rbx
// 21a: 41 5c                         popq    %r12
// 21c: 41 5d                         popq    %r13
// 21e: 41 5e                         popq    %r14
// 220: 41 5f                         popq    %r15
// 222: 5d                            popq    %rbp
// 223: ff e0                         jmpq    *%rax
// 225: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_JUMP_TO_TOP_code_body[550] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x16, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x18, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_JUMP_TO_TOP_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_JUMP_TO_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_JUMP_TO_TOP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LIST_APPEND
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LIST_APPEND.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 8d 67 f0                   leaq    -0x10(%r15), %r12
// 1ca: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: f7 d0                         notl    %eax
// 1da: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1df: 48 98                         cltq
// 1e1: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// 1e6: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1ea: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
// 1ee: 7e 11                         jle     0x201 <_JIT_ENTRY+0x201>
// 1f0: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
// 1f4: 4c 89 2c c1                   movq    %r13, (%rcx,%rax,8)
// 1f8: 48 ff c0                      incq    %rax
// 1fb: 48 89 47 10                   movq    %rax, 0x10(%rdi)
// 1ff: eb 13                         jmp     0x214 <_JIT_ENTRY+0x214>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _PyList_AppendTakeRefListResize
// 20b: 4c 89 ee                      movq    %r13, %rsi
// 20e: ff d0                         callq   *%rax
// 210: 85 c0                         testl   %eax, %eax
// 212: 78 23                         js      0x237 <_JIT_ENTRY+0x237>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_CONTINUE
// 21e: 48 89 df                      movq    %rbx, %rdi
// 221: 4c 89 e6                      movq    %r12, %rsi
// 224: 4c 89 f2                      movq    %r14, %rdx
// 227: 48 83 c4 08                   addq    $0x8, %rsp
// 22b: 5b                            popq    %rbx
// 22c: 41 5c                         popq    %r12
// 22e: 41 5d                         popq    %r13
// 230: 41 5e                         popq    %r14
// 232: 41 5f                         popq    %r15
// 234: 5d                            popq    %rbp
// 235: ff e0                         jmpq    *%rax
// 237: 49 29 dc                      subq    %rbx, %r12
// 23a: 49 83 c4 b8                   addq    $-0x48, %r12
// 23e: 49 c1 ec 03                   shrq    $0x3, %r12
// 242: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 246: 31 c0                         xorl    %eax, %eax
// 248: e9 cd fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 24d: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LIST_APPEND_code_body[590] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x67, 0xf0, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x11, 0x48, 0x8b, 0x4f, 0x18, 0x4c, 0x89, 0x2c, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xcd, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_LIST_APPEND_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LIST_APPEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LIST_APPEND_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LIST_EXTEND
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LIST_EXTEND.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 8d 67 f0                   leaq    -0x10(%r15), %r12
// 1ca: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: f7 d0                         notl    %eax
// 1da: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1df: 48 98                         cltq
// 1e1: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _PyList_Extend
// 1f0: 4c 89 ee                      movq    %r13, %rsi
// 1f3: ff d0                         callq   *%rax
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 74 73                         je      0x26d <_JIT_ENTRY+0x26d>
// 1fa: 49 8b 45 00                   movq    (%r13), %rax
// 1fe: 48 85 c0                      testq   %rax, %rax
// 201: 7f 22                         jg      0x225 <_JIT_ENTRY+0x225>
// 203: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000205:  R_X86_64_64  .rodata.str1.1
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_NegativeRefcount
// 217: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 21c: 4c 89 ea                      movq    %r13, %rdx
// 21f: ff d0                         callq   *%rax
// 221: 49 8b 45 00                   movq    (%r13), %rax
// 225: 85 c0                         testl   %eax, %eax
// 227: 78 21                         js      0x24a <_JIT_ENTRY+0x24a>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 233: ff d0                         callq   *%rax
// 235: 49 ff 4d 00                   decq    (%r13)
// 239: 75 0f                         jne     0x24a <_JIT_ENTRY+0x24a>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: 4c 89 ef                      movq    %r13, %rdi
// 248: ff d0                         callq   *%rax
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _JIT_CONTINUE
// 254: 48 89 df                      movq    %rbx, %rdi
// 257: 4c 89 e6                      movq    %r12, %rsi
// 25a: 4c 89 f2                      movq    %r14, %rdx
// 25d: 48 83 c4 08                   addq    $0x8, %rsp
// 261: 5b                            popq    %rbx
// 262: 41 5c                         popq    %r12
// 264: 41 5d                         popq    %r13
// 266: 41 5e                         popq    %r14
// 268: 41 5f                         popq    %r15
// 26a: 5d                            popq    %rbp
// 26b: ff e0                         jmpq    *%rax
// 26d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000026f:  R_X86_64_64  PyExc_TypeError
// 277: 49 8b 37                      movq    (%r15), %rsi
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _PyErr_ExceptionMatches
// 284: 4c 89 f7                      movq    %r14, %rdi
// 287: ff d0                         callq   *%rax
// 289: 85 c0                         testl   %eax, %eax
// 28b: 74 57                         je      0x2e4 <_JIT_ENTRY+0x2e4>
// 28d: 49 8b 45 08                   movq    0x8(%r13), %rax
// 291: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// 299: 75 49                         jne     0x2e4 <_JIT_ENTRY+0x2e4>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  PySequence_Check
// 2a5: 4c 89 ef                      movq    %r13, %rdi
// 2a8: ff d0                         callq   *%rax
// 2aa: 85 c0                         testl   %eax, %eax
// 2ac: 75 36                         jne     0x2e4 <_JIT_ENTRY+0x2e4>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _PyErr_Clear
// 2b8: 4c 89 f7                      movq    %r14, %rdi
// 2bb: ff d0                         callq   *%rax
// 2bd: 49 8b 37                      movq    (%r15), %rsi
// 2c0: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2c4: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2c8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ca:  R_X86_64_64  .rodata.str1.1+0x39
// 2d2: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002d4:  R_X86_64_64  _PyErr_Format
// 2dc: 4c 89 f7                      movq    %r14, %rdi
// 2df: 31 c0                         xorl    %eax, %eax
// 2e1: 41 ff d0                      callq   *%r8
// 2e4: 49 8b 45 00                   movq    (%r13), %rax
// 2e8: 48 85 c0                      testq   %rax, %rax
// 2eb: 7f 22                         jg      0x30f <_JIT_ENTRY+0x30f>
// 2ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ef:  R_X86_64_64  .rodata.str1.1
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_NegativeRefcount
// 301: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 306: 4c 89 ea                      movq    %r13, %rdx
// 309: ff d0                         callq   *%rax
// 30b: 49 8b 45 00                   movq    (%r13), %rax
// 30f: 85 c0                         testl   %eax, %eax
// 311: 78 21                         js      0x334 <_JIT_ENTRY+0x334>
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31d: ff d0                         callq   *%rax
// 31f: 49 ff 4d 00                   decq    (%r13)
// 323: 75 0f                         jne     0x334 <_JIT_ENTRY+0x334>
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  _Py_Dealloc
// 32f: 4c 89 ef                      movq    %r13, %rdi
// 332: ff d0                         callq   *%rax
// 334: 49 29 dc                      subq    %rbx, %r12
// 337: 49 83 c4 b8                   addq    $-0x48, %r12
// 33b: 49 c1 ec 03                   shrq    $0x3, %r12
// 33f: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 343: 31 c0                         xorl    %eax, %eax
// 345: e9 d0 fd ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 34a: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LIST_EXTEND_code_body[843] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x67, 0xf0, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x73, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x57, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x49, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x37, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xd0, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_LIST_EXTEND_code_holes[28] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00'
// 67: 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LIST_EXTEND_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LIST_EXTEND_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_ASSERTION_ERROR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  PyExc_AssertionError
// 1d4: 4c 8b 20                      movq    (%rax), %r12
// 1d7: 41 8b 04 24                   movl    (%r12), %eax
// 1db: ff c0                         incl    %eax
// 1dd: 74 10                         je      0x1ef <_JIT_ENTRY+0x1ef>
// 1df: 41 89 04 24                   movl    %eax, (%r12)
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ed: ff d0                         callq   *%rax
// 1ef: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _JIT_CONTINUE
// 1fd: 4c 89 f7                      movq    %r14, %rdi
// 200: 48 89 de                      movq    %rbx, %rsi
// 203: 4c 89 fa                      movq    %r15, %rdx
// 206: 48 83 c4 08                   addq    $0x8, %rsp
// 20a: 5b                            popq    %rbx
// 20b: 41 5c                         popq    %r12
// 20d: 41 5d                         popq    %r13
// 20f: 41 5e                         popq    %r14
// 211: 41 5f                         popq    %r15
// 213: 5d                            popq    %rbp
// 214: ff e0                         jmpq    *%rax
// 216: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ASSERTION_ERROR_code_body[535] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ASSERTION_ERROR_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ASSERTION_ERROR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 28                         jg      0x19d <_JIT_ENTRY+0x19d>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: 49 89 cd                      movq    %rcx, %r13
// 194: ff d0                         callq   *%rax
// 196: 4c 89 e9                      movq    %r13, %rcx
// 199: 49 8b 04 24                   movq    (%r12), %rax
// 19d: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 1a1: 48 01 cd                      addq    %rcx, %rbp
// 1a4: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 49 89 6d 00                   movq    %rbp, (%r13)
// 1d4: 48 8b 03                      movq    (%rbx), %rax
// 1d7: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1db: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dd:  R_X86_64_64  _JIT_OPARG
// 1e5: 89 ca                         movl    %ecx, %edx
// 1e7: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// 1ed: 48 8b 74 90 18                movq    0x18(%rax,%rdx,4), %rsi
// 1f2: f6 c1 01                      testb   $0x1, %cl
// 1f5: 74 27                         je      0x21e <_JIT_ENTRY+0x21e>
// 1f7: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _PyObject_GetMethod
// 209: 48 89 e2                      movq    %rsp, %rdx
// 20c: 48 89 ef                      movq    %rbp, %rdi
// 20f: ff d0                         callq   *%rax
// 211: 85 c0                         testl   %eax, %eax
// 213: 74 6d                         je      0x282 <_JIT_ENTRY+0x282>
// 215: 4c 8b 24 24                   movq    (%rsp), %r12
// 219: e9 bf 00 00 00                jmp     0x2dd <_JIT_ENTRY+0x2dd>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  PyObject_GetAttr
// 228: 48 89 ef                      movq    %rbp, %rdi
// 22b: ff d0                         callq   *%rax
// 22d: 49 89 c4                      movq    %rax, %r12
// 230: 48 8b 45 00                   movq    (%rbp), %rax
// 234: 48 85 c0                      testq   %rax, %rax
// 237: 7f 22                         jg      0x25b <_JIT_ENTRY+0x25b>
// 239: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023b:  R_X86_64_64  .rodata.str1.1
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _Py_NegativeRefcount
// 24d: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 252: 48 89 ea                      movq    %rbp, %rdx
// 255: ff d0                         callq   *%rax
// 257: 48 8b 45 00                   movq    (%rbp), %rax
// 25b: 85 c0                         testl   %eax, %eax
// 25d: 78 77                         js      0x2d6 <_JIT_ENTRY+0x2d6>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 269: ff d0                         callq   *%rax
// 26b: 48 ff 4d 00                   decq    (%rbp)
// 26f: 75 65                         jne     0x2d6 <_JIT_ENTRY+0x2d6>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_Dealloc
// 27b: 48 89 ef                      movq    %rbp, %rdi
// 27e: ff d0                         callq   *%rax
// 280: eb 54                         jmp     0x2d6 <_JIT_ENTRY+0x2d6>
// 282: 48 8b 45 00                   movq    (%rbp), %rax
// 286: 48 85 c0                      testq   %rax, %rax
// 289: 7f 22                         jg      0x2ad <_JIT_ENTRY+0x2ad>
// 28b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028d:  R_X86_64_64  .rodata.str1.1
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_NegativeRefcount
// 29f: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 2a4: 48 89 ea                      movq    %rbp, %rdx
// 2a7: ff d0                         callq   *%rax
// 2a9: 48 8b 45 00                   movq    (%rbp), %rax
// 2ad: 85 c0                         testl   %eax, %eax
// 2af: 78 21                         js      0x2d2 <_JIT_ENTRY+0x2d2>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bb: ff d0                         callq   *%rax
// 2bd: 48 ff 4d 00                   decq    (%rbp)
// 2c1: 75 0f                         jne     0x2d2 <_JIT_ENTRY+0x2d2>
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _Py_Dealloc
// 2cd: 48 89 ef                      movq    %rbp, %rdi
// 2d0: ff d0                         callq   *%rax
// 2d2: 4c 8b 24 24                   movq    (%rsp), %r12
// 2d6: 4d 85 e4                      testq   %r12, %r12
// 2d9: 74 43                         je      0x31e <_JIT_ENTRY+0x31e>
// 2db: 31 ed                         xorl    %ebp, %ebp
// 2dd: 4d 89 65 00                   movq    %r12, (%r13)
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _JIT_OPARG
// 2eb: a8 01                         testb   $0x1, %al
// 2ed: 74 04                         je      0x2f3 <_JIT_ENTRY+0x2f3>
// 2ef: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 2f3: 83 e0 01                      andl    $0x1, %eax
// 2f6: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2fa: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  _JIT_CONTINUE
// 308: 48 89 df                      movq    %rbx, %rdi
// 30b: 4c 89 fa                      movq    %r15, %rdx
// 30e: 48 83 c4 08                   addq    $0x8, %rsp
// 312: 5b                            popq    %rbx
// 313: 41 5c                         popq    %r12
// 315: 41 5d                         popq    %r13
// 317: 41 5e                         popq    %r14
// 319: 41 5f                         popq    %r15
// 31b: 5d                            popq    %rbp
// 31c: ff e0                         jmpq    *%rax
// 31e: 49 29 dd                      subq    %rbx, %r13
// 321: 49 83 c5 b8                   addq    $-0x48, %r13
// 325: 49 c1 ed 03                   shrq    $0x3, %r13
// 329: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 32d: 31 c0                         xorl    %eax, %eax
// 32f: e9 e6 fd ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 334: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_code_body[821] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf0, 0x48, 0x01, 0xcd, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xca, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x90, 0x18, 0xf6, 0xc1, 0x01, 0x74, 0x27, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x6d, 0x4c, 0x8b, 0x24, 0x24, 0xe9, 0xbf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x77, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x54, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x4d, 0x85, 0xe4, 0x74, 0x43, 0x31, 0xed, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x04, 0x49, 0x89, 0x6e, 0xf8, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xe6, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_code_holes[24] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_CLASS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_CLASS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 17                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1af: ff d5                         callq   *%rbp
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001cc:  R_X86_64_64  _JIT_OPERAND
// 1d4: 41 8b 04 24                   movl    (%r12), %eax
// 1d8: ff c0                         incl    %eax
// 1da: 75 0f                         jne     0x1eb <_JIT_ENTRY+0x1eb>
// 1dc: 49 8b 45 00                   movq    (%r13), %rax
// 1e0: 48 85 c0                      testq   %rax, %rax
// 1e3: 7e 1f                         jle     0x204 <_JIT_ENTRY+0x204>
// 1e5: 85 c0                         testl   %eax, %eax
// 1e7: 79 41                         jns     0x22a <_JIT_ENTRY+0x22a>
// 1e9: eb 56                         jmp     0x241 <_JIT_ENTRY+0x241>
// 1eb: 41 89 04 24                   movl    %eax, (%r12)
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f9: ff d0                         callq   *%rax
// 1fb: 49 8b 45 00                   movq    (%r13), %rax
// 1ff: 48 85 c0                      testq   %rax, %rax
// 202: 7f e1                         jg      0x1e5 <_JIT_ENTRY+0x1e5>
// 204: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000206:  R_X86_64_64  .rodata.str1.1
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_NegativeRefcount
// 218: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 21d: 4c 89 ea                      movq    %r13, %rdx
// 220: ff d0                         callq   *%rax
// 222: 49 8b 45 00                   movq    (%r13), %rax
// 226: 85 c0                         testl   %eax, %eax
// 228: 78 17                         js      0x241 <_JIT_ENTRY+0x241>
// 22a: ff d5                         callq   *%rbp
// 22c: 49 ff 4d 00                   decq    (%r13)
// 230: 75 0f                         jne     0x241 <_JIT_ENTRY+0x241>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_Dealloc
// 23c: 4c 89 ef                      movq    %r13, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 4d 89 66 f0                   movq    %r12, -0x10(%r14)
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_OPARG
// 24f: a8 01                         testb   $0x1, %al
// 251: 74 08                         je      0x25b <_JIT_ENTRY+0x25b>
// 253: 49 c7 46 f8 00 00 00 00       movq    $0x0, -0x8(%r14)
// 25b: 83 e0 01                      andl    $0x1, %eax
// 25e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 262: 48 83 c6 f8                   addq    $-0x8, %rsi
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _JIT_CONTINUE
// 270: 48 89 df                      movq    %rbx, %rdi
// 273: 4c 89 fa                      movq    %r15, %rdx
// 276: 48 83 c4 08                   addq    $0x8, %rsp
// 27a: 5b                            popq    %rbx
// 27b: 41 5c                         popq    %r12
// 27d: 41 5d                         popq    %r13
// 27f: 41 5e                         popq    %r14
// 281: 41 5f                         popq    %r15
// 283: 5d                            popq    %rbp
// 284: ff e0                         jmpq    *%rax
// 286: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_CLASS_code_body[647] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x56, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_CLASS_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_CLASS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_INSTANCE_VALUE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 a9 01 00 00             jne     0x1d2 <_JIT_ENTRY+0x1d2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 90 01 00 00             jne     0x1d2 <_JIT_ENTRY+0x1d2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 85 01 00 00             ja      0x1d2 <_JIT_ENTRY+0x1d2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 76 01 00 00             jle     0x1d2 <_JIT_ENTRY+0x1d2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 dc 00 00 00             ja      0x1d2 <_JIT_ENTRY+0x1d2>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 197: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19b: 49 8b 45 e8                   movq    -0x18(%r13), %rax
// 19f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a1:  R_X86_64_64  _JIT_OPERAND
// 1a9: 0f b7 c9                      movzwl  %cx, %ecx
// 1ac: 48 8b 6c c8 01                movq    0x1(%rax,%rcx,8), %rbp
// 1b1: 48 85 ed                      testq   %rbp, %rbp
// 1b4: 74 19                         je      0x1cf <_JIT_ENTRY+0x1cf>
// 1b6: 8b 45 00                      movl    (%rbp), %eax
// 1b9: ff c0                         incl    %eax
// 1bb: 75 4c                         jne     0x209 <_JIT_ENTRY+0x209>
// 1bd: 49 8b 45 00                   movq    (%r13), %rax
// 1c1: 48 85 c0                      testq   %rax, %rax
// 1c4: 7e 5b                         jle     0x221 <_JIT_ENTRY+0x221>
// 1c6: 85 c0                         testl   %eax, %eax
// 1c8: 79 7d                         jns     0x247 <_JIT_ENTRY+0x247>
// 1ca: e9 99 00 00 00                jmp     0x268 <_JIT_ENTRY+0x268>
// 1cf: 4d 89 e6                      movq    %r12, %r14
// 1d2: 49 29 de                      subq    %rbx, %r14
// 1d5: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d9: 49 c1 ee 03                   shrq    $0x3, %r14
// 1dd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e1: 48 8b 03                      movq    (%rbx), %rax
// 1e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e6:  R_X86_64_64  _JIT_TARGET
// 1ee: 89 c9                         movl    %ecx, %ecx
// 1f0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fa: 48 83 c4 08                   addq    $0x8, %rsp
// 1fe: 5b                            popq    %rbx
// 1ff: 41 5c                         popq    %r12
// 201: 41 5d                         popq    %r13
// 203: 41 5e                         popq    %r14
// 205: 41 5f                         popq    %r15
// 207: 5d                            popq    %rbp
// 208: c3                            retq
// 209: 89 45 00                      movl    %eax, (%rbp)
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 216: ff d0                         callq   *%rax
// 218: 49 8b 45 00                   movq    (%r13), %rax
// 21c: 48 85 c0                      testq   %rax, %rax
// 21f: 7f a5                         jg      0x1c6 <_JIT_ENTRY+0x1c6>
// 221: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000223:  R_X86_64_64  .rodata.str1.1
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_NegativeRefcount
// 235: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// 23a: 4c 89 ea                      movq    %r13, %rdx
// 23d: ff d0                         callq   *%rax
// 23f: 49 8b 45 00                   movq    (%r13), %rax
// 243: 85 c0                         testl   %eax, %eax
// 245: 78 21                         js      0x268 <_JIT_ENTRY+0x268>
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 251: ff d0                         callq   *%rax
// 253: 49 ff 4d 00                   decq    (%r13)
// 257: 75 0f                         jne     0x268 <_JIT_ENTRY+0x268>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_Dealloc
// 263: 4c 89 ef                      movq    %r13, %rdi
// 266: ff d0                         callq   *%rax
// 268: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _JIT_OPARG
// 276: a8 01                         testb   $0x1, %al
// 278: 74 08                         je      0x282 <_JIT_ENTRY+0x282>
// 27a: 49 c7 04 24 00 00 00 00       movq    $0x0, (%r12)
// 282: 83 e0 01                      andl    $0x1, %eax
// 285: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 289: 48 83 c6 f8                   addq    $-0x8, %rsi
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _JIT_CONTINUE
// 297: 48 89 df                      movq    %rbx, %rdi
// 29a: 4c 89 fa                      movq    %r15, %rdx
// 29d: 48 83 c4 08                   addq    $0x8, %rsp
// 2a1: 5b                            popq    %rbx
// 2a2: 41 5c                         popq    %r12
// 2a4: 41 5d                         popq    %r13
// 2a6: 41 5e                         popq    %r14
// 2a8: 41 5f                         popq    %r15
// 2aa: 5d                            popq    %rbp
// 2ab: ff e0                         jmpq    *%rax
// 2ad: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_INSTANCE_VALUE_code_body[686] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xa9, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x90, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x85, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x76, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xdc, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x45, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x6c, 0xc8, 0x01, 0x48, 0x85, 0xed, 0x74, 0x19, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x4c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x5b, 0x85, 0xc0, 0x79, 0x7d, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xa5, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_LAZY_DICT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001cc:  R_X86_64_64  _JIT_OPERAND
// 1d4: 41 8b 04 24                   movl    (%r12), %eax
// 1d8: ff c0                         incl    %eax
// 1da: 74 10                         je      0x1ec <_JIT_ENTRY+0x1ec>
// 1dc: 41 89 04 24                   movl    %eax, (%r12)
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ea: ff d0                         callq   *%rax
// 1ec: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 1f0: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _JIT_CONTINUE
// 1fe: 4c 89 f7                      movq    %r14, %rdi
// 201: 48 89 de                      movq    %rbx, %rsi
// 204: 4c 89 fa                      movq    %r15, %rdx
// 207: 48 83 c4 08                   addq    $0x8, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: ff e0                         jmpq    *%rax
// 217: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[536] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_NO_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001cc:  R_X86_64_64  _JIT_OPERAND
// 1d4: 41 8b 04 24                   movl    (%r12), %eax
// 1d8: ff c0                         incl    %eax
// 1da: 74 10                         je      0x1ec <_JIT_ENTRY+0x1ec>
// 1dc: 41 89 04 24                   movl    %eax, (%r12)
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ea: ff d0                         callq   *%rax
// 1ec: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 1f0: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _JIT_CONTINUE
// 1fe: 4c 89 f7                      movq    %r14, %rdi
// 201: 48 89 de                      movq    %rbx, %rsi
// 204: 4c 89 fa                      movq    %r15, %rdx
// 207: 48 83 c4 08                   addq    $0x8, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: ff e0                         jmpq    *%rax
// 217: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_NO_DICT_code_body[536] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_WITH_VALUES.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001cc:  R_X86_64_64  _JIT_OPERAND
// 1d4: 41 8b 04 24                   movl    (%r12), %eax
// 1d8: ff c0                         incl    %eax
// 1da: 74 10                         je      0x1ec <_JIT_ENTRY+0x1ec>
// 1dc: 41 89 04 24                   movl    %eax, (%r12)
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ea: ff d0                         callq   *%rax
// 1ec: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 1f0: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _JIT_CONTINUE
// 1fe: 4c 89 f7                      movq    %r14, %rdi
// 201: 48 89 de                      movq    %rbx, %rsi
// 204: 4c 89 fa                      movq    %r15, %rdx
// 207: 48 83 c4 08                   addq    $0x8, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: ff e0                         jmpq    *%rax
// 217: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[536] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_MODULE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_MODULE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c0 01 00 00             jne     0x1e9 <_JIT_ENTRY+0x1e9>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 a7 01 00 00             jne     0x1e9 <_JIT_ENTRY+0x1e9>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 9c 01 00 00             ja      0x1e9 <_JIT_ENTRY+0x1e9>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 8d 01 00 00             jle     0x1e9 <_JIT_ENTRY+0x1e9>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 f3 00 00 00             ja      0x1e9 <_JIT_ENTRY+0x1e9>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 197: 49 8b 45 10                   movq    0x10(%r13), %rax
// 19b: 48 8b 40 20                   movq    0x20(%rax), %rax
// 19f: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1a3: ba 01 00 00 00                movl    $0x1, %edx
// 1a8: 48 d3 e2                      shlq    %cl, %rdx
// 1ab: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1af: 48 01 c2                      addq    %rax, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _JIT_OPERAND
// 1bc: 0f b7 c0                      movzwl  %ax, %eax
// 1bf: 48 c1 e0 04                   shlq    $0x4, %rax
// 1c3: 48 8b 6c 10 28                movq    0x28(%rax,%rdx), %rbp
// 1c8: 48 85 ed                      testq   %rbp, %rbp
// 1cb: 74 19                         je      0x1e6 <_JIT_ENTRY+0x1e6>
// 1cd: 8b 45 00                      movl    (%rbp), %eax
// 1d0: ff c0                         incl    %eax
// 1d2: 75 4c                         jne     0x220 <_JIT_ENTRY+0x220>
// 1d4: 49 8b 45 00                   movq    (%r13), %rax
// 1d8: 48 85 c0                      testq   %rax, %rax
// 1db: 7e 5b                         jle     0x238 <_JIT_ENTRY+0x238>
// 1dd: 85 c0                         testl   %eax, %eax
// 1df: 79 7d                         jns     0x25e <_JIT_ENTRY+0x25e>
// 1e1: e9 99 00 00 00                jmp     0x27f <_JIT_ENTRY+0x27f>
// 1e6: 4d 89 e6                      movq    %r12, %r14
// 1e9: 49 29 de                      subq    %rbx, %r14
// 1ec: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f0: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1f8: 48 8b 03                      movq    (%rbx), %rax
// 1fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fd:  R_X86_64_64  _JIT_TARGET
// 205: 89 c9                         movl    %ecx, %ecx
// 207: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 20b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 211: 48 83 c4 08                   addq    $0x8, %rsp
// 215: 5b                            popq    %rbx
// 216: 41 5c                         popq    %r12
// 218: 41 5d                         popq    %r13
// 21a: 41 5e                         popq    %r14
// 21c: 41 5f                         popq    %r15
// 21e: 5d                            popq    %rbp
// 21f: c3                            retq
// 220: 89 45 00                      movl    %eax, (%rbp)
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 22d: ff d0                         callq   *%rax
// 22f: 49 8b 45 00                   movq    (%r13), %rax
// 233: 48 85 c0                      testq   %rax, %rax
// 236: 7f a5                         jg      0x1dd <_JIT_ENTRY+0x1dd>
// 238: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023a:  R_X86_64_64  .rodata.str1.1
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_NegativeRefcount
// 24c: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 251: 4c 89 ea                      movq    %r13, %rdx
// 254: ff d0                         callq   *%rax
// 256: 49 8b 45 00                   movq    (%r13), %rax
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 21                         js      0x27f <_JIT_ENTRY+0x27f>
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 268: ff d0                         callq   *%rax
// 26a: 49 ff 4d 00                   decq    (%r13)
// 26e: 75 0f                         jne     0x27f <_JIT_ENTRY+0x27f>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_Dealloc
// 27a: 4c 89 ef                      movq    %r13, %rdi
// 27d: ff d0                         callq   *%rax
// 27f: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_OPARG
// 28d: a8 01                         testb   $0x1, %al
// 28f: 74 08                         je      0x299 <_JIT_ENTRY+0x299>
// 291: 49 c7 04 24 00 00 00 00       movq    $0x0, (%r12)
// 299: 83 e0 01                      andl    $0x1, %eax
// 29c: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2a0: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _JIT_CONTINUE
// 2ae: 48 89 df                      movq    %rbx, %rdi
// 2b1: 4c 89 fa                      movq    %r15, %rdx
// 2b4: 48 83 c4 08                   addq    $0x8, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: ff e0                         jmpq    *%rax
// 2c4: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_MODULE_code_body[709] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc0, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xa7, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x9c, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x8d, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xf3, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x4d, 0x8d, 0x66, 0xf8, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0x8b, 0x6c, 0x10, 0x28, 0x48, 0x85, 0xed, 0x74, 0x19, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x4c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x5b, 0x85, 0xc0, 0x79, 0x7d, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xa5, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_MODULE_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_MODULE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 17                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1af: ff d5                         callq   *%rbp
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 49 8b 45 00                   movq    (%r13), %rax
// 1ce: 48 85 c0                      testq   %rax, %rax
// 1d1: 7f 22                         jg      0x1f5 <_JIT_ENTRY+0x1f5>
// 1d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d5:  R_X86_64_64  .rodata.str1.1
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_NegativeRefcount
// 1e7: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 1ec: 4c 89 ea                      movq    %r13, %rdx
// 1ef: ff d0                         callq   *%rax
// 1f1: 49 8b 45 00                   movq    (%r13), %rax
// 1f5: 85 c0                         testl   %eax, %eax
// 1f7: 78 17                         js      0x210 <_JIT_ENTRY+0x210>
// 1f9: ff d5                         callq   *%rbp
// 1fb: 49 ff 4d 00                   decq    (%r13)
// 1ff: 75 0f                         jne     0x210 <_JIT_ENTRY+0x210>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_Dealloc
// 20b: 4c 89 ef                      movq    %r13, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 214: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000216:  R_X86_64_64  _JIT_OPERAND
// 21e: 41 8b 45 00                   movl    (%r13), %eax
// 222: ff c0                         incl    %eax
// 224: 74 10                         je      0x236 <_JIT_ENTRY+0x236>
// 226: 41 89 45 00                   movl    %eax, (%r13)
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 234: ff d0                         callq   *%rax
// 236: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _JIT_CONTINUE
// 244: 48 89 df                      movq    %rbx, %rdi
// 247: 4c 89 e6                      movq    %r12, %rsi
// 24a: 4c 89 fa                      movq    %r15, %rdx
// 24d: 48 83 c4 08                   addq    $0x8, %rsp
// 251: 5b                            popq    %rbx
// 252: 41 5c                         popq    %r12
// 254: 41 5d                         popq    %r13
// 256: 41 5e                         popq    %r14
// 258: 41 5f                         popq    %r15
// 25a: 5d                            popq    %rbp
// 25b: ff e0                         jmpq    *%rax
// 25d: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[606] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 17                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1af: ff d5                         callq   *%rbp
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 49 8b 45 00                   movq    (%r13), %rax
// 1ce: 48 85 c0                      testq   %rax, %rax
// 1d1: 7f 22                         jg      0x1f5 <_JIT_ENTRY+0x1f5>
// 1d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d5:  R_X86_64_64  .rodata.str1.1
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_NegativeRefcount
// 1e7: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 1ec: 4c 89 ea                      movq    %r13, %rdx
// 1ef: ff d0                         callq   *%rax
// 1f1: 49 8b 45 00                   movq    (%r13), %rax
// 1f5: 85 c0                         testl   %eax, %eax
// 1f7: 78 17                         js      0x210 <_JIT_ENTRY+0x210>
// 1f9: ff d5                         callq   *%rbp
// 1fb: 49 ff 4d 00                   decq    (%r13)
// 1ff: 75 0f                         jne     0x210 <_JIT_ENTRY+0x210>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_Dealloc
// 20b: 4c 89 ef                      movq    %r13, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 214: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000216:  R_X86_64_64  _JIT_OPERAND
// 21e: 41 8b 45 00                   movl    (%r13), %eax
// 222: ff c0                         incl    %eax
// 224: 74 10                         je      0x236 <_JIT_ENTRY+0x236>
// 226: 41 89 45 00                   movl    %eax, (%r13)
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 234: ff d0                         callq   *%rax
// 236: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _JIT_CONTINUE
// 244: 48 89 df                      movq    %rbx, %rdi
// 247: 4c 89 e6                      movq    %r12, %rsi
// 24a: 4c 89 fa                      movq    %r15, %rdx
// 24d: 48 83 c4 08                   addq    $0x8, %rsp
// 251: 5b                            popq    %rbx
// 252: 41 5c                         popq    %r12
// 254: 41 5d                         popq    %r13
// 256: 41 5e                         popq    %r14
// 258: 41 5f                         popq    %r15
// 25a: 5d                            popq    %rbp
// 25b: ff e0                         jmpq    *%rax
// 25d: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[606] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_SLOT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_SLOT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 a5 01 00 00             jne     0x1ce <_JIT_ENTRY+0x1ce>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 8c 01 00 00             jne     0x1ce <_JIT_ENTRY+0x1ce>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 81 01 00 00             ja      0x1ce <_JIT_ENTRY+0x1ce>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 72 01 00 00             jle     0x1ce <_JIT_ENTRY+0x1ce>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 d8 00 00 00             ja      0x1ce <_JIT_ENTRY+0x1ce>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 197: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPERAND
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: 49 8b 6c 05 00                movq    (%r13,%rax), %rbp
// 1ad: 48 85 ed                      testq   %rbp, %rbp
// 1b0: 74 19                         je      0x1cb <_JIT_ENTRY+0x1cb>
// 1b2: 8b 45 00                      movl    (%rbp), %eax
// 1b5: ff c0                         incl    %eax
// 1b7: 75 4c                         jne     0x205 <_JIT_ENTRY+0x205>
// 1b9: 49 8b 45 00                   movq    (%r13), %rax
// 1bd: 48 85 c0                      testq   %rax, %rax
// 1c0: 7e 5b                         jle     0x21d <_JIT_ENTRY+0x21d>
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 79 7d                         jns     0x243 <_JIT_ENTRY+0x243>
// 1c6: e9 99 00 00 00                jmp     0x264 <_JIT_ENTRY+0x264>
// 1cb: 4d 89 e6                      movq    %r12, %r14
// 1ce: 49 29 de                      subq    %rbx, %r14
// 1d1: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d5: 49 c1 ee 03                   shrq    $0x3, %r14
// 1d9: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1dd: 48 8b 03                      movq    (%rbx), %rax
// 1e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e2:  R_X86_64_64  _JIT_TARGET
// 1ea: 89 c9                         movl    %ecx, %ecx
// 1ec: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f6: 48 83 c4 08                   addq    $0x8, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: c3                            retq
// 205: 89 45 00                      movl    %eax, (%rbp)
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 212: ff d0                         callq   *%rax
// 214: 49 8b 45 00                   movq    (%r13), %rax
// 218: 48 85 c0                      testq   %rax, %rax
// 21b: 7f a5                         jg      0x1c2 <_JIT_ENTRY+0x1c2>
// 21d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021f:  R_X86_64_64  .rodata.str1.1
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_NegativeRefcount
// 231: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 236: 4c 89 ea                      movq    %r13, %rdx
// 239: ff d0                         callq   *%rax
// 23b: 49 8b 45 00                   movq    (%r13), %rax
// 23f: 85 c0                         testl   %eax, %eax
// 241: 78 21                         js      0x264 <_JIT_ENTRY+0x264>
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24d: ff d0                         callq   *%rax
// 24f: 49 ff 4d 00                   decq    (%r13)
// 253: 75 0f                         jne     0x264 <_JIT_ENTRY+0x264>
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_Dealloc
// 25f: 4c 89 ef                      movq    %r13, %rdi
// 262: ff d0                         callq   *%rax
// 264: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _JIT_OPARG
// 272: a8 01                         testb   $0x1, %al
// 274: 74 08                         je      0x27e <_JIT_ENTRY+0x27e>
// 276: 49 c7 04 24 00 00 00 00       movq    $0x0, (%r12)
// 27e: 83 e0 01                      andl    $0x1, %eax
// 281: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 285: 48 83 c6 f8                   addq    $-0x8, %rsi
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _JIT_CONTINUE
// 293: 48 89 df                      movq    %rbx, %rdi
// 296: 4c 89 fa                      movq    %r15, %rdx
// 299: 48 83 c4 08                   addq    $0x8, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: ff e0                         jmpq    *%rax
// 2a9: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_SLOT_code_body[682] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xa5, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x8c, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x81, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x72, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xd8, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x6c, 0x05, 0x00, 0x48, 0x85, 0xed, 0x74, 0x19, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x4c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x5b, 0x85, 0xc0, 0x79, 0x7d, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xa5, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_SLOT_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_SLOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_SLOT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_WITH_HINT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 3d 02 00 00             jne     0x266 <_JIT_ENTRY+0x266>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 24 02 00 00             jne     0x266 <_JIT_ENTRY+0x266>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 19 02 00 00             ja      0x266 <_JIT_ENTRY+0x266>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 0a 02 00 00             jle     0x266 <_JIT_ENTRY+0x266>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 70 01 00 00             ja      0x266 <_JIT_ENTRY+0x266>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 197: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19b: 49 8b 45 e8                   movq    -0x18(%r13), %rax
// 19f: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1a3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a5:  R_X86_64_64  _JIT_OPERAND
// 1ad: 0f b7 c9                      movzwl  %cx, %ecx
// 1b0: 48 39 48 18                   cmpq    %rcx, 0x18(%rax)
// 1b4: 0f 86 a9 00 00 00             jbe     0x263 <_JIT_ENTRY+0x263>
// 1ba: 48 8b 0b                      movq    (%rbx), %rcx
// 1bd: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// 1c1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: 81 e6 fe ff 00 00             andl    $0xfffe, %esi           # imm = 0xFFFE
// 1d1: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1d5: bf 01 00 00 00                movl    $0x1, %edi
// 1da: 48 d3 e7                      shlq    %cl, %rdi
// 1dd: 48 8b 4c b2 18                movq    0x18(%rdx,%rsi,4), %rcx
// 1e2: 80 78 0a 00                   cmpb    $0x0, 0xa(%rax)
// 1e6: 48 8d 44 38 20                leaq    0x20(%rax,%rdi), %rax
// 1eb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001ed:  R_X86_64_64  _JIT_OPERAND
// 1f5: 0f b7 d2                      movzwl  %dx, %edx
// 1f8: 74 24                         je      0x21e <_JIT_ENTRY+0x21e>
// 1fa: 48 c1 e2 04                   shlq    $0x4, %rdx
// 1fe: 48 39 0c 10                   cmpq    %rcx, (%rax,%rdx)
// 202: 75 5f                         jne     0x263 <_JIT_ENTRY+0x263>
// 204: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000206:  R_X86_64_64  _JIT_OPERAND
// 20e: 0f b7 c9                      movzwl  %cx, %ecx
// 211: 48 c1 e1 04                   shlq    $0x4, %rcx
// 215: 48 01 c8                      addq    %rcx, %rax
// 218: 48 83 c0 08                   addq    $0x8, %rax
// 21c: eb 24                         jmp     0x242 <_JIT_ENTRY+0x242>
// 21e: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 222: 48 39 4c d0 08                cmpq    %rcx, 0x8(%rax,%rdx,8)
// 227: 75 3a                         jne     0x263 <_JIT_ENTRY+0x263>
// 229: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022b:  R_X86_64_64  _JIT_OPERAND
// 233: 0f b7 c9                      movzwl  %cx, %ecx
// 236: 48 8d 0c 49                   leaq    (%rcx,%rcx,2), %rcx
// 23a: 48 8d 04 c8                   leaq    (%rax,%rcx,8), %rax
// 23e: 48 83 c0 10                   addq    $0x10, %rax
// 242: 48 8b 28                      movq    (%rax), %rbp
// 245: 48 85 ed                      testq   %rbp, %rbp
// 248: 74 19                         je      0x263 <_JIT_ENTRY+0x263>
// 24a: 8b 45 00                      movl    (%rbp), %eax
// 24d: ff c0                         incl    %eax
// 24f: 75 4c                         jne     0x29d <_JIT_ENTRY+0x29d>
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 5b                         jle     0x2b5 <_JIT_ENTRY+0x2b5>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 79 7d                         jns     0x2db <_JIT_ENTRY+0x2db>
// 25e: e9 99 00 00 00                jmp     0x2fc <_JIT_ENTRY+0x2fc>
// 263: 4d 89 e6                      movq    %r12, %r14
// 266: 49 29 de                      subq    %rbx, %r14
// 269: 49 83 c6 b8                   addq    $-0x48, %r14
// 26d: 49 c1 ee 03                   shrq    $0x3, %r14
// 271: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 275: 48 8b 03                      movq    (%rbx), %rax
// 278: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027a:  R_X86_64_64  _JIT_TARGET
// 282: 89 c9                         movl    %ecx, %ecx
// 284: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 288: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 28e: 48 83 c4 08                   addq    $0x8, %rsp
// 292: 5b                            popq    %rbx
// 293: 41 5c                         popq    %r12
// 295: 41 5d                         popq    %r13
// 297: 41 5e                         popq    %r14
// 299: 41 5f                         popq    %r15
// 29b: 5d                            popq    %rbp
// 29c: c3                            retq
// 29d: 89 45 00                      movl    %eax, (%rbp)
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 8b 45 00                   movq    (%r13), %rax
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 7f a5                         jg      0x25a <_JIT_ENTRY+0x25a>
// 2b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_NegativeRefcount
// 2c9: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 2ce: 4c 89 ea                      movq    %r13, %rdx
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 8b 45 00                   movq    (%r13), %rax
// 2d7: 85 c0                         testl   %eax, %eax
// 2d9: 78 21                         js      0x2fc <_JIT_ENTRY+0x2fc>
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e5: ff d0                         callq   *%rax
// 2e7: 49 ff 4d 00                   decq    (%r13)
// 2eb: 75 0f                         jne     0x2fc <_JIT_ENTRY+0x2fc>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_Dealloc
// 2f7: 4c 89 ef                      movq    %r13, %rdi
// 2fa: ff d0                         callq   *%rax
// 2fc: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _JIT_OPARG
// 30a: a8 01                         testb   $0x1, %al
// 30c: 74 08                         je      0x316 <_JIT_ENTRY+0x316>
// 30e: 49 c7 04 24 00 00 00 00       movq    $0x0, (%r12)
// 316: 83 e0 01                      andl    $0x1, %eax
// 319: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 31d: 48 83 c6 f8                   addq    $-0x8, %rsi
// 321: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000323:  R_X86_64_64  _JIT_CONTINUE
// 32b: 48 89 df                      movq    %rbx, %rdi
// 32e: 4c 89 fa                      movq    %r15, %rdx
// 331: 48 83 c4 08                   addq    $0x8, %rsp
// 335: 5b                            popq    %rbx
// 336: 41 5c                         popq    %r12
// 338: 41 5d                         popq    %r13
// 33a: 41 5e                         popq    %r14
// 33c: 41 5f                         popq    %r15
// 33e: 5d                            popq    %rbp
// 33f: ff e0                         jmpq    *%rax
// 341: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_WITH_HINT_code_body[834] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x3d, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x24, 0x02, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x19, 0x02, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x0a, 0x02, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x70, 0x01, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x45, 0xe8, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x18, 0x0f, 0x86, 0xa9, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x51, 0x20, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe6, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x48, 0x09, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe7, 0x48, 0x8b, 0x4c, 0xb2, 0x18, 0x80, 0x78, 0x0a, 0x00, 0x48, 0x8d, 0x44, 0x38, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x24, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x0c, 0x10, 0x75, 0x5f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0x01, 0xc8, 0x48, 0x83, 0xc0, 0x08, 0xeb, 0x24, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x4c, 0xd0, 0x08, 0x75, 0x3a, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x0c, 0x49, 0x48, 0x8d, 0x04, 0xc8, 0x48, 0x83, 0xc0, 0x10, 0x48, 0x8b, 0x28, 0x48, 0x85, 0xed, 0x74, 0x19, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x4c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x5b, 0x85, 0xc0, 0x79, 0x7d, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xa5, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_WITH_HINT_code_holes[23] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_BUILD_CLASS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_BUILD_CLASS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 4c 01 ed                      addq    %r13, %rbp
// 19a: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 48 89 6b f0                   movq    %rbp, -0x10(%rbx)
// 1ca: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  PyMapping_GetOptionalItem
// 1d8: 49 81 c5 40 a9 00 00          addq    $0xa940, %r13           # imm = 0xA940
// 1df: 48 89 e2                      movq    %rsp, %rdx
// 1e2: 4c 89 ee                      movq    %r13, %rsi
// 1e5: ff d0                         callq   *%rax
// 1e7: 85 c0                         testl   %eax, %eax
// 1e9: 78 56                         js      0x241 <_JIT_ENTRY+0x241>
// 1eb: 48 8b 04 24                   movq    (%rsp), %rax
// 1ef: 48 85 c0                      testq   %rax, %rax
// 1f2: 74 27                         je      0x21b <_JIT_ENTRY+0x21b>
// 1f4: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _JIT_CONTINUE
// 202: 4c 89 f7                      movq    %r14, %rdi
// 205: 48 89 de                      movq    %rbx, %rsi
// 208: 4c 89 fa                      movq    %r15, %rdx
// 20b: 48 83 c4 08                   addq    $0x8, %rsp
// 20f: 5b                            popq    %rbx
// 210: 41 5c                         popq    %r12
// 212: 41 5d                         popq    %r13
// 214: 41 5e                         popq    %r14
// 216: 41 5f                         popq    %r15
// 218: 5d                            popq    %rbp
// 219: ff e0                         jmpq    *%rax
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  PyExc_NameError
// 225: 48 8b 30                      movq    (%rax), %rsi
// 228: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000022a:  R_X86_64_64  .rodata.str1.1+0x39
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _PyErr_SetString
// 23c: 4c 89 ff                      movq    %r15, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 48 83 c3 f8                   addq    $-0x8, %rbx
// 245: 4c 29 f3                      subq    %r14, %rbx
// 248: 48 83 c3 b8                   addq    $-0x48, %rbx
// 24c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 250: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 254: 31 c0                         xorl    %eax, %eax
// 256: e9 bf fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 25b: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_BUILD_CLASS_code_body[604] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x01, 0xed, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x6b, 0xf0, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x56, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xbf, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_BUILD_CLASS_code_holes[16] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__build_class__ not found\x00'
// 53: 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_BUILD_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_BUILD_CLASS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_CONST
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_CONST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 49 8b 06                      movq    (%r14), %rax
// 1cd: 48 8b 40 18                   movq    0x18(%rax), %rax
// 1d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d3:  R_X86_64_64  _JIT_OPARG
// 1db: 0f b7 c9                      movzwl  %cx, %ecx
// 1de: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1e3: 41 8b 04 24                   movl    (%r12), %eax
// 1e7: ff c0                         incl    %eax
// 1e9: 74 10                         je      0x1fb <_JIT_ENTRY+0x1fb>
// 1eb: 41 89 04 24                   movl    %eax, (%r12)
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f9: ff d0                         callq   *%rax
// 1fb: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _JIT_CONTINUE
// 209: 4c 89 f7                      movq    %r14, %rdi
// 20c: 48 89 de                      movq    %rbx, %rsi
// 20f: 4c 89 fa                      movq    %r15, %rdx
// 212: 48 83 c4 08                   addq    $0x8, %rsp
// 216: 5b                            popq    %rbx
// 217: 41 5c                         popq    %r12
// 219: 41 5d                         popq    %r13
// 21b: 41 5e                         popq    %r14
// 21d: 41 5f                         popq    %r15
// 21f: 5d                            popq    %rbp
// 220: ff e0                         jmpq    *%rax
// 222: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_CONST_code_body[547] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_CONST_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_CONST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_CONST_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_DEREF
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_DEREF.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b7 c0                      movzwl  %ax, %eax
// 1d7: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// 1dc: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 1e0: 4d 85 e4                      testq   %r12, %r12
// 1e3: 74 3f                         je      0x224 <_JIT_ENTRY+0x224>
// 1e5: 41 8b 04 24                   movl    (%r12), %eax
// 1e9: ff c0                         incl    %eax
// 1eb: 74 10                         je      0x1fd <_JIT_ENTRY+0x1fd>
// 1ed: 41 89 04 24                   movl    %eax, (%r12)
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1fb: ff d0                         callq   *%rax
// 1fd: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _JIT_CONTINUE
// 20b: 4c 89 f7                      movq    %r14, %rdi
// 20e: 48 89 de                      movq    %rbx, %rsi
// 211: 4c 89 fa                      movq    %r15, %rdx
// 214: 48 83 c4 08                   addq    $0x8, %rsp
// 218: 5b                            popq    %rbx
// 219: 41 5c                         popq    %r12
// 21b: 41 5d                         popq    %r13
// 21d: 41 5e                         popq    %r14
// 21f: 41 5f                         popq    %r15
// 221: 5d                            popq    %rbp
// 222: ff e0                         jmpq    *%rax
// 224: 48 83 c3 f8                   addq    $-0x8, %rbx
// 228: 49 8b 36                      movq    (%r14), %rsi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _JIT_OPARG
// 235: 0f b7 d0                      movzwl  %ax, %edx
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _PyEval_FormatExcUnbound
// 242: 4c 89 ff                      movq    %r15, %rdi
// 245: ff d0                         callq   *%rax
// 247: 4c 29 f3                      subq    %r14, %rbx
// 24a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 24e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 252: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 256: 31 c0                         xorl    %eax, %eax
// 258: e9 bd fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 25d: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_DEREF_code_body[606] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x3f, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xbd, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_DEREF_code_holes[16] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_DEREF_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_FAST
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_FAST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b7 c0                      movzwl  %ax, %eax
// 1d7: 4d 8b 64 c6 48                movq    0x48(%r14,%rax,8), %r12
// 1dc: 41 8b 04 24                   movl    (%r12), %eax
// 1e0: ff c0                         incl    %eax
// 1e2: 74 10                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 1e4: 41 89 04 24                   movl    %eax, (%r12)
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f2: ff d0                         callq   *%rax
// 1f4: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _JIT_CONTINUE
// 202: 4c 89 f7                      movq    %r14, %rdi
// 205: 48 89 de                      movq    %rbx, %rsi
// 208: 4c 89 fa                      movq    %r15, %rdx
// 20b: 48 83 c4 08                   addq    $0x8, %rsp
// 20f: 5b                            popq    %rbx
// 210: 41 5c                         popq    %r12
// 212: 41 5d                         popq    %r13
// 214: 41 5e                         popq    %r14
// 216: 41 5f                         popq    %r15
// 218: 5d                            popq    %rbp
// 219: ff e0                         jmpq    *%rax
// 21b: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_code_body[540] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x64, 0xc6, 0x48, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_FAST_AND_CLEAR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// ed: 83 fd 7f                      cmpl    $0x7f, %ebp
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 75 28                         jne     0x158 <_JIT_ENTRY+0x158>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyInterpreterState_Get
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 143: 49 ff 4d 00                   decq    (%r13)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyObject_Free
// 153: 4c 89 ef                      movq    %r13, %rdi
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f 22                         jg      0x183 <_JIT_ENTRY+0x183>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 17a: 4c 89 e2                      movq    %r12, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 85 c0                         testl   %eax, %eax
// 185: 78 21                         js      0x1a8 <_JIT_ENTRY+0x1a8>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 191: ff d0                         callq   *%rax
// 193: 49 ff 0c 24                   decq    (%r12)
// 197: 75 0f                         jne     0x1a8 <_JIT_ENTRY+0x1a8>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_Dealloc
// 1a3: 4c 89 e7                      movq    %r12, %rdi
// 1a6: ff d0                         callq   *%rax
// 1a8: 89 e8                         movl    %ebp, %eax
// 1aa: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 1ae: 48 c1 e0 04                   shlq    $0x4, %rax
// 1b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b4:  R_X86_64_64  _PyRuntime
// 1bc: 48 01 c8                      addq    %rcx, %rax
// 1bf: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 1c5: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _JIT_OPARG
// 1d3: 0f b7 c0                      movzwl  %ax, %eax
// 1d6: 49 8b 4c c6 48                movq    0x48(%r14,%rax,8), %rcx
// 1db: 49 c7 44 c6 48 00 00 00 00    movq    $0x0, 0x48(%r14,%rax,8)
// 1e4: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _JIT_CONTINUE
// 1f2: 4c 89 f7                      movq    %r14, %rdi
// 1f5: 48 89 de                      movq    %rbx, %rsi
// 1f8: 4c 89 fa                      movq    %r15, %rdx
// 1fb: 48 83 c4 08                   addq    $0x8, %rsp
// 1ff: 5b                            popq    %rbx
// 200: 41 5c                         popq    %r12
// 202: 41 5d                         popq    %r13
// 204: 41 5e                         popq    %r14
// 206: 41 5f                         popq    %r15
// 208: 5d                            popq    %rbp
// 209: ff e0                         jmpq    *%rax
// 20b: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_AND_CLEAR_code_body[524] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x48, 0x89, 0x43, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x4c, 0xc6, 0x48, 0x49, 0xc7, 0x44, 0xc6, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_AND_CLEAR_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_AND_CLEAR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_CHECK
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_FAST_CHECK.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b7 c0                      movzwl  %ax, %eax
// 1d7: 4d 8b 64 c6 48                movq    0x48(%r14,%rax,8), %r12
// 1dc: 4d 85 e4                      testq   %r12, %r12
// 1df: 74 3f                         je      0x220 <_JIT_ENTRY+0x220>
// 1e1: 41 8b 04 24                   movl    (%r12), %eax
// 1e5: ff c0                         incl    %eax
// 1e7: 74 10                         je      0x1f9 <_JIT_ENTRY+0x1f9>
// 1e9: 41 89 04 24                   movl    %eax, (%r12)
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f7: ff d0                         callq   *%rax
// 1f9: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _JIT_CONTINUE
// 207: 4c 89 f7                      movq    %r14, %rdi
// 20a: 48 89 de                      movq    %rbx, %rsi
// 20d: 4c 89 fa                      movq    %r15, %rdx
// 210: 48 83 c4 08                   addq    $0x8, %rsp
// 214: 5b                            popq    %rbx
// 215: 41 5c                         popq    %r12
// 217: 41 5d                         popq    %r13
// 219: 41 5e                         popq    %r14
// 21b: 41 5f                         popq    %r15
// 21d: 5d                            popq    %rbp
// 21e: ff e0                         jmpq    *%rax
// 220: 48 83 c3 f8                   addq    $-0x8, %rbx
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  PyExc_UnboundLocalError
// 22e: 4c 8b 20                      movq    (%rax), %r12
// 231: 49 8b 06                      movq    (%r14), %rax
// 234: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_OPARG
// 242: 0f b7 f0                      movzwl  %ax, %esi
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  PyTuple_GetItem
// 24f: ff d0                         callq   *%rax
// 251: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000253:  R_X86_64_64  .rodata.str1.1+0x39
// 25b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000025d:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 265: 4c 89 ff                      movq    %r15, %rdi
// 268: 4c 89 e6                      movq    %r12, %rsi
// 26b: 48 89 c1                      movq    %rax, %rcx
// 26e: 41 ff d0                      callq   *%r8
// 271: 4c 29 f3                      subq    %r14, %rbx
// 274: 48 83 c3 b8                   addq    $-0x48, %rbx
// 278: 48 c1 eb 03                   shrq    $0x3, %rbx
// 27c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 280: 31 c0                         xorl    %eax, %eax
// 282: e9 93 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 287: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_CHECK_code_body[648] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x64, 0xc6, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x3f, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x93, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_CHECK_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00"
// 83: 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_CHECK_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_FAST_CHECK_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_DEREF.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 8d 67 f8                   leaq    -0x8(%r15), %r12
// 1ca: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 1ce: 48 8b 03                      movq    (%rbx), %rax
// 1d1: 48 8b 40 60                   movq    0x60(%rax), %rax
// 1d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c9                      movzwl  %cx, %ecx
// 1e2: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  PyMapping_GetOptionalItem
// 1f1: 48 89 e2                      movq    %rsp, %rdx
// 1f4: 4c 89 ef                      movq    %r13, %rdi
// 1f7: ff d0                         callq   *%rax
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 0f 88 dd 00 00 00             js      0x2de <_JIT_ENTRY+0x2de>
// 201: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 206: 74 7b                         je      0x283 <_JIT_ENTRY+0x283>
// 208: 49 8b 45 00                   movq    (%r13), %rax
// 20c: 48 85 c0                      testq   %rax, %rax
// 20f: 7f 22                         jg      0x233 <_JIT_ENTRY+0x233>
// 211: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000213:  R_X86_64_64  .rodata.str1.1
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_NegativeRefcount
// 225: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 22a: 4c 89 ea                      movq    %r13, %rdx
// 22d: ff d0                         callq   *%rax
// 22f: 49 8b 45 00                   movq    (%r13), %rax
// 233: 85 c0                         testl   %eax, %eax
// 235: 78 21                         js      0x258 <_JIT_ENTRY+0x258>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 241: ff d0                         callq   *%rax
// 243: 49 ff 4d 00                   decq    (%r13)
// 247: 75 0f                         jne     0x258 <_JIT_ENTRY+0x258>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_Dealloc
// 253: 4c 89 ef                      movq    %r13, %rdi
// 256: ff d0                         callq   *%rax
// 258: 48 8b 04 24                   movq    (%rsp), %rax
// 25c: 49 89 47 f0                   movq    %rax, -0x10(%r15)
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _JIT_CONTINUE
// 26a: 48 89 df                      movq    %rbx, %rdi
// 26d: 4c 89 e6                      movq    %r12, %rsi
// 270: 4c 89 f2                      movq    %r14, %rdx
// 273: 48 83 c4 08                   addq    $0x8, %rsp
// 277: 5b                            popq    %rbx
// 278: 41 5c                         popq    %r12
// 27a: 41 5d                         popq    %r13
// 27c: 41 5e                         popq    %r14
// 27e: 41 5f                         popq    %r15
// 280: 5d                            popq    %rbp
// 281: ff e0                         jmpq    *%rax
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_OPARG
// 28d: 0f b7 c0                      movzwl  %ax, %eax
// 290: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 295: 48 8b 40 10                   movq    0x10(%rax), %rax
// 299: 48 89 04 24                   movq    %rax, (%rsp)
// 29d: 48 85 c0                      testq   %rax, %rax
// 2a0: 74 1d                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 2a2: 8b 08                         movl    (%rax), %ecx
// 2a4: ff c1                         incl    %ecx
// 2a6: 0f 84 5c ff ff ff             je      0x208 <_JIT_ENTRY+0x208>
// 2ac: 89 08                         movl    %ecx, (%rax)
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2b8: ff d0                         callq   *%rax
// 2ba: e9 49 ff ff ff                jmp     0x208 <_JIT_ENTRY+0x208>
// 2bf: 48 8b 33                      movq    (%rbx), %rsi
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _JIT_OPARG
// 2cc: 0f b7 d0                      movzwl  %ax, %edx
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _PyEval_FormatExcUnbound
// 2d9: 4c 89 f7                      movq    %r14, %rdi
// 2dc: ff d0                         callq   *%rax
// 2de: 49 29 dc                      subq    %rbx, %r12
// 2e1: 49 83 c4 b8                   addq    $-0x48, %r12
// 2e5: 49 c1 ec 03                   shrq    $0x3, %r12
// 2e9: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2ed: 31 c0                         xorl    %eax, %eax
// 2ef: e9 26 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2f4: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_DEREF_code_body[757] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x67, 0xf8, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x60, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xdd, 0x00, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x74, 0x7b, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x89, 0x47, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x5c, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x49, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x26, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_DEREF_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_GLOBALS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 8d 67 f8                   leaq    -0x8(%r15), %r12
// 1ca: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 1ce: 48 8b 03                      movq    (%rbx), %rax
// 1d1: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c9                      movzwl  %cx, %ecx
// 1e2: 48 8b 6c c8 18                movq    0x18(%rax,%rcx,8), %rbp
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  PyMapping_GetOptionalItem
// 1f1: 48 89 e2                      movq    %rsp, %rdx
// 1f4: 4c 89 ef                      movq    %r13, %rdi
// 1f7: 48 89 ee                      movq    %rbp, %rsi
// 1fa: ff d0                         callq   *%rax
// 1fc: 85 c0                         testl   %eax, %eax
// 1fe: 0f 88 f5 00 00 00             js      0x2f9 <_JIT_ENTRY+0x2f9>
// 204: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 209: 74 7b                         je      0x286 <_JIT_ENTRY+0x286>
// 20b: 49 8b 45 00                   movq    (%r13), %rax
// 20f: 48 85 c0                      testq   %rax, %rax
// 212: 7f 22                         jg      0x236 <_JIT_ENTRY+0x236>
// 214: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000216:  R_X86_64_64  .rodata.str1.1
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_NegativeRefcount
// 228: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 22d: 4c 89 ea                      movq    %r13, %rdx
// 230: ff d0                         callq   *%rax
// 232: 49 8b 45 00                   movq    (%r13), %rax
// 236: 85 c0                         testl   %eax, %eax
// 238: 78 21                         js      0x25b <_JIT_ENTRY+0x25b>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 244: ff d0                         callq   *%rax
// 246: 49 ff 4d 00                   decq    (%r13)
// 24a: 75 0f                         jne     0x25b <_JIT_ENTRY+0x25b>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_Dealloc
// 256: 4c 89 ef                      movq    %r13, %rdi
// 259: ff d0                         callq   *%rax
// 25b: 48 8b 04 24                   movq    (%rsp), %rax
// 25f: 49 89 47 f0                   movq    %rax, -0x10(%r15)
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _JIT_CONTINUE
// 26d: 48 89 df                      movq    %rbx, %rdi
// 270: 4c 89 e6                      movq    %r12, %rsi
// 273: 4c 89 f2                      movq    %r14, %rdx
// 276: 48 83 c4 08                   addq    $0x8, %rsp
// 27a: 5b                            popq    %rbx
// 27b: 41 5c                         popq    %r12
// 27d: 41 5d                         popq    %r13
// 27f: 41 5e                         popq    %r14
// 281: 41 5f                         popq    %r15
// 283: 5d                            popq    %rbp
// 284: ff e0                         jmpq    *%rax
// 286: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  PyDict_GetItemRef
// 294: 48 89 e2                      movq    %rsp, %rdx
// 297: 48 89 ee                      movq    %rbp, %rsi
// 29a: ff d0                         callq   *%rax
// 29c: 85 c0                         testl   %eax, %eax
// 29e: 78 59                         js      0x2f9 <_JIT_ENTRY+0x2f9>
// 2a0: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 2a5: 0f 85 60 ff ff ff             jne     0x20b <_JIT_ENTRY+0x20b>
// 2ab: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 2af: 48 89 e2                      movq    %rsp, %rdx
// 2b2: 48 89 ee                      movq    %rbp, %rsi
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  PyMapping_GetOptionalItem
// 2bf: ff d0                         callq   *%rax
// 2c1: 85 c0                         testl   %eax, %eax
// 2c3: 78 34                         js      0x2f9 <_JIT_ENTRY+0x2f9>
// 2c5: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 2ca: 0f 85 3b ff ff ff             jne     0x20b <_JIT_ENTRY+0x20b>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  PyExc_NameError
// 2da: 48 8b 30                      movq    (%rax), %rsi
// 2dd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002df:  R_X86_64_64  .rodata.str1.1+0x39
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2f1: 4c 89 f7                      movq    %r14, %rdi
// 2f4: 48 89 e9                      movq    %rbp, %rcx
// 2f7: ff d0                         callq   *%rax
// 2f9: 49 29 dc                      subq    %rbx, %r12
// 2fc: 49 83 c4 b8                   addq    $-0x48, %r12
// 300: 49 c1 ec 03                   shrq    $0x3, %r12
// 304: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 308: 31 c0                         xorl    %eax, %eax
// 30a: e9 0b fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 30f: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[784] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x67, 0xf8, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x6c, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x74, 0x7b, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x89, 0x47, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x59, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x0f, 0x85, 0x60, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x34, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x0f, 0x85, 0x3b, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xe9, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x0b, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[23] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 4c 01 ed                      addq    %r13, %rbp
// 19a: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 8d 6f f8                   leaq    -0x8(%r15), %r13
// 1ca: 49 89 6f f0                   movq    %rbp, -0x10(%r15)
// 1ce: 48 8b 03                      movq    (%rbx), %rax
// 1d1: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 1d5: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001db:  R_X86_64_64  _JIT_OPARG
// 1e3: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
// 1e9: 4c 8b 64 88 18                movq    0x18(%rax,%rcx,4), %r12
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  PyDict_Type
// 1f8: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1fc: 75 0e                         jne     0x20c <_JIT_ENTRY+0x20c>
// 1fe: 48 8b 73 20                   movq    0x20(%rbx), %rsi
// 202: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 206: 0f 84 84 00 00 00             je      0x290 <_JIT_ENTRY+0x290>
// 20c: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000020e:  R_X86_64_64  PyMapping_GetOptionalItem
// 216: 48 89 e2                      movq    %rsp, %rdx
// 219: 4c 89 e6                      movq    %r12, %rsi
// 21c: ff d5                         callq   *%rbp
// 21e: 85 c0                         testl   %eax, %eax
// 220: 0f 88 d8 00 00 00             js      0x2fe <_JIT_ENTRY+0x2fe>
// 226: 48 8b 04 24                   movq    (%rsp), %rax
// 22a: 48 85 c0                      testq   %rax, %rax
// 22d: 74 46                         je      0x275 <_JIT_ENTRY+0x275>
// 22f: 49 89 45 00                   movq    %rax, (%r13)
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: a8 01                         testb   $0x1, %al
// 23f: 74 07                         je      0x248 <_JIT_ENTRY+0x248>
// 241: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// 248: 83 e0 01                      andl    $0x1, %eax
// 24b: ff c0                         incl    %eax
// 24d: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 251: 48 83 c6 f8                   addq    $-0x8, %rsi
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _JIT_CONTINUE
// 25f: 48 89 df                      movq    %rbx, %rdi
// 262: 4c 89 f2                      movq    %r14, %rdx
// 265: 48 83 c4 08                   addq    $0x8, %rsp
// 269: 5b                            popq    %rbx
// 26a: 41 5c                         popq    %r12
// 26c: 41 5d                         popq    %r13
// 26e: 41 5e                         popq    %r14
// 270: 41 5f                         popq    %r15
// 272: 5d                            popq    %rbp
// 273: ff e0                         jmpq    *%rax
// 275: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 279: 48 89 e2                      movq    %rsp, %rdx
// 27c: 4c 89 e6                      movq    %r12, %rsi
// 27f: ff d5                         callq   *%rbp
// 281: 85 c0                         testl   %eax, %eax
// 283: 78 79                         js      0x2fe <_JIT_ENTRY+0x2fe>
// 285: 48 8b 04 24                   movq    (%rsp), %rax
// 289: 48 85 c0                      testq   %rax, %rax
// 28c: 75 a1                         jne     0x22f <_JIT_ENTRY+0x22f>
// 28e: eb 45                         jmp     0x2d5 <_JIT_ENTRY+0x2d5>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _PyDict_LoadGlobal
// 29a: 4c 89 e2                      movq    %r12, %rdx
// 29d: ff d0                         callq   *%rax
// 29f: 48 89 04 24                   movq    %rax, (%rsp)
// 2a3: 48 85 c0                      testq   %rax, %rax
// 2a6: 74 1d                         je      0x2c5 <_JIT_ENTRY+0x2c5>
// 2a8: 8b 08                         movl    (%rax), %ecx
// 2aa: ff c1                         incl    %ecx
// 2ac: 74 81                         je      0x22f <_JIT_ENTRY+0x22f>
// 2ae: 89 08                         movl    %ecx, (%rax)
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2ba: ff d0                         callq   *%rax
// 2bc: 48 8b 04 24                   movq    (%rsp), %rax
// 2c0: e9 6a ff ff ff                jmp     0x22f <_JIT_ENTRY+0x22f>
// 2c5: 49 8b 46 68                   movq    0x68(%r14), %rax
// 2c9: 48 85 c0                      testq   %rax, %rax
// 2cc: 74 07                         je      0x2d5 <_JIT_ENTRY+0x2d5>
// 2ce: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2d3: 75 29                         jne     0x2fe <_JIT_ENTRY+0x2fe>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  PyExc_NameError
// 2df: 48 8b 30                      movq    (%rax), %rsi
// 2e2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002e4:  R_X86_64_64  .rodata.str1.1+0x39
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2f6: 4c 89 f7                      movq    %r14, %rdi
// 2f9: 4c 89 e1                      movq    %r12, %rcx
// 2fc: ff d0                         callq   *%rax
// 2fe: 49 29 dd                      subq    %rbx, %r13
// 301: 49 83 c5 b8                   addq    $-0x48, %r13
// 305: 49 c1 ed 03                   shrq    $0x3, %r13
// 309: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 30d: 31 c0                         xorl    %eax, %eax
// 30f: e9 06 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 314: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_code_body[789] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x01, 0xed, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x6f, 0xf8, 0x49, 0x89, 0x6f, 0xf0, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x88, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x48, 0x8b, 0x73, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0xd8, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x46, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x79, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x75, 0xa1, 0xeb, 0x45, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x8b, 0x08, 0xff, 0xc1, 0x74, 0x81, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0xe9, 0x6a, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x06, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_BUILTINS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 05 02 00 00             jne     0x22e <_JIT_ENTRY+0x22e>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 ec 01 00 00             jne     0x22e <_JIT_ENTRY+0x22e>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 e1 01 00 00             ja      0x22e <_JIT_ENTRY+0x22e>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e d2 01 00 00             jle     0x22e <_JIT_ENTRY+0x22e>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 38 01 00 00             ja      0x22e <_JIT_ENTRY+0x22e>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 197: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 19b: 48 8b 40 20                   movq    0x20(%rax), %rax
// 19f: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1a3: ba 01 00 00 00                movl    $0x1, %edx
// 1a8: 48 d3 e2                      shlq    %cl, %rdx
// 1ab: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1af: 48 01 c2                      addq    %rax, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _JIT_OPERAND
// 1bc: 0f b7 c0                      movzwl  %ax, %eax
// 1bf: 48 c1 e0 04                   shlq    $0x4, %rax
// 1c3: 4c 8b 6c 10 28                movq    0x28(%rax,%rdx), %r13
// 1c8: 4d 85 ed                      testq   %r13, %r13
// 1cb: 74 5e                         je      0x22b <_JIT_ENTRY+0x22b>
// 1cd: 41 8b 45 00                   movl    (%r13), %eax
// 1d1: ff c0                         incl    %eax
// 1d3: 74 10                         je      0x1e5 <_JIT_ENTRY+0x1e5>
// 1d5: 41 89 45 00                   movl    %eax, (%r13)
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e3: ff d0                         callq   *%rax
// 1e5: 4d 89 2c 24                   movq    %r13, (%r12)
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: a8 01                         testb   $0x1, %al
// 1f5: 74 07                         je      0x1fe <_JIT_ENTRY+0x1fe>
// 1f7: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 1fe: 83 e0 01                      andl    $0x1, %eax
// 201: ff c0                         incl    %eax
// 203: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 207: 48 83 c6 f8                   addq    $-0x8, %rsi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _JIT_CONTINUE
// 215: 48 89 df                      movq    %rbx, %rdi
// 218: 4c 89 fa                      movq    %r15, %rdx
// 21b: 48 83 c4 08                   addq    $0x8, %rsp
// 21f: 5b                            popq    %rbx
// 220: 41 5c                         popq    %r12
// 222: 41 5d                         popq    %r13
// 224: 41 5e                         popq    %r14
// 226: 41 5f                         popq    %r15
// 228: 5d                            popq    %rbp
// 229: ff e0                         jmpq    *%rax
// 22b: 4d 89 e6                      movq    %r12, %r14
// 22e: 49 29 de                      subq    %rbx, %r14
// 231: 49 83 c6 b8                   addq    $-0x48, %r14
// 235: 49 c1 ee 03                   shrq    $0x3, %r14
// 239: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 23d: 48 8b 03                      movq    (%rbx), %rax
// 240: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000242:  R_X86_64_64  _JIT_TARGET
// 24a: 89 c9                         movl    %ecx, %ecx
// 24c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 250: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 256: 48 83 c4 08                   addq    $0x8, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: c3                            retq
// 265: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_BUILTINS_code_body[614] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x05, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xec, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xe1, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xd2, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x38, 0x01, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0x8b, 0x43, 0x20, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x4d, 0x8d, 0x66, 0xf8, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x10, 0x28, 0x4d, 0x85, 0xed, 0x74, 0x5e, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_BUILTINS_code_holes[15] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_BUILTINS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_MODULE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 05 02 00 00             jne     0x22e <_JIT_ENTRY+0x22e>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 ec 01 00 00             jne     0x22e <_JIT_ENTRY+0x22e>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 e1 01 00 00             ja      0x22e <_JIT_ENTRY+0x22e>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e d2 01 00 00             jle     0x22e <_JIT_ENTRY+0x22e>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 38 01 00 00             ja      0x22e <_JIT_ENTRY+0x22e>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 197: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 19b: 48 8b 40 20                   movq    0x20(%rax), %rax
// 19f: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1a3: ba 01 00 00 00                movl    $0x1, %edx
// 1a8: 48 d3 e2                      shlq    %cl, %rdx
// 1ab: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1af: 48 01 c2                      addq    %rax, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _JIT_OPERAND
// 1bc: 0f b7 c0                      movzwl  %ax, %eax
// 1bf: 48 c1 e0 04                   shlq    $0x4, %rax
// 1c3: 4c 8b 6c 10 28                movq    0x28(%rax,%rdx), %r13
// 1c8: 4d 85 ed                      testq   %r13, %r13
// 1cb: 74 5e                         je      0x22b <_JIT_ENTRY+0x22b>
// 1cd: 41 8b 45 00                   movl    (%r13), %eax
// 1d1: ff c0                         incl    %eax
// 1d3: 74 10                         je      0x1e5 <_JIT_ENTRY+0x1e5>
// 1d5: 41 89 45 00                   movl    %eax, (%r13)
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e3: ff d0                         callq   *%rax
// 1e5: 4d 89 2c 24                   movq    %r13, (%r12)
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: a8 01                         testb   $0x1, %al
// 1f5: 74 07                         je      0x1fe <_JIT_ENTRY+0x1fe>
// 1f7: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 1fe: 83 e0 01                      andl    $0x1, %eax
// 201: ff c0                         incl    %eax
// 203: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 207: 48 83 c6 f8                   addq    $-0x8, %rsi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _JIT_CONTINUE
// 215: 48 89 df                      movq    %rbx, %rdi
// 218: 4c 89 fa                      movq    %r15, %rdx
// 21b: 48 83 c4 08                   addq    $0x8, %rsp
// 21f: 5b                            popq    %rbx
// 220: 41 5c                         popq    %r12
// 222: 41 5d                         popq    %r13
// 224: 41 5e                         popq    %r14
// 226: 41 5f                         popq    %r15
// 228: 5d                            popq    %rbp
// 229: ff e0                         jmpq    *%rax
// 22b: 4d 89 e6                      movq    %r12, %r14
// 22e: 49 29 de                      subq    %rbx, %r14
// 231: 49 83 c6 b8                   addq    $-0x48, %r14
// 235: 49 c1 ee 03                   shrq    $0x3, %r14
// 239: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 23d: 48 8b 03                      movq    (%rbx), %rax
// 240: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000242:  R_X86_64_64  _JIT_TARGET
// 24a: 89 c9                         movl    %ecx, %ecx
// 24c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 250: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 256: 48 83 c4 08                   addq    $0x8, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: c3                            retq
// 265: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_MODULE_code_body[614] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x05, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xec, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xe1, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xd2, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x38, 0x01, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0x8b, 0x43, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x4d, 0x8d, 0x66, 0xf8, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x10, 0x28, 0x4d, 0x85, 0xed, 0x74, 0x5e, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_MODULE_code_holes[15] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_LOCALS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_LOCALS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 4d 8b 66 28                   movq    0x28(%r14), %r12
// 1ce: 4d 85 e4                      testq   %r12, %r12
// 1d1: 74 3f                         je      0x212 <_JIT_ENTRY+0x212>
// 1d3: 41 8b 04 24                   movl    (%r12), %eax
// 1d7: ff c0                         incl    %eax
// 1d9: 74 10                         je      0x1eb <_JIT_ENTRY+0x1eb>
// 1db: 41 89 04 24                   movl    %eax, (%r12)
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e9: ff d0                         callq   *%rax
// 1eb: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _JIT_CONTINUE
// 1f9: 4c 89 f7                      movq    %r14, %rdi
// 1fc: 48 89 de                      movq    %rbx, %rsi
// 1ff: 4c 89 fa                      movq    %r15, %rdx
// 202: 48 83 c4 08                   addq    $0x8, %rsp
// 206: 5b                            popq    %rbx
// 207: 41 5c                         popq    %r12
// 209: 41 5d                         popq    %r13
// 20b: 41 5e                         popq    %r14
// 20d: 41 5f                         popq    %r15
// 20f: 5d                            popq    %rbp
// 210: ff e0                         jmpq    *%rax
// 212: 48 83 c3 f8                   addq    $-0x8, %rbx
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  PyExc_SystemError
// 220: 48 8b 30                      movq    (%rax), %rsi
// 223: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000225:  R_X86_64_64  .rodata.str1.1+0x39
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _PyErr_SetString
// 237: 4c 89 ff                      movq    %r15, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 4c 29 f3                      subq    %r14, %rbx
// 23f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 243: 48 c1 eb 03                   shrq    $0x3, %rbx
// 247: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 24b: 31 c0                         xorl    %eax, %eax
// 24d: e9 c8 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 252: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_LOCALS_code_body[595] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x4d, 0x8b, 0x66, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x3f, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xc8, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_LOCALS_code_holes[16] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found\x00'
// 49: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_LOCALS_data_body[81] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_LOCALS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_NAME
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_NAME.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 1ce: 48 85 ff                      testq   %rdi, %rdi
// 1d1: 74 60                         je      0x233 <_JIT_ENTRY+0x233>
// 1d3: 49 8b 06                      movq    (%r14), %rax
// 1d6: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1da: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c9                      movzwl  %cx, %ecx
// 1e7: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1ec: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001ee:  R_X86_64_64  PyMapping_GetOptionalItem
// 1f6: 48 89 e2                      movq    %rsp, %rdx
// 1f9: 4c 89 e6                      movq    %r12, %rsi
// 1fc: 41 ff d5                      callq   *%r13
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 78 56                         js      0x259 <_JIT_ENTRY+0x259>
// 203: 48 8b 04 24                   movq    (%rsp), %rax
// 207: 48 85 c0                      testq   %rax, %rax
// 20a: 74 67                         je      0x273 <_JIT_ENTRY+0x273>
// 20c: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _JIT_CONTINUE
// 21a: 4c 89 f7                      movq    %r14, %rdi
// 21d: 48 89 de                      movq    %rbx, %rsi
// 220: 4c 89 fa                      movq    %r15, %rdx
// 223: 48 83 c4 08                   addq    $0x8, %rsp
// 227: 5b                            popq    %rbx
// 228: 41 5c                         popq    %r12
// 22a: 41 5d                         popq    %r13
// 22c: 41 5e                         popq    %r14
// 22e: 41 5f                         popq    %r15
// 230: 5d                            popq    %rbp
// 231: ff e0                         jmpq    *%rax
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  PyExc_SystemError
// 23d: 48 8b 30                      movq    (%rax), %rsi
// 240: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000242:  R_X86_64_64  .rodata.str1.1+0x56
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _PyErr_SetString
// 254: 4c 89 ff                      movq    %r15, %rdi
// 257: ff d0                         callq   *%rax
// 259: 48 83 c3 f8                   addq    $-0x8, %rbx
// 25d: 4c 29 f3                      subq    %r14, %rbx
// 260: 48 83 c3 b8                   addq    $-0x48, %rbx
// 264: 48 c1 eb 03                   shrq    $0x3, %rbx
// 268: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 26c: 31 c0                         xorl    %eax, %eax
// 26e: e9 a7 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 273: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  PyDict_GetItemRef
// 281: 48 89 e2                      movq    %rsp, %rdx
// 284: 4c 89 e6                      movq    %r12, %rsi
// 287: ff d0                         callq   *%rax
// 289: 85 c0                         testl   %eax, %eax
// 28b: 78 cc                         js      0x259 <_JIT_ENTRY+0x259>
// 28d: 48 8b 04 24                   movq    (%rsp), %rax
// 291: 48 85 c0                      testq   %rax, %rax
// 294: 0f 85 72 ff ff ff             jne     0x20c <_JIT_ENTRY+0x20c>
// 29a: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 29e: 48 89 e2                      movq    %rsp, %rdx
// 2a1: 4c 89 e6                      movq    %r12, %rsi
// 2a4: 41 ff d5                      callq   *%r13
// 2a7: 85 c0                         testl   %eax, %eax
// 2a9: 78 ae                         js      0x259 <_JIT_ENTRY+0x259>
// 2ab: 48 8b 04 24                   movq    (%rsp), %rax
// 2af: 48 85 c0                      testq   %rax, %rax
// 2b2: 0f 85 54 ff ff ff             jne     0x20c <_JIT_ENTRY+0x20c>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  PyExc_NameError
// 2c2: 48 8b 30                      movq    (%rax), %rsi
// 2c5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002c7:  R_X86_64_64  .rodata.str1.1+0x39
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2d9: 4c 89 ff                      movq    %r15, %rdi
// 2dc: 4c 89 e1                      movq    %r12, %rcx
// 2df: ff d0                         callq   *%rax
// 2e1: e9 73 ff ff ff                jmp     0x259 <_JIT_ENTRY+0x259>
// 2e6: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_NAME_code_body[743] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x85, 0xff, 0x74, 0x60, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x56, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xa7, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xcc, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x72, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0xae, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x54, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x73, 0xff, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_NAME_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00no locals found\x00"
// 66: 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_NAME_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_NAME_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_ATTR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 39                         jbe     0x12b <_JIT_ENTRY+0x12b>
// f2: 4c 89 f0                      movq    %r14, %rax
// f5: 48 29 d8                      subq    %rbx, %rax
// f8: 48 83 c0 b8                   addq    $-0x48, %rax
// fc: 48 c1 e8 03                   shrq    $0x3, %rax
// 100: 89 43 40                      movl    %eax, 0x40(%rbx)
// 103: 48 8b 03                      movq    (%rbx), %rax
// 106: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000108:  R_X86_64_64  _JIT_TARGET
// 110: 89 c9                         movl    %ecx, %ecx
// 112: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 116: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11c: 48 83 c4 08                   addq    $0x8, %rsp
// 120: 5b                            popq    %rbx
// 121: 41 5c                         popq    %r12
// 123: 41 5d                         popq    %r13
// 125: 41 5e                         popq    %r14
// 127: 41 5f                         popq    %r15
// 129: 5d                            popq    %rbp
// 12a: c3                            retq
// 12b: 89 c0                         movl    %eax, %eax
// 12d: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 131: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 136: 75 28                         jne     0x160 <_JIT_ENTRY+0x160>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  PyInterpreterState_Get
// 142: ff d0                         callq   *%rax
// 144: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14b: 49 ff 4d 00                   decq    (%r13)
// 14f: 75 0f                         jne     0x160 <_JIT_ENTRY+0x160>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  PyObject_Free
// 15b: 4c 89 ef                      movq    %r13, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 48 c1 e5 04                   shlq    $0x4, %rbp
// 164: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000166:  R_X86_64_64  _PyRuntime
// 16e: 49 8b 04 24                   movq    (%r12), %rax
// 172: 48 85 c0                      testq   %rax, %rax
// 175: 7f 22                         jg      0x199 <_JIT_ENTRY+0x199>
// 177: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000179:  R_X86_64_64  .rodata.str1.1
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_NegativeRefcount
// 18b: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 190: 4c 89 e2                      movq    %r12, %rdx
// 193: ff d0                         callq   *%rax
// 195: 49 8b 04 24                   movq    (%r12), %rax
// 199: 49 01 ed                      addq    %rbp, %r13
// 19c: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a3: 85 c0                         testl   %eax, %eax
// 1a5: 78 21                         js      0x1c8 <_JIT_ENTRY+0x1c8>
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b1: ff d0                         callq   *%rax
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 0f                         jne     0x1c8 <_JIT_ENTRY+0x1c8>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 1cc: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1d0: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001d2:  R_X86_64_64  PySuper_Type
// 1da: 4d 39 66 e0                   cmpq    %r12, -0x20(%r14)
// 1de: 0f 85 11 ff ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 1e4: 49 8b 6e e8                   movq    -0x18(%r14), %rbp
// 1e8: 48 8b 4d 08                   movq    0x8(%rbp), %rcx
// 1ec: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 1f3: 0f 84 fc fe ff ff             je      0xf5 <_JIT_ENTRY+0xf5>
// 1f9: 48 8b 03                      movq    (%rbx), %rax
// 1fc: 48 8b 40 20                   movq    0x20(%rax), %rax
// 200: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000202:  R_X86_64_64  _JIT_OPARG
// 20a: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 210: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _PySuper_Lookup
// 21f: 48 89 ef                      movq    %rbp, %rdi
// 222: 4c 89 ee                      movq    %r13, %rsi
// 225: 31 c9                         xorl    %ecx, %ecx
// 227: ff d0                         callq   *%rax
// 229: 48 89 04 24                   movq    %rax, (%rsp)
// 22d: 49 8b 04 24                   movq    (%r12), %rax
// 231: 48 85 c0                      testq   %rax, %rax
// 234: 7f 22                         jg      0x258 <_JIT_ENTRY+0x258>
// 236: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000238:  R_X86_64_64  .rodata.str1.1
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_NegativeRefcount
// 24a: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 24f: 4c 89 e2                      movq    %r12, %rdx
// 252: ff d0                         callq   *%rax
// 254: 49 8b 04 24                   movq    (%r12), %rax
// 258: 85 c0                         testl   %eax, %eax
// 25a: 78 28                         js      0x284 <_JIT_ENTRY+0x284>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 266: ff d0                         callq   *%rax
// 268: 49 ff 0c 24                   decq    (%r12)
// 26c: 75 16                         jne     0x284 <_JIT_ENTRY+0x284>
// 26e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000270:  R_X86_64_64  PySuper_Type
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_Dealloc
// 282: ff d0                         callq   *%rax
// 284: 48 8b 45 00                   movq    (%rbp), %rax
// 288: 48 85 c0                      testq   %rax, %rax
// 28b: 7f 22                         jg      0x2af <_JIT_ENTRY+0x2af>
// 28d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028f:  R_X86_64_64  .rodata.str1.1
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_NegativeRefcount
// 2a1: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 2a6: 48 89 ea                      movq    %rbp, %rdx
// 2a9: ff d0                         callq   *%rax
// 2ab: 48 8b 45 00                   movq    (%rbp), %rax
// 2af: 85 c0                         testl   %eax, %eax
// 2b1: 4c 8b 24 24                   movq    (%rsp), %r12
// 2b5: 78 21                         js      0x2d8 <_JIT_ENTRY+0x2d8>
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c1: ff d0                         callq   *%rax
// 2c3: 48 ff 4d 00                   decq    (%rbp)
// 2c7: 75 0f                         jne     0x2d8 <_JIT_ENTRY+0x2d8>
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_Dealloc
// 2d3: 48 89 ef                      movq    %rbp, %rdi
// 2d6: ff d0                         callq   *%rax
// 2d8: 49 8b 45 00                   movq    (%r13), %rax
// 2dc: 48 85 c0                      testq   %rax, %rax
// 2df: 7f 22                         jg      0x303 <_JIT_ENTRY+0x303>
// 2e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e3:  R_X86_64_64  .rodata.str1.1
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _Py_NegativeRefcount
// 2f5: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 2fa: 4c 89 ea                      movq    %r13, %rdx
// 2fd: ff d0                         callq   *%rax
// 2ff: 49 8b 45 00                   movq    (%r13), %rax
// 303: 85 c0                         testl   %eax, %eax
// 305: 78 21                         js      0x328 <_JIT_ENTRY+0x328>
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 311: ff d0                         callq   *%rax
// 313: 49 ff 4d 00                   decq    (%r13)
// 317: 75 0f                         jne     0x328 <_JIT_ENTRY+0x328>
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  _Py_Dealloc
// 323: 4c 89 ef                      movq    %r13, %rdi
// 326: ff d0                         callq   *%rax
// 328: 49 8d 46 e0                   leaq    -0x20(%r14), %rax
// 32c: 4d 85 e4                      testq   %r12, %r12
// 32f: 74 2a                         je      0x35b <_JIT_ENTRY+0x35b>
// 331: 49 83 c6 e8                   addq    $-0x18, %r14
// 335: 4c 89 20                      movq    %r12, (%rax)
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  _JIT_CONTINUE
// 342: 48 89 df                      movq    %rbx, %rdi
// 345: 4c 89 f6                      movq    %r14, %rsi
// 348: 4c 89 fa                      movq    %r15, %rdx
// 34b: 48 83 c4 08                   addq    $0x8, %rsp
// 34f: 5b                            popq    %rbx
// 350: 41 5c                         popq    %r12
// 352: 41 5d                         popq    %r13
// 354: 41 5e                         popq    %r14
// 356: 41 5f                         popq    %r15
// 358: 5d                            popq    %rbp
// 359: ff e0                         jmpq    *%rax
// 35b: 48 29 d8                      subq    %rbx, %rax
// 35e: 48 83 c0 b8                   addq    $-0x48, %rax
// 362: 48 c1 e8 03                   shrq    $0x3, %rax
// 366: 89 43 40                      movl    %eax, 0x40(%rbx)
// 369: 31 c0                         xorl    %eax, %eax
// 36b: e9 ac fd ff ff                jmp     0x11c <_JIT_ENTRY+0x11c>
// 370: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_ATTR_code_body[881] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x66, 0xe0, 0x0f, 0x85, 0x11, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x6e, 0xe8, 0x48, 0x8b, 0x4d, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xfc, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe0, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xe8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xac, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_ATTR_code_holes[28] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_METHOD.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 27: 0f 85 c5 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 2d: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  PyUnicode_Type
// 3b: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 3f: 0f 85 ad 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 45: 49 83 7c 24 10 08             cmpq    $0x8, 0x10(%r12)
// 4b: 0f 87 a1 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 51: 41 8b 44 24 18                movl    0x18(%r12), %eax
// 56: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 5a: 0f 8e 92 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 60: 49 89 d7                      movq    %rdx, %r15
// 63: 41 8b 4d 20                   movl    0x20(%r13), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 14                         je      0x88 <_JIT_ENTRY+0x88>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 1e                         jne     0x97 <_JIT_ENTRY+0x97>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 24                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7e: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// 82: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 86: eb 65                         jmp     0xed <_JIT_ENTRY+0xed>
// 88: f6 c1 20                      testb   $0x20, %cl
// 8b: 75 2f                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8d: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// 91: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 95: eb 56                         jmp     0xed <_JIT_ENTRY+0xed>
// 97: f6 c1 20                      testb   $0x20, %cl
// 9a: 75 3a                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9c: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 39                         jbe     0x12b <_JIT_ENTRY+0x12b>
// f2: 4c 89 f0                      movq    %r14, %rax
// f5: 48 29 d8                      subq    %rbx, %rax
// f8: 48 83 c0 b8                   addq    $-0x48, %rax
// fc: 48 c1 e8 03                   shrq    $0x3, %rax
// 100: 89 43 40                      movl    %eax, 0x40(%rbx)
// 103: 48 8b 03                      movq    (%rbx), %rax
// 106: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000108:  R_X86_64_64  _JIT_TARGET
// 110: 89 c9                         movl    %ecx, %ecx
// 112: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 116: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11c: 48 83 c4 18                   addq    $0x18, %rsp
// 120: 5b                            popq    %rbx
// 121: 41 5c                         popq    %r12
// 123: 41 5d                         popq    %r13
// 125: 41 5e                         popq    %r14
// 127: 41 5f                         popq    %r15
// 129: 5d                            popq    %rbp
// 12a: c3                            retq
// 12b: 89 c0                         movl    %eax, %eax
// 12d: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 131: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 137: 75 28                         jne     0x161 <_JIT_ENTRY+0x161>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyInterpreterState_Get
// 143: ff d0                         callq   *%rax
// 145: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14c: 49 ff 0c 24                   decq    (%r12)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  PyObject_Free
// 15c: 4c 89 e7                      movq    %r12, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 c1 e5 04                   shlq    $0x4, %rbp
// 165: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000167:  R_X86_64_64  _PyRuntime
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 48 85 c0                      testq   %rax, %rax
// 176: 7f 22                         jg      0x19a <_JIT_ENTRY+0x19a>
// 178: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017a:  R_X86_64_64  .rodata.str1.1
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_NegativeRefcount
// 18c: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 191: 4c 89 ea                      movq    %r13, %rdx
// 194: ff d0                         callq   *%rax
// 196: 49 8b 45 00                   movq    (%r13), %rax
// 19a: 49 01 ec                      addq    %rbp, %r12
// 19d: 49 81 c4 a0 32 01 00          addq    $0x132a0, %r12          # imm = 0x132A0
// 1a4: 85 c0                         testl   %eax, %eax
// 1a6: 78 21                         js      0x1c9 <_JIT_ENTRY+0x1c9>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b2: ff d0                         callq   *%rax
// 1b4: 49 ff 4d 00                   decq    (%r13)
// 1b8: 75 0f                         jne     0x1c9 <_JIT_ENTRY+0x1c9>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_Dealloc
// 1c4: 4c 89 ef                      movq    %r13, %rdi
// 1c7: ff d0                         callq   *%rax
// 1c9: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 1cd: 4d 89 66 f0                   movq    %r12, -0x10(%r14)
// 1d1: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001d3:  R_X86_64_64  PySuper_Type
// 1db: 4d 39 6e e0                   cmpq    %r13, -0x20(%r14)
// 1df: 0f 85 10 ff ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 1e5: 49 8b 6e e8                   movq    -0x18(%r14), %rbp
// 1e9: 48 8b 4d 08                   movq    0x8(%rbp), %rcx
// 1ed: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 1f4: 0f 84 fb fe ff ff             je      0xf5 <_JIT_ENTRY+0xf5>
// 1fa: 48 8b 03                      movq    (%rbx), %rax
// 1fd: 48 8b 40 20                   movq    0x20(%rax), %rax
// 201: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000203:  R_X86_64_64  _JIT_OPARG
// 20b: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 211: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 216: c7 44 24 0c 00 00 00 00       movl    $0x0, 0xc(%rsp)
// 21e: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 223: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000225:  R_X86_64_64  PyObject_GenericGetAttr
// 22d: 31 f6                         xorl    %esi, %esi
// 22f: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// 236: 48 8d 4c 24 0c                leaq    0xc(%rsp), %rcx
// 23b: 48 0f 45 ce                   cmovneq %rsi, %rcx
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _PySuper_Lookup
// 249: 48 89 ef                      movq    %rbp, %rdi
// 24c: 4c 89 e6                      movq    %r12, %rsi
// 24f: ff d0                         callq   *%rax
// 251: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 256: 49 8b 45 00                   movq    (%r13), %rax
// 25a: 48 85 c0                      testq   %rax, %rax
// 25d: 7f 22                         jg      0x281 <_JIT_ENTRY+0x281>
// 25f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000261:  R_X86_64_64  .rodata.str1.1
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_NegativeRefcount
// 273: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 278: 4c 89 ea                      movq    %r13, %rdx
// 27b: ff d0                         callq   *%rax
// 27d: 49 8b 45 00                   movq    (%r13), %rax
// 281: 85 c0                         testl   %eax, %eax
// 283: 78 28                         js      0x2ad <_JIT_ENTRY+0x2ad>
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28f: ff d0                         callq   *%rax
// 291: 49 ff 4d 00                   decq    (%r13)
// 295: 75 16                         jne     0x2ad <_JIT_ENTRY+0x2ad>
// 297: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000299:  R_X86_64_64  PySuper_Type
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _Py_Dealloc
// 2ab: ff d0                         callq   *%rax
// 2ad: 48 8b 45 00                   movq    (%rbp), %rax
// 2b1: 48 85 c0                      testq   %rax, %rax
// 2b4: 7f 22                         jg      0x2d8 <_JIT_ENTRY+0x2d8>
// 2b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b8:  R_X86_64_64  .rodata.str1.1
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_NegativeRefcount
// 2ca: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 2cf: 48 89 ea                      movq    %rbp, %rdx
// 2d2: ff d0                         callq   *%rax
// 2d4: 48 8b 45 00                   movq    (%rbp), %rax
// 2d8: 85 c0                         testl   %eax, %eax
// 2da: 78 21                         js      0x2fd <_JIT_ENTRY+0x2fd>
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e6: ff d0                         callq   *%rax
// 2e8: 48 ff 4d 00                   decq    (%rbp)
// 2ec: 75 0f                         jne     0x2fd <_JIT_ENTRY+0x2fd>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_Dealloc
// 2f8: 48 89 ef                      movq    %rbp, %rdi
// 2fb: ff d0                         callq   *%rax
// 2fd: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 302: 48 85 ed                      testq   %rbp, %rbp
// 305: 0f 84 89 00 00 00             je      0x394 <_JIT_ENTRY+0x394>
// 30b: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 30f: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 314: 75 53                         jne     0x369 <_JIT_ENTRY+0x369>
// 316: 49 8b 04 24                   movq    (%r12), %rax
// 31a: 48 85 c0                      testq   %rax, %rax
// 31d: 7f 22                         jg      0x341 <_JIT_ENTRY+0x341>
// 31f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000321:  R_X86_64_64  .rodata.str1.1
// 329: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032b:  R_X86_64_64  _Py_NegativeRefcount
// 333: be 21 06 00 00                movl    $0x621, %esi            # imm = 0x621
// 338: 4c 89 e2                      movq    %r12, %rdx
// 33b: ff d0                         callq   *%rax
// 33d: 49 8b 04 24                   movq    (%r12), %rax
// 341: 85 c0                         testl   %eax, %eax
// 343: 78 21                         js      0x366 <_JIT_ENTRY+0x366>
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34f: ff d0                         callq   *%rax
// 351: 49 ff 0c 24                   decq    (%r12)
// 355: 75 0f                         jne     0x366 <_JIT_ENTRY+0x366>
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  _Py_Dealloc
// 361: 4c 89 e7                      movq    %r12, %rdi
// 364: ff d0                         callq   *%rax
// 366: 45 31 e4                      xorl    %r12d, %r12d
// 369: 49 89 6e e0                   movq    %rbp, -0x20(%r14)
// 36d: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 371: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000373:  R_X86_64_64  _JIT_CONTINUE
// 37b: 48 89 df                      movq    %rbx, %rdi
// 37e: 4c 89 ee                      movq    %r13, %rsi
// 381: 4c 89 fa                      movq    %r15, %rdx
// 384: 48 83 c4 18                   addq    $0x18, %rsp
// 388: 5b                            popq    %rbx
// 389: 41 5c                         popq    %r12
// 38b: 41 5d                         popq    %r13
// 38d: 41 5e                         popq    %r14
// 38f: 41 5f                         popq    %r15
// 391: 5d                            popq    %rbp
// 392: ff e0                         jmpq    *%rax
// 394: 49 8b 04 24                   movq    (%r12), %rax
// 398: 48 85 c0                      testq   %rax, %rax
// 39b: 7f 22                         jg      0x3bf <_JIT_ENTRY+0x3bf>
// 39d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000039f:  R_X86_64_64  .rodata.str1.1
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _Py_NegativeRefcount
// 3b1: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 3b6: 4c 89 e2                      movq    %r12, %rdx
// 3b9: ff d0                         callq   *%rax
// 3bb: 49 8b 04 24                   movq    (%r12), %rax
// 3bf: 49 83 c6 e0                   addq    $-0x20, %r14
// 3c3: 85 c0                         testl   %eax, %eax
// 3c5: 78 21                         js      0x3e8 <_JIT_ENTRY+0x3e8>
// 3c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3d1: ff d0                         callq   *%rax
// 3d3: 49 ff 0c 24                   decq    (%r12)
// 3d7: 75 0f                         jne     0x3e8 <_JIT_ENTRY+0x3e8>
// 3d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003db:  R_X86_64_64  _Py_Dealloc
// 3e3: 4c 89 e7                      movq    %r12, %rdi
// 3e6: ff d0                         callq   *%rax
// 3e8: 49 29 de                      subq    %rbx, %r14
// 3eb: 49 83 c6 b8                   addq    $-0x48, %r14
// 3ef: 49 c1 ee 03                   shrq    $0x3, %r14
// 3f3: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3f7: 31 c0                         xorl    %eax, %eax
// 3f9: e9 1e fd ff ff                jmp     0x11c <_JIT_ENTRY+0x11c>
// 3fe: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_METHOD_code_body[1023] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xc5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xad, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x08, 0x0f, 0x87, 0xa1, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x8e, 0x92, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4d, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x14, 0x83, 0xfa, 0x01, 0x75, 0x1e, 0xf6, 0xc1, 0x20, 0x75, 0x24, 0x49, 0x8b, 0x4d, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x65, 0xf6, 0xc1, 0x20, 0x75, 0x2f, 0x49, 0x8b, 0x4d, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x56, 0xf6, 0xc1, 0x20, 0x75, 0x3a, 0x49, 0x8b, 0x4d, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x01, 0xec, 0x49, 0x81, 0xc4, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf8, 0x4d, 0x89, 0x66, 0xf0, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x6e, 0xe0, 0x0f, 0x85, 0x10, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x6e, 0xe8, 0x48, 0x8b, 0x4d, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xfb, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x0c, 0x48, 0x0f, 0x45, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf0, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x75, 0x53, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x21, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x45, 0x31, 0xe4, 0x49, 0x89, 0x6e, 0xe0, 0x4d, 0x89, 0x66, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc6, 0xe0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x1e, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_METHOD_code_holes[33] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x373, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x39f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_METHOD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_MAKE_CELL
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_MAKE_CELL.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: 0f b7 c0                      movzwl  %ax, %eax
// 1db: 49 8b 7c c6 48                movq    0x48(%r14,%rax,8), %rdi
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  PyCell_New
// 1ea: ff d0                         callq   *%rax
// 1ec: 48 85 c0                      testq   %rax, %rax
// 1ef: 0f 84 8f 00 00 00             je      0x284 <_JIT_ENTRY+0x284>
// 1f5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f7:  R_X86_64_64  _JIT_OPARG
// 1ff: 0f b7 c9                      movzwl  %cx, %ecx
// 202: 4d 8b 64 ce 48                movq    0x48(%r14,%rcx,8), %r12
// 207: 49 89 44 ce 48                movq    %rax, 0x48(%r14,%rcx,8)
// 20c: 4d 85 e4                      testq   %r12, %r12
// 20f: 74 50                         je      0x261 <_JIT_ENTRY+0x261>
// 211: 49 8b 04 24                   movq    (%r12), %rax
// 215: 48 85 c0                      testq   %rax, %rax
// 218: 7f 22                         jg      0x23c <_JIT_ENTRY+0x23c>
// 21a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021c:  R_X86_64_64  .rodata.str1.1+0x39
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_NegativeRefcount
// 22e: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 233: 4c 89 e2                      movq    %r12, %rdx
// 236: ff d0                         callq   *%rax
// 238: 49 8b 04 24                   movq    (%r12), %rax
// 23c: 85 c0                         testl   %eax, %eax
// 23e: 78 21                         js      0x261 <_JIT_ENTRY+0x261>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24a: ff d0                         callq   *%rax
// 24c: 49 ff 0c 24                   decq    (%r12)
// 250: 75 0f                         jne     0x261 <_JIT_ENTRY+0x261>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_Dealloc
// 25c: 4c 89 e7                      movq    %r12, %rdi
// 25f: ff d0                         callq   *%rax
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _JIT_CONTINUE
// 26b: 4c 89 f7                      movq    %r14, %rdi
// 26e: 48 89 de                      movq    %rbx, %rsi
// 271: 4c 89 fa                      movq    %r15, %rdx
// 274: 48 83 c4 08                   addq    $0x8, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: ff e0                         jmpq    *%rax
// 284: 4c 29 f3                      subq    %r14, %rbx
// 287: 48 83 c3 b8                   addq    $-0x48, %rbx
// 28b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 28f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 293: 31 c0                         xorl    %eax, %eax
// 295: e9 80 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 29a: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MAKE_CELL_code_body[667] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x7c, 0xc6, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8f, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x64, 0xce, 0x48, 0x49, 0x89, 0x44, 0xce, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x80, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_MAKE_CELL_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MAKE_CELL_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_MAKE_CELL_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_MAKE_FUNCTION
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_MAKE_FUNCTION.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 17                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1af: ff d5                         callq   *%rbp
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 48 8b 73 18                   movq    0x18(%rbx), %rsi
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  PyFunction_New
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: ff d0                         callq   *%rax
// 1dd: 49 89 c4                      movq    %rax, %r12
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7f 22                         jg      0x20b <_JIT_ENTRY+0x20b>
// 1e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001eb:  R_X86_64_64  .rodata.str1.1
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_NegativeRefcount
// 1fd: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 202: 4c 89 ea                      movq    %r13, %rdx
// 205: ff d0                         callq   *%rax
// 207: 49 8b 45 00                   movq    (%r13), %rax
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 78 17                         js      0x226 <_JIT_ENTRY+0x226>
// 20f: ff d5                         callq   *%rbp
// 211: 49 ff 4d 00                   decq    (%r13)
// 215: 75 0f                         jne     0x226 <_JIT_ENTRY+0x226>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_Dealloc
// 221: 4c 89 ef                      movq    %r13, %rdi
// 224: ff d0                         callq   *%rax
// 226: 49 8d 6e f8                   leaq    -0x8(%r14), %rbp
// 22a: 4d 85 e4                      testq   %r12, %r12
// 22d: 74 3a                         je      0x269 <_JIT_ENTRY+0x269>
// 22f: 41 8b 75 5c                   movl    0x5c(%r13), %esi
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _PyFunction_SetVersion
// 23d: 4c 89 e7                      movq    %r12, %rdi
// 240: ff d0                         callq   *%rax
// 242: 4d 89 66 f0                   movq    %r12, -0x10(%r14)
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _JIT_CONTINUE
// 250: 48 89 df                      movq    %rbx, %rdi
// 253: 48 89 ee                      movq    %rbp, %rsi
// 256: 4c 89 fa                      movq    %r15, %rdx
// 259: 48 83 c4 08                   addq    $0x8, %rsp
// 25d: 5b                            popq    %rbx
// 25e: 41 5c                         popq    %r12
// 260: 41 5d                         popq    %r13
// 262: 41 5e                         popq    %r14
// 264: 41 5f                         popq    %r15
// 266: 5d                            popq    %rbp
// 267: ff e0                         jmpq    *%rax
// 269: 48 29 dd                      subq    %rbx, %rbp
// 26c: 48 83 c5 b8                   addq    $-0x48, %rbp
// 270: 48 c1 ed 03                   shrq    $0x3, %rbp
// 274: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 277: 31 c0                         xorl    %eax, %eax
// 279: e9 9c fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 27e: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MAKE_FUNCTION_code_body[639] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0x8b, 0x73, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x6e, 0xf8, 0x4d, 0x85, 0xe4, 0x74, 0x3a, 0x41, 0x8b, 0x75, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x9c, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_MAKE_FUNCTION_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MAKE_FUNCTION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_MAKE_FUNCTION_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_MAP_ADD
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_MAP_ADD.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 28                         jg      0x19d <_JIT_ENTRY+0x19d>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: 49 89 cd                      movq    %rcx, %r13
// 194: ff d0                         callq   *%rax
// 196: 4c 89 e9                      movq    %r13, %rcx
// 199: 49 8b 04 24                   movq    (%r12), %rax
// 19d: 4d 8d 6f f8                   leaq    -0x8(%r15), %r13
// 1a1: 48 01 cd                      addq    %rcx, %rbp
// 1a4: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 49 89 6f f0                   movq    %rbp, -0x10(%r15)
// 1d4: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 1d8: 49 8b 77 e8                   movq    -0x18(%r15), %rsi
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c0                      movzwl  %ax, %eax
// 1e9: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ee: 29 c1                         subl    %eax, %ecx
// 1f0: 48 63 c1                      movslq  %ecx, %rax
// 1f3: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _PyDict_SetItem_Take2
// 202: 48 89 ea                      movq    %rbp, %rdx
// 205: ff d0                         callq   *%rax
// 207: 85 c0                         testl   %eax, %eax
// 209: 4d 0f 44 ec                   cmoveq  %r12, %r13
// 20d: 74 16                         je      0x225 <_JIT_ENTRY+0x225>
// 20f: 49 29 dd                      subq    %rbx, %r13
// 212: 49 83 c5 a8                   addq    $-0x58, %r13
// 216: 49 c1 ed 03                   shrq    $0x3, %r13
// 21a: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 21e: 31 c0                         xorl    %eax, %eax
// 220: e9 f5 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _JIT_CONTINUE
// 22f: 48 89 df                      movq    %rbx, %rdi
// 232: 4c 89 ee                      movq    %r13, %rsi
// 235: 4c 89 f2                      movq    %r14, %rdx
// 238: 48 83 c4 08                   addq    $0x8, %rsp
// 23c: 5b                            popq    %rbx
// 23d: 41 5c                         popq    %r12
// 23f: 41 5d                         popq    %r13
// 241: 41 5e                         popq    %r14
// 243: 41 5f                         popq    %r15
// 245: 5d                            popq    %rbp
// 246: ff e0                         jmpq    *%rax
// 248: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MAP_ADD_code_body[585] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6f, 0xf8, 0x48, 0x01, 0xcd, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6f, 0xf0, 0x4d, 0x8d, 0x67, 0xe8, 0x49, 0x8b, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x85, 0xc0, 0x4d, 0x0f, 0x44, 0xec, 0x74, 0x16, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xa8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xf5, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_MAP_ADD_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MAP_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_MAP_ADD_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_MATCH_CLASS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_MATCH_CLASS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 4d 8b 66 e0                   movq    -0x20(%r14), %r12
// 1ce: 49 8b 6e e8                   movq    -0x18(%r14), %rbp
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _JIT_OPARG
// 1dc: 0f b7 c8                      movzwl  %ax, %ecx
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _PyEval_MatchClass
// 1e9: 4c 89 ff                      movq    %r15, %rdi
// 1ec: 4c 89 e6                      movq    %r12, %rsi
// 1ef: 48 89 ea                      movq    %rbp, %rdx
// 1f2: 4d 89 e8                      movq    %r13, %r8
// 1f5: ff d0                         callq   *%rax
// 1f7: 48 89 04 24                   movq    %rax, (%rsp)
// 1fb: 49 8b 04 24                   movq    (%r12), %rax
// 1ff: 48 85 c0                      testq   %rax, %rax
// 202: 7f 22                         jg      0x226 <_JIT_ENTRY+0x226>
// 204: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000206:  R_X86_64_64  .rodata.str1.1
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_NegativeRefcount
// 218: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 21d: 4c 89 e2                      movq    %r12, %rdx
// 220: ff d0                         callq   *%rax
// 222: 49 8b 04 24                   movq    (%r12), %rax
// 226: 85 c0                         testl   %eax, %eax
// 228: 78 21                         js      0x24b <_JIT_ENTRY+0x24b>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 234: ff d0                         callq   *%rax
// 236: 49 ff 0c 24                   decq    (%r12)
// 23a: 75 0f                         jne     0x24b <_JIT_ENTRY+0x24b>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 e7                      movq    %r12, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 48 8b 45 00                   movq    (%rbp), %rax
// 24f: 48 85 c0                      testq   %rax, %rax
// 252: 7f 22                         jg      0x276 <_JIT_ENTRY+0x276>
// 254: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000256:  R_X86_64_64  .rodata.str1.1
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_NegativeRefcount
// 268: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 26d: 48 89 ea                      movq    %rbp, %rdx
// 270: ff d0                         callq   *%rax
// 272: 48 8b 45 00                   movq    (%rbp), %rax
// 276: 85 c0                         testl   %eax, %eax
// 278: 4c 8b 24 24                   movq    (%rsp), %r12
// 27c: 78 21                         js      0x29f <_JIT_ENTRY+0x29f>
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 288: ff d0                         callq   *%rax
// 28a: 48 ff 4d 00                   decq    (%rbp)
// 28e: 75 0f                         jne     0x29f <_JIT_ENTRY+0x29f>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _Py_Dealloc
// 29a: 48 89 ef                      movq    %rbp, %rdi
// 29d: ff d0                         callq   *%rax
// 29f: 49 8b 45 00                   movq    (%r13), %rax
// 2a3: 48 85 c0                      testq   %rax, %rax
// 2a6: 7f 22                         jg      0x2ca <_JIT_ENTRY+0x2ca>
// 2a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002aa:  R_X86_64_64  .rodata.str1.1
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 2c1: 4c 89 ea                      movq    %r13, %rdx
// 2c4: ff d0                         callq   *%rax
// 2c6: 49 8b 45 00                   movq    (%r13), %rax
// 2ca: 85 c0                         testl   %eax, %eax
// 2cc: 78 21                         js      0x2ef <_JIT_ENTRY+0x2ef>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d8: ff d0                         callq   *%rax
// 2da: 49 ff 4d 00                   decq    (%r13)
// 2de: 75 0f                         jne     0x2ef <_JIT_ENTRY+0x2ef>
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_Dealloc
// 2ea: 4c 89 ef                      movq    %r13, %rdi
// 2ed: ff d0                         callq   *%rax
// 2ef: 49 8d 46 e0                   leaq    -0x20(%r14), %rax
// 2f3: 4d 85 e4                      testq   %r12, %r12
// 2f6: 74 2a                         je      0x322 <_JIT_ENTRY+0x322>
// 2f8: 49 83 c6 e8                   addq    $-0x18, %r14
// 2fc: 4c 89 20                      movq    %r12, (%rax)
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _JIT_CONTINUE
// 309: 48 89 df                      movq    %rbx, %rdi
// 30c: 4c 89 f6                      movq    %r14, %rsi
// 30f: 4c 89 fa                      movq    %r15, %rdx
// 312: 48 83 c4 08                   addq    $0x8, %rsp
// 316: 5b                            popq    %rbx
// 317: 41 5c                         popq    %r12
// 319: 41 5d                         popq    %r13
// 31b: 41 5e                         popq    %r14
// 31d: 41 5f                         popq    %r15
// 31f: 5d                            popq    %rbp
// 320: ff e0                         jmpq    *%rax
// 322: 49 8b 4f 68                   movq    0x68(%r15), %rcx
// 326: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000328:  R_X86_64_64  _Py_NoneStruct
// 330: 48 85 c9                      testq   %rcx, %rcx
// 333: 74 c3                         je      0x2f8 <_JIT_ENTRY+0x2f8>
// 335: 48 83 79 08 00                cmpq    $0x0, 0x8(%rcx)
// 33a: 74 bc                         je      0x2f8 <_JIT_ENTRY+0x2f8>
// 33c: 48 29 d8                      subq    %rbx, %rax
// 33f: 48 83 c0 b8                   addq    $-0x48, %rax
// 343: 48 c1 e8 03                   shrq    $0x3, %rax
// 347: 89 43 40                      movl    %eax, 0x40(%rbx)
// 34a: 31 c0                         xorl    %eax, %eax
// 34c: e9 c9 fd ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 351: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MATCH_CLASS_code_body[850] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xe0, 0x49, 0x8b, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x4d, 0x89, 0xe8, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe0, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xe8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x4f, 0x68, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x74, 0xc3, 0x48, 0x83, 0x79, 0x08, 0x00, 0x74, 0xbc, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xc9, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_MATCH_CLASS_code_holes[27] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MATCH_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_MATCH_CLASS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_MATCH_KEYS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_MATCH_KEYS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 8b 73 e8                   movq    -0x18(%rbx), %rsi
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _PyEval_MatchKeys
// 1d8: 4c 89 ff                      movq    %r15, %rdi
// 1db: 4c 89 ea                      movq    %r13, %rdx
// 1de: ff d0                         callq   *%rax
// 1e0: 48 85 c0                      testq   %rax, %rax
// 1e3: 74 27                         je      0x20c <_JIT_ENTRY+0x20c>
// 1e5: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_CONTINUE
// 1f3: 4c 89 f7                      movq    %r14, %rdi
// 1f6: 48 89 de                      movq    %rbx, %rsi
// 1f9: 4c 89 fa                      movq    %r15, %rdx
// 1fc: 48 83 c4 08                   addq    $0x8, %rsp
// 200: 5b                            popq    %rbx
// 201: 41 5c                         popq    %r12
// 203: 41 5d                         popq    %r13
// 205: 41 5e                         popq    %r14
// 207: 41 5f                         popq    %r15
// 209: 5d                            popq    %rbp
// 20a: ff e0                         jmpq    *%rax
// 20c: 48 83 c3 f8                   addq    $-0x8, %rbx
// 210: 4c 29 f3                      subq    %r14, %rbx
// 213: 48 83 c3 b8                   addq    $-0x48, %rbx
// 217: 48 c1 eb 03                   shrq    $0x3, %rbx
// 21b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 21f: 31 c0                         xorl    %eax, %eax
// 221: e9 f4 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 226: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MATCH_KEYS_code_body[551] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x8b, 0x73, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xf4, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_MATCH_KEYS_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MATCH_KEYS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_MATCH_KEYS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_MATCH_MAPPING
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_MATCH_MAPPING.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// ed: 83 fd 7f                      cmpl    $0x7f, %ebp
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 75 28                         jne     0x158 <_JIT_ENTRY+0x158>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyInterpreterState_Get
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 143: 49 ff 4d 00                   decq    (%r13)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyObject_Free
// 153: 4c 89 ef                      movq    %r13, %rdi
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f 22                         jg      0x183 <_JIT_ENTRY+0x183>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 17a: 4c 89 e2                      movq    %r12, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 85 c0                         testl   %eax, %eax
// 185: 78 21                         js      0x1a8 <_JIT_ENTRY+0x1a8>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 191: ff d0                         callq   *%rax
// 193: 49 ff 0c 24                   decq    (%r12)
// 197: 75 0f                         jne     0x1a8 <_JIT_ENTRY+0x1a8>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_Dealloc
// 1a3: 4c 89 e7                      movq    %r12, %rdi
// 1a6: ff d0                         callq   *%rax
// 1a8: 89 e8                         movl    %ebp, %eax
// 1aa: 48 c1 e0 04                   shlq    $0x4, %rax
// 1ae: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 1b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b4:  R_X86_64_64  _PyRuntime
// 1bc: 48 8d 14 01                   leaq    (%rcx,%rax), %rdx
// 1c0: 48 81 c2 a0 32 01 00          addq    $0x132a0, %rdx          # imm = 0x132A0
// 1c7: 48 89 53 f0                   movq    %rdx, -0x10(%rbx)
// 1cb: 48 8b 84 01 a8 32 01 00       movq    0x132a8(%rcx,%rax), %rax
// 1d3: f6 80 a8 00 00 00 40          testb   $0x40, 0xa8(%rax)
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_FalseStruct
// 1e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e6:  R_X86_64_64  _Py_TrueStruct
// 1ee: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 1f2: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _JIT_CONTINUE
// 200: 4c 89 f7                      movq    %r14, %rdi
// 203: 48 89 de                      movq    %rbx, %rsi
// 206: 4c 89 fa                      movq    %r15, %rdx
// 209: 48 83 c4 08                   addq    $0x8, %rsp
// 20d: 5b                            popq    %rbx
// 20e: 41 5c                         popq    %r12
// 210: 41 5d                         popq    %r13
// 212: 41 5e                         popq    %r14
// 214: 41 5f                         popq    %r15
// 216: 5d                            popq    %rbp
// 217: ff e0                         jmpq    *%rax
// 219: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MATCH_MAPPING_code_body[538] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x14, 0x01, 0x48, 0x81, 0xc2, 0xa0, 0x32, 0x01, 0x00, 0x48, 0x89, 0x53, 0xf0, 0x48, 0x8b, 0x84, 0x01, 0xa8, 0x32, 0x01, 0x00, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_MATCH_MAPPING_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MATCH_MAPPING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_MATCH_MAPPING_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_MATCH_SEQUENCE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_MATCH_SEQUENCE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// ed: 83 fd 7f                      cmpl    $0x7f, %ebp
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 75 28                         jne     0x158 <_JIT_ENTRY+0x158>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyInterpreterState_Get
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 143: 49 ff 4d 00                   decq    (%r13)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyObject_Free
// 153: 4c 89 ef                      movq    %r13, %rdi
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f 22                         jg      0x183 <_JIT_ENTRY+0x183>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 17a: 4c 89 e2                      movq    %r12, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 85 c0                         testl   %eax, %eax
// 185: 78 21                         js      0x1a8 <_JIT_ENTRY+0x1a8>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 191: ff d0                         callq   *%rax
// 193: 49 ff 0c 24                   decq    (%r12)
// 197: 75 0f                         jne     0x1a8 <_JIT_ENTRY+0x1a8>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_Dealloc
// 1a3: 4c 89 e7                      movq    %r12, %rdi
// 1a6: ff d0                         callq   *%rax
// 1a8: 89 e8                         movl    %ebp, %eax
// 1aa: 48 c1 e0 04                   shlq    $0x4, %rax
// 1ae: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 1b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b4:  R_X86_64_64  _PyRuntime
// 1bc: 48 8d 14 01                   leaq    (%rcx,%rax), %rdx
// 1c0: 48 81 c2 a0 32 01 00          addq    $0x132a0, %rdx          # imm = 0x132A0
// 1c7: 48 89 53 f0                   movq    %rdx, -0x10(%rbx)
// 1cb: 48 8b 84 01 a8 32 01 00       movq    0x132a8(%rcx,%rax), %rax
// 1d3: f6 80 a8 00 00 00 20          testb   $0x20, 0xa8(%rax)
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_FalseStruct
// 1e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e6:  R_X86_64_64  _Py_TrueStruct
// 1ee: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 1f2: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _JIT_CONTINUE
// 200: 4c 89 f7                      movq    %r14, %rdi
// 203: 48 89 de                      movq    %rbx, %rsi
// 206: 4c 89 fa                      movq    %r15, %rdx
// 209: 48 83 c4 08                   addq    $0x8, %rsp
// 20d: 5b                            popq    %rbx
// 20e: 41 5c                         popq    %r12
// 210: 41 5d                         popq    %r13
// 212: 41 5e                         popq    %r14
// 214: 41 5f                         popq    %r15
// 216: 5d                            popq    %rbp
// 217: ff e0                         jmpq    *%rax
// 219: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MATCH_SEQUENCE_code_body[538] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x14, 0x01, 0x48, 0x81, 0xc2, 0xa0, 0x32, 0x01, 0x00, 0x48, 0x89, 0x53, 0xf0, 0x48, 0x8b, 0x84, 0x01, 0xa8, 0x32, 0x01, 0x00, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_MATCH_SEQUENCE_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_MATCH_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_MATCH_SEQUENCE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_NOP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_NOP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// ed: 83 fd 7f                      cmpl    $0x7f, %ebp
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 75 28                         jne     0x158 <_JIT_ENTRY+0x158>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyInterpreterState_Get
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 143: 49 ff 4d 00                   decq    (%r13)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyObject_Free
// 153: 4c 89 ef                      movq    %r13, %rdi
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f 22                         jg      0x183 <_JIT_ENTRY+0x183>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 17a: 4c 89 e2                      movq    %r12, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 187: 85 c0                         testl   %eax, %eax
// 189: 78 21                         js      0x1ac <_JIT_ENTRY+0x1ac>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 195: ff d0                         callq   *%rax
// 197: 49 ff 0c 24                   decq    (%r12)
// 19b: 75 0f                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 4c 89 e7                      movq    %r12, %rdi
// 1aa: ff d0                         callq   *%rax
// 1ac: 89 e8                         movl    %ebp, %eax
// 1ae: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 1b2: 48 c1 e0 04                   shlq    $0x4, %rax
// 1b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b8:  R_X86_64_64  _PyRuntime
// 1c0: 48 01 c8                      addq    %rcx, %rax
// 1c3: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 1c9: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _JIT_CONTINUE
// 1d7: 48 89 df                      movq    %rbx, %rdi
// 1da: 4c 89 ee                      movq    %r13, %rsi
// 1dd: 4c 89 fa                      movq    %r15, %rdx
// 1e0: 48 83 c4 08                   addq    $0x8, %rsp
// 1e4: 5b                            popq    %rbx
// 1e5: 41 5c                         popq    %r12
// 1e7: 41 5d                         popq    %r13
// 1e9: 41 5e                         popq    %r14
// 1eb: 41 5f                         popq    %r15
// 1ed: 5d                            popq    %rbp
// 1ee: ff e0                         jmpq    *%rax
// 1f0: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_NOP_code_body[497] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x49, 0x89, 0x46, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_NOP_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_NOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_NOP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_POP_EXCEPT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_POP_EXCEPT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 48 83 c3 f0                   addq    $-0x10, %rbx
// 19b: 49 01 ed                      addq    %rbp, %r13
// 19e: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a5: 85 c0                         testl   %eax, %eax
// 1a7: 78 21                         js      0x1ca <_JIT_ENTRY+0x1ca>
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: ff d0                         callq   *%rax
// 1b5: 49 ff 0c 24                   decq    (%r12)
// 1b9: 75 0f                         jne     0x1ca <_JIT_ENTRY+0x1ca>
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_Dealloc
// 1c5: 4c 89 e7                      movq    %r12, %rdi
// 1c8: ff d0                         callq   *%rax
// 1ca: 4c 89 2b                      movq    %r13, (%rbx)
// 1cd: 49 8b 47 70                   movq    0x70(%r15), %rax
// 1d1: 4c 8b 20                      movq    (%rax), %r12
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  _Py_NoneStruct
// 1de: 31 d2                         xorl    %edx, %edx
// 1e0: 49 39 cd                      cmpq    %rcx, %r13
// 1e3: 49 0f 45 d5                   cmovneq %r13, %rdx
// 1e7: 48 89 10                      movq    %rdx, (%rax)
// 1ea: 4d 85 e4                      testq   %r12, %r12
// 1ed: 74 50                         je      0x23f <_JIT_ENTRY+0x23f>
// 1ef: 49 8b 04 24                   movq    (%r12), %rax
// 1f3: 48 85 c0                      testq   %rax, %rax
// 1f6: 7f 22                         jg      0x21a <_JIT_ENTRY+0x21a>
// 1f8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fa:  R_X86_64_64  .rodata.str1.1+0x39
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 211: 4c 89 e2                      movq    %r12, %rdx
// 214: ff d0                         callq   *%rax
// 216: 49 8b 04 24                   movq    (%r12), %rax
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 78 21                         js      0x23f <_JIT_ENTRY+0x23f>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 228: ff d0                         callq   *%rax
// 22a: 49 ff 0c 24                   decq    (%r12)
// 22e: 75 0f                         jne     0x23f <_JIT_ENTRY+0x23f>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _Py_Dealloc
// 23a: 4c 89 e7                      movq    %r12, %rdi
// 23d: ff d0                         callq   *%rax
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_CONTINUE
// 249: 4c 89 f7                      movq    %r14, %rdi
// 24c: 48 89 de                      movq    %rbx, %rsi
// 24f: 4c 89 fa                      movq    %r15, %rdx
// 252: 48 83 c4 08                   addq    $0x8, %rsp
// 256: 5b                            popq    %rbx
// 257: 41 5c                         popq    %r12
// 259: 41 5d                         popq    %r13
// 25b: 41 5e                         popq    %r14
// 25d: 41 5f                         popq    %r15
// 25f: 5d                            popq    %rbp
// 260: ff e0                         jmpq    *%rax
// 262: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_POP_EXCEPT_code_body[611] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf0, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x2b, 0x49, 0x8b, 0x47, 0x70, 0x4c, 0x8b, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xd2, 0x49, 0x39, 0xcd, 0x49, 0x0f, 0x45, 0xd5, 0x48, 0x89, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_POP_EXCEPT_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_POP_EXCEPT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_POP_EXCEPT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_POP_FRAME
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_POP_FRAME.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 48 89 d3                      movq    %rdx, %rbx
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// ed: 83 fd 7f                      cmpl    $0x7f, %ebp
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4d 29 f7                      subq    %r14, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 75 28                         jne     0x158 <_JIT_ENTRY+0x158>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyInterpreterState_Get
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 143: 49 ff 4d 00                   decq    (%r13)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyObject_Free
// 153: 4c 89 ef                      movq    %r13, %rdi
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f 22                         jg      0x183 <_JIT_ENTRY+0x183>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 17a: 4c 89 e2                      movq    %r12, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 49 83 c7 f0                   addq    $-0x10, %r15
// 187: 85 c0                         testl   %eax, %eax
// 189: 78 21                         js      0x1ac <_JIT_ENTRY+0x1ac>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 195: ff d0                         callq   *%rax
// 197: 49 ff 0c 24                   decq    (%r12)
// 19b: 75 0f                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 4c 89 e7                      movq    %r12, %rdi
// 1aa: ff d0                         callq   *%rax
// 1ac: 89 e8                         movl    %ebp, %eax
// 1ae: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 1b2: 48 c1 e0 04                   shlq    $0x4, %rax
// 1b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b8:  R_X86_64_64  _PyRuntime
// 1c0: 4c 8d 24 01                   leaq    (%rcx,%rax), %r12
// 1c4: 49 81 c4 a0 32 01 00          addq    $0x132a0, %r12          # imm = 0x132A0
// 1cb: 4d 89 27                      movq    %r12, (%r15)
// 1ce: 4d 29 f7                      subq    %r14, %r15
// 1d1: 49 83 c7 b8                   addq    $-0x48, %r15
// 1d5: 49 c1 ef 03                   shrq    $0x3, %r15
// 1d9: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 1dd: ff 43 24                      incl    0x24(%rbx)
// 1e0: 4d 8b 7e 08                   movq    0x8(%r14), %r15
// 1e4: 4c 89 7b 40                   movq    %r15, 0x40(%rbx)
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _PyEval_FrameClearAndPop
// 1f2: 48 89 df                      movq    %rbx, %rdi
// 1f5: 4c 89 f6                      movq    %r14, %rsi
// 1f8: ff d0                         callq   *%rax
// 1fa: 49 63 47 40                   movslq  0x40(%r15), %rax
// 1fe: 4d 89 64 c7 48                movq    %r12, 0x48(%r15,%rax,8)
// 203: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 207: 48 83 c6 50                   addq    $0x50, %rsi
// 20b: 41 c7 47 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r15) # imm = 0xFFFFFFFF
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_CONTINUE
// 21d: 4c 89 ff                      movq    %r15, %rdi
// 220: 48 89 da                      movq    %rbx, %rdx
// 223: 48 83 c4 08                   addq    $0x8, %rsp
// 227: 5b                            popq    %rbx
// 228: 41 5c                         popq    %r12
// 22a: 41 5d                         popq    %r13
// 22c: 41 5e                         popq    %r14
// 22e: 41 5f                         popq    %r15
// 230: 5d                            popq    %rbp
// 231: ff e0                         jmpq    *%rax
// 233: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_POP_FRAME_code_body[564] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd3, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc7, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x24, 0x01, 0x49, 0x81, 0xc4, 0xa0, 0x32, 0x01, 0x00, 0x4d, 0x89, 0x27, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0xff, 0x43, 0x24, 0x4d, 0x8b, 0x7e, 0x08, 0x4c, 0x89, 0x7b, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x49, 0x63, 0x47, 0x40, 0x4d, 0x89, 0x64, 0xc7, 0x48, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x50, 0x41, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_POP_FRAME_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_POP_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_POP_FRAME_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_POP_TOP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_POP_TOP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 48 83 c3 f0                   addq    $-0x10, %rbx
// 19b: 49 01 ed                      addq    %rbp, %r13
// 19e: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a5: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: 85 c0                         testl   %eax, %eax
// 1b1: 78 17                         js      0x1ca <_JIT_ENTRY+0x1ca>
// 1b3: ff d5                         callq   *%rbp
// 1b5: 49 ff 0c 24                   decq    (%r12)
// 1b9: 75 0f                         jne     0x1ca <_JIT_ENTRY+0x1ca>
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_Dealloc
// 1c5: 4c 89 e7                      movq    %r12, %rdi
// 1c8: ff d0                         callq   *%rax
// 1ca: 4c 89 2b                      movq    %r13, (%rbx)
// 1cd: 49 8b 45 00                   movq    (%r13), %rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 7f 22                         jg      0x1f8 <_JIT_ENTRY+0x1f8>
// 1d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d8:  R_X86_64_64  .rodata.str1.1
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_NegativeRefcount
// 1ea: be 54 00 00 00                movl    $0x54, %esi
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: ff d0                         callq   *%rax
// 1f4: 49 8b 45 00                   movq    (%r13), %rax
// 1f8: 85 c0                         testl   %eax, %eax
// 1fa: 78 17                         js      0x213 <_JIT_ENTRY+0x213>
// 1fc: ff d5                         callq   *%rbp
// 1fe: 49 ff 4d 00                   decq    (%r13)
// 202: 75 0f                         jne     0x213 <_JIT_ENTRY+0x213>
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_Dealloc
// 20e: 4c 89 ef                      movq    %r13, %rdi
// 211: ff d0                         callq   *%rax
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_CONTINUE
// 21d: 4c 89 f7                      movq    %r14, %rdi
// 220: 48 89 de                      movq    %rbx, %rsi
// 223: 4c 89 fa                      movq    %r15, %rdx
// 226: 48 83 c4 08                   addq    $0x8, %rsp
// 22a: 5b                            popq    %rbx
// 22b: 41 5c                         popq    %r12
// 22d: 41 5d                         popq    %r13
// 22f: 41 5e                         popq    %r14
// 231: 41 5f                         popq    %r15
// 233: 5d                            popq    %rbp
// 234: ff e0                         jmpq    *%rax
// 236: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_POP_TOP_code_body[567] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf0, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x2b, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_POP_TOP_code_holes[15] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_POP_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_POP_TOP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_PUSH_EXC_INFO
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_PUSH_EXC_INFO.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 4d 8b 67 70                   movq    0x70(%r15), %r12
// 1ce: 49 8b 2c 24                   movq    (%r12), %rbp
// 1d2: 41 8b 45 00                   movl    (%r13), %eax
// 1d6: ff c0                         incl    %eax
// 1d8: 74 10                         je      0x1ea <_JIT_ENTRY+0x1ea>
// 1da: 41 89 45 00                   movl    %eax, (%r13)
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e8: ff d0                         callq   *%rax
// 1ea: 48 85 ed                      testq   %rbp, %rbp
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_NoneStruct
// 1f7: 48 0f 45 c5                   cmovneq %rbp, %rax
// 1fb: 4d 89 2c 24                   movq    %r13, (%r12)
// 1ff: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 203: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _JIT_CONTINUE
// 211: 4c 89 f7                      movq    %r14, %rdi
// 214: 48 89 de                      movq    %rbx, %rsi
// 217: 4c 89 fa                      movq    %r15, %rdx
// 21a: 48 83 c4 08                   addq    $0x8, %rsp
// 21e: 5b                            popq    %rbx
// 21f: 41 5c                         popq    %r12
// 221: 41 5d                         popq    %r13
// 223: 41 5e                         popq    %r14
// 225: 41 5f                         popq    %r15
// 227: 5d                            popq    %rbp
// 228: ff e0                         jmpq    *%rax
// 22a: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_PUSH_EXC_INFO_code_body[555] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x4d, 0x8b, 0x67, 0x70, 0x49, 0x8b, 0x2c, 0x24, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xc5, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_PUSH_EXC_INFO_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_PUSH_EXC_INFO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_PUSH_EXC_INFO_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_PUSH_FRAME
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_PUSH_FRAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 48 89 d3                      movq    %rdx, %rbx
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// ed: 83 fd 7f                      cmpl    $0x7f, %ebp
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4d 29 f7                      subq    %r14, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 75 28                         jne     0x158 <_JIT_ENTRY+0x158>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyInterpreterState_Get
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 143: 49 ff 4d 00                   decq    (%r13)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyObject_Free
// 153: 4c 89 ef                      movq    %r13, %rdi
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f 22                         jg      0x183 <_JIT_ENTRY+0x183>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 17a: 4c 89 e2                      movq    %r12, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 49 83 c7 f0                   addq    $-0x10, %r15
// 187: 85 c0                         testl   %eax, %eax
// 189: 78 21                         js      0x1ac <_JIT_ENTRY+0x1ac>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 195: ff d0                         callq   *%rax
// 197: 49 ff 0c 24                   decq    (%r12)
// 19b: 75 0f                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 4c 89 e7                      movq    %r12, %rdi
// 1aa: ff d0                         callq   *%rax
// 1ac: 89 e8                         movl    %ebp, %eax
// 1ae: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 1b2: 48 c1 e0 04                   shlq    $0x4, %rax
// 1b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b8:  R_X86_64_64  _PyRuntime
// 1c0: 48 8d 3c 01                   leaq    (%rcx,%rax), %rdi
// 1c4: 48 81 c7 a0 32 01 00          addq    $0x132a0, %rdi          # imm = 0x132A0
// 1cb: 49 89 3f                      movq    %rdi, (%r15)
// 1ce: 4d 29 f7                      subq    %r14, %r15
// 1d1: 49 83 c7 b8                   addq    $-0x48, %r15
// 1d5: 49 c1 ef 03                   shrq    $0x3, %r15
// 1d9: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 1dd: 4c 89 b4 01 a8 32 01 00       movq    %r14, 0x132a8(%rcx,%rax)
// 1e5: 48 89 7b 40                   movq    %rdi, 0x40(%rbx)
// 1e9: ff 4b 24                      decl    0x24(%rbx)
// 1ec: 48 63 94 01 e0 32 01 00       movslq  0x132e0(%rcx,%rax), %rdx
// 1f4: 48 8d 34 01                   leaq    (%rcx,%rax), %rsi
// 1f8: 48 8d 34 d6                   leaq    (%rsi,%rdx,8), %rsi
// 1fc: 48 81 c6 e8 32 01 00          addq    $0x132e8, %rsi          # imm = 0x132E8
// 203: c7 84 01 e0 32 01 00 ff ff ff ff      movl    $0xffffffff, 0x132e0(%rcx,%rax) # imm = 0xFFFFFFFF
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _JIT_CONTINUE
// 218: 48 89 da                      movq    %rbx, %rdx
// 21b: 48 83 c4 08                   addq    $0x8, %rsp
// 21f: 5b                            popq    %rbx
// 220: 41 5c                         popq    %r12
// 222: 41 5d                         popq    %r13
// 224: 41 5e                         popq    %r14
// 226: 41 5f                         popq    %r15
// 228: 5d                            popq    %rbp
// 229: ff e0                         jmpq    *%rax
// 22b: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_PUSH_FRAME_code_body[556] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd3, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc7, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x3c, 0x01, 0x48, 0x81, 0xc7, 0xa0, 0x32, 0x01, 0x00, 0x49, 0x89, 0x3f, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x4c, 0x89, 0xb4, 0x01, 0xa8, 0x32, 0x01, 0x00, 0x48, 0x89, 0x7b, 0x40, 0xff, 0x4b, 0x24, 0x48, 0x63, 0x94, 0x01, 0xe0, 0x32, 0x01, 0x00, 0x48, 0x8d, 0x34, 0x01, 0x48, 0x8d, 0x34, 0xd6, 0x48, 0x81, 0xc6, 0xe8, 0x32, 0x01, 0x00, 0xc7, 0x84, 0x01, 0xe0, 0x32, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_PUSH_FRAME_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_PUSH_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_PUSH_FRAME_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_PUSH_NULL
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_PUSH_NULL.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// ed: 83 fd 7f                      cmpl    $0x7f, %ebp
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 75 28                         jne     0x158 <_JIT_ENTRY+0x158>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyInterpreterState_Get
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 143: 49 ff 4d 00                   decq    (%r13)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyObject_Free
// 153: 4c 89 ef                      movq    %r13, %rdi
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f 22                         jg      0x183 <_JIT_ENTRY+0x183>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 17a: 4c 89 e2                      movq    %r12, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 85 c0                         testl   %eax, %eax
// 185: 78 21                         js      0x1a8 <_JIT_ENTRY+0x1a8>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 191: ff d0                         callq   *%rax
// 193: 49 ff 0c 24                   decq    (%r12)
// 197: 75 0f                         jne     0x1a8 <_JIT_ENTRY+0x1a8>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_Dealloc
// 1a3: 4c 89 e7                      movq    %r12, %rdi
// 1a6: ff d0                         callq   *%rax
// 1a8: 89 e8                         movl    %ebp, %eax
// 1aa: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 1ae: 48 c1 e0 04                   shlq    $0x4, %rax
// 1b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b4:  R_X86_64_64  _PyRuntime
// 1bc: 48 01 c8                      addq    %rcx, %rax
// 1bf: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 1c5: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1c9: 48 c7 43 f8 00 00 00 00       movq    $0x0, -0x8(%rbx)
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _JIT_CONTINUE
// 1db: 4c 89 f7                      movq    %r14, %rdi
// 1de: 48 89 de                      movq    %rbx, %rsi
// 1e1: 4c 89 fa                      movq    %r15, %rdx
// 1e4: 48 83 c4 08                   addq    $0x8, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: ff e0                         jmpq    *%rax
// 1f4: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_PUSH_NULL_code_body[501] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x48, 0x89, 0x43, 0xf0, 0x48, 0xc7, 0x43, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_PUSH_NULL_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_PUSH_NULL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_PUSH_NULL_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_RESUME_CHECK
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_RESUME_CHECK.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 a8 01 00 00             jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 8f 01 00 00             jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 84 01 00 00             ja      0x1d1 <_JIT_ENTRY+0x1d1>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 75 01 00 00             jle     0x1d1 <_JIT_ENTRY+0x1d1>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 db 00 00 00             ja      0x1d1 <_JIT_ENTRY+0x1d1>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 49 8b 47 10                   movq    0x10(%r15), %rax
// 19f: 48 8b 00                      movq    (%rax), %rax
// 1a2: 49 8b 0e                      movq    (%r14), %rcx
// 1a5: 48 3b 81 a8 00 00 00          cmpq    0xa8(%rcx), %rax
// 1ac: 75 23                         jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _JIT_CONTINUE
// 1b8: 4c 89 f7                      movq    %r14, %rdi
// 1bb: 48 89 de                      movq    %rbx, %rsi
// 1be: 4c 89 fa                      movq    %r15, %rdx
// 1c1: 48 83 c4 08                   addq    $0x8, %rsp
// 1c5: 5b                            popq    %rbx
// 1c6: 41 5c                         popq    %r12
// 1c8: 41 5d                         popq    %r13
// 1ca: 41 5e                         popq    %r14
// 1cc: 41 5f                         popq    %r15
// 1ce: 5d                            popq    %rbp
// 1cf: ff e0                         jmpq    *%rax
// 1d1: 4c 29 f3                      subq    %r14, %rbx
// 1d4: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d8: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1dc: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1e0: 49 8b 06                      movq    (%r14), %rax
// 1e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e5:  R_X86_64_64  _JIT_TARGET
// 1ed: 89 c9                         movl    %ecx, %ecx
// 1ef: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f9: 48 83 c4 08                   addq    $0x8, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: c3                            retq
// 208: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_RESUME_CHECK_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xa8, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x8f, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x84, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x75, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xdb, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x49, 0x8b, 0x0e, 0x48, 0x3b, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_RESUME_CHECK_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_RESUME_CHECK_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_RESUME_CHECK_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_SAVE_RETURN_OFFSET.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// ed: 83 fd 7f                      cmpl    $0x7f, %ebp
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 75 28                         jne     0x158 <_JIT_ENTRY+0x158>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyInterpreterState_Get
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 143: 49 ff 4d 00                   decq    (%r13)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyObject_Free
// 153: 4c 89 ef                      movq    %r13, %rdi
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f 22                         jg      0x183 <_JIT_ENTRY+0x183>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 17a: 4c 89 e2                      movq    %r12, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 187: 85 c0                         testl   %eax, %eax
// 189: 78 21                         js      0x1ac <_JIT_ENTRY+0x1ac>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 195: ff d0                         callq   *%rax
// 197: 49 ff 0c 24                   decq    (%r12)
// 19b: 75 0f                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 4c 89 e7                      movq    %r12, %rdi
// 1aa: ff d0                         callq   *%rax
// 1ac: 89 e8                         movl    %ebp, %eax
// 1ae: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 1b2: 48 c1 e0 04                   shlq    $0x4, %rax
// 1b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b8:  R_X86_64_64  _PyRuntime
// 1c0: 48 01 c8                      addq    %rcx, %rax
// 1c3: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 1c9: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: 66 89 43 44                   movw    %ax, 0x44(%rbx)
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _JIT_CONTINUE
// 1e5: 48 89 df                      movq    %rbx, %rdi
// 1e8: 4c 89 ee                      movq    %r13, %rsi
// 1eb: 4c 89 fa                      movq    %r15, %rdx
// 1ee: 48 83 c4 08                   addq    $0x8, %rsp
// 1f2: 5b                            popq    %rbx
// 1f3: 41 5c                         popq    %r12
// 1f5: 41 5d                         popq    %r13
// 1f7: 41 5e                         popq    %r14
// 1f9: 41 5f                         popq    %r15
// 1fb: 5d                            popq    %rbp
// 1fc: ff e0                         jmpq    *%rax
// 1fe: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SAVE_RETURN_OFFSET_code_body[511] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x49, 0x89, 0x46, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x89, 0x43, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_SAVE_RETURN_OFFSET_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SAVE_RETURN_OFFSET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_SAVE_RETURN_OFFSET_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_SETUP_ANNOTATIONS
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_SETUP_ANNOTATIONS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 4c 01 ed                      addq    %r13, %rbp
// 19a: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 48 89 6b f0                   movq    %rbp, -0x10(%rbx)
// 1ca: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1ce: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 1d2: 48 85 ff                      testq   %rdi, %rdi
// 1d5: 0f 84 8b 00 00 00             je      0x266 <_JIT_ENTRY+0x266>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  PyMapping_GetOptionalItem
// 1e5: 49 81 c5 a8 a7 00 00          addq    $0xa7a8, %r13           # imm = 0xA7A8
// 1ec: 48 89 e2                      movq    %rsp, %rdx
// 1ef: 4c 89 ee                      movq    %r13, %rsi
// 1f2: ff d0                         callq   *%rax
// 1f4: 85 c0                         testl   %eax, %eax
// 1f6: 0f 88 92 00 00 00             js      0x28e <_JIT_ENTRY+0x28e>
// 1fc: 4c 8b 24 24                   movq    (%rsp), %r12
// 200: 4d 85 e4                      testq   %r12, %r12
// 203: 0f 84 9b 00 00 00             je      0x2a4 <_JIT_ENTRY+0x2a4>
// 209: 49 8b 04 24                   movq    (%r12), %rax
// 20d: 48 85 c0                      testq   %rax, %rax
// 210: 7f 22                         jg      0x234 <_JIT_ENTRY+0x234>
// 212: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000214:  R_X86_64_64  .rodata.str1.1
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_NegativeRefcount
// 226: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 22b: 4c 89 e2                      movq    %r12, %rdx
// 22e: ff d0                         callq   *%rax
// 230: 49 8b 04 24                   movq    (%r12), %rax
// 234: 85 c0                         testl   %eax, %eax
// 236: 0f 88 f1 00 00 00             js      0x32d <_JIT_ENTRY+0x32d>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 246: ff d0                         callq   *%rax
// 248: 49 ff 0c 24                   decq    (%r12)
// 24c: 0f 85 db 00 00 00             jne     0x32d <_JIT_ENTRY+0x32d>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_Dealloc
// 25c: 4c 89 e7                      movq    %r12, %rdi
// 25f: ff d0                         callq   *%rax
// 261: e9 c7 00 00 00                jmp     0x32d <_JIT_ENTRY+0x32d>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  PyExc_SystemError
// 270: 48 8b 30                      movq    (%rax), %rsi
// 273: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000275:  R_X86_64_64  .rodata.str1.1+0x39
// 27d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027f:  R_X86_64_64  _PyErr_Format
// 287: 4c 89 ff                      movq    %r15, %rdi
// 28a: 31 c0                         xorl    %eax, %eax
// 28c: ff d1                         callq   *%rcx
// 28e: 4c 29 f3                      subq    %r14, %rbx
// 291: 48 83 c3 b8                   addq    $-0x48, %rbx
// 295: 48 c1 eb 03                   shrq    $0x3, %rbx
// 299: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 29d: 31 c0                         xorl    %eax, %eax
// 29f: e9 76 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  PyDict_New
// 2ae: ff d0                         callq   *%rax
// 2b0: 48 89 04 24                   movq    %rax, (%rsp)
// 2b4: 48 85 c0                      testq   %rax, %rax
// 2b7: 74 d5                         je      0x28e <_JIT_ENTRY+0x28e>
// 2b9: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 2bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002bf:  R_X86_64_64  PyObject_SetItem
// 2c7: 4c 89 ee                      movq    %r13, %rsi
// 2ca: 48 89 c2                      movq    %rax, %rdx
// 2cd: ff d1                         callq   *%rcx
// 2cf: 89 c5                         movl    %eax, %ebp
// 2d1: 4c 8b 24 24                   movq    (%rsp), %r12
// 2d5: 49 8b 04 24                   movq    (%r12), %rax
// 2d9: 48 85 c0                      testq   %rax, %rax
// 2dc: 7f 22                         jg      0x300 <_JIT_ENTRY+0x300>
// 2de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e0:  R_X86_64_64  .rodata.str1.1
// 2e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ea:  R_X86_64_64  _Py_NegativeRefcount
// 2f2: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 2f7: 4c 89 e2                      movq    %r12, %rdx
// 2fa: ff d0                         callq   *%rax
// 2fc: 49 8b 04 24                   movq    (%r12), %rax
// 300: 85 c0                         testl   %eax, %eax
// 302: 78 21                         js      0x325 <_JIT_ENTRY+0x325>
// 304: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000306:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30e: ff d0                         callq   *%rax
// 310: 49 ff 0c 24                   decq    (%r12)
// 314: 75 0f                         jne     0x325 <_JIT_ENTRY+0x325>
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  _Py_Dealloc
// 320: 4c 89 e7                      movq    %r12, %rdi
// 323: ff d0                         callq   *%rax
// 325: 85 ed                         testl   %ebp, %ebp
// 327: 0f 85 61 ff ff ff             jne     0x28e <_JIT_ENTRY+0x28e>
// 32d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032f:  R_X86_64_64  _JIT_CONTINUE
// 337: 4c 89 f7                      movq    %r14, %rdi
// 33a: 48 89 de                      movq    %rbx, %rsi
// 33d: 4c 89 fa                      movq    %r15, %rdx
// 340: 48 83 c4 08                   addq    $0x8, %rsp
// 344: 5b                            popq    %rbx
// 345: 41 5c                         popq    %r12
// 347: 41 5d                         popq    %r13
// 349: 41 5e                         popq    %r14
// 34b: 41 5f                         popq    %r15
// 34d: 5d                            popq    %rbp
// 34e: ff e0                         jmpq    *%rax
// 350: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SETUP_ANNOTATIONS_code_body[849] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x01, 0xed, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x92, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x24, 0x24, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xf1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xdb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0xff, 0xd1, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x76, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0xd5, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc5, 0x4c, 0x8b, 0x24, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x61, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_SETUP_ANNOTATIONS_code_holes[26] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00'
// 65: 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SETUP_ANNOTATIONS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_SETUP_ANNOTATIONS_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_SET_ADD
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_SET_ADD.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 17                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1af: ff d1                         callq   *%rcx
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: f7 d0                         notl    %eax
// 1d6: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1db: 48 98                         cltq
// 1dd: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  PySet_Add
// 1ec: 4c 89 ee                      movq    %r13, %rsi
// 1ef: ff d0                         callq   *%rax
// 1f1: 89 c5                         movl    %eax, %ebp
// 1f3: 49 8b 45 00                   movq    (%r13), %rax
// 1f7: 48 85 c0                      testq   %rax, %rax
// 1fa: 7f 22                         jg      0x21e <_JIT_ENTRY+0x21e>
// 1fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fe:  R_X86_64_64  .rodata.str1.1
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_NegativeRefcount
// 210: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 215: 4c 89 ea                      movq    %r13, %rdx
// 218: ff d0                         callq   *%rax
// 21a: 49 8b 45 00                   movq    (%r13), %rax
// 21e: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 222: 49 83 c6 f0                   addq    $-0x10, %r14
// 226: 85 c0                         testl   %eax, %eax
// 228: 78 21                         js      0x24b <_JIT_ENTRY+0x24b>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 234: ff d0                         callq   *%rax
// 236: 49 ff 4d 00                   decq    (%r13)
// 23a: 75 0f                         jne     0x24b <_JIT_ENTRY+0x24b>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 ef                      movq    %r13, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 85 ed                         testl   %ebp, %ebp
// 24d: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 251: 74 16                         je      0x269 <_JIT_ENTRY+0x269>
// 253: 49 29 dc                      subq    %rbx, %r12
// 256: 49 83 c4 b0                   addq    $-0x50, %r12
// 25a: 49 c1 ec 03                   shrq    $0x3, %r12
// 25e: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 262: 31 c0                         xorl    %eax, %eax
// 264: e9 b1 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _JIT_CONTINUE
// 273: 48 89 df                      movq    %rbx, %rdi
// 276: 4c 89 e6                      movq    %r12, %rsi
// 279: 4c 89 fa                      movq    %r15, %rdx
// 27c: 48 83 c4 08                   addq    $0x8, %rsp
// 280: 5b                            popq    %rbx
// 281: 41 5c                         popq    %r12
// 283: 41 5d                         popq    %r13
// 285: 41 5e                         popq    %r14
// 287: 41 5f                         popq    %r15
// 289: 5d                            popq    %rbp
// 28a: ff e0                         jmpq    *%rax
// 28c: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SET_ADD_code_body[653] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x66, 0xf8, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x16, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb0, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xb1, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_SET_ADD_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SET_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_SET_ADD_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_SET_FUNCTION_ATTRIBUTE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 8b 43 e8                   movq    -0x18(%rbx), %rax
// 1ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: 0f b7 c9                      movzwl  %cx, %ecx
// 1db: 83 f9 03                      cmpl    $0x3, %ecx
// 1de: 7f 10                         jg      0x1f0 <_JIT_ENTRY+0x1f0>
// 1e0: 83 f9 01                      cmpl    $0x1, %ecx
// 1e3: 74 1b                         je      0x200 <_JIT_ENTRY+0x200>
// 1e5: 83 f9 02                      cmpl    $0x2, %ecx
// 1e8: 75 4e                         jne     0x238 <_JIT_ENTRY+0x238>
// 1ea: 49 8d 4d 40                   leaq    0x40(%r13), %rcx
// 1ee: eb 1a                         jmp     0x20a <_JIT_ENTRY+0x20a>
// 1f0: 83 f9 04                      cmpl    $0x4, %ecx
// 1f3: 74 11                         je      0x206 <_JIT_ENTRY+0x206>
// 1f5: 83 f9 08                      cmpl    $0x8, %ecx
// 1f8: 75 3e                         jne     0x238 <_JIT_ENTRY+0x238>
// 1fa: 49 8d 4d 48                   leaq    0x48(%r13), %rcx
// 1fe: eb 0a                         jmp     0x20a <_JIT_ENTRY+0x20a>
// 200: 49 8d 4d 38                   leaq    0x38(%r13), %rcx
// 204: eb 04                         jmp     0x20a <_JIT_ENTRY+0x20a>
// 206: 49 8d 4d 70                   leaq    0x70(%r13), %rcx
// 20a: 48 89 01                      movq    %rax, (%rcx)
// 20d: 4c 89 6b e8                   movq    %r13, -0x18(%rbx)
// 211: 48 83 c3 f0                   addq    $-0x10, %rbx
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_CONTINUE
// 21f: 4c 89 f7                      movq    %r14, %rdi
// 222: 48 89 de                      movq    %rbx, %rsi
// 225: 4c 89 fa                      movq    %r15, %rdx
// 228: 48 83 c4 08                   addq    $0x8, %rsp
// 22c: 5b                            popq    %rbx
// 22d: 41 5c                         popq    %r12
// 22f: 41 5d                         popq    %r13
// 231: 41 5e                         popq    %r14
// 233: 41 5f                         popq    %r15
// 235: 5d                            popq    %rbp
// 236: ff e0                         jmpq    *%rax
// 238: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023a:  R_X86_64_64  .rodata.str1.1+0x39
// 242: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000244:  R_X86_64_64  .rodata.str1.1+0x44
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_FatalErrorFunc
// 256: ff d0                         callq   *%rax
// 258: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SET_FUNCTION_ATTRIBUTE_code_body[601] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x8b, 0x43, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x83, 0xf9, 0x03, 0x7f, 0x10, 0x83, 0xf9, 0x01, 0x74, 0x1b, 0x83, 0xf9, 0x02, 0x75, 0x4e, 0x49, 0x8d, 0x4d, 0x40, 0xeb, 0x1a, 0x83, 0xf9, 0x04, 0x74, 0x11, 0x83, 0xf9, 0x08, 0x75, 0x3e, 0x49, 0x8d, 0x4d, 0x48, 0xeb, 0x0a, 0x49, 0x8d, 0x4d, 0x38, 0xeb, 0x04, 0x49, 0x8d, 0x4d, 0x70, 0x48, 0x89, 0x01, 0x4c, 0x89, 0x6b, 0xe8, 0x48, 0x83, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BINARY_SUBSCR_STR_INTplus_SET_FUNCTION_ATTRIBUTE_code_holes[16] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x244, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x44},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// d0: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SET_FUNCTION_ATTRIBUTE_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_SET_IP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_SET_IP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// ed: 83 fd 7f                      cmpl    $0x7f, %ebp
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 75 28                         jne     0x158 <_JIT_ENTRY+0x158>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyInterpreterState_Get
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 143: 49 ff 4d 00                   decq    (%r13)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyObject_Free
// 153: 4c 89 ef                      movq    %r13, %rdi
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f 22                         jg      0x183 <_JIT_ENTRY+0x183>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 17a: 4c 89 e2                      movq    %r12, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 4d 8d 6f f8                   leaq    -0x8(%r15), %r13
// 187: 85 c0                         testl   %eax, %eax
// 189: 78 21                         js      0x1ac <_JIT_ENTRY+0x1ac>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 195: ff d0                         callq   *%rax
// 197: 49 ff 0c 24                   decq    (%r12)
// 19b: 75 0f                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 4c 89 e7                      movq    %r12, %rdi
// 1aa: ff d0                         callq   *%rax
// 1ac: 89 e8                         movl    %ebp, %eax
// 1ae: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 1b2: 48 c1 e0 04                   shlq    $0x4, %rax
// 1b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b8:  R_X86_64_64  _PyRuntime
// 1c0: 48 01 c8                      addq    %rcx, %rax
// 1c3: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 1c9: 49 89 47 f0                   movq    %rax, -0x10(%r15)
// 1cd: 48 8b 03                      movq    (%rbx), %rax
// 1d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d2:  R_X86_64_64  _JIT_OPARG
// 1da: 0f b7 c9                      movzwl  %cx, %ecx
// 1dd: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 1e5: 48 89 43 38                   movq    %rax, 0x38(%rbx)
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_CONTINUE
// 1f3: 48 89 df                      movq    %rbx, %rdi
// 1f6: 4c 89 ee                      movq    %r13, %rsi
// 1f9: 4c 89 f2                      movq    %r14, %rdx
// 1fc: 48 83 c4 08                   addq    $0x8, %rsp
// 200: 5b                            popq    %rbx
// 201: 41 5c                         popq    %r12
// 203: 41 5d                         popq    %r13
// 205: 41 5e                         popq    %r14
// 207: 41 5f                         popq    %r15
// 209: 5d                            popq    %rbp
// 20a: ff e0                         jmpq    *%rax
// 20c: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SET_IP_code_body[525] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6f, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x49, 0x89, 0x47, 0xf0, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_SET_IP_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SET_IP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_SET_IP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_SET_UPDATE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_SET_UPDATE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 17                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1af: ff d1                         callq   *%rcx
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: f7 d0                         notl    %eax
// 1d6: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1db: 48 98                         cltq
// 1dd: 48 8b 7c c3 f8                movq    -0x8(%rbx,%rax,8), %rdi
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _PySet_Update
// 1ec: 4c 89 ee                      movq    %r13, %rsi
// 1ef: ff d0                         callq   *%rax
// 1f1: 89 c5                         movl    %eax, %ebp
// 1f3: 49 8b 45 00                   movq    (%r13), %rax
// 1f7: 48 85 c0                      testq   %rax, %rax
// 1fa: 7f 22                         jg      0x21e <_JIT_ENTRY+0x21e>
// 1fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fe:  R_X86_64_64  .rodata.str1.1
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_NegativeRefcount
// 210: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 215: 4c 89 ea                      movq    %r13, %rdx
// 218: ff d0                         callq   *%rax
// 21a: 49 8b 45 00                   movq    (%r13), %rax
// 21e: 4c 8d 63 f8                   leaq    -0x8(%rbx), %r12
// 222: 48 83 c3 f0                   addq    $-0x10, %rbx
// 226: 85 c0                         testl   %eax, %eax
// 228: 78 21                         js      0x24b <_JIT_ENTRY+0x24b>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 234: ff d0                         callq   *%rax
// 236: 49 ff 4d 00                   decq    (%r13)
// 23a: 75 0f                         jne     0x24b <_JIT_ENTRY+0x24b>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 ef                      movq    %r13, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 85 ed                         testl   %ebp, %ebp
// 24d: 49 0f 48 dc                   cmovsq  %r12, %rbx
// 251: 78 23                         js      0x276 <_JIT_ENTRY+0x276>
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _JIT_CONTINUE
// 25d: 4c 89 f7                      movq    %r14, %rdi
// 260: 48 89 de                      movq    %rbx, %rsi
// 263: 4c 89 fa                      movq    %r15, %rdx
// 266: 48 83 c4 08                   addq    $0x8, %rsp
// 26a: 5b                            popq    %rbx
// 26b: 41 5c                         popq    %r12
// 26d: 41 5d                         popq    %r13
// 26f: 41 5e                         popq    %r14
// 271: 41 5f                         popq    %r15
// 273: 5d                            popq    %rbp
// 274: ff e0                         jmpq    *%rax
// 276: 4c 29 f3                      subq    %r14, %rbx
// 279: 48 83 c3 b0                   addq    $-0x50, %rbx
// 27d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 281: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 285: 31 c0                         xorl    %eax, %eax
// 287: e9 8e fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 28c: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SET_UPDATE_code_body[653] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8b, 0x7c, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4c, 0x8d, 0x63, 0xf8, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x48, 0xdc, 0x78, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x8e, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_SET_UPDATE_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SET_UPDATE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_SET_UPDATE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_STORE_ATTR
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_STORE_ATTR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1ce: 48 8b 03                      movq    (%rbx), %rax
// 1d1: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c9                      movzwl  %cx, %ecx
// 1e2: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  PyObject_SetAttr
// 1f1: 4c 89 ef                      movq    %r13, %rdi
// 1f4: 4c 89 e2                      movq    %r12, %rdx
// 1f7: ff d0                         callq   *%rax
// 1f9: 89 c5                         movl    %eax, %ebp
// 1fb: 49 8b 04 24                   movq    (%r12), %rax
// 1ff: 48 85 c0                      testq   %rax, %rax
// 202: 7f 22                         jg      0x226 <_JIT_ENTRY+0x226>
// 204: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000206:  R_X86_64_64  .rodata.str1.1
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_NegativeRefcount
// 218: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// 21d: 4c 89 e2                      movq    %r12, %rdx
// 220: ff d0                         callq   *%rax
// 222: 49 8b 04 24                   movq    (%r12), %rax
// 226: 85 c0                         testl   %eax, %eax
// 228: 78 21                         js      0x24b <_JIT_ENTRY+0x24b>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 234: ff d0                         callq   *%rax
// 236: 49 ff 0c 24                   decq    (%r12)
// 23a: 75 0f                         jne     0x24b <_JIT_ENTRY+0x24b>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 e7                      movq    %r12, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 49 8b 45 00                   movq    (%r13), %rax
// 24f: 48 85 c0                      testq   %rax, %rax
// 252: 7f 22                         jg      0x276 <_JIT_ENTRY+0x276>
// 254: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000256:  R_X86_64_64  .rodata.str1.1
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_NegativeRefcount
// 268: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 26d: 4c 89 ea                      movq    %r13, %rdx
// 270: ff d0                         callq   *%rax
// 272: 49 8b 45 00                   movq    (%r13), %rax
// 276: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 27a: 49 83 c6 e8                   addq    $-0x18, %r14
// 27e: 85 c0                         testl   %eax, %eax
// 280: 78 21                         js      0x2a3 <_JIT_ENTRY+0x2a3>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28c: ff d0                         callq   *%rax
// 28e: 49 ff 4d 00                   decq    (%r13)
// 292: 75 0f                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_Dealloc
// 29e: 4c 89 ef                      movq    %r13, %rdi
// 2a1: ff d0                         callq   *%rax
// 2a3: 85 ed                         testl   %ebp, %ebp
// 2a5: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 2a9: 74 16                         je      0x2c1 <_JIT_ENTRY+0x2c1>
// 2ab: 49 29 dc                      subq    %rbx, %r12
// 2ae: 49 83 c4 a8                   addq    $-0x58, %r12
// 2b2: 49 c1 ec 03                   shrq    $0x3, %r12
// 2b6: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2ba: 31 c0                         xorl    %eax, %eax
// 2bc: e9 59 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _JIT_CONTINUE
// 2cb: 48 89 df                      movq    %rbx, %rdi
// 2ce: 4c 89 e6                      movq    %r12, %rsi
// 2d1: 4c 89 fa                      movq    %r15, %rdx
// 2d4: 48 83 c4 08                   addq    $0x8, %rsp
// 2d8: 5b                            popq    %rbx
// 2d9: 41 5c                         popq    %r12
// 2db: 41 5d                         popq    %r13
// 2dd: 41 5e                         popq    %r14
// 2df: 41 5f                         popq    %r15
// 2e1: 5d                            popq    %rbp
// 2e2: ff e0                         jmpq    *%rax
// 2e4: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_code_body[741] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xe8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x66, 0xf8, 0x49, 0x83, 0xc6, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x16, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x59, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_STORE_ATTR_INSTANCE_VALUE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 8b 4b e8                   movq    -0x18(%rbx), %rcx
// 1ce: 49 8b 45 e8                   movq    -0x18(%r13), %rax
// 1d2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d4:  R_X86_64_64  _JIT_OPERAND
// 1dc: 0f b7 d2                      movzwl  %dx, %edx
// 1df: 4c 8b 64 d0 01                movq    0x1(%rax,%rdx,8), %r12
// 1e4: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 1e9: 4d 85 e4                      testq   %r12, %r12
// 1ec: 74 52                         je      0x240 <_JIT_ENTRY+0x240>
// 1ee: 49 8b 04 24                   movq    (%r12), %rax
// 1f2: 48 85 c0                      testq   %rax, %rax
// 1f5: 7f 22                         jg      0x219 <_JIT_ENTRY+0x219>
// 1f7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f9:  R_X86_64_64  .rodata.str1.1
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_NegativeRefcount
// 20b: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// 210: 4c 89 e2                      movq    %r12, %rdx
// 213: ff d0                         callq   *%rax
// 215: 49 8b 04 24                   movq    (%r12), %rax
// 219: 85 c0                         testl   %eax, %eax
// 21b: 78 3f                         js      0x25c <_JIT_ENTRY+0x25c>
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 227: ff d0                         callq   *%rax
// 229: 49 ff 0c 24                   decq    (%r12)
// 22d: 75 2d                         jne     0x25c <_JIT_ENTRY+0x25c>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_Dealloc
// 239: 4c 89 e7                      movq    %r12, %rdi
// 23c: ff d0                         callq   *%rax
// 23e: eb 1c                         jmp     0x25c <_JIT_ENTRY+0x25c>
// 240: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 244: 8d 51 01                      leal    0x1(%rcx), %edx
// 247: 48 f7 d1                      notq    %rcx
// 24a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000024c:  R_X86_64_64  _JIT_OPERAND
// 254: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// 259: 88 50 ff                      movb    %dl, -0x1(%rax)
// 25c: 49 8b 45 00                   movq    (%r13), %rax
// 260: 48 85 c0                      testq   %rax, %rax
// 263: 7f 22                         jg      0x287 <_JIT_ENTRY+0x287>
// 265: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000267:  R_X86_64_64  .rodata.str1.1
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_NegativeRefcount
// 279: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 27e: 4c 89 ea                      movq    %r13, %rdx
// 281: ff d0                         callq   *%rax
// 283: 49 8b 45 00                   movq    (%r13), %rax
// 287: 48 83 c3 e8                   addq    $-0x18, %rbx
// 28b: 85 c0                         testl   %eax, %eax
// 28d: 78 21                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 299: ff d0                         callq   *%rax
// 29b: 49 ff 4d 00                   decq    (%r13)
// 29f: 75 0f                         jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _Py_Dealloc
// 2ab: 4c 89 ef                      movq    %r13, %rdi
// 2ae: ff d0                         callq   *%rax
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _JIT_CONTINUE
// 2ba: 4c 89 f7                      movq    %r14, %rdi
// 2bd: 48 89 de                      movq    %rbx, %rsi
// 2c0: 4c 89 fa                      movq    %r15, %rdx
// 2c3: 48 83 c4 08                   addq    $0x8, %rsp
// 2c7: 5b                            popq    %rbx
// 2c8: 41 5c                         popq    %r12
// 2ca: 41 5d                         popq    %r13
// 2cc: 41 5e                         popq    %r14
// 2ce: 41 5f                         popq    %r15
// 2d0: 5d                            popq    %rbp
// 2d1: ff e0                         jmpq    *%rax
// 2d3: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_INSTANCE_VALUE_code_body[724] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x8b, 0x4b, 0xe8, 0x49, 0x8b, 0x45, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x64, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xe4, 0x74, 0x52, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x1c, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_INSTANCE_VALUE_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_SLOT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_STORE_ATTR_SLOT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1ca: 48 8b 43 e8                   movq    -0x18(%rbx), %rax
// 1ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d0:  R_X86_64_64  _JIT_OPERAND
// 1d8: 0f b7 c9                      movzwl  %cx, %ecx
// 1db: 4d 8b 64 0d 00                movq    (%r13,%rcx), %r12
// 1e0: 49 89 44 0d 00                movq    %rax, (%r13,%rcx)
// 1e5: 4d 85 e4                      testq   %r12, %r12
// 1e8: 74 50                         je      0x23a <_JIT_ENTRY+0x23a>
// 1ea: 49 8b 04 24                   movq    (%r12), %rax
// 1ee: 48 85 c0                      testq   %rax, %rax
// 1f1: 7f 22                         jg      0x215 <_JIT_ENTRY+0x215>
// 1f3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f5:  R_X86_64_64  .rodata.str1.1+0x39
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _Py_NegativeRefcount
// 207: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 20c: 4c 89 e2                      movq    %r12, %rdx
// 20f: ff d0                         callq   *%rax
// 211: 49 8b 04 24                   movq    (%r12), %rax
// 215: 85 c0                         testl   %eax, %eax
// 217: 78 21                         js      0x23a <_JIT_ENTRY+0x23a>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 223: ff d0                         callq   *%rax
// 225: 49 ff 0c 24                   decq    (%r12)
// 229: 75 0f                         jne     0x23a <_JIT_ENTRY+0x23a>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: 4c 89 e7                      movq    %r12, %rdi
// 238: ff d0                         callq   *%rax
// 23a: 49 8b 45 00                   movq    (%r13), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7f 22                         jg      0x265 <_JIT_ENTRY+0x265>
// 243: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000245:  R_X86_64_64  .rodata.str1.1
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// 25c: 4c 89 ea                      movq    %r13, %rdx
// 25f: ff d0                         callq   *%rax
// 261: 49 8b 45 00                   movq    (%r13), %rax
// 265: 48 83 c3 e8                   addq    $-0x18, %rbx
// 269: 85 c0                         testl   %eax, %eax
// 26b: 78 21                         js      0x28e <_JIT_ENTRY+0x28e>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 277: ff d0                         callq   *%rax
// 279: 49 ff 4d 00                   decq    (%r13)
// 27d: 75 0f                         jne     0x28e <_JIT_ENTRY+0x28e>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_Dealloc
// 289: 4c 89 ef                      movq    %r13, %rdi
// 28c: ff d0                         callq   *%rax
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _JIT_CONTINUE
// 298: 4c 89 f7                      movq    %r14, %rdi
// 29b: 48 89 de                      movq    %rbx, %rsi
// 29e: 4c 89 fa                      movq    %r15, %rdx
// 2a1: 48 83 c4 08                   addq    $0x8, %rsp
// 2a5: 5b                            popq    %rbx
// 2a6: 41 5c                         popq    %r12
// 2a8: 41 5d                         popq    %r13
// 2aa: 41 5e                         popq    %r14
// 2ac: 41 5f                         popq    %r15
// 2ae: 5d                            popq    %rbp
// 2af: ff e0                         jmpq    *%rax
// 2b1: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_SLOT_code_body[690] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x8b, 0x43, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x64, 0x0d, 0x00, 0x49, 0x89, 0x44, 0x0d, 0x00, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_SLOT_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_SLOT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_ATTR_SLOT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_STORE_DEREF
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_STORE_DEREF.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 48 83 c3 f0                   addq    $-0x10, %rbx
// 19b: 49 01 ed                      addq    %rbp, %r13
// 19e: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a5: 85 c0                         testl   %eax, %eax
// 1a7: 78 21                         js      0x1ca <_JIT_ENTRY+0x1ca>
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: ff d0                         callq   *%rax
// 1b5: 49 ff 0c 24                   decq    (%r12)
// 1b9: 75 0f                         jne     0x1ca <_JIT_ENTRY+0x1ca>
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_Dealloc
// 1c5: 4c 89 e7                      movq    %r12, %rdi
// 1c8: ff d0                         callq   *%rax
// 1ca: 4c 89 2b                      movq    %r13, (%rbx)
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: 0f b7 c0                      movzwl  %ax, %eax
// 1da: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// 1df: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 1e3: 4c 89 68 10                   movq    %r13, 0x10(%rax)
// 1e7: 4d 85 e4                      testq   %r12, %r12
// 1ea: 74 50                         je      0x23c <_JIT_ENTRY+0x23c>
// 1ec: 49 8b 04 24                   movq    (%r12), %rax
// 1f0: 48 85 c0                      testq   %rax, %rax
// 1f3: 7f 22                         jg      0x217 <_JIT_ENTRY+0x217>
// 1f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f7:  R_X86_64_64  .rodata.str1.1+0x39
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_NegativeRefcount
// 209: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 20e: 4c 89 e2                      movq    %r12, %rdx
// 211: ff d0                         callq   *%rax
// 213: 49 8b 04 24                   movq    (%r12), %rax
// 217: 85 c0                         testl   %eax, %eax
// 219: 78 21                         js      0x23c <_JIT_ENTRY+0x23c>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 225: ff d0                         callq   *%rax
// 227: 49 ff 0c 24                   decq    (%r12)
// 22b: 75 0f                         jne     0x23c <_JIT_ENTRY+0x23c>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_Dealloc
// 237: 4c 89 e7                      movq    %r12, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _JIT_CONTINUE
// 246: 4c 89 f7                      movq    %r14, %rdi
// 249: 48 89 de                      movq    %rbx, %rsi
// 24c: 4c 89 fa                      movq    %r15, %rdx
// 24f: 48 83 c4 08                   addq    $0x8, %rsp
// 253: 5b                            popq    %rbx
// 254: 41 5c                         popq    %r12
// 256: 41 5d                         popq    %r13
// 258: 41 5e                         popq    %r14
// 25a: 41 5f                         popq    %r15
// 25c: 5d                            popq    %rbp
// 25d: ff e0                         jmpq    *%rax
// 25f: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_DEREF_code_body[608] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf0, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4c, 0x89, 0x68, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_DEREF_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_DEREF_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_DEREF_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_STORE_FAST
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_STORE_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 48 83 c3 f0                   addq    $-0x10, %rbx
// 19b: 49 01 ed                      addq    %rbp, %r13
// 19e: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a5: 85 c0                         testl   %eax, %eax
// 1a7: 78 21                         js      0x1ca <_JIT_ENTRY+0x1ca>
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: ff d0                         callq   *%rax
// 1b5: 49 ff 0c 24                   decq    (%r12)
// 1b9: 75 0f                         jne     0x1ca <_JIT_ENTRY+0x1ca>
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_Dealloc
// 1c5: 4c 89 e7                      movq    %r12, %rdi
// 1c8: ff d0                         callq   *%rax
// 1ca: 4c 89 2b                      movq    %r13, (%rbx)
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: 0f b7 c0                      movzwl  %ax, %eax
// 1da: 4d 8b 64 c6 48                movq    0x48(%r14,%rax,8), %r12
// 1df: 4d 89 6c c6 48                movq    %r13, 0x48(%r14,%rax,8)
// 1e4: 4d 85 e4                      testq   %r12, %r12
// 1e7: 74 50                         je      0x239 <_JIT_ENTRY+0x239>
// 1e9: 49 8b 04 24                   movq    (%r12), %rax
// 1ed: 48 85 c0                      testq   %rax, %rax
// 1f0: 7f 22                         jg      0x214 <_JIT_ENTRY+0x214>
// 1f2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f4:  R_X86_64_64  .rodata.str1.1+0x39
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_NegativeRefcount
// 206: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 20b: 4c 89 e2                      movq    %r12, %rdx
// 20e: ff d0                         callq   *%rax
// 210: 49 8b 04 24                   movq    (%r12), %rax
// 214: 85 c0                         testl   %eax, %eax
// 216: 78 21                         js      0x239 <_JIT_ENTRY+0x239>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 222: ff d0                         callq   *%rax
// 224: 49 ff 0c 24                   decq    (%r12)
// 228: 75 0f                         jne     0x239 <_JIT_ENTRY+0x239>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_Dealloc
// 234: 4c 89 e7                      movq    %r12, %rdi
// 237: ff d0                         callq   *%rax
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_CONTINUE
// 243: 4c 89 f7                      movq    %r14, %rdi
// 246: 48 89 de                      movq    %rbx, %rsi
// 249: 4c 89 fa                      movq    %r15, %rdx
// 24c: 48 83 c4 08                   addq    $0x8, %rsp
// 250: 5b                            popq    %rbx
// 251: 41 5c                         popq    %r12
// 253: 41 5d                         popq    %r13
// 255: 41 5e                         popq    %r14
// 257: 41 5f                         popq    %r15
// 259: 5d                            popq    %rbp
// 25a: ff e0                         jmpq    *%rax
// 25c: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_FAST_code_body[605] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf0, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x64, 0xc6, 0x48, 0x4d, 0x89, 0x6c, 0xc6, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_FAST_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_FAST_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_FAST_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_STORE_GLOBAL
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_STORE_GLOBAL.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 48 8d 4b f0                   leaq    -0x10(%rbx), %rcx
// 19b: 48 89 0c 24                   movq    %rcx, (%rsp)
// 19f: 49 01 ed                      addq    %rbp, %r13
// 1a2: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 78 17                         js      0x1ce <_JIT_ENTRY+0x1ce>
// 1b7: ff d1                         callq   *%rcx
// 1b9: 49 ff 0c 24                   decq    (%r12)
// 1bd: 75 0f                         jne     0x1ce <_JIT_ENTRY+0x1ce>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_Dealloc
// 1c9: 4c 89 e7                      movq    %r12, %rdi
// 1cc: ff d0                         callq   *%rax
// 1ce: 4c 8b 24 24                   movq    (%rsp), %r12
// 1d2: 4d 89 2c 24                   movq    %r13, (%r12)
// 1d6: 49 8b 06                      movq    (%r14), %rax
// 1d9: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 1dd: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1e1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e3:  R_X86_64_64  _JIT_OPARG
// 1eb: 0f b7 c9                      movzwl  %cx, %ecx
// 1ee: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  PyDict_SetItem
// 1fd: 4c 89 ea                      movq    %r13, %rdx
// 200: ff d0                         callq   *%rax
// 202: 89 c5                         movl    %eax, %ebp
// 204: 49 8b 45 00                   movq    (%r13), %rax
// 208: 48 85 c0                      testq   %rax, %rax
// 20b: 7f 22                         jg      0x22f <_JIT_ENTRY+0x22f>
// 20d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020f:  R_X86_64_64  .rodata.str1.1
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_NegativeRefcount
// 221: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// 226: 4c 89 ea                      movq    %r13, %rdx
// 229: ff d0                         callq   *%rax
// 22b: 49 8b 45 00                   movq    (%r13), %rax
// 22f: 48 83 c3 f8                   addq    $-0x8, %rbx
// 233: 85 c0                         testl   %eax, %eax
// 235: 78 21                         js      0x258 <_JIT_ENTRY+0x258>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 241: ff d0                         callq   *%rax
// 243: 49 ff 4d 00                   decq    (%r13)
// 247: 75 0f                         jne     0x258 <_JIT_ENTRY+0x258>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_Dealloc
// 253: 4c 89 ef                      movq    %r13, %rdi
// 256: ff d0                         callq   *%rax
// 258: 85 ed                         testl   %ebp, %ebp
// 25a: 49 0f 44 dc                   cmoveq  %r12, %rbx
// 25e: 74 16                         je      0x276 <_JIT_ENTRY+0x276>
// 260: 4c 29 f3                      subq    %r14, %rbx
// 263: 48 83 c3 b0                   addq    $-0x50, %rbx
// 267: 48 c1 eb 03                   shrq    $0x3, %rbx
// 26b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 26f: 31 c0                         xorl    %eax, %eax
// 271: e9 a4 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _JIT_CONTINUE
// 280: 4c 89 f7                      movq    %r14, %rdi
// 283: 48 89 de                      movq    %rbx, %rsi
// 286: 4c 89 fa                      movq    %r15, %rdx
// 289: 48 83 c4 08                   addq    $0x8, %rsp
// 28d: 5b                            popq    %rbx
// 28e: 41 5c                         popq    %r12
// 290: 41 5d                         popq    %r13
// 292: 41 5e                         popq    %r14
// 294: 41 5f                         popq    %r15
// 296: 5d                            popq    %rbp
// 297: ff e0                         jmpq    *%rax
// 299: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_GLOBAL_code_body[666] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x4b, 0xf0, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x4d, 0x89, 0x2c, 0x24, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdc, 0x74, 0x16, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xa4, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_GLOBAL_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_GLOBAL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_GLOBAL_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_STORE_NAME
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_STORE_NAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 49 8b 06                      movq    (%r14), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 48 83 c3 f0                   addq    $-0x10, %rbx
// 19b: 49 01 ed                      addq    %rbp, %r13
// 19e: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a5: 85 c0                         testl   %eax, %eax
// 1a7: 78 21                         js      0x1ca <_JIT_ENTRY+0x1ca>
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: ff d0                         callq   *%rax
// 1b5: 49 ff 0c 24                   decq    (%r12)
// 1b9: 75 0f                         jne     0x1ca <_JIT_ENTRY+0x1ca>
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_Dealloc
// 1c5: 4c 89 e7                      movq    %r12, %rdi
// 1c8: ff d0                         callq   *%rax
// 1ca: 4c 89 2b                      movq    %r13, (%rbx)
// 1cd: 49 8b 06                      movq    (%r14), %rax
// 1d0: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 1d4: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1d8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001da:  R_X86_64_64  _JIT_OPARG
// 1e2: 0f b7 c9                      movzwl  %cx, %ecx
// 1e5: 48 8b 4c c8 18                movq    0x18(%rax,%rcx,8), %rcx
// 1ea: 48 85 ff                      testq   %rdi, %rdi
// 1ed: 74 23                         je      0x212 <_JIT_ENTRY+0x212>
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  PyDict_Type
// 1f9: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1fd: 0f 84 8e 00 00 00             je      0x291 <_JIT_ENTRY+0x291>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyObject_SetItem
// 20d: e9 89 00 00 00                jmp     0x29b <_JIT_ENTRY+0x29b>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  PyExc_SystemError
// 21c: 48 8b 30                      movq    (%rax), %rsi
// 21f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000221:  R_X86_64_64  .rodata.str1.1+0x39
// 229: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000022b:  R_X86_64_64  _PyErr_Format
// 233: 4c 89 ff                      movq    %r15, %rdi
// 236: 31 c0                         xorl    %eax, %eax
// 238: 41 ff d0                      callq   *%r8
// 23b: 49 8b 45 00                   movq    (%r13), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 7f 22                         jg      0x266 <_JIT_ENTRY+0x266>
// 244: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000246:  R_X86_64_64  .rodata.str1.1
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_NegativeRefcount
// 258: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 25d: 4c 89 ea                      movq    %r13, %rdx
// 260: ff d0                         callq   *%rax
// 262: 49 8b 45 00                   movq    (%r13), %rax
// 266: 85 c0                         testl   %eax, %eax
// 268: 0f 88 8b 00 00 00             js      0x2f9 <_JIT_ENTRY+0x2f9>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 278: ff d0                         callq   *%rax
// 27a: 49 ff 4d 00                   decq    (%r13)
// 27e: 75 79                         jne     0x2f9 <_JIT_ENTRY+0x2f9>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_Dealloc
// 28a: 4c 89 ef                      movq    %r13, %rdi
// 28d: ff d0                         callq   *%rax
// 28f: eb 68                         jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  PyDict_SetItem
// 29b: 48 89 ce                      movq    %rcx, %rsi
// 29e: 4c 89 ea                      movq    %r13, %rdx
// 2a1: ff d0                         callq   *%rax
// 2a3: 89 c5                         movl    %eax, %ebp
// 2a5: 49 8b 45 00                   movq    (%r13), %rax
// 2a9: 48 85 c0                      testq   %rax, %rax
// 2ac: 7f 22                         jg      0x2d0 <_JIT_ENTRY+0x2d0>
// 2ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b0:  R_X86_64_64  .rodata.str1.1
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_NegativeRefcount
// 2c2: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 2c7: 4c 89 ea                      movq    %r13, %rdx
// 2ca: ff d0                         callq   *%rax
// 2cc: 49 8b 45 00                   movq    (%r13), %rax
// 2d0: 85 c0                         testl   %eax, %eax
// 2d2: 78 21                         js      0x2f5 <_JIT_ENTRY+0x2f5>
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2de: ff d0                         callq   *%rax
// 2e0: 49 ff 4d 00                   decq    (%r13)
// 2e4: 75 0f                         jne     0x2f5 <_JIT_ENTRY+0x2f5>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_Dealloc
// 2f0: 4c 89 ef                      movq    %r13, %rdi
// 2f3: ff d0                         callq   *%rax
// 2f5: 85 ed                         testl   %ebp, %ebp
// 2f7: 74 16                         je      0x30f <_JIT_ENTRY+0x30f>
// 2f9: 4c 29 f3                      subq    %r14, %rbx
// 2fc: 48 83 c3 b8                   addq    $-0x48, %rbx
// 300: 48 c1 eb 03                   shrq    $0x3, %rbx
// 304: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 308: 31 c0                         xorl    %eax, %eax
// 30a: e9 0b fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  _JIT_CONTINUE
// 319: 4c 89 f7                      movq    %r14, %rdi
// 31c: 48 89 de                      movq    %rbx, %rsi
// 31f: 4c 89 fa                      movq    %r15, %rdx
// 322: 48 83 c4 08                   addq    $0x8, %rsp
// 326: 5b                            popq    %rbx
// 327: 41 5c                         popq    %r12
// 329: 41 5d                         popq    %r13
// 32b: 41 5e                         popq    %r14
// 32d: 41 5f                         popq    %r15
// 32f: 5d                            popq    %rbp
// 330: ff e0                         jmpq    *%rax
// 332: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_NAME_code_body[819] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf0, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x2b, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x4c, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x79, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x16, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x0b, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_NAME_code_holes[27] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_NAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_NAME_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_STORE_SLICE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_STORE_SLICE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 4c 01 ed                      addq    %r13, %rbp
// 19a: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 1ca: 49 8b 7e e8                   movq    -0x18(%r14), %rdi
// 1ce: 4d 8b 6e d8                   movq    -0x28(%r14), %r13
// 1d2: 4d 8b 66 e0                   movq    -0x20(%r14), %r12
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 1e0: 48 89 ee                      movq    %rbp, %rsi
// 1e3: ff d0                         callq   *%rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 74 77                         je      0x261 <_JIT_ENTRY+0x261>
// 1ea: 48 89 c5                      movq    %rax, %rbp
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  PyObject_SetItem
// 1f7: 4c 89 e7                      movq    %r12, %rdi
// 1fa: 48 89 ee                      movq    %rbp, %rsi
// 1fd: 4c 89 ea                      movq    %r13, %rdx
// 200: ff d0                         callq   *%rax
// 202: 89 44 24 04                   movl    %eax, 0x4(%rsp)
// 206: 48 8b 45 00                   movq    (%rbp), %rax
// 20a: 48 85 c0                      testq   %rax, %rax
// 20d: 7f 22                         jg      0x231 <_JIT_ENTRY+0x231>
// 20f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000211:  R_X86_64_64  .rodata.str1.1
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _Py_NegativeRefcount
// 223: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 228: 48 89 ea                      movq    %rbp, %rdx
// 22b: ff d0                         callq   *%rax
// 22d: 48 8b 45 00                   movq    (%rbp), %rax
// 231: 85 c0                         testl   %eax, %eax
// 233: 78 21                         js      0x256 <_JIT_ENTRY+0x256>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23f: ff d0                         callq   *%rax
// 241: 48 ff 4d 00                   decq    (%rbp)
// 245: 75 0f                         jne     0x256 <_JIT_ENTRY+0x256>
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_Dealloc
// 251: 48 89 ef                      movq    %rbp, %rdi
// 254: ff d0                         callq   *%rax
// 256: 83 7c 24 04 00                cmpl    $0x0, 0x4(%rsp)
// 25b: 40 0f 94 c5                   sete    %bpl
// 25f: eb 02                         jmp     0x263 <_JIT_ENTRY+0x263>
// 261: 31 ed                         xorl    %ebp, %ebp
// 263: 49 8b 45 00                   movq    (%r13), %rax
// 267: 48 85 c0                      testq   %rax, %rax
// 26a: 7f 22                         jg      0x28e <_JIT_ENTRY+0x28e>
// 26c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026e:  R_X86_64_64  .rodata.str1.1
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_NegativeRefcount
// 280: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 285: 4c 89 ea                      movq    %r13, %rdx
// 288: ff d0                         callq   *%rax
// 28a: 49 8b 45 00                   movq    (%r13), %rax
// 28e: 85 c0                         testl   %eax, %eax
// 290: 78 21                         js      0x2b3 <_JIT_ENTRY+0x2b3>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29c: ff d0                         callq   *%rax
// 29e: 49 ff 4d 00                   decq    (%r13)
// 2a2: 75 0f                         jne     0x2b3 <_JIT_ENTRY+0x2b3>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_Dealloc
// 2ae: 4c 89 ef                      movq    %r13, %rdi
// 2b1: ff d0                         callq   *%rax
// 2b3: 49 8b 04 24                   movq    (%r12), %rax
// 2b7: 48 85 c0                      testq   %rax, %rax
// 2ba: 7f 22                         jg      0x2de <_JIT_ENTRY+0x2de>
// 2bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002be:  R_X86_64_64  .rodata.str1.1
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_NegativeRefcount
// 2d0: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 2d5: 4c 89 e2                      movq    %r12, %rdx
// 2d8: ff d0                         callq   *%rax
// 2da: 49 8b 04 24                   movq    (%r12), %rax
// 2de: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 2e2: 49 83 c6 d8                   addq    $-0x28, %r14
// 2e6: 85 c0                         testl   %eax, %eax
// 2e8: 78 21                         js      0x30b <_JIT_ENTRY+0x30b>
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f4: ff d0                         callq   *%rax
// 2f6: 49 ff 0c 24                   decq    (%r12)
// 2fa: 75 0f                         jne     0x30b <_JIT_ENTRY+0x30b>
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _Py_Dealloc
// 306: 4c 89 e7                      movq    %r12, %rdi
// 309: ff d0                         callq   *%rax
// 30b: 40 84 ed                      testb   %bpl, %bpl
// 30e: 4d 0f 45 ee                   cmovneq %r14, %r13
// 312: 74 23                         je      0x337 <_JIT_ENTRY+0x337>
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _JIT_CONTINUE
// 31e: 48 89 df                      movq    %rbx, %rdi
// 321: 4c 89 ee                      movq    %r13, %rsi
// 324: 4c 89 fa                      movq    %r15, %rdx
// 327: 48 83 c4 08                   addq    $0x8, %rsp
// 32b: 5b                            popq    %rbx
// 32c: 41 5c                         popq    %r12
// 32e: 41 5d                         popq    %r13
// 330: 41 5e                         popq    %r14
// 332: 41 5f                         popq    %r15
// 334: 5d                            popq    %rbp
// 335: ff e0                         jmpq    *%rax
// 337: 49 29 dd                      subq    %rbx, %r13
// 33a: 49 83 c5 98                   addq    $-0x68, %r13
// 33e: 49 c1 ed 03                   shrq    $0x3, %r13
// 342: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 346: 31 c0                         xorl    %eax, %eax
// 348: e9 cd fd ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 34d: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_SLICE_code_body[846] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x01, 0xed, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x7e, 0xe8, 0x4d, 0x8b, 0x6e, 0xd8, 0x4d, 0x8b, 0x66, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x77, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x04, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x04, 0x00, 0x40, 0x0f, 0x94, 0xc5, 0xeb, 0x02, 0x31, 0xed, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x49, 0x83, 0xc6, 0xd8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x40, 0x84, 0xed, 0x4d, 0x0f, 0x45, 0xee, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0x98, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xcd, 0xfd, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_SLICE_code_holes[26] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_SLICE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 21                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ca: 49 8b 6e e0                   movq    -0x20(%r14), %rbp
// 1ce: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  PyObject_SetItem
// 1dc: 4c 89 e7                      movq    %r12, %rdi
// 1df: 4c 89 ee                      movq    %r13, %rsi
// 1e2: 48 89 ea                      movq    %rbp, %rdx
// 1e5: ff d0                         callq   *%rax
// 1e7: 89 44 24 04                   movl    %eax, 0x4(%rsp)
// 1eb: 48 8b 45 00                   movq    (%rbp), %rax
// 1ef: 48 85 c0                      testq   %rax, %rax
// 1f2: 7f 22                         jg      0x216 <_JIT_ENTRY+0x216>
// 1f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f6:  R_X86_64_64  .rodata.str1.1
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _Py_NegativeRefcount
// 208: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 20d: 48 89 ea                      movq    %rbp, %rdx
// 210: ff d0                         callq   *%rax
// 212: 48 8b 45 00                   movq    (%rbp), %rax
// 216: 85 c0                         testl   %eax, %eax
// 218: 78 21                         js      0x23b <_JIT_ENTRY+0x23b>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 224: ff d0                         callq   *%rax
// 226: 48 ff 4d 00                   decq    (%rbp)
// 22a: 75 0f                         jne     0x23b <_JIT_ENTRY+0x23b>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_Dealloc
// 236: 48 89 ef                      movq    %rbp, %rdi
// 239: ff d0                         callq   *%rax
// 23b: 49 8b 04 24                   movq    (%r12), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 7f 22                         jg      0x266 <_JIT_ENTRY+0x266>
// 244: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000246:  R_X86_64_64  .rodata.str1.1
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_NegativeRefcount
// 258: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// 25d: 4c 89 e2                      movq    %r12, %rdx
// 260: ff d0                         callq   *%rax
// 262: 49 8b 04 24                   movq    (%r12), %rax
// 266: 85 c0                         testl   %eax, %eax
// 268: 78 21                         js      0x28b <_JIT_ENTRY+0x28b>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 274: ff d0                         callq   *%rax
// 276: 49 ff 0c 24                   decq    (%r12)
// 27a: 75 0f                         jne     0x28b <_JIT_ENTRY+0x28b>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_Dealloc
// 286: 4c 89 e7                      movq    %r12, %rdi
// 289: ff d0                         callq   *%rax
// 28b: 49 8b 45 00                   movq    (%r13), %rax
// 28f: 48 85 c0                      testq   %rax, %rax
// 292: 7f 22                         jg      0x2b6 <_JIT_ENTRY+0x2b6>
// 294: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000296:  R_X86_64_64  .rodata.str1.1
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _Py_NegativeRefcount
// 2a8: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 2ad: 4c 89 ea                      movq    %r13, %rdx
// 2b0: ff d0                         callq   *%rax
// 2b2: 49 8b 45 00                   movq    (%r13), %rax
// 2b6: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 2ba: 49 83 c6 e0                   addq    $-0x20, %r14
// 2be: 85 c0                         testl   %eax, %eax
// 2c0: 78 21                         js      0x2e3 <_JIT_ENTRY+0x2e3>
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 ff 4d 00                   decq    (%r13)
// 2d2: 75 0f                         jne     0x2e3 <_JIT_ENTRY+0x2e3>
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _Py_Dealloc
// 2de: 4c 89 ef                      movq    %r13, %rdi
// 2e1: ff d0                         callq   *%rax
// 2e3: 83 7c 24 04 00                cmpl    $0x0, 0x4(%rsp)
// 2e8: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 2ec: 74 16                         je      0x304 <_JIT_ENTRY+0x304>
// 2ee: 49 29 dc                      subq    %rbx, %r12
// 2f1: 49 83 c4 a0                   addq    $-0x60, %r12
// 2f5: 49 c1 ec 03                   shrq    $0x3, %r12
// 2f9: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2fd: 31 c0                         xorl    %eax, %eax
// 2ff: e9 16 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 304: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000306:  R_X86_64_64  _JIT_CONTINUE
// 30e: 48 89 df                      movq    %rbx, %rdi
// 311: 4c 89 e6                      movq    %r12, %rsi
// 314: 4c 89 fa                      movq    %r15, %rdx
// 317: 48 83 c4 08                   addq    $0x8, %rsp
// 31b: 5b                            popq    %rbx
// 31c: 41 5c                         popq    %r12
// 31e: 41 5d                         popq    %r13
// 320: 41 5e                         popq    %r14
// 322: 41 5f                         popq    %r15
// 324: 5d                            popq    %rbp
// 325: ff e0                         jmpq    *%rax
// 327: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_code_body[808] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x6e, 0xe0, 0x4d, 0x8b, 0x66, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x04, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x66, 0xf8, 0x49, 0x83, 0xc6, 0xe0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x04, 0x00, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x16, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xa0, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x16, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_code_holes[25] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_DICT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 89 01 00 00             jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 70 01 00 00             jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 65 01 00 00             ja      0x1b2 <_JIT_ENTRY+0x1b2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 56 01 00 00             jle     0x1b2 <_JIT_ENTRY+0x1b2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 bc 00 00 00             ja      0x1b2 <_JIT_ENTRY+0x1b2>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 4c 01 ed                      addq    %r13, %rbp
// 167: 48 81 c5 a0 32 01 00          addq    $0x132a0, %rbp          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 197: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 19b: 4d 8b 6e e8                   movq    -0x18(%r14), %r13
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyDict_Type
// 1a9: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1ad: 74 3a                         je      0x1e9 <_JIT_ENTRY+0x1e9>
// 1af: 4d 89 e6                      movq    %r12, %r14
// 1b2: 49 29 de                      subq    %rbx, %r14
// 1b5: 49 83 c6 b8                   addq    $-0x48, %r14
// 1b9: 49 c1 ee 03                   shrq    $0x3, %r14
// 1bd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1c1: 48 8b 03                      movq    (%rbx), %rax
// 1c4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c6:  R_X86_64_64  _JIT_TARGET
// 1ce: 89 c9                         movl    %ecx, %ecx
// 1d0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1da: 48 83 c4 08                   addq    $0x8, %rsp
// 1de: 5b                            popq    %rbx
// 1df: 41 5c                         popq    %r12
// 1e1: 41 5d                         popq    %r13
// 1e3: 41 5e                         popq    %r14
// 1e5: 41 5f                         popq    %r15
// 1e7: 5d                            popq    %rbp
// 1e8: c3                            retq
// 1e9: 49 83 c6 e0                   addq    $-0x20, %r14
// 1ed: 49 8b 16                      movq    (%r14), %rdx
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _PyDict_SetItem_Take2
// 1fa: 4c 89 ef                      movq    %r13, %rdi
// 1fd: 48 89 ee                      movq    %rbp, %rsi
// 200: ff d0                         callq   *%rax
// 202: 89 c5                         movl    %eax, %ebp
// 204: 49 8b 45 00                   movq    (%r13), %rax
// 208: 48 85 c0                      testq   %rax, %rax
// 20b: 7f 22                         jg      0x22f <_JIT_ENTRY+0x22f>
// 20d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020f:  R_X86_64_64  .rodata.str1.1
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_NegativeRefcount
// 221: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// 226: 4c 89 ea                      movq    %r13, %rdx
// 229: ff d0                         callq   *%rax
// 22b: 49 8b 45 00                   movq    (%r13), %rax
// 22f: 85 c0                         testl   %eax, %eax
// 231: 78 21                         js      0x254 <_JIT_ENTRY+0x254>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23d: ff d0                         callq   *%rax
// 23f: 49 ff 4d 00                   decq    (%r13)
// 243: 75 0f                         jne     0x254 <_JIT_ENTRY+0x254>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_Dealloc
// 24f: 4c 89 ef                      movq    %r13, %rdi
// 252: ff d0                         callq   *%rax
// 254: 85 ed                         testl   %ebp, %ebp
// 256: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 25a: 74 16                         je      0x272 <_JIT_ENTRY+0x272>
// 25c: 49 29 dc                      subq    %rbx, %r12
// 25f: 49 83 c4 a0                   addq    $-0x60, %r12
// 263: 49 c1 ec 03                   shrq    $0x3, %r12
// 267: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 26b: 31 c0                         xorl    %eax, %eax
// 26d: e9 68 ff ff ff                jmp     0x1da <_JIT_ENTRY+0x1da>
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _JIT_CONTINUE
// 27c: 48 89 df                      movq    %rbx, %rdi
// 27f: 4c 89 e6                      movq    %r12, %rsi
// 282: 4c 89 fa                      movq    %r15, %rdx
// 285: 48 83 c4 08                   addq    $0x8, %rsp
// 289: 5b                            popq    %rbx
// 28a: 41 5c                         popq    %r12
// 28c: 41 5d                         popq    %r13
// 28e: 41 5e                         popq    %r14
// 290: 41 5f                         popq    %r15
// 292: 5d                            popq    %rbp
// 293: ff e0                         jmpq    *%rax
// 295: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_DICT_code_body[662] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x89, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x70, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x65, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x56, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xbc, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x01, 0xed, 0x48, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x49, 0x89, 0x6e, 0xf0, 0x4d, 0x8b, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc6, 0xe0, 0x49, 0x8b, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x16, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xa0, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x68, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_DICT_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_DICT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_LIST_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 39                         jbe     0x12b <_JIT_ENTRY+0x12b>
// f2: 4c 89 f0                      movq    %r14, %rax
// f5: 48 29 d8                      subq    %rbx, %rax
// f8: 48 83 c0 b8                   addq    $-0x48, %rax
// fc: 48 c1 e8 03                   shrq    $0x3, %rax
// 100: 89 43 40                      movl    %eax, 0x40(%rbx)
// 103: 48 8b 03                      movq    (%rbx), %rax
// 106: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000108:  R_X86_64_64  _JIT_TARGET
// 110: 89 c9                         movl    %ecx, %ecx
// 112: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 116: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11c: 48 83 c4 08                   addq    $0x8, %rsp
// 120: 5b                            popq    %rbx
// 121: 41 5c                         popq    %r12
// 123: 41 5d                         popq    %r13
// 125: 41 5e                         popq    %r14
// 127: 41 5f                         popq    %r15
// 129: 5d                            popq    %rbp
// 12a: c3                            retq
// 12b: 89 c0                         movl    %eax, %eax
// 12d: 48 8d 0c 40                   leaq    (%rax,%rax,2), %rcx
// 131: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 136: 75 34                         jne     0x16c <_JIT_ENTRY+0x16c>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  PyInterpreterState_Get
// 142: 48 89 0c 24                   movq    %rcx, (%rsp)
// 146: ff d0                         callq   *%rax
// 148: 48 8b 0c 24                   movq    (%rsp), %rcx
// 14c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 153: 49 ff 4d 00                   decq    (%r13)
// 157: 75 13                         jne     0x16c <_JIT_ENTRY+0x16c>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  PyObject_Free
// 163: 4c 89 ef                      movq    %r13, %rdi
// 166: ff d0                         callq   *%rax
// 168: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16c: 48 c1 e1 04                   shlq    $0x4, %rcx
// 170: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000172:  R_X86_64_64  _PyRuntime
// 17a: 49 8b 04 24                   movq    (%r12), %rax
// 17e: 48 85 c0                      testq   %rax, %rax
// 181: 7f 32                         jg      0x1b5 <_JIT_ENTRY+0x1b5>
// 183: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000185:  R_X86_64_64  .rodata.str1.1
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_NegativeRefcount
// 197: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 19c: 4c 89 e2                      movq    %r12, %rdx
// 19f: 49 89 cd                      movq    %rcx, %r13
// 1a2: ff d0                         callq   *%rax
// 1a4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a6:  R_X86_64_64  _PyRuntime
// 1ae: 4c 89 e9                      movq    %r13, %rcx
// 1b1: 49 8b 04 24                   movq    (%r12), %rax
// 1b5: 4c 8d 2c 0a                   leaq    (%rdx,%rcx), %r13
// 1b9: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1c0: 85 c0                         testl   %eax, %eax
// 1c2: 78 21                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ce: ff d0                         callq   *%rax
// 1d0: 49 ff 0c 24                   decq    (%r12)
// 1d4: 75 0f                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_Dealloc
// 1e0: 4c 89 e7                      movq    %r12, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 1e9: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1ed: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 1f1: 0f 85 fe fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 1f7: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fd:  R_X86_64_64  PyList_Type
// 205: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 20a: 0f 85 e5 fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 210: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 215: 0f 87 da fe ff ff             ja      0xf5 <_JIT_ENTRY+0xf5>
// 21b: 41 8b 4d 18                   movl    0x18(%r13), %ecx
// 21f: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 224: 0f 8e cb fe ff ff             jle     0xf5 <_JIT_ENTRY+0xf5>
// 22a: 49 8b 46 e0                   movq    -0x20(%r14), %rax
// 22e: 49 8b 54 24 18                movq    0x18(%r12), %rdx
// 233: 48 8b 2c ca                   movq    (%rdx,%rcx,8), %rbp
// 237: 48 89 04 ca                   movq    %rax, (%rdx,%rcx,8)
// 23b: 48 8b 45 00                   movq    (%rbp), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 7f 22                         jg      0x266 <_JIT_ENTRY+0x266>
// 244: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000246:  R_X86_64_64  .rodata.str1.1
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_NegativeRefcount
// 258: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// 25d: 48 89 ea                      movq    %rbp, %rdx
// 260: ff d0                         callq   *%rax
// 262: 48 8b 45 00                   movq    (%rbp), %rax
// 266: 85 c0                         testl   %eax, %eax
// 268: 78 21                         js      0x28b <_JIT_ENTRY+0x28b>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 274: ff d0                         callq   *%rax
// 276: 48 ff 4d 00                   decq    (%rbp)
// 27a: 75 0f                         jne     0x28b <_JIT_ENTRY+0x28b>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_Dealloc
// 286: 48 89 ef                      movq    %rbp, %rdi
// 289: ff d0                         callq   *%rax
// 28b: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 290: 75 28                         jne     0x2ba <_JIT_ENTRY+0x2ba>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  PyInterpreterState_Get
// 29c: ff d0                         callq   *%rax
// 29e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2a5: 49 ff 4d 00                   decq    (%r13)
// 2a9: 75 0f                         jne     0x2ba <_JIT_ENTRY+0x2ba>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  PyObject_Free
// 2b5: 4c 89 ef                      movq    %r13, %rdi
// 2b8: ff d0                         callq   *%rax
// 2ba: 49 8b 04 24                   movq    (%r12), %rax
// 2be: 48 85 c0                      testq   %rax, %rax
// 2c1: 7f 22                         jg      0x2e5 <_JIT_ENTRY+0x2e5>
// 2c3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c5:  R_X86_64_64  .rodata.str1.1
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_NegativeRefcount
// 2d7: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 2dc: 4c 89 e2                      movq    %r12, %rdx
// 2df: ff d0                         callq   *%rax
// 2e1: 49 8b 04 24                   movq    (%r12), %rax
// 2e5: 49 83 c6 e0                   addq    $-0x20, %r14
// 2e9: 85 c0                         testl   %eax, %eax
// 2eb: 78 21                         js      0x30e <_JIT_ENTRY+0x30e>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f7: ff d0                         callq   *%rax
// 2f9: 49 ff 0c 24                   decq    (%r12)
// 2fd: 75 0f                         jne     0x30e <_JIT_ENTRY+0x30e>
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_Dealloc
// 309: 4c 89 e7                      movq    %r12, %rdi
// 30c: ff d0                         callq   *%rax
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _JIT_CONTINUE
// 318: 48 89 df                      movq    %rbx, %rdi
// 31b: 4c 89 f6                      movq    %r14, %rsi
// 31e: 4c 89 fa                      movq    %r15, %rdx
// 321: 48 83 c4 08                   addq    $0x8, %rsp
// 325: 5b                            popq    %rbx
// 326: 41 5c                         popq    %r12
// 328: 41 5d                         popq    %r13
// 32a: 41 5e                         popq    %r14
// 32c: 41 5f                         popq    %r15
// 32e: 5d                            popq    %rbp
// 32f: ff e0                         jmpq    *%rax
// 331: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_LIST_INT_code_body[818] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x6d, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x0c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x32, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x2c, 0x0a, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x39, 0x6d, 0x08, 0x0f, 0x85, 0xfe, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x66, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xe5, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xda, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x4d, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0xcb, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x46, 0xe0, 0x49, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xca, 0x48, 0x89, 0x04, 0xca, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc6, 0xe0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_LIST_INT_code_holes[24] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_SWAP
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_SWAP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// ed: 83 fd 7f                      cmpl    $0x7f, %ebp
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 75 28                         jne     0x158 <_JIT_ENTRY+0x158>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyInterpreterState_Get
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 143: 49 ff 4d 00                   decq    (%r13)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyObject_Free
// 153: 4c 89 ef                      movq    %r13, %rdi
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f 22                         jg      0x183 <_JIT_ENTRY+0x183>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 17a: 4c 89 e2                      movq    %r12, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 187: 85 c0                         testl   %eax, %eax
// 189: 78 21                         js      0x1ac <_JIT_ENTRY+0x1ac>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 195: ff d0                         callq   *%rax
// 197: 49 ff 0c 24                   decq    (%r12)
// 19b: 75 0f                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 4c 89 e7                      movq    %r12, %rdi
// 1aa: ff d0                         callq   *%rax
// 1ac: 89 e8                         movl    %ebp, %eax
// 1ae: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 1b2: 48 c1 e0 04                   shlq    $0x4, %rax
// 1b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b8:  R_X86_64_64  _PyRuntime
// 1c0: 48 01 c8                      addq    %rcx, %rax
// 1c3: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 1c9: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 1cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: 0f b7 c9                      movzwl  %cx, %ecx
// 1da: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1de: 4c 89 f2                      movq    %r14, %rdx
// 1e1: 48 29 ca                      subq    %rcx, %rdx
// 1e4: 48 f7 d9                      negq    %rcx
// 1e7: 48 8b 52 f8                   movq    -0x8(%rdx), %rdx
// 1eb: 49 89 44 0e f8                movq    %rax, -0x8(%r14,%rcx)
// 1f0: 49 89 56 f0                   movq    %rdx, -0x10(%r14)
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _JIT_CONTINUE
// 1fe: 48 89 df                      movq    %rbx, %rdi
// 201: 4c 89 ee                      movq    %r13, %rsi
// 204: 4c 89 fa                      movq    %r15, %rdx
// 207: 48 83 c4 08                   addq    $0x8, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: ff e0                         jmpq    *%rax
// 217: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SWAP_code_body[536] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x49, 0x89, 0x46, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf2, 0x48, 0x29, 0xca, 0x48, 0xf7, 0xd9, 0x48, 0x8b, 0x52, 0xf8, 0x49, 0x89, 0x44, 0x0e, 0xf8, 0x49, 0x89, 0x56, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_SWAP_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_SWAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_SWAP_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_TO_BOOL
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_TO_BOOL.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 8d 4e f0                   leaq    -0x10(%r14), %rcx
// 19b: 48 89 0c 24                   movq    %rcx, (%rsp)
// 19f: 49 01 ed                      addq    %rbp, %r13
// 1a2: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 78 17                         js      0x1ce <_JIT_ENTRY+0x1ce>
// 1b7: ff d1                         callq   *%rcx
// 1b9: 49 ff 0c 24                   decq    (%r12)
// 1bd: 75 0f                         jne     0x1ce <_JIT_ENTRY+0x1ce>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_Dealloc
// 1c9: 4c 89 e7                      movq    %r12, %rdi
// 1cc: ff d0                         callq   *%rax
// 1ce: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1d2: 4c 89 6d 00                   movq    %r13, (%rbp)
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  PyObject_IsTrue
// 1e0: 4c 89 ef                      movq    %r13, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 41 89 c4                      movl    %eax, %r12d
// 1e8: 49 8b 45 00                   movq    (%r13), %rax
// 1ec: 48 85 c0                      testq   %rax, %rax
// 1ef: 7f 22                         jg      0x213 <_JIT_ENTRY+0x213>
// 1f1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f3:  R_X86_64_64  .rodata.str1.1
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_NegativeRefcount
// 205: be 86 00 00 00                movl    $0x86, %esi
// 20a: 4c 89 ea                      movq    %r13, %rdx
// 20d: ff d0                         callq   *%rax
// 20f: 49 8b 45 00                   movq    (%r13), %rax
// 213: 85 c0                         testl   %eax, %eax
// 215: 78 21                         js      0x238 <_JIT_ENTRY+0x238>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 221: ff d0                         callq   *%rax
// 223: 49 ff 4d 00                   decq    (%r13)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 4c 89 ef                      movq    %r13, %rdi
// 236: ff d0                         callq   *%rax
// 238: 49 83 c6 f8                   addq    $-0x8, %r14
// 23c: 45 85 e4                      testl   %r12d, %r12d
// 23f: 78 3f                         js      0x280 <_JIT_ENTRY+0x280>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_FalseStruct
// 24b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024d:  R_X86_64_64  _Py_TrueStruct
// 255: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 259: 48 89 4d 00                   movq    %rcx, (%rbp)
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _JIT_CONTINUE
// 267: 48 89 df                      movq    %rbx, %rdi
// 26a: 4c 89 f6                      movq    %r14, %rsi
// 26d: 4c 89 fa                      movq    %r15, %rdx
// 270: 48 83 c4 08                   addq    $0x8, %rsp
// 274: 5b                            popq    %rbx
// 275: 41 5c                         popq    %r12
// 277: 41 5d                         popq    %r13
// 279: 41 5e                         popq    %r14
// 27b: 41 5f                         popq    %r15
// 27d: 5d                            popq    %rbp
// 27e: ff e0                         jmpq    *%rax
// 280: 48 29 dd                      subq    %rbx, %rbp
// 283: 48 83 c5 b8                   addq    $-0x48, %rbp
// 287: 48 c1 ed 03                   shrq    $0x3, %rbp
// 28b: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 28e: 31 c0                         xorl    %eax, %eax
// 290: e9 85 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 295: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_code_body[662] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x4e, 0xf0, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf8, 0x45, 0x85, 0xe4, 0x78, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x85, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_TO_BOOL_ALWAYS_TRUE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 10 02 00 00             jne     0x239 <_JIT_ENTRY+0x239>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 f7 01 00 00             jne     0x239 <_JIT_ENTRY+0x239>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 ec 01 00 00             ja      0x239 <_JIT_ENTRY+0x239>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e dd 01 00 00             jle     0x239 <_JIT_ENTRY+0x239>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 43 01 00 00             ja      0x239 <_JIT_ENTRY+0x239>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 197: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19b: 49 8b 45 08                   movq    0x8(%r13), %rax
// 19f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a1:  R_X86_64_64  _JIT_OPERAND
// 1a9: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 1af: 0f 85 81 00 00 00             jne     0x236 <_JIT_ENTRY+0x236>
// 1b5: 49 8b 45 00                   movq    (%r13), %rax
// 1b9: 48 85 c0                      testq   %rax, %rax
// 1bc: 7f 22                         jg      0x1e0 <_JIT_ENTRY+0x1e0>
// 1be: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c0:  R_X86_64_64  .rodata.str1.1
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_NegativeRefcount
// 1d2: be db 00 00 00                movl    $0xdb, %esi
// 1d7: 4c 89 ea                      movq    %r13, %rdx
// 1da: ff d0                         callq   *%rax
// 1dc: 49 8b 45 00                   movq    (%r13), %rax
// 1e0: 85 c0                         testl   %eax, %eax
// 1e2: 78 21                         js      0x205 <_JIT_ENTRY+0x205>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ee: ff d0                         callq   *%rax
// 1f0: 49 ff 4d 00                   decq    (%r13)
// 1f4: 75 0f                         jne     0x205 <_JIT_ENTRY+0x205>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_Dealloc
// 200: 4c 89 ef                      movq    %r13, %rdi
// 203: ff d0                         callq   *%rax
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_TrueStruct
// 20f: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_CONTINUE
// 21d: 48 89 df                      movq    %rbx, %rdi
// 220: 4c 89 e6                      movq    %r12, %rsi
// 223: 4c 89 fa                      movq    %r15, %rdx
// 226: 48 83 c4 08                   addq    $0x8, %rsp
// 22a: 5b                            popq    %rbx
// 22b: 41 5c                         popq    %r12
// 22d: 41 5d                         popq    %r13
// 22f: 41 5e                         popq    %r14
// 231: 41 5f                         popq    %r15
// 233: 5d                            popq    %rbp
// 234: ff e0                         jmpq    *%rax
// 236: 4d 89 e6                      movq    %r12, %r14
// 239: 49 29 de                      subq    %rbx, %r14
// 23c: 49 83 c6 b8                   addq    $-0x48, %r14
// 240: 49 c1 ee 03                   shrq    $0x3, %r14
// 244: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 248: 48 8b 03                      movq    (%rbx), %rax
// 24b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024d:  R_X86_64_64  _JIT_TARGET
// 255: 89 c9                         movl    %ecx, %ecx
// 257: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 261: 48 83 c4 08                   addq    $0x8, %rsp
// 265: 5b                            popq    %rbx
// 266: 41 5c                         popq    %r12
// 268: 41 5d                         popq    %r13
// 26a: 41 5e                         popq    %r14
// 26c: 41 5f                         popq    %r15
// 26e: 5d                            popq    %rbp
// 26f: c3                            retq
// 270: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_ALWAYS_TRUE_code_body[625] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x10, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf7, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xec, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xdd, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x43, 0x01, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x0f, 0x85, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x46, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_ALWAYS_TRUE_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_ALWAYS_TRUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_TO_BOOL_BOOL
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_TO_BOOL_BOOL.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 82 01 00 00             jne     0x1ab <_JIT_ENTRY+0x1ab>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 69 01 00 00             jne     0x1ab <_JIT_ENTRY+0x1ab>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 5e 01 00 00             ja      0x1ab <_JIT_ENTRY+0x1ab>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 4f 01 00 00             jle     0x1ab <_JIT_ENTRY+0x1ab>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 b5 00 00 00             ja      0x1ab <_JIT_ENTRY+0x1ab>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 197: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  PyBool_Type
// 1a5: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1a9: 74 37                         je      0x1e2 <_JIT_ENTRY+0x1e2>
// 1ab: 4c 29 f3                      subq    %r14, %rbx
// 1ae: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b2: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1ba: 49 8b 06                      movq    (%r14), %rax
// 1bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bf:  R_X86_64_64  _JIT_TARGET
// 1c7: 89 c9                         movl    %ecx, %ecx
// 1c9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1cd: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d3: 48 83 c4 08                   addq    $0x8, %rsp
// 1d7: 5b                            popq    %rbx
// 1d8: 41 5c                         popq    %r12
// 1da: 41 5d                         popq    %r13
// 1dc: 41 5e                         popq    %r14
// 1de: 41 5f                         popq    %r15
// 1e0: 5d                            popq    %rbp
// 1e1: c3                            retq
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_CONTINUE
// 1ec: 4c 89 f7                      movq    %r14, %rdi
// 1ef: 48 89 de                      movq    %rbx, %rsi
// 1f2: 4c 89 fa                      movq    %r15, %rdx
// 1f5: 48 83 c4 08                   addq    $0x8, %rsp
// 1f9: 5b                            popq    %rbx
// 1fa: 41 5c                         popq    %r12
// 1fc: 41 5d                         popq    %r13
// 1fe: 41 5e                         popq    %r14
// 200: 41 5f                         popq    %r15
// 202: 5d                            popq    %rbp
// 203: ff e0                         jmpq    *%rax
// 205: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_BOOL_code_body[518] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x69, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x5e, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x4f, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xb5, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_BOOL_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_BOOL_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_TO_BOOL_INT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_TO_BOOL_INT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 23: 0f 85 98 01 00 00             jne     0x1c1 <_JIT_ENTRY+0x1c1>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 7f 01 00 00             jne     0x1c1 <_JIT_ENTRY+0x1c1>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 74 01 00 00             ja      0x1c1 <_JIT_ENTRY+0x1c1>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 65 01 00 00             jle     0x1c1 <_JIT_ENTRY+0x1c1>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 cb 00 00 00             ja      0x1c1 <_JIT_ENTRY+0x1c1>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 0c 40                   leaq    (%rax,%rax,2), %rcx
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 34                         jne     0x137 <_JIT_ENTRY+0x137>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: 48 89 0c 24                   movq    %rcx, (%rsp)
// 111: ff d0                         callq   *%rax
// 113: 48 8b 0c 24                   movq    (%rsp), %rcx
// 117: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 11e: 49 ff 4d 00                   decq    (%r13)
// 122: 75 13                         jne     0x137 <_JIT_ENTRY+0x137>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  PyObject_Free
// 12e: 4c 89 ef                      movq    %r13, %rdi
// 131: ff d0                         callq   *%rax
// 133: 48 8b 0c 24                   movq    (%rsp), %rcx
// 137: 48 c1 e1 04                   shlq    $0x4, %rcx
// 13b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013d:  R_X86_64_64  _PyRuntime
// 145: 49 8b 04 24                   movq    (%r12), %rax
// 149: 48 85 c0                      testq   %rax, %rax
// 14c: 7f 32                         jg      0x180 <_JIT_ENTRY+0x180>
// 14e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000150:  R_X86_64_64  .rodata.str1.1
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_NegativeRefcount
// 162: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 167: 4c 89 e2                      movq    %r12, %rdx
// 16a: 49 89 cd                      movq    %rcx, %r13
// 16d: ff d0                         callq   *%rax
// 16f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000171:  R_X86_64_64  _PyRuntime
// 179: 4c 89 e9                      movq    %r13, %rcx
// 17c: 49 8b 04 24                   movq    (%r12), %rax
// 180: 4c 8d 2c 0a                   leaq    (%rdx,%rcx), %r13
// 184: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 18b: 85 c0                         testl   %eax, %eax
// 18d: 78 21                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 199: ff d0                         callq   *%rax
// 19b: 49 ff 0c 24                   decq    (%r12)
// 19f: 75 0f                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_Dealloc
// 1ab: 4c 89 e7                      movq    %r12, %rdi
// 1ae: ff d0                         callq   *%rax
// 1b0: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1b4: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1b8: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 1bc: 74 3a                         je      0x1f8 <_JIT_ENTRY+0x1f8>
// 1be: 4d 89 e6                      movq    %r12, %r14
// 1c1: 49 29 de                      subq    %rbx, %r14
// 1c4: 49 83 c6 b8                   addq    $-0x48, %r14
// 1c8: 49 c1 ee 03                   shrq    $0x3, %r14
// 1cc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1d0: 48 8b 03                      movq    (%rbx), %rax
// 1d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d5:  R_X86_64_64  _JIT_TARGET
// 1dd: 89 c9                         movl    %ecx, %ecx
// 1df: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e9: 48 83 c4 08                   addq    $0x8, %rsp
// 1ed: 5b                            popq    %rbx
// 1ee: 41 5c                         popq    %r12
// 1f0: 41 5d                         popq    %r13
// 1f2: 41 5e                         popq    %r14
// 1f4: 41 5f                         popq    %r15
// 1f6: 5d                            popq    %rbp
// 1f7: c3                            retq
// 1f8: 41 8b 45 10                   movl    0x10(%r13), %eax
// 1fc: 83 e0 03                      andl    $0x3, %eax
// 1ff: 83 f8 01                      cmpl    $0x1, %eax
// 202: 75 0c                         jne     0x210 <_JIT_ENTRY+0x210>
// 204: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000206:  R_X86_64_64  _Py_FalseStruct
// 20e: eb 5a                         jmp     0x26a <_JIT_ENTRY+0x26a>
// 210: 49 8b 45 00                   movq    (%r13), %rax
// 214: 48 85 c0                      testq   %rax, %rax
// 217: 7f 22                         jg      0x23b <_JIT_ENTRY+0x23b>
// 219: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021b:  R_X86_64_64  .rodata.str1.1
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_NegativeRefcount
// 22d: be a0 00 00 00                movl    $0xa0, %esi
// 232: 4c 89 ea                      movq    %r13, %rdx
// 235: ff d0                         callq   *%rax
// 237: 49 8b 45 00                   movq    (%r13), %rax
// 23b: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000023d:  R_X86_64_64  _Py_TrueStruct
// 245: 85 c0                         testl   %eax, %eax
// 247: 78 21                         js      0x26a <_JIT_ENTRY+0x26a>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 253: ff d0                         callq   *%rax
// 255: 49 ff 4d 00                   decq    (%r13)
// 259: 75 0f                         jne     0x26a <_JIT_ENTRY+0x26a>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: 4c 89 ef                      movq    %r13, %rdi
// 268: ff d0                         callq   *%rax
// 26a: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _JIT_CONTINUE
// 278: 48 89 df                      movq    %rbx, %rdi
// 27b: 4c 89 e6                      movq    %r12, %rsi
// 27e: 4c 89 fa                      movq    %r15, %rdx
// 281: 48 83 c4 08                   addq    $0x8, %rsp
// 285: 5b                            popq    %rbx
// 286: 41 5c                         popq    %r12
// 288: 41 5d                         popq    %r13
// 28a: 41 5e                         popq    %r14
// 28c: 41 5f                         popq    %r15
// 28e: 5d                            popq    %rbp
// 28f: ff e0                         jmpq    *%rax
// 291: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_INT_code_body[658] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x6d, 0x08, 0x0f, 0x85, 0x98, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x7f, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x74, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x65, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xcb, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x0c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x32, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x49, 0x89, 0xcd, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x2c, 0x0a, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x39, 0x6d, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x8b, 0x45, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x75, 0x0c, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x5a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_INT_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_INT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_TO_BOOL_LIST
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_TO_BOOL_LIST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 85 01 00 00             jne     0x1ae <_JIT_ENTRY+0x1ae>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 6c 01 00 00             jne     0x1ae <_JIT_ENTRY+0x1ae>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 61 01 00 00             ja      0x1ae <_JIT_ENTRY+0x1ae>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 52 01 00 00             jle     0x1ae <_JIT_ENTRY+0x1ae>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 b8 00 00 00             ja      0x1ae <_JIT_ENTRY+0x1ae>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 197: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  PyList_Type
// 1a5: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1a9: 74 3a                         je      0x1e5 <_JIT_ENTRY+0x1e5>
// 1ab: 4d 89 e6                      movq    %r12, %r14
// 1ae: 49 29 de                      subq    %rbx, %r14
// 1b1: 49 83 c6 b8                   addq    $-0x48, %r14
// 1b5: 49 c1 ee 03                   shrq    $0x3, %r14
// 1b9: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1bd: 48 8b 03                      movq    (%rbx), %rax
// 1c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c2:  R_X86_64_64  _JIT_TARGET
// 1ca: 89 c9                         movl    %ecx, %ecx
// 1cc: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d6: 48 83 c4 08                   addq    $0x8, %rsp
// 1da: 5b                            popq    %rbx
// 1db: 41 5c                         popq    %r12
// 1dd: 41 5d                         popq    %r13
// 1df: 41 5e                         popq    %r14
// 1e1: 41 5f                         popq    %r15
// 1e3: 5d                            popq    %rbp
// 1e4: c3                            retq
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 49 8b 6d 10                   movq    0x10(%r13), %rbp
// 1ed: 48 85 c0                      testq   %rax, %rax
// 1f0: 7f 22                         jg      0x214 <_JIT_ENTRY+0x214>
// 1f2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f4:  R_X86_64_64  .rodata.str1.1
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_NegativeRefcount
// 206: be ae 00 00 00                movl    $0xae, %esi
// 20b: 4c 89 ea                      movq    %r13, %rdx
// 20e: ff d0                         callq   *%rax
// 210: 49 8b 45 00                   movq    (%r13), %rax
// 214: 85 c0                         testl   %eax, %eax
// 216: 78 21                         js      0x239 <_JIT_ENTRY+0x239>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 222: ff d0                         callq   *%rax
// 224: 49 ff 4d 00                   decq    (%r13)
// 228: 75 0f                         jne     0x239 <_JIT_ENTRY+0x239>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_Dealloc
// 234: 4c 89 ef                      movq    %r13, %rdi
// 237: ff d0                         callq   *%rax
// 239: 48 85 ed                      testq   %rbp, %rbp
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_FalseStruct
// 246: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000248:  R_X86_64_64  _Py_TrueStruct
// 250: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 254: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _JIT_CONTINUE
// 262: 48 89 df                      movq    %rbx, %rdi
// 265: 4c 89 e6                      movq    %r12, %rsi
// 268: 4c 89 fa                      movq    %r15, %rdx
// 26b: 48 83 c4 08                   addq    $0x8, %rsp
// 26f: 5b                            popq    %rbx
// 270: 41 5c                         popq    %r12
// 272: 41 5d                         popq    %r13
// 274: 41 5e                         popq    %r14
// 276: 41 5f                         popq    %r15
// 278: 5d                            popq    %rbp
// 279: ff e0                         jmpq    *%rax
// 27b: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_LIST_code_body[636] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x85, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x6c, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x61, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x52, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xb8, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8b, 0x6d, 0x10, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_LIST_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_LIST_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_TO_BOOL_NONE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_TO_BOOL_NONE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 84 01 00 00             jne     0x1ad <_JIT_ENTRY+0x1ad>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 6b 01 00 00             jne     0x1ad <_JIT_ENTRY+0x1ad>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 60 01 00 00             ja      0x1ad <_JIT_ENTRY+0x1ad>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 51 01 00 00             jle     0x1ad <_JIT_ENTRY+0x1ad>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 b7 00 00 00             ja      0x1ad <_JIT_ENTRY+0x1ad>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 197: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _Py_NoneStruct
// 1a5: 49 39 c5                      cmpq    %rax, %r13
// 1a8: 74 3a                         je      0x1e4 <_JIT_ENTRY+0x1e4>
// 1aa: 49 89 f6                      movq    %rsi, %r14
// 1ad: 49 29 de                      subq    %rbx, %r14
// 1b0: 49 83 c6 b8                   addq    $-0x48, %r14
// 1b4: 49 c1 ee 03                   shrq    $0x3, %r14
// 1b8: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1bc: 48 8b 03                      movq    (%rbx), %rax
// 1bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c1:  R_X86_64_64  _JIT_TARGET
// 1c9: 89 c9                         movl    %ecx, %ecx
// 1cb: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1cf: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d5: 48 83 c4 08                   addq    $0x8, %rsp
// 1d9: 5b                            popq    %rbx
// 1da: 41 5c                         popq    %r12
// 1dc: 41 5d                         popq    %r13
// 1de: 41 5e                         popq    %r14
// 1e0: 41 5f                         popq    %r15
// 1e2: 5d                            popq    %rbp
// 1e3: c3                            retq
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_FalseStruct
// 1ee: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _JIT_CONTINUE
// 1fc: 48 89 df                      movq    %rbx, %rdi
// 1ff: 4c 89 fa                      movq    %r15, %rdx
// 202: 48 83 c4 08                   addq    $0x8, %rsp
// 206: 5b                            popq    %rbx
// 207: 41 5c                         popq    %r12
// 209: 41 5d                         popq    %r13
// 20b: 41 5e                         popq    %r14
// 20d: 41 5f                         popq    %r15
// 20f: 5d                            popq    %rbp
// 210: ff e0                         jmpq    *%rax
// 212: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_NONE_code_body[531] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x84, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x6b, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x60, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x51, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xb7, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc5, 0x74, 0x3a, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x46, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_NONE_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_NONE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_TO_BOOL_STR
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_TO_BOOL_STR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 8f 01 00 00             jne     0x1b8 <_JIT_ENTRY+0x1b8>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 6c 24 08                cmpq    %rbp, 0x8(%r12)
// 3c: 0f 85 76 01 00 00             jne     0x1b8 <_JIT_ENTRY+0x1b8>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 6b 01 00 00             ja      0x1b8 <_JIT_ENTRY+0x1b8>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 5c 01 00 00             jle     0x1b8 <_JIT_ENTRY+0x1b8>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 c2 00 00 00             ja      0x1b8 <_JIT_ENTRY+0x1b8>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 0c 40                   leaq    (%rax,%rax,2), %rcx
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 34                         jne     0x137 <_JIT_ENTRY+0x137>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: 48 89 0c 24                   movq    %rcx, (%rsp)
// 111: ff d0                         callq   *%rax
// 113: 48 8b 0c 24                   movq    (%rsp), %rcx
// 117: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 11e: 49 ff 4d 00                   decq    (%r13)
// 122: 75 13                         jne     0x137 <_JIT_ENTRY+0x137>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  PyObject_Free
// 12e: 4c 89 ef                      movq    %r13, %rdi
// 131: ff d0                         callq   *%rax
// 133: 48 8b 0c 24                   movq    (%rsp), %rcx
// 137: 48 c1 e1 04                   shlq    $0x4, %rcx
// 13b: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000013d:  R_X86_64_64  _PyRuntime
// 145: 49 8b 04 24                   movq    (%r12), %rax
// 149: 48 85 c0                      testq   %rax, %rax
// 14c: 7f 2a                         jg      0x178 <_JIT_ENTRY+0x178>
// 14e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000150:  R_X86_64_64  .rodata.str1.1
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_NegativeRefcount
// 162: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 167: 4c 89 e2                      movq    %r12, %rdx
// 16a: 48 89 0c 24                   movq    %rcx, (%rsp)
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 49 8b 04 24                   movq    (%r12), %rax
// 178: 49 01 cd                      addq    %rcx, %r13
// 17b: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 182: 85 c0                         testl   %eax, %eax
// 184: 78 21                         js      0x1a7 <_JIT_ENTRY+0x1a7>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 190: ff d0                         callq   *%rax
// 192: 49 ff 0c 24                   decq    (%r12)
// 196: 75 0f                         jne     0x1a7 <_JIT_ENTRY+0x1a7>
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _Py_Dealloc
// 1a2: 4c 89 e7                      movq    %r12, %rdi
// 1a5: ff d0                         callq   *%rax
// 1a7: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1ab: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1af: 49 39 6d 08                   cmpq    %rbp, 0x8(%r13)
// 1b3: 74 3a                         je      0x1ef <_JIT_ENTRY+0x1ef>
// 1b5: 4d 89 e6                      movq    %r12, %r14
// 1b8: 49 29 de                      subq    %rbx, %r14
// 1bb: 49 83 c6 b8                   addq    $-0x48, %r14
// 1bf: 49 c1 ee 03                   shrq    $0x3, %r14
// 1c3: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1c7: 48 8b 03                      movq    (%rbx), %rax
// 1ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cc:  R_X86_64_64  _JIT_TARGET
// 1d4: 89 c9                         movl    %ecx, %ecx
// 1d6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1da: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e0: 48 83 c4 08                   addq    $0x8, %rsp
// 1e4: 5b                            popq    %rbx
// 1e5: 41 5c                         popq    %r12
// 1e7: 41 5d                         popq    %r13
// 1e9: 41 5e                         popq    %r14
// 1eb: 41 5f                         popq    %r15
// 1ed: 5d                            popq    %rbp
// 1ee: c3                            retq
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _PyRuntime
// 1f9: 48 05 00 a1 00 00             addq    $0xa100, %rax           # imm = 0xA100
// 1ff: 49 39 c5                      cmpq    %rax, %r13
// 202: 74 5c                         je      0x260 <_JIT_ENTRY+0x260>
// 204: 49 8b 45 00                   movq    (%r13), %rax
// 208: 48 85 c0                      testq   %rax, %rax
// 20b: 7f 22                         jg      0x22f <_JIT_ENTRY+0x22f>
// 20d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020f:  R_X86_64_64  .rodata.str1.1
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_NegativeRefcount
// 221: be cb 00 00 00                movl    $0xcb, %esi
// 226: 4c 89 ea                      movq    %r13, %rdx
// 229: ff d0                         callq   *%rax
// 22b: 49 8b 45 00                   movq    (%r13), %rax
// 22f: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000231:  R_X86_64_64  _Py_TrueStruct
// 239: 85 c0                         testl   %eax, %eax
// 23b: 78 2d                         js      0x26a <_JIT_ENTRY+0x26a>
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 247: ff d0                         callq   *%rax
// 249: 49 ff 4d 00                   decq    (%r13)
// 24d: 75 1b                         jne     0x26a <_JIT_ENTRY+0x26a>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_Dealloc
// 259: 4c 89 ef                      movq    %r13, %rdi
// 25c: ff d0                         callq   *%rax
// 25e: eb 0a                         jmp     0x26a <_JIT_ENTRY+0x26a>
// 260: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000262:  R_X86_64_64  _Py_FalseStruct
// 26a: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _JIT_CONTINUE
// 278: 48 89 df                      movq    %rbx, %rdi
// 27b: 4c 89 e6                      movq    %r12, %rsi
// 27e: 4c 89 fa                      movq    %r15, %rdx
// 281: 48 83 c4 08                   addq    $0x8, %rsp
// 285: 5b                            popq    %rbx
// 286: 41 5c                         popq    %r12
// 288: 41 5d                         popq    %r13
// 28a: 41 5e                         popq    %r14
// 28c: 41 5f                         popq    %r15
// 28e: 5d                            popq    %rbp
// 28f: ff e0                         jmpq    *%rax
// 291: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_STR_code_body[658] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x8f, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x6c, 0x24, 0x08, 0x0f, 0x85, 0x76, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x6b, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x5c, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0xc2, 0x00, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x0c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xc1, 0xe1, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0x89, 0x0c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xcd, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x49, 0x39, 0x6d, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x05, 0x00, 0xa1, 0x00, 0x00, 0x49, 0x39, 0xc5, 0x74, 0x5c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x0a, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_STR_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_TO_BOOL_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_TO_BOOL_STR_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_UNARY_INVERT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_UNARY_INVERT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 8d 4e f0                   leaq    -0x10(%r14), %rcx
// 19b: 48 89 0c 24                   movq    %rcx, (%rsp)
// 19f: 49 01 ed                      addq    %rbp, %r13
// 1a2: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 78 17                         js      0x1ce <_JIT_ENTRY+0x1ce>
// 1b7: ff d1                         callq   *%rcx
// 1b9: 49 ff 0c 24                   decq    (%r12)
// 1bd: 75 0f                         jne     0x1ce <_JIT_ENTRY+0x1ce>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_Dealloc
// 1c9: 4c 89 e7                      movq    %r12, %rdi
// 1cc: ff d0                         callq   *%rax
// 1ce: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1d2: 4c 89 6d 00                   movq    %r13, (%rbp)
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  PyNumber_Invert
// 1e0: 4c 89 ef                      movq    %r13, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 49 89 c4                      movq    %rax, %r12
// 1e8: 49 8b 45 00                   movq    (%r13), %rax
// 1ec: 48 85 c0                      testq   %rax, %rax
// 1ef: 7f 22                         jg      0x213 <_JIT_ENTRY+0x213>
// 1f1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f3:  R_X86_64_64  .rodata.str1.1
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_NegativeRefcount
// 205: be e6 00 00 00                movl    $0xe6, %esi
// 20a: 4c 89 ea                      movq    %r13, %rdx
// 20d: ff d0                         callq   *%rax
// 20f: 49 8b 45 00                   movq    (%r13), %rax
// 213: 85 c0                         testl   %eax, %eax
// 215: 78 21                         js      0x238 <_JIT_ENTRY+0x238>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 221: ff d0                         callq   *%rax
// 223: 49 ff 4d 00                   decq    (%r13)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 4c 89 ef                      movq    %r13, %rdi
// 236: ff d0                         callq   *%rax
// 238: 4d 85 e4                      testq   %r12, %r12
// 23b: 74 2b                         je      0x268 <_JIT_ENTRY+0x268>
// 23d: 49 83 c6 f8                   addq    $-0x8, %r14
// 241: 4c 89 65 00                   movq    %r12, (%rbp)
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_CONTINUE
// 24f: 48 89 df                      movq    %rbx, %rdi
// 252: 4c 89 f6                      movq    %r14, %rsi
// 255: 4c 89 fa                      movq    %r15, %rdx
// 258: 48 83 c4 08                   addq    $0x8, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: ff e0                         jmpq    *%rax
// 268: 48 29 dd                      subq    %rbx, %rbp
// 26b: 48 83 c5 b8                   addq    $-0x48, %rbp
// 26f: 48 c1 ed 03                   shrq    $0x3, %rbp
// 273: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 276: 31 c0                         xorl    %eax, %eax
// 278: e9 9d fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 27d: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNARY_INVERT_code_body[638] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x4e, 0xf0, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x2b, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x9d, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNARY_INVERT_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNARY_INVERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNARY_INVERT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_UNARY_NEGATIVE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_UNARY_NEGATIVE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 8d 4e f0                   leaq    -0x10(%r14), %rcx
// 19b: 48 89 0c 24                   movq    %rcx, (%rsp)
// 19f: 49 01 ed                      addq    %rbp, %r13
// 1a2: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 78 17                         js      0x1ce <_JIT_ENTRY+0x1ce>
// 1b7: ff d1                         callq   *%rcx
// 1b9: 49 ff 0c 24                   decq    (%r12)
// 1bd: 75 0f                         jne     0x1ce <_JIT_ENTRY+0x1ce>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_Dealloc
// 1c9: 4c 89 e7                      movq    %r12, %rdi
// 1cc: ff d0                         callq   *%rax
// 1ce: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1d2: 4c 89 6d 00                   movq    %r13, (%rbp)
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  PyNumber_Negative
// 1e0: 4c 89 ef                      movq    %r13, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 49 89 c4                      movq    %rax, %r12
// 1e8: 49 8b 45 00                   movq    (%r13), %rax
// 1ec: 48 85 c0                      testq   %rax, %rax
// 1ef: 7f 22                         jg      0x213 <_JIT_ENTRY+0x213>
// 1f1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f3:  R_X86_64_64  .rodata.str1.1
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_NegativeRefcount
// 205: be 71 00 00 00                movl    $0x71, %esi
// 20a: 4c 89 ea                      movq    %r13, %rdx
// 20d: ff d0                         callq   *%rax
// 20f: 49 8b 45 00                   movq    (%r13), %rax
// 213: 85 c0                         testl   %eax, %eax
// 215: 78 21                         js      0x238 <_JIT_ENTRY+0x238>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 221: ff d0                         callq   *%rax
// 223: 49 ff 4d 00                   decq    (%r13)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 4c 89 ef                      movq    %r13, %rdi
// 236: ff d0                         callq   *%rax
// 238: 4d 85 e4                      testq   %r12, %r12
// 23b: 74 2b                         je      0x268 <_JIT_ENTRY+0x268>
// 23d: 49 83 c6 f8                   addq    $-0x8, %r14
// 241: 4c 89 65 00                   movq    %r12, (%rbp)
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_CONTINUE
// 24f: 48 89 df                      movq    %rbx, %rdi
// 252: 4c 89 f6                      movq    %r14, %rsi
// 255: 4c 89 fa                      movq    %r15, %rdx
// 258: 48 83 c4 08                   addq    $0x8, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: ff e0                         jmpq    *%rax
// 268: 48 29 dd                      subq    %rbx, %rbp
// 26b: 48 83 c5 b8                   addq    $-0x48, %rbp
// 26f: 48 c1 ed 03                   shrq    $0x3, %rbp
// 273: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 276: 31 c0                         xorl    %eax, %eax
// 278: e9 9d fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 27d: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNARY_NEGATIVE_code_body[638] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x4e, 0xf0, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x2b, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x9d, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNARY_NEGATIVE_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNARY_NEGATIVE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNARY_NEGATIVE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_UNARY_NOT
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_UNARY_NOT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// ed: 83 fd 7f                      cmpl    $0x7f, %ebp
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 75 28                         jne     0x158 <_JIT_ENTRY+0x158>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyInterpreterState_Get
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 143: 49 ff 4d 00                   decq    (%r13)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyObject_Free
// 153: 4c 89 ef                      movq    %r13, %rdi
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f 22                         jg      0x183 <_JIT_ENTRY+0x183>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 17a: 4c 89 e2                      movq    %r12, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 187: 85 c0                         testl   %eax, %eax
// 189: 78 21                         js      0x1ac <_JIT_ENTRY+0x1ac>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 195: ff d0                         callq   *%rax
// 197: 49 ff 0c 24                   decq    (%r12)
// 19b: 75 0f                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 4c 89 e7                      movq    %r12, %rdi
// 1aa: ff d0                         callq   *%rax
// 1ac: 89 e8                         movl    %ebp, %eax
// 1ae: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 1b2: 48 c1 e0 04                   shlq    $0x4, %rax
// 1b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b8:  R_X86_64_64  _PyRuntime
// 1c0: 48 01 c8                      addq    %rcx, %rax
// 1c3: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  _Py_FalseStruct
// 1d3: 48 39 c8                      cmpq    %rcx, %rax
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_TrueStruct
// 1e0: 48 0f 45 c1                   cmovneq %rcx, %rax
// 1e4: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _JIT_CONTINUE
// 1f2: 48 89 df                      movq    %rbx, %rdi
// 1f5: 4c 89 ee                      movq    %r13, %rsi
// 1f8: 4c 89 fa                      movq    %r15, %rdx
// 1fb: 48 83 c4 08                   addq    $0x8, %rsp
// 1ff: 5b                            popq    %rbx
// 200: 41 5c                         popq    %r12
// 202: 41 5d                         popq    %r13
// 204: 41 5e                         popq    %r14
// 206: 41 5f                         popq    %r15
// 208: 5d                            popq    %rbp
// 209: ff e0                         jmpq    *%rax
// 20b: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNARY_NOT_code_body[524] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xc1, 0x49, 0x89, 0x46, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNARY_NOT_code_holes[14] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNARY_NOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNARY_NOT_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_UNPACK_EX
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_UNPACK_EX.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 17                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1af: ff d1                         callq   *%rcx
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b6 cc                      movzbl  %ah, %ecx
// 1d7: 0f b6 d0                      movzbl  %al, %edx
// 1da: 8d 04 0a                      leal    (%rdx,%rcx), %eax
// 1dd: ff c0                         incl    %eax
// 1df: 4d 8d 44 c7 f0                leaq    -0x10(%r15,%rax,8), %r8
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _PyEval_UnpackIterable
// 1ee: 4c 89 f7                      movq    %r14, %rdi
// 1f1: 4c 89 ee                      movq    %r13, %rsi
// 1f4: ff d0                         callq   *%rax
// 1f6: 89 c5                         movl    %eax, %ebp
// 1f8: 49 8b 45 00                   movq    (%r13), %rax
// 1fc: 48 85 c0                      testq   %rax, %rax
// 1ff: 7f 22                         jg      0x223 <_JIT_ENTRY+0x223>
// 201: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000203:  R_X86_64_64  .rodata.str1.1
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_NegativeRefcount
// 215: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 21a: 4c 89 ea                      movq    %r13, %rdx
// 21d: ff d0                         callq   *%rax
// 21f: 49 8b 45 00                   movq    (%r13), %rax
// 223: 4d 8d 67 f8                   leaq    -0x8(%r15), %r12
// 227: 85 c0                         testl   %eax, %eax
// 229: 78 21                         js      0x24c <_JIT_ENTRY+0x24c>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 235: ff d0                         callq   *%rax
// 237: 49 ff 4d 00                   decq    (%r13)
// 23b: 75 0f                         jne     0x24c <_JIT_ENTRY+0x24c>
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _Py_Dealloc
// 247: 4c 89 ef                      movq    %r13, %rdi
// 24a: ff d0                         callq   *%rax
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _JIT_OPARG
// 256: 0f b6 c8                      movzbl  %al, %ecx
// 259: 0f b6 c4                      movzbl  %ah, %eax
// 25c: 01 c8                         addl    %ecx, %eax
// 25e: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 262: 48 83 c6 f8                   addq    $-0x8, %rsi
// 266: 85 ed                         testl   %ebp, %ebp
// 268: 49 0f 44 f4                   cmoveq  %r12, %rsi
// 26c: 74 20                         je      0x28e <_JIT_ENTRY+0x28e>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _JIT_CONTINUE
// 278: 48 89 df                      movq    %rbx, %rdi
// 27b: 4c 89 f2                      movq    %r14, %rdx
// 27e: 48 83 c4 08                   addq    $0x8, %rsp
// 282: 5b                            popq    %rbx
// 283: 41 5c                         popq    %r12
// 285: 41 5d                         popq    %r13
// 287: 41 5e                         popq    %r14
// 289: 41 5f                         popq    %r15
// 28b: 5d                            popq    %rbp
// 28c: ff e0                         jmpq    *%rax
// 28e: 48 29 de                      subq    %rbx, %rsi
// 291: 48 83 c6 b0                   addq    $-0x50, %rsi
// 295: 48 c1 ee 03                   shrq    $0x3, %rsi
// 299: 89 73 40                      movl    %esi, 0x40(%rbx)
// 29c: 31 c0                         xorl    %eax, %eax
// 29e: e9 77 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2a3: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNPACK_EX_code_body[676] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xcc, 0x0f, 0xb6, 0xd0, 0x8d, 0x04, 0x0a, 0xff, 0xc0, 0x4d, 0x8d, 0x44, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x67, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xc8, 0x0f, 0xb6, 0xc4, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xf4, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb0, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x77, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNPACK_EX_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNPACK_EX_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNPACK_EX_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 67 f0                   movq    -0x10(%r15), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d6                      movq    %rdx, %r14
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 37                         jbe     0x129 <_JIT_ENTRY+0x129>
// f2: 49 29 df                      subq    %rbx, %r15
// f5: 49 83 c7 b8                   addq    $-0x48, %r15
// f9: 49 c1 ef 03                   shrq    $0x3, %r15
// fd: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 114: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 89 c0                         movl    %eax, %eax
// 12b: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 12f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 134: 75 28                         jne     0x15e <_JIT_ENTRY+0x15e>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyInterpreterState_Get
// 140: ff d0                         callq   *%rax
// 142: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 149: 49 ff 4d 00                   decq    (%r13)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  PyObject_Free
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 c1 e5 04                   shlq    $0x4, %rbp
// 162: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000164:  R_X86_64_64  _PyRuntime
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 49 01 ed                      addq    %rbp, %r13
// 19a: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 17                         js      0x1c6 <_JIT_ENTRY+0x1c6>
// 1af: ff d1                         callq   *%rcx
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 75 0f                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b7 c8                      movzwl  %ax, %ecx
// 1d7: 4d 8d 04 cf                   leaq    (%r15,%rcx,8), %r8
// 1db: 49 83 c0 f0                   addq    $-0x10, %r8
// 1df: 0f b7 d0                      movzwl  %ax, %edx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _PyEval_UnpackIterable
// 1ec: 4c 89 f7                      movq    %r14, %rdi
// 1ef: 4c 89 ee                      movq    %r13, %rsi
// 1f2: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 1f7: ff d0                         callq   *%rax
// 1f9: 89 c5                         movl    %eax, %ebp
// 1fb: 49 8b 45 00                   movq    (%r13), %rax
// 1ff: 48 85 c0                      testq   %rax, %rax
// 202: 7f 22                         jg      0x226 <_JIT_ENTRY+0x226>
// 204: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000206:  R_X86_64_64  .rodata.str1.1
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_NegativeRefcount
// 218: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 21d: 4c 89 ea                      movq    %r13, %rdx
// 220: ff d0                         callq   *%rax
// 222: 49 8b 45 00                   movq    (%r13), %rax
// 226: 4d 8d 67 f8                   leaq    -0x8(%r15), %r12
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 78 21                         js      0x24f <_JIT_ENTRY+0x24f>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 238: ff d0                         callq   *%rax
// 23a: 49 ff 4d 00                   decq    (%r13)
// 23e: 75 0f                         jne     0x24f <_JIT_ENTRY+0x24f>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_Dealloc
// 24a: 4c 89 ef                      movq    %r13, %rdi
// 24d: ff d0                         callq   *%rax
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _JIT_OPARG
// 259: 0f b7 c0                      movzwl  %ax, %eax
// 25c: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 260: 48 83 c6 f0                   addq    $-0x10, %rsi
// 264: 85 ed                         testl   %ebp, %ebp
// 266: 49 0f 44 f4                   cmoveq  %r12, %rsi
// 26a: 74 20                         je      0x28c <_JIT_ENTRY+0x28c>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _JIT_CONTINUE
// 276: 48 89 df                      movq    %rbx, %rdi
// 279: 4c 89 f2                      movq    %r14, %rdx
// 27c: 48 83 c4 08                   addq    $0x8, %rsp
// 280: 5b                            popq    %rbx
// 281: 41 5c                         popq    %r12
// 283: 41 5d                         popq    %r13
// 285: 41 5e                         popq    %r14
// 287: 41 5f                         popq    %r15
// 289: 5d                            popq    %rbp
// 28a: ff e0                         jmpq    *%rax
// 28c: 48 29 de                      subq    %rbx, %rsi
// 28f: 48 83 c6 b0                   addq    $-0x50, %rsi
// 293: 48 c1 ee 03                   shrq    $0x3, %rsi
// 297: 89 73 40                      movl    %esi, 0x40(%rbx)
// 29a: 31 c0                         xorl    %eax, %eax
// 29c: e9 79 fe ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 2a1: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_code_body[674] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x4d, 0x8d, 0x04, 0xcf, 0x49, 0x83, 0xc0, 0xf0, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x67, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xf4, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb0, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x79, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_LIST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 c9 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 2c: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 b0 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 a5 00 00 00             ja      0xf5 <_JIT_ENTRY+0xf5>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 96 00 00 00             jle     0xf5 <_JIT_ENTRY+0xf5>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 76 39                         jbe     0x12e <_JIT_ENTRY+0x12e>
// f5: 4c 89 f0                      movq    %r14, %rax
// f8: 48 29 d8                      subq    %rbx, %rax
// fb: 48 83 c0 b8                   addq    $-0x48, %rax
// ff: 48 c1 e8 03                   shrq    $0x3, %rax
// 103: 89 43 40                      movl    %eax, 0x40(%rbx)
// 106: 48 8b 03                      movq    (%rbx), %rax
// 109: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010b:  R_X86_64_64  _JIT_TARGET
// 113: 89 c9                         movl    %ecx, %ecx
// 115: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 119: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11f: 48 83 c4 18                   addq    $0x18, %rsp
// 123: 5b                            popq    %rbx
// 124: 41 5c                         popq    %r12
// 126: 41 5d                         popq    %r13
// 128: 41 5e                         popq    %r14
// 12a: 41 5f                         popq    %r15
// 12c: 5d                            popq    %rbp
// 12d: c3                            retq
// 12e: 89 c0                         movl    %eax, %eax
// 130: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 134: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 139: 75 28                         jne     0x163 <_JIT_ENTRY+0x163>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  PyInterpreterState_Get
// 145: ff d0                         callq   *%rax
// 147: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14e: 49 ff 4d 00                   decq    (%r13)
// 152: 75 0f                         jne     0x163 <_JIT_ENTRY+0x163>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  PyObject_Free
// 15e: 4c 89 ef                      movq    %r13, %rdi
// 161: ff d0                         callq   *%rax
// 163: 48 c1 e5 04                   shlq    $0x4, %rbp
// 167: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000169:  R_X86_64_64  _PyRuntime
// 171: 49 8b 04 24                   movq    (%r12), %rax
// 175: 48 85 c0                      testq   %rax, %rax
// 178: 49 89 ed                      movq    %rbp, %r13
// 17b: 7f 28                         jg      0x1a5 <_JIT_ENTRY+0x1a5>
// 17d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017f:  R_X86_64_64  .rodata.str1.1
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_NegativeRefcount
// 191: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 196: 4c 89 e2                      movq    %r12, %rdx
// 199: 48 89 cd                      movq    %rcx, %rbp
// 19c: ff d0                         callq   *%rax
// 19e: 48 89 e9                      movq    %rbp, %rcx
// 1a1: 49 8b 04 24                   movq    (%r12), %rax
// 1a5: 49 8d 6e f0                   leaq    -0x10(%r14), %rbp
// 1a9: 49 01 cd                      addq    %rcx, %r13
// 1ac: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 1dc: 4c 89 6d 00                   movq    %r13, (%rbp)
// 1e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e2:  R_X86_64_64  PyList_Type
// 1ea: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 1ee: 0f 85 04 ff ff ff             jne     0xf8 <_JIT_ENTRY+0xf8>
// 1f4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f6:  R_X86_64_64  _JIT_OPARG
// 1fe: 0f b7 c9                      movzwl  %cx, %ecx
// 201: 49 39 4d 10                   cmpq    %rcx, 0x10(%r13)
// 205: 0f 85 ed fe ff ff             jne     0xf8 <_JIT_ENTRY+0xf8>
// 20b: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _JIT_OPARG
// 21a: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 21f: 7e 59                         jle     0x27a <_JIT_ENTRY+0x27a>
// 221: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 226: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _JIT_OPARG
// 234: 44 0f b7 e8                   movzwl  %ax, %r13d
// 238: 49 ff c5                      incq    %r13
// 23b: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 240: eb 11                         jmp     0x253 <_JIT_ENTRY+0x253>
// 242: 4c 89 65 00                   movq    %r12, (%rbp)
// 246: 48 83 c5 08                   addq    $0x8, %rbp
// 24a: 49 ff cd                      decq    %r13
// 24d: 49 83 fd 01                   cmpq    $0x1, %r13
// 251: 7e 27                         jle     0x27a <_JIT_ENTRY+0x27a>
// 253: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 257: 4c 8b 24 c1                   movq    (%rcx,%rax,8), %r12
// 25b: 41 8b 04 24                   movl    (%r12), %eax
// 25f: ff c0                         incl    %eax
// 261: 74 df                         je      0x242 <_JIT_ENTRY+0x242>
// 263: 41 89 04 24                   movl    %eax, (%r12)
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 271: ff d0                         callq   *%rax
// 273: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 278: eb c8                         jmp     0x242 <_JIT_ENTRY+0x242>
// 27a: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 27f: 49 8b 04 24                   movq    (%r12), %rax
// 283: 48 85 c0                      testq   %rax, %rax
// 286: 7f 22                         jg      0x2aa <_JIT_ENTRY+0x2aa>
// 288: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028a:  R_X86_64_64  .rodata.str1.1
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_NegativeRefcount
// 29c: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 2a1: 4c 89 e2                      movq    %r12, %rdx
// 2a4: ff d0                         callq   *%rax
// 2a6: 49 8b 04 24                   movq    (%r12), %rax
// 2aa: 85 c0                         testl   %eax, %eax
// 2ac: 78 21                         js      0x2cf <_JIT_ENTRY+0x2cf>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b8: ff d0                         callq   *%rax
// 2ba: 49 ff 0c 24                   decq    (%r12)
// 2be: 75 0f                         jne     0x2cf <_JIT_ENTRY+0x2cf>
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_Dealloc
// 2ca: 4c 89 e7                      movq    %r12, %rdi
// 2cd: ff d0                         callq   *%rax
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _JIT_OPARG
// 2d9: 0f b7 c0                      movzwl  %ax, %eax
// 2dc: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2e0: 48 83 c6 f0                   addq    $-0x10, %rsi
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _JIT_CONTINUE
// 2ee: 48 89 df                      movq    %rbx, %rdi
// 2f1: 4c 89 fa                      movq    %r15, %rdx
// 2f4: 48 83 c4 18                   addq    $0x18, %rsp
// 2f8: 5b                            popq    %rbx
// 2f9: 41 5c                         popq    %r12
// 2fb: 41 5d                         popq    %r13
// 2fd: 41 5e                         popq    %r14
// 2ff: 41 5f                         popq    %r15
// 301: 5d                            popq    %rbp
// 302: ff e0                         jmpq    *%rax
// 304: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_LIST_code_body[773] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x49, 0x89, 0xed, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0x89, 0xcd, 0xff, 0xd0, 0x48, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x6e, 0xf0, 0x49, 0x01, 0xcd, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf8, 0x4c, 0x89, 0x6d, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x04, 0xff, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4d, 0x10, 0x0f, 0x85, 0xed, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x59, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xeb, 0x11, 0x4c, 0x89, 0x65, 0x00, 0x48, 0x83, 0xc5, 0x08, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x27, 0x41, 0x8d, 0x45, 0xfe, 0x4c, 0x8b, 0x24, 0xc1, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0xdf, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0xeb, 0xc8, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_LIST_code_holes[22] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TUPLE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 c9 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 b0 00 00 00             jne     0xf2 <_JIT_ENTRY+0xf2>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 a5 00 00 00             ja      0xf2 <_JIT_ENTRY+0xf2>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e 96 00 00 00             jle     0xf2 <_JIT_ENTRY+0xf2>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 76 39                         jbe     0x12b <_JIT_ENTRY+0x12b>
// f2: 4c 89 f0                      movq    %r14, %rax
// f5: 48 29 d8                      subq    %rbx, %rax
// f8: 48 83 c0 b8                   addq    $-0x48, %rax
// fc: 48 c1 e8 03                   shrq    $0x3, %rax
// 100: 89 43 40                      movl    %eax, 0x40(%rbx)
// 103: 48 8b 03                      movq    (%rbx), %rax
// 106: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000108:  R_X86_64_64  _JIT_TARGET
// 110: 89 c9                         movl    %ecx, %ecx
// 112: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 116: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11c: 48 83 c4 08                   addq    $0x8, %rsp
// 120: 5b                            popq    %rbx
// 121: 41 5c                         popq    %r12
// 123: 41 5d                         popq    %r13
// 125: 41 5e                         popq    %r14
// 127: 41 5f                         popq    %r15
// 129: 5d                            popq    %rbp
// 12a: c3                            retq
// 12b: 89 c0                         movl    %eax, %eax
// 12d: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 131: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 136: 75 28                         jne     0x160 <_JIT_ENTRY+0x160>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  PyInterpreterState_Get
// 142: ff d0                         callq   *%rax
// 144: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14b: 49 ff 4d 00                   decq    (%r13)
// 14f: 75 0f                         jne     0x160 <_JIT_ENTRY+0x160>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  PyObject_Free
// 15b: 4c 89 ef                      movq    %r13, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 48 c1 e5 04                   shlq    $0x4, %rbp
// 164: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000166:  R_X86_64_64  _PyRuntime
// 16e: 49 8b 04 24                   movq    (%r12), %rax
// 172: 48 85 c0                      testq   %rax, %rax
// 175: 49 89 ed                      movq    %rbp, %r13
// 178: 7f 28                         jg      0x1a2 <_JIT_ENTRY+0x1a2>
// 17a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017c:  R_X86_64_64  .rodata.str1.1
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_NegativeRefcount
// 18e: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 193: 4c 89 e2                      movq    %r12, %rdx
// 196: 48 89 cd                      movq    %rcx, %rbp
// 199: ff d0                         callq   *%rax
// 19b: 48 89 e9                      movq    %rbp, %rcx
// 19e: 49 8b 04 24                   movq    (%r12), %rax
// 1a2: 49 8d 6e f0                   leaq    -0x10(%r14), %rbp
// 1a6: 4a 8d 14 29                   leaq    (%rcx,%r13), %rdx
// 1aa: 48 81 c2 a0 32 01 00          addq    $0x132a0, %rdx          # imm = 0x132A0
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 89 14 24                   movq    %rdx, (%rsp)
// 1b7: 78 29                         js      0x1e2 <_JIT_ENTRY+0x1e2>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 48 8b 14 24                   movq    (%rsp), %rdx
// 1c9: 49 ff 0c 24                   decq    (%r12)
// 1cd: 75 13                         jne     0x1e2 <_JIT_ENTRY+0x1e2>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_Dealloc
// 1d9: 4c 89 e7                      movq    %r12, %rdi
// 1dc: ff d0                         callq   *%rax
// 1de: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e2: 49 8d 46 f8                   leaq    -0x8(%r14), %rax
// 1e6: 48 89 55 00                   movq    %rdx, (%rbp)
// 1ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ec:  R_X86_64_64  PyTuple_Type
// 1f4: 48 39 4a 08                   cmpq    %rcx, 0x8(%rdx)
// 1f8: 0f 85 f7 fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 1fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000200:  R_X86_64_64  _JIT_OPARG
// 208: 0f b7 c9                      movzwl  %cx, %ecx
// 20b: 48 39 4a 10                   cmpq    %rcx, 0x10(%rdx)
// 20f: 0f 85 e0 fe ff ff             jne     0xf5 <_JIT_ENTRY+0xf5>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_OPARG
// 21f: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 224: 7e 42                         jle     0x268 <_JIT_ENTRY+0x268>
// 226: 44 0f b7 e0                   movzwl  %ax, %r12d
// 22a: 49 ff c4                      incq    %r12
// 22d: eb 11                         jmp     0x240 <_JIT_ENTRY+0x240>
// 22f: 4c 89 6d 00                   movq    %r13, (%rbp)
// 233: 48 83 c5 08                   addq    $0x8, %rbp
// 237: 49 ff cc                      decq    %r12
// 23a: 49 83 fc 01                   cmpq    $0x1, %r12
// 23e: 7e 28                         jle     0x268 <_JIT_ENTRY+0x268>
// 240: 41 8d 44 24 fe                leal    -0x2(%r12), %eax
// 245: 4c 8b 6c c2 18                movq    0x18(%rdx,%rax,8), %r13
// 24a: 41 8b 45 00                   movl    (%r13), %eax
// 24e: ff c0                         incl    %eax
// 250: 74 dd                         je      0x22f <_JIT_ENTRY+0x22f>
// 252: 41 89 45 00                   movl    %eax, (%r13)
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 260: ff d0                         callq   *%rax
// 262: 48 8b 14 24                   movq    (%rsp), %rdx
// 266: eb c7                         jmp     0x22f <_JIT_ENTRY+0x22f>
// 268: 48 8b 02                      movq    (%rdx), %rax
// 26b: 48 85 c0                      testq   %rax, %rax
// 26e: 7f 26                         jg      0x296 <_JIT_ENTRY+0x296>
// 270: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000272:  R_X86_64_64  .rodata.str1.1
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _Py_NegativeRefcount
// 284: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 289: 48 8b 14 24                   movq    (%rsp), %rdx
// 28d: ff d0                         callq   *%rax
// 28f: 48 8b 04 24                   movq    (%rsp), %rax
// 293: 48 8b 00                      movq    (%rax), %rax
// 296: 85 c0                         testl   %eax, %eax
// 298: 78 21                         js      0x2bb <_JIT_ENTRY+0x2bb>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a4: ff d0                         callq   *%rax
// 2a6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2aa: 48 ff 0f                      decq    (%rdi)
// 2ad: 75 0c                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_Dealloc
// 2b9: ff d0                         callq   *%rax
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _JIT_OPARG
// 2c5: 0f b7 c0                      movzwl  %ax, %eax
// 2c8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2cc: 48 83 c6 f0                   addq    $-0x10, %rsi
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _JIT_CONTINUE
// 2da: 48 89 df                      movq    %rbx, %rdi
// 2dd: 4c 89 fa                      movq    %r15, %rdx
// 2e0: 48 83 c4 08                   addq    $0x8, %rsp
// 2e4: 5b                            popq    %rbx
// 2e5: 41 5c                         popq    %r12
// 2e7: 41 5d                         popq    %r13
// 2e9: 41 5e                         popq    %r14
// 2eb: 41 5f                         popq    %r15
// 2ed: 5d                            popq    %rbp
// 2ee: ff e0                         jmpq    *%rax
// 2f0: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TUPLE_code_body[753] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x49, 0x89, 0xed, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0x89, 0xcd, 0xff, 0xd0, 0x48, 0x89, 0xe9, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x6e, 0xf0, 0x4a, 0x8d, 0x14, 0x29, 0x48, 0x81, 0xc2, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x48, 0x89, 0x14, 0x24, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x46, 0xf8, 0x48, 0x89, 0x55, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4a, 0x08, 0x0f, 0x85, 0xf7, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x4a, 0x10, 0x0f, 0x85, 0xe0, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x42, 0x44, 0x0f, 0xb7, 0xe0, 0x49, 0xff, 0xc4, 0xeb, 0x11, 0x4c, 0x89, 0x6d, 0x00, 0x48, 0x83, 0xc5, 0x08, 0x49, 0xff, 0xcc, 0x49, 0x83, 0xfc, 0x01, 0x7e, 0x28, 0x41, 0x8d, 0x44, 0x24, 0xfe, 0x4c, 0x8b, 0x6c, 0xc2, 0x18, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xdd, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xeb, 0xc7, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TUPLE_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TWO_TUPLE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 0f 85 df 01 00 00             jne     0x208 <_JIT_ENTRY+0x208>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 c6 01 00 00             jne     0x208 <_JIT_ENTRY+0x208>
// 42: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 47: 0f 87 bb 01 00 00             ja      0x208 <_JIT_ENTRY+0x208>
// 4d: 41 8b 45 18                   movl    0x18(%r13), %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 8e ac 01 00 00             jle     0x208 <_JIT_ENTRY+0x208>
// 5c: 49 89 d7                      movq    %rdx, %r15
// 5f: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 64: 89 ca                         movl    %ecx, %edx
// 66: c1 ea 02                      shrl    $0x2, %edx
// 69: 83 e2 07                      andl    $0x7, %edx
// 6c: 83 fa 02                      cmpl    $0x2, %edx
// 6f: 74 15                         je      0x86 <_JIT_ENTRY+0x86>
// 71: 83 fa 01                      cmpl    $0x1, %edx
// 74: 75 20                         jne     0x96 <_JIT_ENTRY+0x96>
// 76: f6 c1 20                      testb   $0x20, %cl
// 79: 75 27                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 7b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 80: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 84: eb 67                         jmp     0xed <_JIT_ENTRY+0xed>
// 86: f6 c1 20                      testb   $0x20, %cl
// 89: 75 31                         jne     0xbc <_JIT_ENTRY+0xbc>
// 8b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 90: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 94: eb 57                         jmp     0xed <_JIT_ENTRY+0xed>
// 96: f6 c1 20                      testb   $0x20, %cl
// 99: 75 3b                         jne     0xd6 <_JIT_ENTRY+0xd6>
// 9b: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a0: eb 48                         jmp     0xea <_JIT_ENTRY+0xea>
// a2: 31 d2                         xorl    %edx, %edx
// a4: f6 c1 40                      testb   $0x40, %cl
// a7: 0f 94 c2                      sete    %dl
// aa: 48 c1 e2 04                   shlq    $0x4, %rdx
// ae: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b2: 48 83 c1 28                   addq    $0x28, %rcx
// b6: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// ba: eb 31                         jmp     0xed <_JIT_ENTRY+0xed>
// bc: 31 d2                         xorl    %edx, %edx
// be: f6 c1 40                      testb   $0x40, %cl
// c1: 0f 94 c2                      sete    %dl
// c4: 48 c1 e2 04                   shlq    $0x4, %rdx
// c8: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cc: 48 83 c1 28                   addq    $0x28, %rcx
// d0: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d4: eb 17                         jmp     0xed <_JIT_ENTRY+0xed>
// d6: 31 d2                         xorl    %edx, %edx
// d8: f6 c1 40                      testb   $0x40, %cl
// db: 0f 94 c2                      sete    %dl
// de: 48 c1 e2 04                   shlq    $0x4, %rdx
// e2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e6: 48 83 c1 28                   addq    $0x28, %rcx
// ea: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// ed: 83 f8 7f                      cmpl    $0x7f, %eax
// f0: 0f 87 12 01 00 00             ja      0x208 <_JIT_ENTRY+0x208>
// f6: 89 c0                         movl    %eax, %eax
// f8: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 101: 75 28                         jne     0x12b <_JIT_ENTRY+0x12b>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 ff 4d 00                   decq    (%r13)
// 11a: 75 0f                         jne     0x12b <_JIT_ENTRY+0x12b>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  PyObject_Free
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 48 c1 e5 04                   shlq    $0x4, %rbp
// 12f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000131:  R_X86_64_64  _PyRuntime
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 49 01 ed                      addq    %rbp, %r13
// 167: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 0c 24                   decq    (%r12)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 197: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  PyTuple_Type
// 1a5: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1a9: 75 5a                         jne     0x205 <_JIT_ENTRY+0x205>
// 1ab: 49 83 7d 10 02                cmpq    $0x2, 0x10(%r13)
// 1b0: 75 53                         jne     0x205 <_JIT_ENTRY+0x205>
// 1b2: 49 8b 6d 20                   movq    0x20(%r13), %rbp
// 1b6: 8b 45 00                      movl    (%rbp), %eax
// 1b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bb:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c3: ff c0                         incl    %eax
// 1c5: 74 19                         je      0x1e0 <_JIT_ENTRY+0x1e0>
// 1c7: 89 45 00                      movl    %eax, (%rbp)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1d4: ff d0                         callq   *%rax
// 1d6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e0: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 1e4: 49 8b 6d 18                   movq    0x18(%r13), %rbp
// 1e8: 8b 45 00                      movl    (%rbp), %eax
// 1eb: ff c0                         incl    %eax
// 1ed: 75 50                         jne     0x23f <_JIT_ENTRY+0x23f>
// 1ef: 49 89 2c 24                   movq    %rbp, (%r12)
// 1f3: 49 8b 45 00                   movq    (%r13), %rax
// 1f7: 48 85 c0                      testq   %rax, %rax
// 1fa: 7e 55                         jle     0x251 <_JIT_ENTRY+0x251>
// 1fc: 85 c0                         testl   %eax, %eax
// 1fe: 79 77                         jns     0x277 <_JIT_ENTRY+0x277>
// 200: e9 93 00 00 00                jmp     0x298 <_JIT_ENTRY+0x298>
// 205: 4d 89 e6                      movq    %r12, %r14
// 208: 49 29 de                      subq    %rbx, %r14
// 20b: 49 83 c6 b8                   addq    $-0x48, %r14
// 20f: 49 c1 ee 03                   shrq    $0x3, %r14
// 213: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 217: 48 8b 03                      movq    (%rbx), %rax
// 21a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021c:  R_X86_64_64  _JIT_TARGET
// 224: 89 c9                         movl    %ecx, %ecx
// 226: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 22a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 230: 48 83 c4 08                   addq    $0x8, %rsp
// 234: 5b                            popq    %rbx
// 235: 41 5c                         popq    %r12
// 237: 41 5d                         popq    %r13
// 239: 41 5e                         popq    %r14
// 23b: 41 5f                         popq    %r15
// 23d: 5d                            popq    %rbp
// 23e: c3                            retq
// 23f: 89 45 00                      movl    %eax, (%rbp)
// 242: ff d1                         callq   *%rcx
// 244: 49 89 2c 24                   movq    %rbp, (%r12)
// 248: 49 8b 45 00                   movq    (%r13), %rax
// 24c: 48 85 c0                      testq   %rax, %rax
// 24f: 7f ab                         jg      0x1fc <_JIT_ENTRY+0x1fc>
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  .rodata.str1.1
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_NegativeRefcount
// 265: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 26a: 4c 89 ea                      movq    %r13, %rdx
// 26d: ff d0                         callq   *%rax
// 26f: 49 8b 45 00                   movq    (%r13), %rax
// 273: 85 c0                         testl   %eax, %eax
// 275: 78 21                         js      0x298 <_JIT_ENTRY+0x298>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 281: ff d0                         callq   *%rax
// 283: 49 ff 4d 00                   decq    (%r13)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 4c 89 ef                      movq    %r13, %rdi
// 296: ff d0                         callq   *%rax
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _JIT_OPARG
// 2a2: 0f b7 c0                      movzwl  %ax, %eax
// 2a5: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2a9: 48 83 c6 f0                   addq    $-0x10, %rsi
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _JIT_CONTINUE
// 2b7: 48 89 df                      movq    %rbx, %rdi
// 2ba: 4c 89 fa                      movq    %r15, %rdx
// 2bd: 48 83 c4 08                   addq    $0x8, %rsp
// 2c1: 5b                            popq    %rbx
// 2c2: 41 5c                         popq    %r12
// 2c4: 41 5d                         popq    %r13
// 2c6: 41 5e                         popq    %r14
// 2c8: 41 5f                         popq    %r15
// 2ca: 5d                            popq    %rbp
// 2cb: ff e0                         jmpq    *%rax
// 2cd: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[718] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xdf, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xc6, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xbb, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xac, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x0f, 0x87, 0x12, 0x01, 0x00, 0x00, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x75, 0x5a, 0x49, 0x83, 0x7d, 0x10, 0x02, 0x75, 0x53, 0x49, 0x8b, 0x6d, 0x20, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x19, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xf0, 0x49, 0x8b, 0x6d, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x50, 0x49, 0x89, 0x2c, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x55, 0x85, 0xc0, 0x79, 0x77, 0xe9, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0xff, 0xd1, 0x49, 0x89, 0x2c, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xab, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _BINARY_SUBSCR_STR_INTplus_WITH_EXCEPT_START
// 
// /tmp/tmp2n6cbb4y/_BINARY_SUBSCR_STR_INTplus_WITH_EXCEPT_START.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 0f 85 c9 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 2c: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  PyUnicode_Type
// 3a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3f: 0f 85 b0 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
// 45: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 4a: 0f 87 a5 00 00 00             ja      0xf5 <_JIT_ENTRY+0xf5>
// 50: 41 8b 45 18                   movl    0x18(%r13), %eax
// 54: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 59: 0f 8e 96 00 00 00             jle     0xf5 <_JIT_ENTRY+0xf5>
// 5f: 49 89 d7                      movq    %rdx, %r15
// 62: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 67: 89 ca                         movl    %ecx, %edx
// 69: c1 ea 02                      shrl    $0x2, %edx
// 6c: 83 e2 07                      andl    $0x7, %edx
// 6f: 83 fa 02                      cmpl    $0x2, %edx
// 72: 74 15                         je      0x89 <_JIT_ENTRY+0x89>
// 74: 83 fa 01                      cmpl    $0x1, %edx
// 77: 75 20                         jne     0x99 <_JIT_ENTRY+0x99>
// 79: f6 c1 20                      testb   $0x20, %cl
// 7c: 75 27                         jne     0xa5 <_JIT_ENTRY+0xa5>
// 7e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 83: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 87: eb 67                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 89: f6 c1 20                      testb   $0x20, %cl
// 8c: 75 31                         jne     0xbf <_JIT_ENTRY+0xbf>
// 8e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 93: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 97: eb 57                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 3b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: eb 48                         jmp     0xed <_JIT_ENTRY+0xed>
// a5: 31 d2                         xorl    %edx, %edx
// a7: f6 c1 40                      testb   $0x40, %cl
// aa: 0f 94 c2                      sete    %dl
// ad: 48 c1 e2 04                   shlq    $0x4, %rdx
// b1: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// b5: 48 83 c1 28                   addq    $0x28, %rcx
// b9: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// bd: eb 31                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// bf: 31 d2                         xorl    %edx, %edx
// c1: f6 c1 40                      testb   $0x40, %cl
// c4: 0f 94 c2                      sete    %dl
// c7: 48 c1 e2 04                   shlq    $0x4, %rdx
// cb: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// cf: 48 83 c1 28                   addq    $0x28, %rcx
// d3: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// d7: eb 17                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// d9: 31 d2                         xorl    %edx, %edx
// db: f6 c1 40                      testb   $0x40, %cl
// de: 0f 94 c2                      sete    %dl
// e1: 48 c1 e2 04                   shlq    $0x4, %rdx
// e5: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e9: 48 83 c1 28                   addq    $0x28, %rcx
// ed: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// f0: 83 f8 7f                      cmpl    $0x7f, %eax
// f3: 76 37                         jbe     0x12c <_JIT_ENTRY+0x12c>
// f5: 4c 29 f3                      subq    %r14, %rbx
// f8: 48 83 c3 b8                   addq    $-0x48, %rbx
// fc: 48 c1 eb 03                   shrq    $0x3, %rbx
// 100: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 104: 49 8b 06                      movq    (%r14), %rax
// 107: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000109:  R_X86_64_64  _JIT_TARGET
// 111: 89 c9                         movl    %ecx, %ecx
// 113: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 117: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11d: 48 83 c4 38                   addq    $0x38, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5d                         popq    %r13
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: 5d                            popq    %rbp
// 12b: c3                            retq
// 12c: 89 c0                         movl    %eax, %eax
// 12e: 48 8d 2c 40                   leaq    (%rax,%rax,2), %rbp
// 132: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 137: 75 28                         jne     0x161 <_JIT_ENTRY+0x161>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyInterpreterState_Get
// 143: ff d0                         callq   *%rax
// 145: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 14c: 49 ff 4d 00                   decq    (%r13)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  PyObject_Free
// 15c: 4c 89 ef                      movq    %r13, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 c1 e5 04                   shlq    $0x4, %rbp
// 165: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000167:  R_X86_64_64  _PyRuntime
// 16f: 49 8b 04 24                   movq    (%r12), %rax
// 173: 48 85 c0                      testq   %rax, %rax
// 176: 7f 22                         jg      0x19a <_JIT_ENTRY+0x19a>
// 178: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017a:  R_X86_64_64  .rodata.str1.1
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_NegativeRefcount
// 18c: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 191: 4c 89 e2                      movq    %r12, %rdx
// 194: ff d0                         callq   *%rax
// 196: 49 8b 04 24                   movq    (%r12), %rax
// 19a: 49 01 ed                      addq    %rbp, %r13
// 19d: 49 81 c5 a0 32 01 00          addq    $0x132a0, %r13          # imm = 0x132A0
// 1a4: 85 c0                         testl   %eax, %eax
// 1a6: 78 21                         js      0x1c9 <_JIT_ENTRY+0x1c9>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b2: ff d0                         callq   *%rax
// 1b4: 49 ff 0c 24                   decq    (%r12)
// 1b8: 75 0f                         jne     0x1c9 <_JIT_ENTRY+0x1c9>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_Dealloc
// 1c4: 4c 89 e7                      movq    %r12, %rdi
// 1c7: ff d0                         callq   *%rax
// 1c9: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1cd: 4c 8b 63 d8                   movq    -0x28(%rbx), %r12
// 1d1: 49 8b 45 08                   movq    0x8(%r13), %rax
// 1d5: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  PyException_GetTraceback
// 1e4: 4c 89 ef                      movq    %r13, %rdi
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 74 54                         je      0x242 <_JIT_ENTRY+0x242>
// 1ee: 48 89 c5                      movq    %rax, %rbp
// 1f1: 48 8b 00                      movq    (%rax), %rax
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 7f 22                         jg      0x21b <_JIT_ENTRY+0x21b>
// 1f9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fb:  R_X86_64_64  .rodata.str1.1
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_NegativeRefcount
// 20d: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 212: 48 89 ea                      movq    %rbp, %rdx
// 215: ff d0                         callq   *%rax
// 217: 48 8b 45 00                   movq    (%rbp), %rax
// 21b: 85 c0                         testl   %eax, %eax
// 21d: 78 2d                         js      0x24c <_JIT_ENTRY+0x24c>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 229: ff d0                         callq   *%rax
// 22b: 48 ff 4d 00                   decq    (%rbp)
// 22f: 75 1b                         jne     0x24c <_JIT_ENTRY+0x24c>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_Dealloc
// 23b: 48 89 ef                      movq    %rbp, %rdi
// 23e: ff d0                         callq   *%rax
// 240: eb 0a                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 242: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000244:  R_X86_64_64  _Py_NoneStruct
// 24c: 4c 89 e7                      movq    %r12, %rdi
// 24f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 254: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 25d: 48 8d 74 24 18                leaq    0x18(%rsp), %rsi
// 262: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 267: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 26c: 48 89 6c 24 28                movq    %rbp, 0x28(%rsp)
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  PyObject_Vectorcall
// 27b: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 285: 31 c9                         xorl    %ecx, %ecx
// 287: ff d0                         callq   *%rax
// 289: 48 85 c0                      testq   %rax, %rax
// 28c: 74 27                         je      0x2b5 <_JIT_ENTRY+0x2b5>
// 28e: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _JIT_CONTINUE
// 29c: 4c 89 f7                      movq    %r14, %rdi
// 29f: 48 89 de                      movq    %rbx, %rsi
// 2a2: 4c 89 fa                      movq    %r15, %rdx
// 2a5: 48 83 c4 38                   addq    $0x38, %rsp
// 2a9: 5b                            popq    %rbx
// 2aa: 41 5c                         popq    %r12
// 2ac: 41 5d                         popq    %r13
// 2ae: 41 5e                         popq    %r14
// 2b0: 41 5f                         popq    %r15
// 2b2: 5d                            popq    %rbp
// 2b3: ff e0                         jmpq    *%rax
// 2b5: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2b9: 4c 29 f3                      subq    %r14, %rbx
// 2bc: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2c0: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2c4: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2c8: 31 c0                         xorl    %eax, %eax
// 2ca: e9 4e fe ff ff                jmp     0x11d <_JIT_ENTRY+0x11d>
// 2cf: 
static const unsigned char _BINARY_SUBSCR_STR_INTplus_WITH_EXCEPT_START_code_body[720] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0xc0, 0x48, 0x8d, 0x2c, 0x40, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc1, 0xe5, 0x04, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x01, 0xed, 0x49, 0x81, 0xc5, 0xa0, 0x32, 0x01, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xd8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x54, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x0a, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x18, 0x48, 0x89, 0x44, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x89, 0x6c, 0x24, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x4e, 0xfe, 0xff, 0xff};
static const Hole _BINARY_SUBSCR_STR_INTplus_WITH_EXCEPT_START_code_holes[19] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_STR_INTplus_WITH_EXCEPT_START_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_STR_INTplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_BINARY_SUBSCR_STR_INTplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BEFORE_ASYNC_WITH),
    [_BINARY_SUBSCR_STR_INTplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BEFORE_WITH),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_OP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_OP),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_FLOAT),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_INT),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_OP_ADD_UNICODE),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_FLOAT),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_OP_MULTIPLY_INT),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_FLOAT),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_OP_SUBTRACT_INT),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_SLICE),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_DICT),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_LIST_INT),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_STR_INT),
    [_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BINARY_SUBSCR_TUPLE_INT),
    [_BINARY_SUBSCR_STR_INTplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BUILD_CONST_KEY_MAP),
    [_BINARY_SUBSCR_STR_INTplus_BUILD_LIST] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BUILD_LIST),
    [_BINARY_SUBSCR_STR_INTplus_BUILD_MAP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BUILD_MAP),
    [_BINARY_SUBSCR_STR_INTplus_BUILD_SET] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BUILD_SET),
    [_BINARY_SUBSCR_STR_INTplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BUILD_SLICE),
    [_BINARY_SUBSCR_STR_INTplus_BUILD_STRING] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BUILD_STRING),
    [_BINARY_SUBSCR_STR_INTplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_BUILD_TUPLE),
    [_BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_CLASS),
    [_BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST),
    [_BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_BUILTIN_O),
    [_BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_1),
    [_BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_INTRINSIC_2),
    [_BINARY_SUBSCR_STR_INTplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_ISINSTANCE),
    [_BINARY_SUBSCR_STR_INTplus_CALL_LEN] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_LEN),
    [_BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_METHOD_DESCRIPTOR_O),
    [_BINARY_SUBSCR_STR_INTplus_CALL_STR_1] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_STR_1),
    [_BINARY_SUBSCR_STR_INTplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_TUPLE_1),
    [_BINARY_SUBSCR_STR_INTplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CALL_TYPE_1),
    [_BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_CLASS),
    [_BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_MODULE),
    [_BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CHECK_ATTR_WITH_HINT),
    [_BINARY_SUBSCR_STR_INTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_BINARY_SUBSCR_STR_INTplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CHECK_EG_MATCH),
    [_BINARY_SUBSCR_STR_INTplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CHECK_EXC_MATCH),
    [_BINARY_SUBSCR_STR_INTplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CHECK_FUNCTION_EXACT_ARGS),
    [_BINARY_SUBSCR_STR_INTplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_BINARY_SUBSCR_STR_INTplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CHECK_PEP_523),
    [_BINARY_SUBSCR_STR_INTplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CHECK_STACK_SPACE),
    [_BINARY_SUBSCR_STR_INTplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CHECK_VALIDITY),
    [_BINARY_SUBSCR_STR_INTplus_COMPARE_OP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_COMPARE_OP),
    [_BINARY_SUBSCR_STR_INTplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_COMPARE_OP_FLOAT),
    [_BINARY_SUBSCR_STR_INTplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_COMPARE_OP_INT),
    [_BINARY_SUBSCR_STR_INTplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_COMPARE_OP_STR),
    [_BINARY_SUBSCR_STR_INTplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CONTAINS_OP),
    [_BINARY_SUBSCR_STR_INTplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_CONVERT_VALUE),
    [_BINARY_SUBSCR_STR_INTplus_COPY] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_COPY),
    [_BINARY_SUBSCR_STR_INTplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_COPY_FREE_VARS),
    [_BINARY_SUBSCR_STR_INTplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_DELETE_ATTR),
    [_BINARY_SUBSCR_STR_INTplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_DELETE_DEREF),
    [_BINARY_SUBSCR_STR_INTplus_DELETE_FAST] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_DELETE_FAST),
    [_BINARY_SUBSCR_STR_INTplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_DELETE_GLOBAL),
    [_BINARY_SUBSCR_STR_INTplus_DELETE_NAME] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_DELETE_NAME),
    [_BINARY_SUBSCR_STR_INTplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_DELETE_SUBSCR),
    [_BINARY_SUBSCR_STR_INTplus_DICT_MERGE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_DICT_MERGE),
    [_BINARY_SUBSCR_STR_INTplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_DICT_UPDATE),
    [_BINARY_SUBSCR_STR_INTplus_END_SEND] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_END_SEND),
    [_BINARY_SUBSCR_STR_INTplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_EXIT_INIT_CHECK),
    [_BINARY_SUBSCR_STR_INTplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_EXIT_TRACE),
    [_BINARY_SUBSCR_STR_INTplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_FORMAT_SIMPLE),
    [_BINARY_SUBSCR_STR_INTplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_FORMAT_WITH_SPEC),
    [_BINARY_SUBSCR_STR_INTplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_FOR_ITER_TIER_TWO),
    [_BINARY_SUBSCR_STR_INTplus_GET_AITER] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GET_AITER),
    [_BINARY_SUBSCR_STR_INTplus_GET_ANEXT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GET_ANEXT),
    [_BINARY_SUBSCR_STR_INTplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GET_AWAITABLE),
    [_BINARY_SUBSCR_STR_INTplus_GET_ITER] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GET_ITER),
    [_BINARY_SUBSCR_STR_INTplus_GET_LEN] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GET_LEN),
    [_BINARY_SUBSCR_STR_INTplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GET_YIELD_FROM_ITER),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_FLOAT),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_INT),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_BOTH_UNICODE),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_BUILTINS_VERSION),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_GLOBALS_VERSION),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_IS_FALSE_POP),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_IS_NONE_POP),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_IS_NOT_NONE_POP),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_IS_TRUE_POP),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_KEYS_VERSION),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_LIST),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_BINARY_SUBSCR_STR_INTplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_GUARD_TYPE_VERSION),
    [_BINARY_SUBSCR_STR_INTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_BINARY_SUBSCR_STR_INTplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_INIT_CALL_PY_EXACT_ARGS),
    [_BINARY_SUBSCR_STR_INTplus_INSERT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_INSERT),
    [_BINARY_SUBSCR_STR_INTplus_IS_NONE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_IS_NONE),
    [_BINARY_SUBSCR_STR_INTplus_IS_OP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_IS_OP),
    [_BINARY_SUBSCR_STR_INTplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_ITER_CHECK_LIST),
    [_BINARY_SUBSCR_STR_INTplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_ITER_CHECK_RANGE),
    [_BINARY_SUBSCR_STR_INTplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_ITER_CHECK_TUPLE),
    [_BINARY_SUBSCR_STR_INTplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_ITER_NEXT_LIST),
    [_BINARY_SUBSCR_STR_INTplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_ITER_NEXT_RANGE),
    [_BINARY_SUBSCR_STR_INTplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_ITER_NEXT_TUPLE),
    [_BINARY_SUBSCR_STR_INTplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_JUMP_TO_TOP),
    [_BINARY_SUBSCR_STR_INTplus_LIST_APPEND] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LIST_APPEND),
    [_BINARY_SUBSCR_STR_INTplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LIST_EXTEND),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_ASSERTION_ERROR),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_CLASS),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_INSTANCE_VALUE),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_NO_DICT),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_MODULE),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_SLOT),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_ATTR_WITH_HINT),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_BUILD_CLASS),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_CONST] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_CONST),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_DEREF),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_FAST] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_FAST),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_FAST_AND_CLEAR),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_FAST_CHECK),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_DEREF),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_BUILTINS),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_GLOBAL_MODULE),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_LOCALS),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_NAME] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_NAME),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_ATTR),
    [_BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_LOAD_SUPER_ATTR_METHOD),
    [_BINARY_SUBSCR_STR_INTplus_MAKE_CELL] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_MAKE_CELL),
    [_BINARY_SUBSCR_STR_INTplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_MAKE_FUNCTION),
    [_BINARY_SUBSCR_STR_INTplus_MAP_ADD] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_MAP_ADD),
    [_BINARY_SUBSCR_STR_INTplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_MATCH_CLASS),
    [_BINARY_SUBSCR_STR_INTplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_MATCH_KEYS),
    [_BINARY_SUBSCR_STR_INTplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_MATCH_MAPPING),
    [_BINARY_SUBSCR_STR_INTplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_MATCH_SEQUENCE),
    [_BINARY_SUBSCR_STR_INTplus_NOP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_NOP),
    [_BINARY_SUBSCR_STR_INTplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_POP_EXCEPT),
    [_BINARY_SUBSCR_STR_INTplus_POP_FRAME] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_POP_FRAME),
    [_BINARY_SUBSCR_STR_INTplus_POP_TOP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_POP_TOP),
    [_BINARY_SUBSCR_STR_INTplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_PUSH_EXC_INFO),
    [_BINARY_SUBSCR_STR_INTplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_PUSH_FRAME),
    [_BINARY_SUBSCR_STR_INTplus_PUSH_NULL] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_PUSH_NULL),
    [_BINARY_SUBSCR_STR_INTplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_RESUME_CHECK),
    [_BINARY_SUBSCR_STR_INTplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_SAVE_RETURN_OFFSET),
    [_BINARY_SUBSCR_STR_INTplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_SETUP_ANNOTATIONS),
    [_BINARY_SUBSCR_STR_INTplus_SET_ADD] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_SET_ADD),
    [_BINARY_SUBSCR_STR_INTplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_SET_FUNCTION_ATTRIBUTE),
    [_BINARY_SUBSCR_STR_INTplus_SET_IP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_SET_IP),
    [_BINARY_SUBSCR_STR_INTplus_SET_UPDATE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_SET_UPDATE),
    [_BINARY_SUBSCR_STR_INTplus_STORE_ATTR] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_STORE_ATTR),
    [_BINARY_SUBSCR_STR_INTplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_STORE_ATTR_INSTANCE_VALUE),
    [_BINARY_SUBSCR_STR_INTplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_STORE_ATTR_SLOT),
    [_BINARY_SUBSCR_STR_INTplus_STORE_DEREF] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_STORE_DEREF),
    [_BINARY_SUBSCR_STR_INTplus_STORE_FAST] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_STORE_FAST),
    [_BINARY_SUBSCR_STR_INTplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_STORE_GLOBAL),
    [_BINARY_SUBSCR_STR_INTplus_STORE_NAME] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_STORE_NAME),
    [_BINARY_SUBSCR_STR_INTplus_STORE_SLICE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_STORE_SLICE),
    [_BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR),
    [_BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_DICT),
    [_BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_STORE_SUBSCR_LIST_INT),
    [_BINARY_SUBSCR_STR_INTplus_SWAP] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_SWAP),
    [_BINARY_SUBSCR_STR_INTplus_TO_BOOL] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_TO_BOOL),
    [_BINARY_SUBSCR_STR_INTplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_TO_BOOL_ALWAYS_TRUE),
    [_BINARY_SUBSCR_STR_INTplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_TO_BOOL_BOOL),
    [_BINARY_SUBSCR_STR_INTplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_TO_BOOL_INT),
    [_BINARY_SUBSCR_STR_INTplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_TO_BOOL_LIST),
    [_BINARY_SUBSCR_STR_INTplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_TO_BOOL_NONE),
    [_BINARY_SUBSCR_STR_INTplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_TO_BOOL_STR),
    [_BINARY_SUBSCR_STR_INTplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_UNARY_INVERT),
    [_BINARY_SUBSCR_STR_INTplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_UNARY_NEGATIVE),
    [_BINARY_SUBSCR_STR_INTplus_UNARY_NOT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_UNARY_NOT),
    [_BINARY_SUBSCR_STR_INTplus_UNPACK_EX] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_UNPACK_EX),
    [_BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE),
    [_BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_LIST),
    [_BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TUPLE),
    [_BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_BINARY_SUBSCR_STR_INTplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INTplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
