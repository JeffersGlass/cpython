// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _CHECK_VALIDITYplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BEFORE_ASYNC_WITH.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 6a                         je      0x88 <_JIT_ENTRY+0x88>
// 1e: 48 89 3c 24                   movq    %rdi, (%rsp)
// 22: 49 89 d6                      movq    %rdx, %r14
// 25: 48 8b 6b f8                   movq    -0x8(%rbx), %rbp
// 29: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000002b:  R_X86_64_64  _PyObject_LookupSpecial
// 33: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000035:  R_X86_64_64  _PyRuntime
// 3d: 49 8d b5 68 a6 00 00          leaq    0xa668(%r13), %rsi
// 44: 48 89 ef                      movq    %rbp, %rdi
// 47: 41 ff d7                      callq   *%r15
// 4a: 48 85 c0                      testq   %rax, %rax
// 4d: 74 65                         je      0xb4 <_JIT_ENTRY+0xb4>
// 4f: 49 89 c4                      movq    %rax, %r12
// 52: 49 81 c5 a0 a6 00 00          addq    $0xa6a0, %r13           # imm = 0xA6A0
// 59: 48 89 ef                      movq    %rbp, %rdi
// 5c: 4c 89 ee                      movq    %r13, %rsi
// 5f: 41 ff d7                      callq   *%r15
// 62: 48 85 c0                      testq   %rax, %rax
// 65: 0f 84 93 00 00 00             je      0xfe <_JIT_ENTRY+0xfe>
// 6b: 49 89 c5                      movq    %rax, %r13
// 6e: 48 8b 45 00                   movq    (%rbp), %rax
// 72: 48 85 c0                      testq   %rax, %rax
// 75: 0f 8e b5 00 00 00             jle     0x130 <_JIT_ENTRY+0x130>
// 7b: 85 c0                         testl   %eax, %eax
// 7d: 0f 88 e9 00 00 00             js      0x16c <_JIT_ENTRY+0x16c>
// 83: e9 ce 00 00 00                jmp     0x156 <_JIT_ENTRY+0x156>
// 88: 48 29 fb                      subq    %rdi, %rbx
// 8b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 8f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 93: 89 5f 40                      movl    %ebx, 0x40(%rdi)
// 96: 48 8b 07                      movq    (%rdi), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: e9 ad 01 00 00                jmp     0x261 <_JIT_ENTRY+0x261>
// b4: 49 8b 46 68                   movq    0x68(%r14), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 74 0b                         je      0xc8 <_JIT_ENTRY+0xc8>
// bd: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// c2: 0f 85 84 01 00 00             jne     0x24c <_JIT_ENTRY+0x24c>
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  PyExc_TypeError
// d2: 48 8b 30                      movq    (%rax), %rsi
// d5: 48 8b 45 08                   movq    0x8(%rbp), %rax
// d9: 48 8b 48 18                   movq    0x18(%rax), %rcx
// dd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000df:  R_X86_64_64  .rodata.str1.1+0x39
// e7: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000e9:  R_X86_64_64  _PyErr_Format
// f1: 4c 89 f7                      movq    %r14, %rdi
// f4: 31 c0                         xorl    %eax, %eax
// f6: 41 ff d0                      callq   *%r8
// f9: e9 4e 01 00 00                jmp     0x24c <_JIT_ENTRY+0x24c>
// fe: 49 8b 46 68                   movq    0x68(%r14), %rax
// 102: 48 85 c0                      testq   %rax, %rax
// 105: 0f 84 bc 00 00 00             je      0x1c7 <_JIT_ENTRY+0x1c7>
// 10b: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 110: 0f 84 b1 00 00 00             je      0x1c7 <_JIT_ENTRY+0x1c7>
// 116: 49 8b 04 24                   movq    (%r12), %rax
// 11a: 48 85 c0                      testq   %rax, %rax
// 11d: 0f 8e e2 00 00 00             jle     0x205 <_JIT_ENTRY+0x205>
// 123: 85 c0                         testl   %eax, %eax
// 125: 0f 89 00 01 00 00             jns     0x22b <_JIT_ENTRY+0x22b>
// 12b: e9 1c 01 00 00                jmp     0x24c <_JIT_ENTRY+0x24c>
// 130: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000132:  R_X86_64_64  .rodata.str1.1
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_NegativeRefcount
// 144: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 149: 48 89 ea                      movq    %rbp, %rdx
// 14c: ff d0                         callq   *%rax
// 14e: 48 8b 45 00                   movq    (%rbp), %rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 78 16                         js      0x16c <_JIT_ENTRY+0x16c>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 160: ff d0                         callq   *%rax
// 162: 48 ff 4d 00                   decq    (%rbp)
// 166: 0f 84 04 01 00 00             je      0x270 <_JIT_ENTRY+0x270>
// 16c: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 171: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 178: 0f 84 13 01 00 00             je      0x291 <_JIT_ENTRY+0x291>
// 17e: 48 8b 40 38                   movq    0x38(%rax), %rax
// 182: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 0f 84 02 01 00 00             je      0x291 <_JIT_ENTRY+0x291>
// 18f: 4c 89 e7                      movq    %r12, %rdi
// 192: 31 f6                         xorl    %esi, %esi
// 194: 31 d2                         xorl    %edx, %edx
// 196: 31 c9                         xorl    %ecx, %ecx
// 198: ff d0                         callq   *%rax
// 19a: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000019c:  R_X86_64_64  _Py_CheckFunctionResult
// 1a4: 4c 89 f7                      movq    %r14, %rdi
// 1a7: 4c 89 e6                      movq    %r12, %rsi
// 1aa: 48 89 c2                      movq    %rax, %rdx
// 1ad: 31 c9                         xorl    %ecx, %ecx
// 1af: 41 ff d0                      callq   *%r8
// 1b2: 48 89 c5                      movq    %rax, %rbp
// 1b5: 49 8b 04 24                   movq    (%r12), %rax
// 1b9: 48 85 c0                      testq   %rax, %rax
// 1bc: 0f 8f 16 01 00 00             jg      0x2d8 <_JIT_ENTRY+0x2d8>
// 1c2: e9 ef 00 00 00                jmp     0x2b6 <_JIT_ENTRY+0x2b6>
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  PyExc_TypeError
// 1d1: 48 8b 30                      movq    (%rax), %rsi
// 1d4: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 1d8: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1dc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001de:  R_X86_64_64  .rodata.str1.1+0x84
// 1e6: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001e8:  R_X86_64_64  _PyErr_Format
// 1f0: 4c 89 f7                      movq    %r14, %rdi
// 1f3: 31 c0                         xorl    %eax, %eax
// 1f5: 41 ff d0                      callq   *%r8
// 1f8: 49 8b 04 24                   movq    (%r12), %rax
// 1fc: 48 85 c0                      testq   %rax, %rax
// 1ff: 0f 8f 1e ff ff ff             jg      0x123 <_JIT_ENTRY+0x123>
// 205: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000207:  R_X86_64_64  .rodata.str1.1
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_NegativeRefcount
// 219: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 21e: 4c 89 e2                      movq    %r12, %rdx
// 221: ff d0                         callq   *%rax
// 223: 49 8b 04 24                   movq    (%r12), %rax
// 227: 85 c0                         testl   %eax, %eax
// 229: 78 21                         js      0x24c <_JIT_ENTRY+0x24c>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 235: ff d0                         callq   *%rax
// 237: 49 ff 0c 24                   decq    (%r12)
// 23b: 75 0f                         jne     0x24c <_JIT_ENTRY+0x24c>
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _Py_Dealloc
// 247: 4c 89 e7                      movq    %r12, %rdi
// 24a: ff d0                         callq   *%rax
// 24c: 4c 8b 34 24                   movq    (%rsp), %r14
// 250: 4c 29 f3                      subq    %r14, %rbx
// 253: 48 83 c3 b8                   addq    $-0x48, %rbx
// 257: 48 c1 eb 03                   shrq    $0x3, %rbx
// 25b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 25f: 31 c0                         xorl    %eax, %eax
// 261: 48 83 c4 08                   addq    $0x8, %rsp
// 265: 5b                            popq    %rbx
// 266: 41 5c                         popq    %r12
// 268: 41 5d                         popq    %r13
// 26a: 41 5e                         popq    %r14
// 26c: 41 5f                         popq    %r15
// 26e: 5d                            popq    %rbp
// 26f: c3                            retq
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_Dealloc
// 27a: 48 89 ef                      movq    %rbp, %rdi
// 27d: ff d0                         callq   *%rax
// 27f: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 284: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 28b: 0f 85 ed fe ff ff             jne     0x17e <_JIT_ENTRY+0x17e>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _PyObject_MakeTpCall
// 29b: 4c 89 f7                      movq    %r14, %rdi
// 29e: 4c 89 e6                      movq    %r12, %rsi
// 2a1: 31 d2                         xorl    %edx, %edx
// 2a3: 31 c9                         xorl    %ecx, %ecx
// 2a5: 45 31 c0                      xorl    %r8d, %r8d
// 2a8: ff d0                         callq   *%rax
// 2aa: 48 89 c5                      movq    %rax, %rbp
// 2ad: 49 8b 04 24                   movq    (%r12), %rax
// 2b1: 48 85 c0                      testq   %rax, %rax
// 2b4: 7f 22                         jg      0x2d8 <_JIT_ENTRY+0x2d8>
// 2b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b8:  R_X86_64_64  .rodata.str1.1
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_NegativeRefcount
// 2ca: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 2cf: 4c 89 e2                      movq    %r12, %rdx
// 2d2: ff d0                         callq   *%rax
// 2d4: 49 8b 04 24                   movq    (%r12), %rax
// 2d8: 85 c0                         testl   %eax, %eax
// 2da: 78 21                         js      0x2fd <_JIT_ENTRY+0x2fd>
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e6: ff d0                         callq   *%rax
// 2e8: 49 ff 0c 24                   decq    (%r12)
// 2ec: 75 0f                         jne     0x2fd <_JIT_ENTRY+0x2fd>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_Dealloc
// 2f8: 4c 89 e7                      movq    %r12, %rdi
// 2fb: ff d0                         callq   *%rax
// 2fd: 48 85 ed                      testq   %rbp, %rbp
// 300: 74 2f                         je      0x331 <_JIT_ENTRY+0x331>
// 302: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 306: 48 89 2b                      movq    %rbp, (%rbx)
// 309: 48 83 c3 08                   addq    $0x8, %rbx
// 30d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030f:  R_X86_64_64  _JIT_CONTINUE
// 317: 48 8b 3c 24                   movq    (%rsp), %rdi
// 31b: 48 89 de                      movq    %rbx, %rsi
// 31e: 4c 89 f2                      movq    %r14, %rdx
// 321: 48 83 c4 08                   addq    $0x8, %rsp
// 325: 5b                            popq    %rbx
// 326: 41 5c                         popq    %r12
// 328: 41 5d                         popq    %r13
// 32a: 41 5e                         popq    %r14
// 32c: 41 5f                         popq    %r15
// 32e: 5d                            popq    %rbp
// 32f: ff e0                         jmpq    *%rax
// 331: 49 8b 45 00                   movq    (%r13), %rax
// 335: 48 85 c0                      testq   %rax, %rax
// 338: 4c 8b 34 24                   movq    (%rsp), %r14
// 33c: 7f 22                         jg      0x360 <_JIT_ENTRY+0x360>
// 33e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000340:  R_X86_64_64  .rodata.str1.1
// 348: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034a:  R_X86_64_64  _Py_NegativeRefcount
// 352: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 357: 4c 89 ea                      movq    %r13, %rdx
// 35a: ff d0                         callq   *%rax
// 35c: 49 8b 45 00                   movq    (%r13), %rax
// 360: 48 83 c3 f8                   addq    $-0x8, %rbx
// 364: 85 c0                         testl   %eax, %eax
// 366: 0f 88 e4 fe ff ff             js      0x250 <_JIT_ENTRY+0x250>
// 36c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 376: ff d0                         callq   *%rax
// 378: 49 ff 4d 00                   decq    (%r13)
// 37c: 0f 85 ce fe ff ff             jne     0x250 <_JIT_ENTRY+0x250>
// 382: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000384:  R_X86_64_64  _Py_Dealloc
// 38c: 4c 89 ef                      movq    %r13, %rdi
// 38f: ff d0                         callq   *%rax
// 391: e9 ba fe ff ff                jmp     0x250 <_JIT_ENTRY+0x250>
// 396: 
static const unsigned char _CHECK_VALIDITYplus_BEFORE_ASYNC_WITH_code_body[919] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x6a, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x89, 0xd6, 0x48, 0x8b, 0x6b, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x68, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x41, 0xff, 0xd7, 0x48, 0x85, 0xc0, 0x74, 0x65, 0x49, 0x89, 0xc4, 0x49, 0x81, 0xc5, 0xa0, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd7, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xe9, 0x00, 0x00, 0x00, 0xe9, 0xce, 0x00, 0x00, 0x00, 0x48, 0x29, 0xfb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xad, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x84, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0x4e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xe2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x00, 0x01, 0x00, 0x00, 0xe9, 0x1c, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x04, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x13, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x02, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x16, 0x01, 0x00, 0x00, 0xe9, 0xef, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x1e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x34, 0x24, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x85, 0xed, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x2f, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x0f, 0x88, 0xe4, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xce, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0xba, 0xfe, 0xff, 0xff};
static const Hole _CHECK_VALIDITYplus_BEFORE_ASYNC_WITH_code_holes[30] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x35, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x84},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x340, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x34a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x384, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00"
// e9: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BEFORE_ASYNC_WITH_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BEFORE_ASYNC_WITH_data_holes[1];

// _CHECK_VALIDITYplus_BEFORE_WITH
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BEFORE_WITH.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 6a                         je      0x88 <_JIT_ENTRY+0x88>
// 1e: 48 89 3c 24                   movq    %rdi, (%rsp)
// 22: 49 89 d6                      movq    %rdx, %r14
// 25: 48 8b 6b f8                   movq    -0x8(%rbx), %rbp
// 29: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000002b:  R_X86_64_64  _PyObject_LookupSpecial
// 33: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000035:  R_X86_64_64  _PyRuntime
// 3d: 49 8d b5 50 ae 00 00          leaq    0xae50(%r13), %rsi
// 44: 48 89 ef                      movq    %rbp, %rdi
// 47: 41 ff d7                      callq   *%r15
// 4a: 48 85 c0                      testq   %rax, %rax
// 4d: 74 65                         je      0xb4 <_JIT_ENTRY+0xb4>
// 4f: 49 89 c4                      movq    %rax, %r12
// 52: 49 81 c5 b8 ae 00 00          addq    $0xaeb8, %r13           # imm = 0xAEB8
// 59: 48 89 ef                      movq    %rbp, %rdi
// 5c: 4c 89 ee                      movq    %r13, %rsi
// 5f: 41 ff d7                      callq   *%r15
// 62: 48 85 c0                      testq   %rax, %rax
// 65: 0f 84 93 00 00 00             je      0xfe <_JIT_ENTRY+0xfe>
// 6b: 49 89 c5                      movq    %rax, %r13
// 6e: 48 8b 45 00                   movq    (%rbp), %rax
// 72: 48 85 c0                      testq   %rax, %rax
// 75: 0f 8e b5 00 00 00             jle     0x130 <_JIT_ENTRY+0x130>
// 7b: 85 c0                         testl   %eax, %eax
// 7d: 0f 88 e9 00 00 00             js      0x16c <_JIT_ENTRY+0x16c>
// 83: e9 ce 00 00 00                jmp     0x156 <_JIT_ENTRY+0x156>
// 88: 48 29 fb                      subq    %rdi, %rbx
// 8b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 8f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 93: 89 5f 40                      movl    %ebx, 0x40(%rdi)
// 96: 48 8b 07                      movq    (%rdi), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: e9 ad 01 00 00                jmp     0x261 <_JIT_ENTRY+0x261>
// b4: 49 8b 46 68                   movq    0x68(%r14), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 74 0b                         je      0xc8 <_JIT_ENTRY+0xc8>
// bd: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// c2: 0f 85 84 01 00 00             jne     0x24c <_JIT_ENTRY+0x24c>
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  PyExc_TypeError
// d2: 48 8b 30                      movq    (%rax), %rsi
// d5: 48 8b 45 08                   movq    0x8(%rbp), %rax
// d9: 48 8b 48 18                   movq    0x18(%rax), %rcx
// dd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000df:  R_X86_64_64  .rodata.str1.1+0x39
// e7: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000e9:  R_X86_64_64  _PyErr_Format
// f1: 4c 89 f7                      movq    %r14, %rdi
// f4: 31 c0                         xorl    %eax, %eax
// f6: 41 ff d0                      callq   *%r8
// f9: e9 4e 01 00 00                jmp     0x24c <_JIT_ENTRY+0x24c>
// fe: 49 8b 46 68                   movq    0x68(%r14), %rax
// 102: 48 85 c0                      testq   %rax, %rax
// 105: 0f 84 bc 00 00 00             je      0x1c7 <_JIT_ENTRY+0x1c7>
// 10b: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 110: 0f 84 b1 00 00 00             je      0x1c7 <_JIT_ENTRY+0x1c7>
// 116: 49 8b 04 24                   movq    (%r12), %rax
// 11a: 48 85 c0                      testq   %rax, %rax
// 11d: 0f 8e e2 00 00 00             jle     0x205 <_JIT_ENTRY+0x205>
// 123: 85 c0                         testl   %eax, %eax
// 125: 0f 89 00 01 00 00             jns     0x22b <_JIT_ENTRY+0x22b>
// 12b: e9 1c 01 00 00                jmp     0x24c <_JIT_ENTRY+0x24c>
// 130: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000132:  R_X86_64_64  .rodata.str1.1
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_NegativeRefcount
// 144: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 149: 48 89 ea                      movq    %rbp, %rdx
// 14c: ff d0                         callq   *%rax
// 14e: 48 8b 45 00                   movq    (%rbp), %rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 78 16                         js      0x16c <_JIT_ENTRY+0x16c>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 160: ff d0                         callq   *%rax
// 162: 48 ff 4d 00                   decq    (%rbp)
// 166: 0f 84 04 01 00 00             je      0x270 <_JIT_ENTRY+0x270>
// 16c: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 171: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 178: 0f 84 13 01 00 00             je      0x291 <_JIT_ENTRY+0x291>
// 17e: 48 8b 40 38                   movq    0x38(%rax), %rax
// 182: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 0f 84 02 01 00 00             je      0x291 <_JIT_ENTRY+0x291>
// 18f: 4c 89 e7                      movq    %r12, %rdi
// 192: 31 f6                         xorl    %esi, %esi
// 194: 31 d2                         xorl    %edx, %edx
// 196: 31 c9                         xorl    %ecx, %ecx
// 198: ff d0                         callq   *%rax
// 19a: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000019c:  R_X86_64_64  _Py_CheckFunctionResult
// 1a4: 4c 89 f7                      movq    %r14, %rdi
// 1a7: 4c 89 e6                      movq    %r12, %rsi
// 1aa: 48 89 c2                      movq    %rax, %rdx
// 1ad: 31 c9                         xorl    %ecx, %ecx
// 1af: 41 ff d0                      callq   *%r8
// 1b2: 48 89 c5                      movq    %rax, %rbp
// 1b5: 49 8b 04 24                   movq    (%r12), %rax
// 1b9: 48 85 c0                      testq   %rax, %rax
// 1bc: 0f 8f 16 01 00 00             jg      0x2d8 <_JIT_ENTRY+0x2d8>
// 1c2: e9 ef 00 00 00                jmp     0x2b6 <_JIT_ENTRY+0x2b6>
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  PyExc_TypeError
// 1d1: 48 8b 30                      movq    (%rax), %rsi
// 1d4: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 1d8: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1dc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001de:  R_X86_64_64  .rodata.str1.1+0x77
// 1e6: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001e8:  R_X86_64_64  _PyErr_Format
// 1f0: 4c 89 f7                      movq    %r14, %rdi
// 1f3: 31 c0                         xorl    %eax, %eax
// 1f5: 41 ff d0                      callq   *%r8
// 1f8: 49 8b 04 24                   movq    (%r12), %rax
// 1fc: 48 85 c0                      testq   %rax, %rax
// 1ff: 0f 8f 1e ff ff ff             jg      0x123 <_JIT_ENTRY+0x123>
// 205: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000207:  R_X86_64_64  .rodata.str1.1
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_NegativeRefcount
// 219: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 21e: 4c 89 e2                      movq    %r12, %rdx
// 221: ff d0                         callq   *%rax
// 223: 49 8b 04 24                   movq    (%r12), %rax
// 227: 85 c0                         testl   %eax, %eax
// 229: 78 21                         js      0x24c <_JIT_ENTRY+0x24c>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 235: ff d0                         callq   *%rax
// 237: 49 ff 0c 24                   decq    (%r12)
// 23b: 75 0f                         jne     0x24c <_JIT_ENTRY+0x24c>
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _Py_Dealloc
// 247: 4c 89 e7                      movq    %r12, %rdi
// 24a: ff d0                         callq   *%rax
// 24c: 4c 8b 34 24                   movq    (%rsp), %r14
// 250: 4c 29 f3                      subq    %r14, %rbx
// 253: 48 83 c3 b8                   addq    $-0x48, %rbx
// 257: 48 c1 eb 03                   shrq    $0x3, %rbx
// 25b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 25f: 31 c0                         xorl    %eax, %eax
// 261: 48 83 c4 08                   addq    $0x8, %rsp
// 265: 5b                            popq    %rbx
// 266: 41 5c                         popq    %r12
// 268: 41 5d                         popq    %r13
// 26a: 41 5e                         popq    %r14
// 26c: 41 5f                         popq    %r15
// 26e: 5d                            popq    %rbp
// 26f: c3                            retq
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_Dealloc
// 27a: 48 89 ef                      movq    %rbp, %rdi
// 27d: ff d0                         callq   *%rax
// 27f: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 284: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 28b: 0f 85 ed fe ff ff             jne     0x17e <_JIT_ENTRY+0x17e>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _PyObject_MakeTpCall
// 29b: 4c 89 f7                      movq    %r14, %rdi
// 29e: 4c 89 e6                      movq    %r12, %rsi
// 2a1: 31 d2                         xorl    %edx, %edx
// 2a3: 31 c9                         xorl    %ecx, %ecx
// 2a5: 45 31 c0                      xorl    %r8d, %r8d
// 2a8: ff d0                         callq   *%rax
// 2aa: 48 89 c5                      movq    %rax, %rbp
// 2ad: 49 8b 04 24                   movq    (%r12), %rax
// 2b1: 48 85 c0                      testq   %rax, %rax
// 2b4: 7f 22                         jg      0x2d8 <_JIT_ENTRY+0x2d8>
// 2b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b8:  R_X86_64_64  .rodata.str1.1
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_NegativeRefcount
// 2ca: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 2cf: 4c 89 e2                      movq    %r12, %rdx
// 2d2: ff d0                         callq   *%rax
// 2d4: 49 8b 04 24                   movq    (%r12), %rax
// 2d8: 85 c0                         testl   %eax, %eax
// 2da: 78 21                         js      0x2fd <_JIT_ENTRY+0x2fd>
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e6: ff d0                         callq   *%rax
// 2e8: 49 ff 0c 24                   decq    (%r12)
// 2ec: 75 0f                         jne     0x2fd <_JIT_ENTRY+0x2fd>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_Dealloc
// 2f8: 4c 89 e7                      movq    %r12, %rdi
// 2fb: ff d0                         callq   *%rax
// 2fd: 48 85 ed                      testq   %rbp, %rbp
// 300: 74 2f                         je      0x331 <_JIT_ENTRY+0x331>
// 302: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 306: 48 89 2b                      movq    %rbp, (%rbx)
// 309: 48 83 c3 08                   addq    $0x8, %rbx
// 30d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030f:  R_X86_64_64  _JIT_CONTINUE
// 317: 48 8b 3c 24                   movq    (%rsp), %rdi
// 31b: 48 89 de                      movq    %rbx, %rsi
// 31e: 4c 89 f2                      movq    %r14, %rdx
// 321: 48 83 c4 08                   addq    $0x8, %rsp
// 325: 5b                            popq    %rbx
// 326: 41 5c                         popq    %r12
// 328: 41 5d                         popq    %r13
// 32a: 41 5e                         popq    %r14
// 32c: 41 5f                         popq    %r15
// 32e: 5d                            popq    %rbp
// 32f: ff e0                         jmpq    *%rax
// 331: 49 8b 45 00                   movq    (%r13), %rax
// 335: 48 85 c0                      testq   %rax, %rax
// 338: 4c 8b 34 24                   movq    (%rsp), %r14
// 33c: 7f 22                         jg      0x360 <_JIT_ENTRY+0x360>
// 33e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000340:  R_X86_64_64  .rodata.str1.1
// 348: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034a:  R_X86_64_64  _Py_NegativeRefcount
// 352: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 357: 4c 89 ea                      movq    %r13, %rdx
// 35a: ff d0                         callq   *%rax
// 35c: 49 8b 45 00                   movq    (%r13), %rax
// 360: 48 83 c3 f8                   addq    $-0x8, %rbx
// 364: 85 c0                         testl   %eax, %eax
// 366: 0f 88 e4 fe ff ff             js      0x250 <_JIT_ENTRY+0x250>
// 36c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 376: ff d0                         callq   *%rax
// 378: 49 ff 4d 00                   decq    (%r13)
// 37c: 0f 85 ce fe ff ff             jne     0x250 <_JIT_ENTRY+0x250>
// 382: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000384:  R_X86_64_64  _Py_Dealloc
// 38c: 4c 89 ef                      movq    %r13, %rdi
// 38f: ff d0                         callq   *%rax
// 391: e9 ba fe ff ff                jmp     0x250 <_JIT_ENTRY+0x250>
// 396: 
static const unsigned char _CHECK_VALIDITYplus_BEFORE_WITH_code_body[919] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x6a, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x89, 0xd6, 0x48, 0x8b, 0x6b, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x50, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x41, 0xff, 0xd7, 0x48, 0x85, 0xc0, 0x74, 0x65, 0x49, 0x89, 0xc4, 0x49, 0x81, 0xc5, 0xb8, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd7, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xe9, 0x00, 0x00, 0x00, 0xe9, 0xce, 0x00, 0x00, 0x00, 0x48, 0x29, 0xfb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xad, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x84, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0x4e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xe2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x00, 0x01, 0x00, 0x00, 0xe9, 0x1c, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x04, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x13, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x02, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x16, 0x01, 0x00, 0x00, 0xe9, 0xef, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x1e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x34, 0x24, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x85, 0xed, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x2f, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x0f, 0x88, 0xe4, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xce, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0xba, 0xfe, 0xff, 0xff};
static const Hole _CHECK_VALIDITYplus_BEFORE_WITH_code_holes[30] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x35, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x77},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x340, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x34a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x384, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00"
// ce: 00 00
static const unsigned char _CHECK_VALIDITYplus_BEFORE_WITH_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BEFORE_WITH_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_OP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_OP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 3d                         je      0x5e <_JIT_ENTRY+0x5e>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  _JIT_OPARG
// 36: 0f b7 c0                      movzwl  %ax, %eax
// 39: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000003b:  R_X86_64_64  _PyEval_BinaryOps
// 43: 48 89 ef                      movq    %rbp, %rdi
// 46: 4c 89 ee                      movq    %r13, %rsi
// 49: ff 14 c1                      callq   *(%rcx,%rax,8)
// 4c: 49 89 c4                      movq    %rax, %r12
// 4f: 48 8b 45 00                   movq    (%rbp), %rax
// 53: 48 85 c0                      testq   %rax, %rax
// 56: 7e 33                         jle     0x8b <_JIT_ENTRY+0x8b>
// 58: 85 c0                         testl   %eax, %eax
// 5a: 79 55                         jns     0xb1 <_JIT_ENTRY+0xb1>
// 5c: eb 65                         jmp     0xc3 <_JIT_ENTRY+0xc3>
// 5e: 49 29 de                      subq    %rbx, %r14
// 61: 49 83 c6 b8                   addq    $-0x48, %r14
// 65: 49 c1 ee 03                   shrq    $0x3, %r14
// 69: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 6d: 48 8b 03                      movq    (%rbx), %rax
// 70: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000072:  R_X86_64_64  _JIT_TARGET
// 7a: 89 c9                         movl    %ecx, %ecx
// 7c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 80: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 86: e9 f2 00 00 00                jmp     0x17d <_JIT_ENTRY+0x17d>
// 8b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008d:  R_X86_64_64  .rodata.str1.1
// 95: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000097:  R_X86_64_64  _Py_NegativeRefcount
// 9f: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// a4: 48 89 ea                      movq    %rbp, %rdx
// a7: ff d0                         callq   *%rax
// a9: 48 8b 45 00                   movq    (%rbp), %rax
// ad: 85 c0                         testl   %eax, %eax
// af: 78 12                         js      0xc3 <_JIT_ENTRY+0xc3>
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bb: ff d0                         callq   *%rax
// bd: 48 ff 4d 00                   decq    (%rbp)
// c1: 74 0f                         je      0xd2 <_JIT_ENTRY+0xd2>
// c3: 49 8b 45 00                   movq    (%r13), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 1e                         jle     0xea <_JIT_ENTRY+0xea>
// cc: 85 c0                         testl   %eax, %eax
// ce: 79 40                         jns     0x110 <_JIT_ENTRY+0x110>
// d0: eb 50                         jmp     0x122 <_JIT_ENTRY+0x122>
// d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d4:  R_X86_64_64  _Py_Dealloc
// dc: 48 89 ef                      movq    %rbp, %rdi
// df: ff d0                         callq   *%rax
// e1: 49 8b 45 00                   movq    (%r13), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7f e2                         jg      0xcc <_JIT_ENTRY+0xcc>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_NegativeRefcount
// fe: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 103: 4c 89 ea                      movq    %r13, %rdx
// 106: ff d0                         callq   *%rax
// 108: 49 8b 45 00                   movq    (%r13), %rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 78 12                         js      0x122 <_JIT_ENTRY+0x122>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11a: ff d0                         callq   *%rax
// 11c: 49 ff 4d 00                   decq    (%r13)
// 120: 74 33                         je      0x155 <_JIT_ENTRY+0x155>
// 122: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 126: 4d 85 e4                      testq   %r12, %r12
// 129: 74 42                         je      0x16d <_JIT_ENTRY+0x16d>
// 12b: 49 83 c6 f8                   addq    $-0x8, %r14
// 12f: 4c 89 20                      movq    %r12, (%rax)
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _JIT_CONTINUE
// 13c: 48 89 df                      movq    %rbx, %rdi
// 13f: 4c 89 f6                      movq    %r14, %rsi
// 142: 4c 89 fa                      movq    %r15, %rdx
// 145: 48 83 c4 08                   addq    $0x8, %rsp
// 149: 5b                            popq    %rbx
// 14a: 41 5c                         popq    %r12
// 14c: 41 5d                         popq    %r13
// 14e: 41 5e                         popq    %r14
// 150: 41 5f                         popq    %r15
// 152: 5d                            popq    %rbp
// 153: ff e0                         jmpq    *%rax
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_Dealloc
// 15f: 4c 89 ef                      movq    %r13, %rdi
// 162: ff d0                         callq   *%rax
// 164: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 168: 4d 85 e4                      testq   %r12, %r12
// 16b: 75 be                         jne     0x12b <_JIT_ENTRY+0x12b>
// 16d: 48 29 d8                      subq    %rbx, %rax
// 170: 48 83 c0 b8                   addq    $-0x48, %rax
// 174: 48 c1 e8 03                   shrq    $0x3, %rax
// 178: 89 43 40                      movl    %eax, 0x40(%rbx)
// 17b: 31 c0                         xorl    %eax, %eax
// 17d: 48 83 c4 08                   addq    $0x8, %rsp
// 181: 5b                            popq    %rbx
// 182: 41 5c                         popq    %r12
// 184: 41 5d                         popq    %r13
// 186: 41 5e                         popq    %r14
// 188: 41 5f                         popq    %r15
// 18a: 5d                            popq    %rbp
// 18b: c3                            retq
// 18c: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_code_body[397] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3d, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x6e, 0xf0, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xf2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x33, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x42, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x75, 0xbe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_BINARY_OP_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BINARY_OP_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_OP_ADD_FLOAT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 5b                         je      0x7c <_JIT_ENTRY+0x7c>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 28: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 2c: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 31: f2 41 0f 58 44 24 10          addsd   0x10(%r12), %xmm0
// 38: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 3d: 75 74                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 3f: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 44: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 4a: 75 28                         jne     0x74 <_JIT_ENTRY+0x74>
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  PyInterpreterState_Get
// 56: ff d0                         callq   *%rax
// 58: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 5f: 49 ff 0c 24                   decq    (%r12)
// 63: 75 0f                         jne     0x74 <_JIT_ENTRY+0x74>
// 65: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000067:  R_X86_64_64  _PyFloat_ExactDealloc
// 6f: 4c 89 e7                      movq    %r12, %rdi
// 72: ff d0                         callq   *%rax
// 74: 49 89 ec                      movq    %rbp, %r12
// 77: e9 22 01 00 00                jmp     0x19e <_JIT_ENTRY+0x19e>
// 7c: 4c 29 f3                      subq    %r14, %rbx
// 7f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 83: 48 c1 eb 03                   shrq    $0x3, %rbx
// 87: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 8b: 49 8b 06                      movq    (%r14), %rax
// 8e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000090:  R_X86_64_64  _JIT_TARGET
// 98: 89 c9                         movl    %ecx, %ecx
// 9a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a4: 48 83 c4 08                   addq    $0x8, %rsp
// a8: 5b                            popq    %rbx
// a9: 41 5c                         popq    %r12
// ab: 41 5d                         popq    %r13
// ad: 41 5e                         popq    %r14
// af: 41 5f                         popq    %r15
// b1: 5d                            popq    %rbp
// b2: c3                            retq
// b3: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// b8: 75 3c                         jne     0xf6 <_JIT_ENTRY+0xf6>
// ba: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// c1: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// c5: 0f 85 d3 00 00 00             jne     0x19e <_JIT_ENTRY+0x19e>
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  PyInterpreterState_Get
// d5: ff d0                         callq   *%rax
// d7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// e6: 48 89 4d 00                   movq    %rcx, (%rbp)
// ea: 48 83 f8 01                   cmpq    $0x1, %rax
// ee: 0f 8f aa 00 00 00             jg      0x19e <_JIT_ENTRY+0x19e>
// f4: eb 6f                         jmp     0x165 <_JIT_ENTRY+0x165>
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  PyFloat_FromDouble
// 100: ff d0                         callq   *%rax
// 102: 48 85 c0                      testq   %rax, %rax
// 105: 74 7e                         je      0x185 <_JIT_ENTRY+0x185>
// 107: 49 89 c5                      movq    %rax, %r13
// 10a: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 10e: 75 25                         jne     0x135 <_JIT_ENTRY+0x135>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  PyInterpreterState_Get
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 123: 48 8b 45 00                   movq    (%rbp), %rax
// 127: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 12b: 48 89 4d 00                   movq    %rcx, (%rbp)
// 12f: 48 83 f8 01                   cmpq    $0x1, %rax
// 133: 7e 30                         jle     0x165 <_JIT_ENTRY+0x165>
// 135: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 13b: 75 5e                         jne     0x19b <_JIT_ENTRY+0x19b>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyInterpreterState_Get
// 147: ff d0                         callq   *%rax
// 149: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 150: 49 8b 04 24                   movq    (%r12), %rax
// 154: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 158: 49 89 0c 24                   movq    %rcx, (%r12)
// 15c: 4d 89 ec                      movq    %r13, %r12
// 15f: 48 83 f8 01                   cmpq    $0x1, %rax
// 163: 7f 39                         jg      0x19e <_JIT_ENTRY+0x19e>
// 165: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000167:  R_X86_64_64  .rodata.str1.1
// 16f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000171:  R_X86_64_64  .rodata.str1.1+0x16
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 183: ff d0                         callq   *%rax
// 185: 4c 29 f3                      subq    %r14, %rbx
// 188: 48 83 c3 b8                   addq    $-0x48, %rbx
// 18c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 190: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 194: 31 c0                         xorl    %eax, %eax
// 196: e9 09 ff ff ff                jmp     0xa4 <_JIT_ENTRY+0xa4>
// 19b: 4d 89 ec                      movq    %r13, %r12
// 19e: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 1a2: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _JIT_CONTINUE
// 1b0: 4c 89 f7                      movq    %r14, %rdi
// 1b3: 48 89 de                      movq    %rbx, %rsi
// 1b6: 4c 89 fa                      movq    %r15, %rdx
// 1b9: 48 83 c4 08                   addq    $0x8, %rsp
// 1bd: 5b                            popq    %rbx
// 1be: 41 5c                         popq    %r12
// 1c0: 41 5d                         popq    %r13
// 1c2: 41 5e                         popq    %r14
// 1c4: 41 5f                         popq    %r15
// 1c6: 5d                            popq    %rbp
// 1c7: ff e0                         jmpq    *%rax
// 1c9: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_ADD_FLOAT_code_body[458] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x5b, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x74, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0x22, 0x01, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3c, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xaa, 0x00, 0x00, 0x00, 0xeb, 0x6f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7e, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x5e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x39, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x09, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0x4c, 0x89, 0x63, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_BINARY_OP_ADD_FLOAT_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 3d: 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_ADD_FLOAT_data_body[65] = {0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_OP_ADD_INT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_OP_ADD_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 7a                         je      0x9b <_JIT_ENTRY+0x9b>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 28: 49 8b 6e f8                   movq    -0x8(%r14), %rbp
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  _PyLong_Add
// 36: 4c 89 ef                      movq    %r13, %rdi
// 39: 48 89 ee                      movq    %rbp, %rsi
// 3c: ff d0                         callq   *%rax
// 3e: 49 89 c4                      movq    %rax, %r12
// 41: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 45: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000047:  R_X86_64_64  PyInterpreterState_Get
// 4f: 75 23                         jne     0x74 <_JIT_ENTRY+0x74>
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  PyInterpreterState_Get
// 5b: ff d0                         callq   *%rax
// 5d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 64: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000066:  R_X86_64_64  PyInterpreterState_Get
// 6e: 48 ff 4d 00                   decq    (%rbp)
// 72: 74 51                         je      0xc5 <_JIT_ENTRY+0xc5>
// 74: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 79: 75 6a                         jne     0xe5 <_JIT_ENTRY+0xe5>
// 7b: ff d1                         callq   *%rcx
// 7d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 84: 49 ff 4d 00                   decq    (%r13)
// 88: 75 5b                         jne     0xe5 <_JIT_ENTRY+0xe5>
// 8a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008c:  R_X86_64_64  PyObject_Free
// 94: 4c 89 ef                      movq    %r13, %rdi
// 97: ff d0                         callq   *%rax
// 99: eb 4a                         jmp     0xe5 <_JIT_ENTRY+0xe5>
// 9b: 49 29 de                      subq    %rbx, %r14
// 9e: 49 83 c6 b8                   addq    $-0x48, %r14
// a2: 49 c1 ee 03                   shrq    $0x3, %r14
// a6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// aa: 48 8b 03                      movq    (%rbx), %rax
// ad: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000af:  R_X86_64_64  _JIT_TARGET
// b7: 89 c9                         movl    %ecx, %ecx
// b9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// bd: 48 05 c8 00 00 00             addq    $0xc8, %rax
// c3: eb 63                         jmp     0x128 <_JIT_ENTRY+0x128>
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  PyObject_Free
// cf: 48 89 ef                      movq    %rbp, %rdi
// d2: ff d0                         callq   *%rax
// d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d6:  R_X86_64_64  PyInterpreterState_Get
// de: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// e3: 74 96                         je      0x7b <_JIT_ENTRY+0x7b>
// e5: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// e9: 4d 85 e4                      testq   %r12, %r12
// ec: 74 2a                         je      0x118 <_JIT_ENTRY+0x118>
// ee: 49 83 c6 f8                   addq    $-0x8, %r14
// f2: 4c 89 20                      movq    %r12, (%rax)
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _JIT_CONTINUE
// ff: 48 89 df                      movq    %rbx, %rdi
// 102: 4c 89 f6                      movq    %r14, %rsi
// 105: 4c 89 fa                      movq    %r15, %rdx
// 108: 48 83 c4 08                   addq    $0x8, %rsp
// 10c: 5b                            popq    %rbx
// 10d: 41 5c                         popq    %r12
// 10f: 41 5d                         popq    %r13
// 111: 41 5e                         popq    %r14
// 113: 41 5f                         popq    %r15
// 115: 5d                            popq    %rbp
// 116: ff e0                         jmpq    *%rax
// 118: 48 29 d8                      subq    %rbx, %rax
// 11b: 48 83 c0 b8                   addq    $-0x48, %rax
// 11f: 48 c1 e8 03                   shrq    $0x3, %rax
// 123: 89 43 40                      movl    %eax, 0x40(%rbx)
// 126: 31 c0                         xorl    %eax, %eax
// 128: 48 83 c4 08                   addq    $0x8, %rsp
// 12c: 5b                            popq    %rbx
// 12d: 41 5c                         popq    %r12
// 12f: 41 5d                         popq    %r13
// 131: 41 5e                         popq    %r14
// 133: 41 5f                         popq    %r15
// 135: 5d                            popq    %rbp
// 136: c3                            retq
// 137: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_ADD_INT_code_body[312] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x7a, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf0, 0x49, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x51, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x6a, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x5b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x4a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0x96, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_BINARY_OP_ADD_INT_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_ADD_INT_data_body[1];
static const Hole _CHECK_VALIDITYplus_BINARY_OP_ADD_INT_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_OP_ADD_UNICODE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 7a                         je      0x9b <_JIT_ENTRY+0x9b>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  PyUnicode_Concat
// 36: 48 89 ef                      movq    %rbp, %rdi
// 39: 4c 89 ee                      movq    %r13, %rsi
// 3c: ff d0                         callq   *%rax
// 3e: 49 89 c4                      movq    %rax, %r12
// 41: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 45: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000047:  R_X86_64_64  PyInterpreterState_Get
// 4f: 75 23                         jne     0x74 <_JIT_ENTRY+0x74>
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  PyInterpreterState_Get
// 5b: ff d0                         callq   *%rax
// 5d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 64: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000066:  R_X86_64_64  PyInterpreterState_Get
// 6e: 48 ff 4d 00                   decq    (%rbp)
// 72: 74 51                         je      0xc5 <_JIT_ENTRY+0xc5>
// 74: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 79: 75 6a                         jne     0xe5 <_JIT_ENTRY+0xe5>
// 7b: ff d1                         callq   *%rcx
// 7d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 84: 49 ff 4d 00                   decq    (%r13)
// 88: 75 5b                         jne     0xe5 <_JIT_ENTRY+0xe5>
// 8a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008c:  R_X86_64_64  _PyUnicode_ExactDealloc
// 94: 4c 89 ef                      movq    %r13, %rdi
// 97: ff d0                         callq   *%rax
// 99: eb 4a                         jmp     0xe5 <_JIT_ENTRY+0xe5>
// 9b: 49 29 de                      subq    %rbx, %r14
// 9e: 49 83 c6 b8                   addq    $-0x48, %r14
// a2: 49 c1 ee 03                   shrq    $0x3, %r14
// a6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// aa: 48 8b 03                      movq    (%rbx), %rax
// ad: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000af:  R_X86_64_64  _JIT_TARGET
// b7: 89 c9                         movl    %ecx, %ecx
// b9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// bd: 48 05 c8 00 00 00             addq    $0xc8, %rax
// c3: eb 63                         jmp     0x128 <_JIT_ENTRY+0x128>
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _PyUnicode_ExactDealloc
// cf: 48 89 ef                      movq    %rbp, %rdi
// d2: ff d0                         callq   *%rax
// d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d6:  R_X86_64_64  PyInterpreterState_Get
// de: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// e3: 74 96                         je      0x7b <_JIT_ENTRY+0x7b>
// e5: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// e9: 4d 85 e4                      testq   %r12, %r12
// ec: 74 2a                         je      0x118 <_JIT_ENTRY+0x118>
// ee: 49 83 c6 f8                   addq    $-0x8, %r14
// f2: 4c 89 20                      movq    %r12, (%rax)
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _JIT_CONTINUE
// ff: 48 89 df                      movq    %rbx, %rdi
// 102: 4c 89 f6                      movq    %r14, %rsi
// 105: 4c 89 fa                      movq    %r15, %rdx
// 108: 48 83 c4 08                   addq    $0x8, %rsp
// 10c: 5b                            popq    %rbx
// 10d: 41 5c                         popq    %r12
// 10f: 41 5d                         popq    %r13
// 111: 41 5e                         popq    %r14
// 113: 41 5f                         popq    %r15
// 115: 5d                            popq    %rbp
// 116: ff e0                         jmpq    *%rax
// 118: 48 29 d8                      subq    %rbx, %rax
// 11b: 48 83 c0 b8                   addq    $-0x48, %rax
// 11f: 48 c1 e8 03                   shrq    $0x3, %rax
// 123: 89 43 40                      movl    %eax, 0x40(%rbx)
// 126: 31 c0                         xorl    %eax, %eax
// 128: 48 83 c4 08                   addq    $0x8, %rsp
// 12c: 5b                            popq    %rbx
// 12d: 41 5c                         popq    %r12
// 12f: 41 5d                         popq    %r13
// 131: 41 5e                         popq    %r14
// 133: 41 5f                         popq    %r15
// 135: 5d                            popq    %rbp
// 136: c3                            retq
// 137: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_ADD_UNICODE_code_body[312] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x7a, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x6e, 0xf0, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x51, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x6a, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x5b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x4a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0x96, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_BINARY_OP_ADD_UNICODE_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_ADD_UNICODE_data_body[1];
static const Hole _CHECK_VALIDITYplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 5b                         je      0x7c <_JIT_ENTRY+0x7c>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 28: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 2c: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 31: f2 41 0f 59 44 24 10          mulsd   0x10(%r12), %xmm0
// 38: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 3d: 75 74                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 3f: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 44: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 4a: 75 28                         jne     0x74 <_JIT_ENTRY+0x74>
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  PyInterpreterState_Get
// 56: ff d0                         callq   *%rax
// 58: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 5f: 49 ff 0c 24                   decq    (%r12)
// 63: 75 0f                         jne     0x74 <_JIT_ENTRY+0x74>
// 65: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000067:  R_X86_64_64  _PyFloat_ExactDealloc
// 6f: 4c 89 e7                      movq    %r12, %rdi
// 72: ff d0                         callq   *%rax
// 74: 49 89 ec                      movq    %rbp, %r12
// 77: e9 22 01 00 00                jmp     0x19e <_JIT_ENTRY+0x19e>
// 7c: 4c 29 f3                      subq    %r14, %rbx
// 7f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 83: 48 c1 eb 03                   shrq    $0x3, %rbx
// 87: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 8b: 49 8b 06                      movq    (%r14), %rax
// 8e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000090:  R_X86_64_64  _JIT_TARGET
// 98: 89 c9                         movl    %ecx, %ecx
// 9a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a4: 48 83 c4 08                   addq    $0x8, %rsp
// a8: 5b                            popq    %rbx
// a9: 41 5c                         popq    %r12
// ab: 41 5d                         popq    %r13
// ad: 41 5e                         popq    %r14
// af: 41 5f                         popq    %r15
// b1: 5d                            popq    %rbp
// b2: c3                            retq
// b3: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// b8: 75 3c                         jne     0xf6 <_JIT_ENTRY+0xf6>
// ba: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// c1: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// c5: 0f 85 d3 00 00 00             jne     0x19e <_JIT_ENTRY+0x19e>
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  PyInterpreterState_Get
// d5: ff d0                         callq   *%rax
// d7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// e6: 48 89 4d 00                   movq    %rcx, (%rbp)
// ea: 48 83 f8 01                   cmpq    $0x1, %rax
// ee: 0f 8f aa 00 00 00             jg      0x19e <_JIT_ENTRY+0x19e>
// f4: eb 6f                         jmp     0x165 <_JIT_ENTRY+0x165>
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  PyFloat_FromDouble
// 100: ff d0                         callq   *%rax
// 102: 48 85 c0                      testq   %rax, %rax
// 105: 74 7e                         je      0x185 <_JIT_ENTRY+0x185>
// 107: 49 89 c5                      movq    %rax, %r13
// 10a: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 10e: 75 25                         jne     0x135 <_JIT_ENTRY+0x135>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  PyInterpreterState_Get
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 123: 48 8b 45 00                   movq    (%rbp), %rax
// 127: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 12b: 48 89 4d 00                   movq    %rcx, (%rbp)
// 12f: 48 83 f8 01                   cmpq    $0x1, %rax
// 133: 7e 30                         jle     0x165 <_JIT_ENTRY+0x165>
// 135: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 13b: 75 5e                         jne     0x19b <_JIT_ENTRY+0x19b>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyInterpreterState_Get
// 147: ff d0                         callq   *%rax
// 149: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 150: 49 8b 04 24                   movq    (%r12), %rax
// 154: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 158: 49 89 0c 24                   movq    %rcx, (%r12)
// 15c: 4d 89 ec                      movq    %r13, %r12
// 15f: 48 83 f8 01                   cmpq    $0x1, %rax
// 163: 7f 39                         jg      0x19e <_JIT_ENTRY+0x19e>
// 165: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000167:  R_X86_64_64  .rodata.str1.1
// 16f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000171:  R_X86_64_64  .rodata.str1.1+0x16
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 183: ff d0                         callq   *%rax
// 185: 4c 29 f3                      subq    %r14, %rbx
// 188: 48 83 c3 b8                   addq    $-0x48, %rbx
// 18c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 190: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 194: 31 c0                         xorl    %eax, %eax
// 196: e9 09 ff ff ff                jmp     0xa4 <_JIT_ENTRY+0xa4>
// 19b: 4d 89 ec                      movq    %r13, %r12
// 19e: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 1a2: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _JIT_CONTINUE
// 1b0: 4c 89 f7                      movq    %r14, %rdi
// 1b3: 48 89 de                      movq    %rbx, %rsi
// 1b6: 4c 89 fa                      movq    %r15, %rdx
// 1b9: 48 83 c4 08                   addq    $0x8, %rsp
// 1bd: 5b                            popq    %rbx
// 1be: 41 5c                         popq    %r12
// 1c0: 41 5d                         popq    %r13
// 1c2: 41 5e                         popq    %r14
// 1c4: 41 5f                         popq    %r15
// 1c6: 5d                            popq    %rbp
// 1c7: ff e0                         jmpq    *%rax
// 1c9: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_FLOAT_code_body[458] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x5b, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x74, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0x22, 0x01, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3c, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xaa, 0x00, 0x00, 0x00, 0xeb, 0x6f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7e, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x5e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x39, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x09, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0x4c, 0x89, 0x63, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 3d: 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_FLOAT_data_body[65] = {0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 7a                         je      0x9b <_JIT_ENTRY+0x9b>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 28: 49 8b 6e f8                   movq    -0x8(%r14), %rbp
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  _PyLong_Multiply
// 36: 4c 89 ef                      movq    %r13, %rdi
// 39: 48 89 ee                      movq    %rbp, %rsi
// 3c: ff d0                         callq   *%rax
// 3e: 49 89 c4                      movq    %rax, %r12
// 41: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 45: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000047:  R_X86_64_64  PyInterpreterState_Get
// 4f: 75 23                         jne     0x74 <_JIT_ENTRY+0x74>
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  PyInterpreterState_Get
// 5b: ff d0                         callq   *%rax
// 5d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 64: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000066:  R_X86_64_64  PyInterpreterState_Get
// 6e: 48 ff 4d 00                   decq    (%rbp)
// 72: 74 51                         je      0xc5 <_JIT_ENTRY+0xc5>
// 74: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 79: 75 6a                         jne     0xe5 <_JIT_ENTRY+0xe5>
// 7b: ff d1                         callq   *%rcx
// 7d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 84: 49 ff 4d 00                   decq    (%r13)
// 88: 75 5b                         jne     0xe5 <_JIT_ENTRY+0xe5>
// 8a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008c:  R_X86_64_64  PyObject_Free
// 94: 4c 89 ef                      movq    %r13, %rdi
// 97: ff d0                         callq   *%rax
// 99: eb 4a                         jmp     0xe5 <_JIT_ENTRY+0xe5>
// 9b: 49 29 de                      subq    %rbx, %r14
// 9e: 49 83 c6 b8                   addq    $-0x48, %r14
// a2: 49 c1 ee 03                   shrq    $0x3, %r14
// a6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// aa: 48 8b 03                      movq    (%rbx), %rax
// ad: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000af:  R_X86_64_64  _JIT_TARGET
// b7: 89 c9                         movl    %ecx, %ecx
// b9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// bd: 48 05 c8 00 00 00             addq    $0xc8, %rax
// c3: eb 63                         jmp     0x128 <_JIT_ENTRY+0x128>
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  PyObject_Free
// cf: 48 89 ef                      movq    %rbp, %rdi
// d2: ff d0                         callq   *%rax
// d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d6:  R_X86_64_64  PyInterpreterState_Get
// de: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// e3: 74 96                         je      0x7b <_JIT_ENTRY+0x7b>
// e5: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// e9: 4d 85 e4                      testq   %r12, %r12
// ec: 74 2a                         je      0x118 <_JIT_ENTRY+0x118>
// ee: 49 83 c6 f8                   addq    $-0x8, %r14
// f2: 4c 89 20                      movq    %r12, (%rax)
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _JIT_CONTINUE
// ff: 48 89 df                      movq    %rbx, %rdi
// 102: 4c 89 f6                      movq    %r14, %rsi
// 105: 4c 89 fa                      movq    %r15, %rdx
// 108: 48 83 c4 08                   addq    $0x8, %rsp
// 10c: 5b                            popq    %rbx
// 10d: 41 5c                         popq    %r12
// 10f: 41 5d                         popq    %r13
// 111: 41 5e                         popq    %r14
// 113: 41 5f                         popq    %r15
// 115: 5d                            popq    %rbp
// 116: ff e0                         jmpq    *%rax
// 118: 48 29 d8                      subq    %rbx, %rax
// 11b: 48 83 c0 b8                   addq    $-0x48, %rax
// 11f: 48 c1 e8 03                   shrq    $0x3, %rax
// 123: 89 43 40                      movl    %eax, 0x40(%rbx)
// 126: 31 c0                         xorl    %eax, %eax
// 128: 48 83 c4 08                   addq    $0x8, %rsp
// 12c: 5b                            popq    %rbx
// 12d: 41 5c                         popq    %r12
// 12f: 41 5d                         popq    %r13
// 131: 41 5e                         popq    %r14
// 133: 41 5f                         popq    %r15
// 135: 5d                            popq    %rbp
// 136: c3                            retq
// 137: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_INT_code_body[312] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x7a, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf0, 0x49, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x51, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x6a, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x5b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x4a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0x96, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_INT_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_INT_data_body[1];
static const Hole _CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 5b                         je      0x7c <_JIT_ENTRY+0x7c>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 28: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 2c: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 31: f2 41 0f 5c 44 24 10          subsd   0x10(%r12), %xmm0
// 38: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 3d: 75 74                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 3f: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 44: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 4a: 75 28                         jne     0x74 <_JIT_ENTRY+0x74>
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  PyInterpreterState_Get
// 56: ff d0                         callq   *%rax
// 58: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 5f: 49 ff 0c 24                   decq    (%r12)
// 63: 75 0f                         jne     0x74 <_JIT_ENTRY+0x74>
// 65: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000067:  R_X86_64_64  _PyFloat_ExactDealloc
// 6f: 4c 89 e7                      movq    %r12, %rdi
// 72: ff d0                         callq   *%rax
// 74: 49 89 ec                      movq    %rbp, %r12
// 77: e9 22 01 00 00                jmp     0x19e <_JIT_ENTRY+0x19e>
// 7c: 4c 29 f3                      subq    %r14, %rbx
// 7f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 83: 48 c1 eb 03                   shrq    $0x3, %rbx
// 87: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 8b: 49 8b 06                      movq    (%r14), %rax
// 8e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000090:  R_X86_64_64  _JIT_TARGET
// 98: 89 c9                         movl    %ecx, %ecx
// 9a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a4: 48 83 c4 08                   addq    $0x8, %rsp
// a8: 5b                            popq    %rbx
// a9: 41 5c                         popq    %r12
// ab: 41 5d                         popq    %r13
// ad: 41 5e                         popq    %r14
// af: 41 5f                         popq    %r15
// b1: 5d                            popq    %rbp
// b2: c3                            retq
// b3: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// b8: 75 3c                         jne     0xf6 <_JIT_ENTRY+0xf6>
// ba: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// c1: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// c5: 0f 85 d3 00 00 00             jne     0x19e <_JIT_ENTRY+0x19e>
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  PyInterpreterState_Get
// d5: ff d0                         callq   *%rax
// d7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// e6: 48 89 4d 00                   movq    %rcx, (%rbp)
// ea: 48 83 f8 01                   cmpq    $0x1, %rax
// ee: 0f 8f aa 00 00 00             jg      0x19e <_JIT_ENTRY+0x19e>
// f4: eb 6f                         jmp     0x165 <_JIT_ENTRY+0x165>
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  PyFloat_FromDouble
// 100: ff d0                         callq   *%rax
// 102: 48 85 c0                      testq   %rax, %rax
// 105: 74 7e                         je      0x185 <_JIT_ENTRY+0x185>
// 107: 49 89 c5                      movq    %rax, %r13
// 10a: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 10e: 75 25                         jne     0x135 <_JIT_ENTRY+0x135>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  PyInterpreterState_Get
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 123: 48 8b 45 00                   movq    (%rbp), %rax
// 127: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 12b: 48 89 4d 00                   movq    %rcx, (%rbp)
// 12f: 48 83 f8 01                   cmpq    $0x1, %rax
// 133: 7e 30                         jle     0x165 <_JIT_ENTRY+0x165>
// 135: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 13b: 75 5e                         jne     0x19b <_JIT_ENTRY+0x19b>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyInterpreterState_Get
// 147: ff d0                         callq   *%rax
// 149: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 150: 49 8b 04 24                   movq    (%r12), %rax
// 154: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 158: 49 89 0c 24                   movq    %rcx, (%r12)
// 15c: 4d 89 ec                      movq    %r13, %r12
// 15f: 48 83 f8 01                   cmpq    $0x1, %rax
// 163: 7f 39                         jg      0x19e <_JIT_ENTRY+0x19e>
// 165: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000167:  R_X86_64_64  .rodata.str1.1
// 16f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000171:  R_X86_64_64  .rodata.str1.1+0x16
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 183: ff d0                         callq   *%rax
// 185: 4c 29 f3                      subq    %r14, %rbx
// 188: 48 83 c3 b8                   addq    $-0x48, %rbx
// 18c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 190: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 194: 31 c0                         xorl    %eax, %eax
// 196: e9 09 ff ff ff                jmp     0xa4 <_JIT_ENTRY+0xa4>
// 19b: 4d 89 ec                      movq    %r13, %r12
// 19e: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 1a2: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _JIT_CONTINUE
// 1b0: 4c 89 f7                      movq    %r14, %rdi
// 1b3: 48 89 de                      movq    %rbx, %rsi
// 1b6: 4c 89 fa                      movq    %r15, %rdx
// 1b9: 48 83 c4 08                   addq    $0x8, %rsp
// 1bd: 5b                            popq    %rbx
// 1be: 41 5c                         popq    %r12
// 1c0: 41 5d                         popq    %r13
// 1c2: 41 5e                         popq    %r14
// 1c4: 41 5f                         popq    %r15
// 1c6: 5d                            popq    %rbp
// 1c7: ff e0                         jmpq    *%rax
// 1c9: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_FLOAT_code_body[458] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x5b, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x74, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0x22, 0x01, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3c, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xaa, 0x00, 0x00, 0x00, 0xeb, 0x6f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7e, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x5e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x39, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x09, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0x4c, 0x89, 0x63, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 3d: 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_FLOAT_data_body[65] = {0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 7a                         je      0x9b <_JIT_ENTRY+0x9b>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 28: 49 8b 6e f8                   movq    -0x8(%r14), %rbp
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  _PyLong_Subtract
// 36: 4c 89 ef                      movq    %r13, %rdi
// 39: 48 89 ee                      movq    %rbp, %rsi
// 3c: ff d0                         callq   *%rax
// 3e: 49 89 c4                      movq    %rax, %r12
// 41: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 45: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000047:  R_X86_64_64  PyInterpreterState_Get
// 4f: 75 23                         jne     0x74 <_JIT_ENTRY+0x74>
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  PyInterpreterState_Get
// 5b: ff d0                         callq   *%rax
// 5d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 64: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000066:  R_X86_64_64  PyInterpreterState_Get
// 6e: 48 ff 4d 00                   decq    (%rbp)
// 72: 74 51                         je      0xc5 <_JIT_ENTRY+0xc5>
// 74: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 79: 75 6a                         jne     0xe5 <_JIT_ENTRY+0xe5>
// 7b: ff d1                         callq   *%rcx
// 7d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 84: 49 ff 4d 00                   decq    (%r13)
// 88: 75 5b                         jne     0xe5 <_JIT_ENTRY+0xe5>
// 8a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008c:  R_X86_64_64  PyObject_Free
// 94: 4c 89 ef                      movq    %r13, %rdi
// 97: ff d0                         callq   *%rax
// 99: eb 4a                         jmp     0xe5 <_JIT_ENTRY+0xe5>
// 9b: 49 29 de                      subq    %rbx, %r14
// 9e: 49 83 c6 b8                   addq    $-0x48, %r14
// a2: 49 c1 ee 03                   shrq    $0x3, %r14
// a6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// aa: 48 8b 03                      movq    (%rbx), %rax
// ad: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000af:  R_X86_64_64  _JIT_TARGET
// b7: 89 c9                         movl    %ecx, %ecx
// b9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// bd: 48 05 c8 00 00 00             addq    $0xc8, %rax
// c3: eb 63                         jmp     0x128 <_JIT_ENTRY+0x128>
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  PyObject_Free
// cf: 48 89 ef                      movq    %rbp, %rdi
// d2: ff d0                         callq   *%rax
// d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d6:  R_X86_64_64  PyInterpreterState_Get
// de: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// e3: 74 96                         je      0x7b <_JIT_ENTRY+0x7b>
// e5: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// e9: 4d 85 e4                      testq   %r12, %r12
// ec: 74 2a                         je      0x118 <_JIT_ENTRY+0x118>
// ee: 49 83 c6 f8                   addq    $-0x8, %r14
// f2: 4c 89 20                      movq    %r12, (%rax)
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _JIT_CONTINUE
// ff: 48 89 df                      movq    %rbx, %rdi
// 102: 4c 89 f6                      movq    %r14, %rsi
// 105: 4c 89 fa                      movq    %r15, %rdx
// 108: 48 83 c4 08                   addq    $0x8, %rsp
// 10c: 5b                            popq    %rbx
// 10d: 41 5c                         popq    %r12
// 10f: 41 5d                         popq    %r13
// 111: 41 5e                         popq    %r14
// 113: 41 5f                         popq    %r15
// 115: 5d                            popq    %rbp
// 116: ff e0                         jmpq    *%rax
// 118: 48 29 d8                      subq    %rbx, %rax
// 11b: 48 83 c0 b8                   addq    $-0x48, %rax
// 11f: 48 c1 e8 03                   shrq    $0x3, %rax
// 123: 89 43 40                      movl    %eax, 0x40(%rbx)
// 126: 31 c0                         xorl    %eax, %eax
// 128: 48 83 c4 08                   addq    $0x8, %rsp
// 12c: 5b                            popq    %rbx
// 12d: 41 5c                         popq    %r12
// 12f: 41 5d                         popq    %r13
// 131: 41 5e                         popq    %r14
// 133: 41 5f                         popq    %r15
// 135: 5d                            popq    %rbp
// 136: c3                            retq
// 137: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_INT_code_body[312] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x7a, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf0, 0x49, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x51, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x6a, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x5b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x4a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0x96, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_INT_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_INT_data_body[1];
static const Hole _CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_SLICE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_SLICE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 47                         je      0x68 <_JIT_ENTRY+0x68>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 49 8b 76 f8                   movq    -0x8(%r14), %rsi
// 28: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 2c: 49 8b 7e f0                   movq    -0x10(%r14), %rdi
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 3a: ff d0                         callq   *%rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 74 54                         je      0x95 <_JIT_ENTRY+0x95>
// 41: 48 89 c5                      movq    %rax, %rbp
// 44: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000046:  R_X86_64_64  PyObject_GetItem
// 4e: 4c 89 e7                      movq    %r12, %rdi
// 51: 48 89 ee                      movq    %rbp, %rsi
// 54: ff d0                         callq   *%rax
// 56: 49 89 c5                      movq    %rax, %r13
// 59: 48 8b 45 00                   movq    (%rbp), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7e 41                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 62: 85 c0                         testl   %eax, %eax
// 64: 79 63                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 66: eb 73                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 48 8b 03                      movq    (%rbx), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_TARGET
// 84: 89 c9                         movl    %ecx, %ecx
// 86: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 8a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 90: e9 00 01 00 00                jmp     0x195 <_JIT_ENTRY+0x195>
// 95: 45 31 ed                      xorl    %r13d, %r13d
// 98: 49 8b 04 24                   movq    (%r12), %rax
// 9c: 48 85 c0                      testq   %rax, %rax
// 9f: 7f 43                         jg      0xe4 <_JIT_ENTRY+0xe4>
// a1: eb 5f                         jmp     0x102 <_JIT_ENTRY+0x102>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// bc: 48 89 ea                      movq    %rbp, %rdx
// bf: ff d0                         callq   *%rax
// c1: 48 8b 45 00                   movq    (%rbp), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 48 ff 4d 00                   decq    (%rbp)
// d9: 74 0f                         je      0xea <_JIT_ENTRY+0xea>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 1e                         jle     0x102 <_JIT_ENTRY+0x102>
// e4: 85 c0                         testl   %eax, %eax
// e6: 79 40                         jns     0x128 <_JIT_ENTRY+0x128>
// e8: eb 50                         jmp     0x13a <_JIT_ENTRY+0x13a>
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_Dealloc
// f4: 48 89 ef                      movq    %rbp, %rdi
// f7: ff d0                         callq   *%rax
// f9: 49 8b 04 24                   movq    (%r12), %rax
// fd: 48 85 c0                      testq   %rax, %rax
// 100: 7f e2                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 102: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000104:  R_X86_64_64  .rodata.str1.1
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_NegativeRefcount
// 116: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 11b: 4c 89 e2                      movq    %r12, %rdx
// 11e: ff d0                         callq   *%rax
// 120: 49 8b 04 24                   movq    (%r12), %rax
// 124: 85 c0                         testl   %eax, %eax
// 126: 78 12                         js      0x13a <_JIT_ENTRY+0x13a>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 132: ff d0                         callq   *%rax
// 134: 49 ff 0c 24                   decq    (%r12)
// 138: 74 33                         je      0x16d <_JIT_ENTRY+0x16d>
// 13a: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 13e: 4d 85 ed                      testq   %r13, %r13
// 141: 74 42                         je      0x185 <_JIT_ENTRY+0x185>
// 143: 49 83 c6 f0                   addq    $-0x10, %r14
// 147: 4c 89 28                      movq    %r13, (%rax)
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _JIT_CONTINUE
// 154: 48 89 df                      movq    %rbx, %rdi
// 157: 4c 89 f6                      movq    %r14, %rsi
// 15a: 4c 89 fa                      movq    %r15, %rdx
// 15d: 48 83 c4 08                   addq    $0x8, %rsp
// 161: 5b                            popq    %rbx
// 162: 41 5c                         popq    %r12
// 164: 41 5d                         popq    %r13
// 166: 41 5e                         popq    %r14
// 168: 41 5f                         popq    %r15
// 16a: 5d                            popq    %rbp
// 16b: ff e0                         jmpq    *%rax
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_Dealloc
// 177: 4c 89 e7                      movq    %r12, %rdi
// 17a: ff d0                         callq   *%rax
// 17c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 180: 4d 85 ed                      testq   %r13, %r13
// 183: 75 be                         jne     0x143 <_JIT_ENTRY+0x143>
// 185: 48 29 d8                      subq    %rbx, %rax
// 188: 48 83 c0 b8                   addq    $-0x48, %rax
// 18c: 48 c1 e8 03                   shrq    $0x3, %rax
// 190: 89 43 40                      movl    %eax, 0x40(%rbx)
// 193: 31 c0                         xorl    %eax, %eax
// 195: 48 83 c4 08                   addq    $0x8, %rsp
// 199: 5b                            popq    %rbx
// 19a: 41 5c                         popq    %r12
// 19c: 41 5d                         popq    %r13
// 19e: 41 5e                         popq    %r14
// 1a0: 41 5f                         popq    %r15
// 1a2: 5d                            popq    %rbp
// 1a3: c3                            retq
// 1a4: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_SLICE_code_body[421] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x47, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x76, 0xf8, 0x4d, 0x8b, 0x66, 0xe8, 0x49, 0x8b, 0x7e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x54, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x41, 0x85, 0xc0, 0x79, 0x63, 0xeb, 0x73, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x45, 0x31, 0xed, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x43, 0xeb, 0x5f, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x33, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x42, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x75, 0xbe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_BINARY_SLICE_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BINARY_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BINARY_SLICE_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_SUBSCR
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_SUBSCR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 2f                         je      0x50 <_JIT_ENTRY+0x50>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  PyObject_GetItem
// 36: 48 89 ef                      movq    %rbp, %rdi
// 39: 4c 89 ee                      movq    %r13, %rsi
// 3c: ff d0                         callq   *%rax
// 3e: 49 89 c4                      movq    %rax, %r12
// 41: 48 8b 45 00                   movq    (%rbp), %rax
// 45: 48 85 c0                      testq   %rax, %rax
// 48: 7e 33                         jle     0x7d <_JIT_ENTRY+0x7d>
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 55                         jns     0xa3 <_JIT_ENTRY+0xa3>
// 4e: eb 65                         jmp     0xb5 <_JIT_ENTRY+0xb5>
// 50: 49 29 de                      subq    %rbx, %r14
// 53: 49 83 c6 b8                   addq    $-0x48, %r14
// 57: 49 c1 ee 03                   shrq    $0x3, %r14
// 5b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 5f: 48 8b 03                      movq    (%rbx), %rax
// 62: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000064:  R_X86_64_64  _JIT_TARGET
// 6c: 89 c9                         movl    %ecx, %ecx
// 6e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 72: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 78: e9 f2 00 00 00                jmp     0x16f <_JIT_ENTRY+0x16f>
// 7d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007f:  R_X86_64_64  .rodata.str1.1
// 87: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000089:  R_X86_64_64  _Py_NegativeRefcount
// 91: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 96: 48 89 ea                      movq    %rbp, %rdx
// 99: ff d0                         callq   *%rax
// 9b: 48 8b 45 00                   movq    (%rbp), %rax
// 9f: 85 c0                         testl   %eax, %eax
// a1: 78 12                         js      0xb5 <_JIT_ENTRY+0xb5>
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ad: ff d0                         callq   *%rax
// af: 48 ff 4d 00                   decq    (%rbp)
// b3: 74 0f                         je      0xc4 <_JIT_ENTRY+0xc4>
// b5: 49 8b 45 00                   movq    (%r13), %rax
// b9: 48 85 c0                      testq   %rax, %rax
// bc: 7e 1e                         jle     0xdc <_JIT_ENTRY+0xdc>
// be: 85 c0                         testl   %eax, %eax
// c0: 79 40                         jns     0x102 <_JIT_ENTRY+0x102>
// c2: eb 50                         jmp     0x114 <_JIT_ENTRY+0x114>
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _Py_Dealloc
// ce: 48 89 ef                      movq    %rbp, %rdi
// d1: ff d0                         callq   *%rax
// d3: 49 8b 45 00                   movq    (%r13), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7f e2                         jg      0xbe <_JIT_ENTRY+0xbe>
// dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000de:  R_X86_64_64  .rodata.str1.1
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _Py_NegativeRefcount
// f0: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// f5: 4c 89 ea                      movq    %r13, %rdx
// f8: ff d0                         callq   *%rax
// fa: 49 8b 45 00                   movq    (%r13), %rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 78 12                         js      0x114 <_JIT_ENTRY+0x114>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 4d 00                   decq    (%r13)
// 112: 74 33                         je      0x147 <_JIT_ENTRY+0x147>
// 114: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 118: 4d 85 e4                      testq   %r12, %r12
// 11b: 74 42                         je      0x15f <_JIT_ENTRY+0x15f>
// 11d: 49 83 c6 f8                   addq    $-0x8, %r14
// 121: 4c 89 20                      movq    %r12, (%rax)
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _JIT_CONTINUE
// 12e: 48 89 df                      movq    %rbx, %rdi
// 131: 4c 89 f6                      movq    %r14, %rsi
// 134: 4c 89 fa                      movq    %r15, %rdx
// 137: 48 83 c4 08                   addq    $0x8, %rsp
// 13b: 5b                            popq    %rbx
// 13c: 41 5c                         popq    %r12
// 13e: 41 5d                         popq    %r13
// 140: 41 5e                         popq    %r14
// 142: 41 5f                         popq    %r15
// 144: 5d                            popq    %rbp
// 145: ff e0                         jmpq    *%rax
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_Dealloc
// 151: 4c 89 ef                      movq    %r13, %rdi
// 154: ff d0                         callq   *%rax
// 156: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 15a: 4d 85 e4                      testq   %r12, %r12
// 15d: 75 be                         jne     0x11d <_JIT_ENTRY+0x11d>
// 15f: 48 29 d8                      subq    %rbx, %rax
// 162: 48 83 c0 b8                   addq    $-0x48, %rax
// 166: 48 c1 e8 03                   shrq    $0x3, %rax
// 16a: 89 43 40                      movl    %eax, 0x40(%rbx)
// 16d: 31 c0                         xorl    %eax, %eax
// 16f: 48 83 c4 08                   addq    $0x8, %rsp
// 173: 5b                            popq    %rbx
// 174: 41 5c                         popq    %r12
// 176: 41 5d                         popq    %r13
// 178: 41 5e                         popq    %r14
// 17a: 41 5f                         popq    %r15
// 17c: 5d                            popq    %rbp
// 17d: c3                            retq
// 17e: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_SUBSCR_code_body[383] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x2f, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x6e, 0xf0, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xf2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x33, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x42, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x75, 0xbe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_BINARY_SUBSCR_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BINARY_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BINARY_SUBSCR_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_SUBSCR_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 14                         je      0x35 <_JIT_ENTRY+0x35>
// 21: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyDict_Type
// 2f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 33: 74 37                         je      0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 08                   addq    $0x8, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d7                      movq    %rdx, %r15
// 6f: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 73: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000075:  R_X86_64_64  PyDict_GetItemRef
// 7d: 48 89 e2                      movq    %rsp, %rdx
// 80: 4c 89 ef                      movq    %r13, %rdi
// 83: 4c 89 e6                      movq    %r12, %rsi
// 86: ff d0                         callq   *%rax
// 88: 89 c5                         movl    %eax, %ebp
// 8a: 85 c0                         testl   %eax, %eax
// 8c: 74 0f                         je      0x9d <_JIT_ENTRY+0x9d>
// 8e: 49 8b 45 00                   movq    (%r13), %rax
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 7e 1e                         jle     0xb5 <_JIT_ENTRY+0xb5>
// 97: 85 c0                         testl   %eax, %eax
// 99: 79 40                         jns     0xdb <_JIT_ENTRY+0xdb>
// 9b: eb 50                         jmp     0xed <_JIT_ENTRY+0xed>
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  _PyErr_SetKeyError
// a7: 4c 89 e7                      movq    %r12, %rdi
// aa: ff d0                         callq   *%rax
// ac: 49 8b 45 00                   movq    (%r13), %rax
// b0: 48 85 c0                      testq   %rax, %rax
// b3: 7f e2                         jg      0x97 <_JIT_ENTRY+0x97>
// b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b7:  R_X86_64_64  .rodata.str1.1
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  _Py_NegativeRefcount
// c9: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// ce: 4c 89 ea                      movq    %r13, %rdx
// d1: ff d0                         callq   *%rax
// d3: 49 8b 45 00                   movq    (%r13), %rax
// d7: 85 c0                         testl   %eax, %eax
// d9: 78 12                         js      0xed <_JIT_ENTRY+0xed>
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e5: ff d0                         callq   *%rax
// e7: 49 ff 4d 00                   decq    (%r13)
// eb: 74 0f                         je      0xfc <_JIT_ENTRY+0xfc>
// ed: 49 8b 04 24                   movq    (%r12), %rax
// f1: 48 85 c0                      testq   %rax, %rax
// f4: 7e 1e                         jle     0x114 <_JIT_ENTRY+0x114>
// f6: 85 c0                         testl   %eax, %eax
// f8: 79 40                         jns     0x13a <_JIT_ENTRY+0x13a>
// fa: eb 50                         jmp     0x14c <_JIT_ENTRY+0x14c>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_Dealloc
// 106: 4c 89 ef                      movq    %r13, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 49 8b 04 24                   movq    (%r12), %rax
// 10f: 48 85 c0                      testq   %rax, %rax
// 112: 7f e2                         jg      0xf6 <_JIT_ENTRY+0xf6>
// 114: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000116:  R_X86_64_64  .rodata.str1.1
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_NegativeRefcount
// 128: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 12d: 4c 89 e2                      movq    %r12, %rdx
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 12                         js      0x14c <_JIT_ENTRY+0x14c>
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 144: ff d0                         callq   *%rax
// 146: 49 ff 0c 24                   decq    (%r12)
// 14a: 74 36                         je      0x182 <_JIT_ENTRY+0x182>
// 14c: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 150: 85 ed                         testl   %ebp, %ebp
// 152: 7e 45                         jle     0x199 <_JIT_ENTRY+0x199>
// 154: 49 83 c6 f8                   addq    $-0x8, %r14
// 158: 48 8b 0c 24                   movq    (%rsp), %rcx
// 15c: 48 89 08                      movq    %rcx, (%rax)
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _JIT_CONTINUE
// 169: 48 89 df                      movq    %rbx, %rdi
// 16c: 4c 89 f6                      movq    %r14, %rsi
// 16f: 4c 89 fa                      movq    %r15, %rdx
// 172: 48 83 c4 08                   addq    $0x8, %rsp
// 176: 5b                            popq    %rbx
// 177: 41 5c                         popq    %r12
// 179: 41 5d                         popq    %r13
// 17b: 41 5e                         popq    %r14
// 17d: 41 5f                         popq    %r15
// 17f: 5d                            popq    %rbp
// 180: ff e0                         jmpq    *%rax
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: 4c 89 e7                      movq    %r12, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 195: 85 ed                         testl   %ebp, %ebp
// 197: 7f bb                         jg      0x154 <_JIT_ENTRY+0x154>
// 199: 48 29 d8                      subq    %rbx, %rax
// 19c: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a0: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a4: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1a7: 31 c0                         xorl    %eax, %eax
// 1a9: e9 af fe ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 1ae: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_SUBSCR_DICT_code_body[431] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x14, 0x4d, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x36, 0x49, 0x8d, 0x46, 0xf0, 0x85, 0xed, 0x7e, 0x45, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf0, 0x85, 0xed, 0x7f, 0xbb, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xaf, 0xfe, 0xff, 0xff};
static const Hole _CHECK_VALIDITYplus_BINARY_SUBSCR_DICT_code_holes[15] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BINARY_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BINARY_SUBSCR_DICT_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_SUBSCR_LIST_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 0f 84 17 01 00 00             je      0x13c <_JIT_ENTRY+0x13c>
// 25: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 29: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002b:  R_X86_64_64  PyLong_Type
// 33: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 37: 0f 85 ff 00 00 00             jne     0x13c <_JIT_ENTRY+0x13c>
// 3d: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 41: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000043:  R_X86_64_64  PyList_Type
// 4b: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 50: 0f 85 e6 00 00 00             jne     0x13c <_JIT_ENTRY+0x13c>
// 56: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 5b: 0f 87 db 00 00 00             ja      0x13c <_JIT_ENTRY+0x13c>
// 61: 41 8b 45 18                   movl    0x18(%r13), %eax
// 65: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 6a: 0f 8e cc 00 00 00             jle     0x13c <_JIT_ENTRY+0x13c>
// 70: 49 89 d7                      movq    %rdx, %r15
// 73: 49 8b 4c 24 18                movq    0x18(%r12), %rcx
// 78: 48 8b 2c c1                   movq    (%rcx,%rax,8), %rbp
// 7c: 8b 45 00                      movl    (%rbp), %eax
// 7f: ff c0                         incl    %eax
// 81: 74 0f                         je      0x92 <_JIT_ENTRY+0x92>
// 83: 89 45 00                      movl    %eax, (%rbp)
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 90: ff d0                         callq   *%rax
// 92: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 97: 75 28                         jne     0xc1 <_JIT_ENTRY+0xc1>
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  PyInterpreterState_Get
// a3: ff d0                         callq   *%rax
// a5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// ac: 49 ff 4d 00                   decq    (%r13)
// b0: 75 0f                         jne     0xc1 <_JIT_ENTRY+0xc1>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  PyObject_Free
// bc: 4c 89 ef                      movq    %r13, %rdi
// bf: ff d0                         callq   *%rax
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// f0: 85 c0                         testl   %eax, %eax
// f2: 78 21                         js      0x115 <_JIT_ENTRY+0x115>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fe: ff d0                         callq   *%rax
// 100: 49 ff 0c 24                   decq    (%r12)
// 104: 75 0f                         jne     0x115 <_JIT_ENTRY+0x115>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_Dealloc
// 110: 4c 89 e7                      movq    %r12, %rdi
// 113: ff d0                         callq   *%rax
// 115: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 119: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011b:  R_X86_64_64  _JIT_CONTINUE
// 123: 48 89 df                      movq    %rbx, %rdi
// 126: 4c 89 ee                      movq    %r13, %rsi
// 129: 4c 89 fa                      movq    %r15, %rdx
// 12c: 48 83 c4 08                   addq    $0x8, %rsp
// 130: 5b                            popq    %rbx
// 131: 41 5c                         popq    %r12
// 133: 41 5d                         popq    %r13
// 135: 41 5e                         popq    %r14
// 137: 41 5f                         popq    %r15
// 139: 5d                            popq    %rbp
// 13a: ff e0                         jmpq    *%rax
// 13c: 49 29 de                      subq    %rbx, %r14
// 13f: 49 83 c6 b8                   addq    $-0x48, %r14
// 143: 49 c1 ee 03                   shrq    $0x3, %r14
// 147: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 14b: 48 8b 03                      movq    (%rbx), %rax
// 14e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000150:  R_X86_64_64  _JIT_TARGET
// 158: 89 c9                         movl    %ecx, %ecx
// 15a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 15e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 164: 48 83 c4 08                   addq    $0x8, %rsp
// 168: 5b                            popq    %rbx
// 169: 41 5c                         popq    %r12
// 16b: 41 5d                         popq    %r13
// 16d: 41 5e                         popq    %r14
// 16f: 41 5f                         popq    %r15
// 171: 5d                            popq    %rbp
// 172: c3                            retq
// 173: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_SUBSCR_LIST_INT_code_body[372] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x17, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xff, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xe6, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xdb, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xc1, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_BINARY_SUBSCR_LIST_INT_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BINARY_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_SUBSCR_STR_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 0f 84 e1 00 00 00             je      0x106 <_JIT_ENTRY+0x106>
// 25: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 29: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002b:  R_X86_64_64  PyLong_Type
// 33: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 37: 0f 85 c9 00 00 00             jne     0x106 <_JIT_ENTRY+0x106>
// 3d: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 41: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000043:  R_X86_64_64  PyUnicode_Type
// 4b: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 50: 0f 85 b0 00 00 00             jne     0x106 <_JIT_ENTRY+0x106>
// 56: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 5b: 0f 87 a5 00 00 00             ja      0x106 <_JIT_ENTRY+0x106>
// 61: 41 8b 45 18                   movl    0x18(%r13), %eax
// 65: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 6a: 0f 8e 96 00 00 00             jle     0x106 <_JIT_ENTRY+0x106>
// 70: 49 89 d7                      movq    %rdx, %r15
// 73: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 78: 89 ca                         movl    %ecx, %edx
// 7a: c1 ea 02                      shrl    $0x2, %edx
// 7d: 83 e2 07                      andl    $0x7, %edx
// 80: 83 fa 02                      cmpl    $0x2, %edx
// 83: 74 15                         je      0x9a <_JIT_ENTRY+0x9a>
// 85: 83 fa 01                      cmpl    $0x1, %edx
// 88: 75 20                         jne     0xaa <_JIT_ENTRY+0xaa>
// 8a: f6 c1 20                      testb   $0x20, %cl
// 8d: 75 27                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 8f: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 94: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 98: eb 67                         jmp     0x101 <_JIT_ENTRY+0x101>
// 9a: f6 c1 20                      testb   $0x20, %cl
// 9d: 75 31                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 9f: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a4: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// a8: eb 57                         jmp     0x101 <_JIT_ENTRY+0x101>
// aa: f6 c1 20                      testb   $0x20, %cl
// ad: 75 3b                         jne     0xea <_JIT_ENTRY+0xea>
// af: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// b4: eb 48                         jmp     0xfe <_JIT_ENTRY+0xfe>
// b6: 31 d2                         xorl    %edx, %edx
// b8: f6 c1 40                      testb   $0x40, %cl
// bb: 0f 94 c2                      sete    %dl
// be: 48 c1 e2 04                   shlq    $0x4, %rdx
// c2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// c6: 48 83 c1 28                   addq    $0x28, %rcx
// ca: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ce: eb 31                         jmp     0x101 <_JIT_ENTRY+0x101>
// d0: 31 d2                         xorl    %edx, %edx
// d2: f6 c1 40                      testb   $0x40, %cl
// d5: 0f 94 c2                      sete    %dl
// d8: 48 c1 e2 04                   shlq    $0x4, %rdx
// dc: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// e0: 48 83 c1 28                   addq    $0x28, %rcx
// e4: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// e8: eb 17                         jmp     0x101 <_JIT_ENTRY+0x101>
// ea: 31 d2                         xorl    %edx, %edx
// ec: f6 c1 40                      testb   $0x40, %cl
// ef: 0f 94 c2                      sete    %dl
// f2: 48 c1 e2 04                   shlq    $0x4, %rdx
// f6: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// fa: 48 83 c1 28                   addq    $0x28, %rcx
// fe: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// 101: 83 fd 7f                      cmpl    $0x7f, %ebp
// 104: 76 37                         jbe     0x13d <_JIT_ENTRY+0x13d>
// 106: 49 29 de                      subq    %rbx, %r14
// 109: 49 83 c6 b8                   addq    $-0x48, %r14
// 10d: 49 c1 ee 03                   shrq    $0x3, %r14
// 111: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 115: 48 8b 03                      movq    (%rbx), %rax
// 118: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011a:  R_X86_64_64  _JIT_TARGET
// 122: 89 c9                         movl    %ecx, %ecx
// 124: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 128: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 12e: 48 83 c4 08                   addq    $0x8, %rsp
// 132: 5b                            popq    %rbx
// 133: 41 5c                         popq    %r12
// 135: 41 5d                         popq    %r13
// 137: 41 5e                         popq    %r14
// 139: 41 5f                         popq    %r15
// 13b: 5d                            popq    %rbp
// 13c: c3                            retq
// 13d: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 142: 75 28                         jne     0x16c <_JIT_ENTRY+0x16c>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  PyInterpreterState_Get
// 14e: ff d0                         callq   *%rax
// 150: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 157: 49 ff 4d 00                   decq    (%r13)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  PyObject_Free
// 167: 4c 89 ef                      movq    %r13, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 22                         jg      0x197 <_JIT_ENTRY+0x197>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 18e: 4c 89 e2                      movq    %r12, %rdx
// 191: ff d0                         callq   *%rax
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 19b: 85 c0                         testl   %eax, %eax
// 19d: 78 21                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a9: ff d0                         callq   *%rax
// 1ab: 49 ff 0c 24                   decq    (%r12)
// 1af: 75 0f                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_Dealloc
// 1bb: 4c 89 e7                      movq    %r12, %rdi
// 1be: ff d0                         callq   *%rax
// 1c0: 89 e8                         movl    %ebp, %eax
// 1c2: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 1c6: 48 c1 e0 04                   shlq    $0x4, %rax
// 1ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cc:  R_X86_64_64  _PyRuntime
// 1d4: 48 01 c8                      addq    %rcx, %rax
// 1d7: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 1dd: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_CONTINUE
// 1eb: 48 89 df                      movq    %rbx, %rdi
// 1ee: 4c 89 ee                      movq    %r13, %rsi
// 1f1: 4c 89 fa                      movq    %r15, %rdx
// 1f4: 48 83 c4 08                   addq    $0x8, %rsp
// 1f8: 5b                            popq    %rbx
// 1f9: 41 5c                         popq    %r12
// 1fb: 41 5d                         popq    %r13
// 1fd: 41 5e                         popq    %r14
// 1ff: 41 5f                         popq    %r15
// 201: 5d                            popq    %rbp
// 202: ff e0                         jmpq    *%rax
// 204: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_SUBSCR_STR_INT_code_body[517] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x49, 0x89, 0x46, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_BINARY_SUBSCR_STR_INT_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BINARY_SUBSCR_STR_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _CHECK_VALIDITYplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BINARY_SUBSCR_TUPLE_INT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 0f 84 13 01 00 00             je      0x138 <_JIT_ENTRY+0x138>
// 25: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 29: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002b:  R_X86_64_64  PyLong_Type
// 33: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 37: 0f 85 fb 00 00 00             jne     0x138 <_JIT_ENTRY+0x138>
// 3d: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 41: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000043:  R_X86_64_64  PyTuple_Type
// 4b: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 50: 0f 85 e2 00 00 00             jne     0x138 <_JIT_ENTRY+0x138>
// 56: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 5b: 0f 87 d7 00 00 00             ja      0x138 <_JIT_ENTRY+0x138>
// 61: 41 8b 45 18                   movl    0x18(%r13), %eax
// 65: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 6a: 0f 8e c8 00 00 00             jle     0x138 <_JIT_ENTRY+0x138>
// 70: 49 89 d7                      movq    %rdx, %r15
// 73: 49 8b 6c c4 18                movq    0x18(%r12,%rax,8), %rbp
// 78: 8b 45 00                      movl    (%rbp), %eax
// 7b: ff c0                         incl    %eax
// 7d: 74 0f                         je      0x8e <_JIT_ENTRY+0x8e>
// 7f: 89 45 00                      movl    %eax, (%rbp)
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8c: ff d0                         callq   *%rax
// 8e: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 93: 75 28                         jne     0xbd <_JIT_ENTRY+0xbd>
// 95: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000097:  R_X86_64_64  PyInterpreterState_Get
// 9f: ff d0                         callq   *%rax
// a1: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// a8: 49 ff 4d 00                   decq    (%r13)
// ac: 75 0f                         jne     0xbd <_JIT_ENTRY+0xbd>
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  PyObject_Free
// b8: 4c 89 ef                      movq    %r13, %rdi
// bb: ff d0                         callq   *%rax
// bd: 49 8b 04 24                   movq    (%r12), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7f 22                         jg      0xe8 <_JIT_ENTRY+0xe8>
// c6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c8:  R_X86_64_64  .rodata.str1.1
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _Py_NegativeRefcount
// da: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// df: 4c 89 e2                      movq    %r12, %rdx
// e2: ff d0                         callq   *%rax
// e4: 49 8b 04 24                   movq    (%r12), %rax
// e8: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// ec: 85 c0                         testl   %eax, %eax
// ee: 78 21                         js      0x111 <_JIT_ENTRY+0x111>
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fa: ff d0                         callq   *%rax
// fc: 49 ff 0c 24                   decq    (%r12)
// 100: 75 0f                         jne     0x111 <_JIT_ENTRY+0x111>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_Dealloc
// 10c: 4c 89 e7                      movq    %r12, %rdi
// 10f: ff d0                         callq   *%rax
// 111: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _JIT_CONTINUE
// 11f: 48 89 df                      movq    %rbx, %rdi
// 122: 4c 89 ee                      movq    %r13, %rsi
// 125: 4c 89 fa                      movq    %r15, %rdx
// 128: 48 83 c4 08                   addq    $0x8, %rsp
// 12c: 5b                            popq    %rbx
// 12d: 41 5c                         popq    %r12
// 12f: 41 5d                         popq    %r13
// 131: 41 5e                         popq    %r14
// 133: 41 5f                         popq    %r15
// 135: 5d                            popq    %rbp
// 136: ff e0                         jmpq    *%rax
// 138: 49 29 de                      subq    %rbx, %r14
// 13b: 49 83 c6 b8                   addq    $-0x48, %r14
// 13f: 49 c1 ee 03                   shrq    $0x3, %r14
// 143: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 147: 48 8b 03                      movq    (%rbx), %rax
// 14a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014c:  R_X86_64_64  _JIT_TARGET
// 154: 89 c9                         movl    %ecx, %ecx
// 156: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 15a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 160: 48 83 c4 08                   addq    $0x8, %rsp
// 164: 5b                            popq    %rbx
// 165: 41 5c                         popq    %r12
// 167: 41 5d                         popq    %r13
// 169: 41 5e                         popq    %r14
// 16b: 41 5f                         popq    %r15
// 16d: 5d                            popq    %rbp
// 16e: c3                            retq
// 16f: 
static const unsigned char _CHECK_VALIDITYplus_BINARY_SUBSCR_TUPLE_INT_code_body[368] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x13, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfb, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xe2, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xd7, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x6c, 0xc4, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_BINARY_SUBSCR_TUPLE_INT_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BINARY_SUBSCR_TUPLE_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _CHECK_VALIDITYplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BUILD_CONST_KEY_MAP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 0f 84 5d 01 00 00             je      0x185 <_JIT_ENTRY+0x185>
// 28: 48 89 d1                      movq    %rdx, %rcx
// 2b: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  PyTuple_Type
// 39: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3e: 0f 85 05 01 00 00             jne     0x149 <_JIT_ENTRY+0x149>
// 44: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000046:  R_X86_64_64  _JIT_OPARG
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 56: 0f 85 ed 00 00 00             jne     0x149 <_JIT_ENTRY+0x149>
// 5c: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 61: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000063:  R_X86_64_64  _JIT_OPARG
// 6b: f7 d0                         notl    %eax
// 6d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 72: 48 98                         cltq
// 74: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 78: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 7d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000007f:  R_X86_64_64  _JIT_OPARG
// 87: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _PyDict_FromItems
// 95: be 01 00 00 00                movl    $0x1, %esi
// 9a: b9 01 00 00 00                movl    $0x1, %ecx
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a9: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// b0: 0f 8e 06 01 00 00             jle     0x1bc <_JIT_ENTRY+0x1bc>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _JIT_OPARG
// c0: 44 0f b7 f8                   movzwl  %ax, %r15d
// c4: 49 ff c7                      incq    %r15
// c7: eb 14                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c9: 0f 1f 80 00 00 00 00          nopl    (%rax)
// d0: 49 ff cf                      decq    %r15
// d3: 49 83 ff 01                   cmpq    $0x1, %r15
// d7: 0f 8e df 00 00 00             jle     0x1bc <_JIT_ENTRY+0x1bc>
// dd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// e1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// e6: 48 8b 45 00                   movq    (%rbp), %rax
// ea: 48 85 c0                      testq   %rax, %rax
// ed: 7e 11                         jle     0x100 <_JIT_ENTRY+0x100>
// ef: 85 c0                         testl   %eax, %eax
// f1: 78 dd                         js      0xd0 <_JIT_ENTRY+0xd0>
// f3: eb 31                         jmp     0x126 <_JIT_ENTRY+0x126>
// f5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 48 89 ea                      movq    %rbp, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 48 8b 45 00                   movq    (%rbp), %rax
// 122: 85 c0                         testl   %eax, %eax
// 124: 78 aa                         js      0xd0 <_JIT_ENTRY+0xd0>
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 130: ff d0                         callq   *%rax
// 132: 48 ff 4d 00                   decq    (%rbp)
// 136: 75 98                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 138: 48 89 ef                      movq    %rbp, %rdi
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_Dealloc
// 145: ff d0                         callq   *%rax
// 147: eb 87                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyExc_SystemError
// 153: 48 8b 30                      movq    (%rax), %rsi
// 156: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000158:  R_X86_64_64  .rodata.str1.1+0x39
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _PyErr_SetString
// 16a: 48 89 cf                      movq    %rcx, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 4d 89 f5                      movq    %r14, %r13
// 172: 49 29 dd                      subq    %rbx, %r13
// 175: 49 83 c5 b8                   addq    $-0x48, %r13
// 179: 49 c1 ed 03                   shrq    $0x3, %r13
// 17d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 181: 31 c0                         xorl    %eax, %eax
// 183: eb 28                         jmp     0x1ad <_JIT_ENTRY+0x1ad>
// 185: 49 29 de                      subq    %rbx, %r14
// 188: 49 83 c6 b8                   addq    $-0x48, %r14
// 18c: 49 c1 ee 03                   shrq    $0x3, %r14
// 190: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 194: 48 8b 03                      movq    (%rbx), %rax
// 197: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000199:  R_X86_64_64  _JIT_TARGET
// 1a1: 89 c9                         movl    %ecx, %ecx
// 1a3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1a7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ad: 48 83 c4 18                   addq    $0x18, %rsp
// 1b1: 5b                            popq    %rbx
// 1b2: 41 5c                         popq    %r12
// 1b4: 41 5d                         popq    %r13
// 1b6: 41 5e                         popq    %r14
// 1b8: 41 5f                         popq    %r15
// 1ba: 5d                            popq    %rbp
// 1bb: c3                            retq
// 1bc: 49 8b 04 24                   movq    (%r12), %rax
// 1c0: 48 85 c0                      testq   %rax, %rax
// 1c3: 7f 22                         jg      0x1e7 <_JIT_ENTRY+0x1e7>
// 1c5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c7:  R_X86_64_64  .rodata.str1.1
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_NegativeRefcount
// 1d9: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1de: 4c 89 e2                      movq    %r12, %rdx
// 1e1: ff d0                         callq   *%rax
// 1e3: 49 8b 04 24                   movq    (%r12), %rax
// 1e7: 85 c0                         testl   %eax, %eax
// 1e9: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1ee: 78 21                         js      0x211 <_JIT_ENTRY+0x211>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 ff 0c 24                   decq    (%r12)
// 200: 75 0f                         jne     0x211 <_JIT_ENTRY+0x211>
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_Dealloc
// 20c: 4c 89 e7                      movq    %r12, %rdi
// 20f: ff d0                         callq   *%rax
// 211: 4d 85 ff                      testq   %r15, %r15
// 214: 0f 84 58 ff ff ff             je      0x172 <_JIT_ENTRY+0x172>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _JIT_OPARG
// 224: 0f b7 c8                      movzwl  %ax, %ecx
// 227: f7 d0                         notl    %eax
// 229: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22e: 48 98                         cltq
// 230: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 234: 48 c1 e1 03                   shlq    $0x3, %rcx
// 238: 49 29 ce                      subq    %rcx, %r14
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _JIT_CONTINUE
// 245: 48 89 df                      movq    %rbx, %rdi
// 248: 4c 89 f6                      movq    %r14, %rsi
// 24b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 250: 48 83 c4 18                   addq    $0x18, %rsp
// 254: 5b                            popq    %rbx
// 255: 41 5c                         popq    %r12
// 257: 41 5d                         popq    %r13
// 259: 41 5e                         popq    %r14
// 25b: 41 5f                         popq    %r15
// 25d: 5d                            popq    %rbp
// 25e: ff e0                         jmpq    *%rax
// 260: 
static const unsigned char _CHECK_VALIDITYplus_BUILD_CONST_KEY_MAP_code_body[609] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0xd1, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x05, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xed, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x06, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x14, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xdf, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xeb, 0x28, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x58, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_BUILD_CONST_KEY_MAP_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _CHECK_VALIDITYplus_BUILD_CONST_KEY_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _CHECK_VALIDITYplus_BUILD_LIST
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BUILD_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 f6                      movq    %rsi, %r14
// b: 48 89 fb                      movq    %rdi, %rbx
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 77                         je      0x95 <_JIT_ENTRY+0x95>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  _JIT_OPARG
// 2b: 0f b7 f0                      movzwl  %ax, %esi
// 2e: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 36: 4d 89 f4                      movq    %r14, %r12
// 39: 49 29 c4                      subq    %rax, %r12
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  _PyList_FromArraySteal
// 46: 4c 89 e7                      movq    %r12, %rdi
// 49: ff d0                         callq   *%rax
// 4b: 48 85 c0                      testq   %rax, %rax
// 4e: 74 6f                         je      0xbf <_JIT_ENTRY+0xbf>
// 50: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: 0f b7 d1                      movzwl  %cx, %edx
// 5d: 0f b7 c9                      movzwl  %cx, %ecx
// 60: 48 c1 e1 03                   shlq    $0x3, %rcx
// 64: 48 f7 d9                      negq    %rcx
// 67: 49 89 04 0e                   movq    %rax, (%r14,%rcx)
// 6b: b8 01 00 00 00                movl    $0x1, %eax
// 70: 29 d0                         subl    %edx, %eax
// 72: 48 98                         cltq
// 74: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _JIT_CONTINUE
// 82: 48 89 df                      movq    %rbx, %rdi
// 85: 4c 89 fa                      movq    %r15, %rdx
// 88: 48 83 c4 08                   addq    $0x8, %rsp
// 8c: 5b                            popq    %rbx
// 8d: 41 5c                         popq    %r12
// 8f: 41 5e                         popq    %r14
// 91: 41 5f                         popq    %r15
// 93: ff e0                         jmpq    *%rax
// 95: 49 29 de                      subq    %rbx, %r14
// 98: 49 83 c6 b8                   addq    $-0x48, %r14
// 9c: 49 c1 ee 03                   shrq    $0x3, %r14
// a0: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// a4: 48 8b 03                      movq    (%rbx), %rax
// a7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a9:  R_X86_64_64  _JIT_TARGET
// b1: 89 c9                         movl    %ecx, %ecx
// b3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// b7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// bd: eb 11                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// bf: 49 29 dc                      subq    %rbx, %r12
// c2: 49 83 c4 b8                   addq    $-0x48, %r12
// c6: 49 c1 ec 03                   shrq    $0x3, %r12
// ca: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// ce: 31 c0                         xorl    %eax, %eax
// d0: 48 83 c4 08                   addq    $0x8, %rsp
// d4: 5b                            popq    %rbx
// d5: 41 5c                         popq    %r12
// d7: 41 5e                         popq    %r14
// d9: 41 5f                         popq    %r15
// db: c3                            retq
// dc: 
static const unsigned char _CHECK_VALIDITYplus_BUILD_LIST_code_body[221] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x77, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x6f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x04, 0x0e, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_BUILD_LIST_code_holes[7] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_BUILD_LIST_data_body[1];
static const Hole _CHECK_VALIDITYplus_BUILD_LIST_data_holes[1];

// _CHECK_VALIDITYplus_BUILD_MAP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BUILD_MAP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 0f 84 35 01 00 00             je      0x15a <_JIT_ENTRY+0x15a>
// 25: 48 89 14 24                   movq    %rdx, (%rsp)
// 29: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 2e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000030:  R_X86_64_64  _JIT_OPARG
// 38: 0f b7 d8                      movzwl  %ax, %ebx
// 3b: 89 d9                         movl    %ebx, %ecx
// 3d: f7 d9                         negl    %ecx
// 3f: 01 c9                         addl    %ecx, %ecx
// 41: 48 63 c9                      movslq  %ecx, %rcx
// 44: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 48: 49 8d 14 ce                   leaq    (%r14,%rcx,8), %rdx
// 4c: 48 83 c2 08                   addq    $0x8, %rdx
// 50: 44 0f b7 c0                   movzwl  %ax, %r8d
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _PyDict_FromItems
// 5e: be 02 00 00 00                movl    $0x2, %esi
// 63: b9 02 00 00 00                movl    $0x2, %ecx
// 68: 4c 89 e7                      movq    %r12, %rdi
// 6b: ff d0                         callq   *%rax
// 6d: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 72: 01 db                         addl    %ebx, %ebx
// 74: 85 db                         testl   %ebx, %ebx
// 76: 0f 8e 87 00 00 00             jle     0x103 <_JIT_ENTRY+0x103>
// 7c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 0f b7 c0                      movzwl  %ax, %eax
// 89: 4c 8d 2c 00                   leaq    (%rax,%rax), %r13
// 8d: 49 ff c5                      incq    %r13
// 90: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000009c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a4: eb 13                         jmp     0xb9 <_JIT_ENTRY+0xb9>
// a6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// b0: 49 ff cd                      decq    %r13
// b3: 49 83 fd 01                   cmpq    $0x1, %r13
// b7: 7e 4a                         jle     0x103 <_JIT_ENTRY+0x103>
// b9: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// bd: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// c1: 49 8b 07                      movq    (%r15), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7e 07                         jle     0xd0 <_JIT_ENTRY+0xd0>
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 e3                         js      0xb0 <_JIT_ENTRY+0xb0>
// cd: eb 1c                         jmp     0xeb <_JIT_ENTRY+0xeb>
// cf: 90                            nop
// d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d2:  R_X86_64_64  .rodata.str1.1
// da: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// df: 4c 89 fa                      movq    %r15, %rdx
// e2: ff d3                         callq   *%rbx
// e4: 49 8b 07                      movq    (%r15), %rax
// e7: 85 c0                         testl   %eax, %eax
// e9: 78 c5                         js      0xb0 <_JIT_ENTRY+0xb0>
// eb: ff d5                         callq   *%rbp
// ed: 49 ff 0f                      decq    (%r15)
// f0: 75 be                         jne     0xb0 <_JIT_ENTRY+0xb0>
// f2: 4c 89 ff                      movq    %r15, %rdi
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: eb ad                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 103: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 108: 48 85 d2                      testq   %rdx, %rdx
// 10b: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 110: 74 72                         je      0x184 <_JIT_ENTRY+0x184>
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _JIT_OPARG
// 11c: 0f b7 c0                      movzwl  %ax, %eax
// 11f: 89 c1                         movl    %eax, %ecx
// 121: f7 d9                         negl    %ecx
// 123: 01 c9                         addl    %ecx, %ecx
// 125: 48 63 c9                      movslq  %ecx, %rcx
// 128: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 12c: 01 c0                         addl    %eax, %eax
// 12e: b9 01 00 00 00                movl    $0x1, %ecx
// 133: 29 c1                         subl    %eax, %ecx
// 135: 48 63 c1                      movslq  %ecx, %rax
// 138: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _JIT_CONTINUE
// 146: 48 8b 14 24                   movq    (%rsp), %rdx
// 14a: 48 83 c4 18                   addq    $0x18, %rsp
// 14e: 5b                            popq    %rbx
// 14f: 41 5c                         popq    %r12
// 151: 41 5d                         popq    %r13
// 153: 41 5e                         popq    %r14
// 155: 41 5f                         popq    %r15
// 157: 5d                            popq    %rbp
// 158: ff e0                         jmpq    *%rax
// 15a: 49 29 fe                      subq    %rdi, %r14
// 15d: 49 83 c6 b8                   addq    $-0x48, %r14
// 161: 49 c1 ee 03                   shrq    $0x3, %r14
// 165: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 169: 48 8b 07                      movq    (%rdi), %rax
// 16c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016e:  R_X86_64_64  _JIT_TARGET
// 176: 89 c9                         movl    %ecx, %ecx
// 178: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 182: eb 11                         jmp     0x195 <_JIT_ENTRY+0x195>
// 184: 49 29 fc                      subq    %rdi, %r12
// 187: 49 83 c4 b8                   addq    $-0x48, %r12
// 18b: 49 c1 ec 03                   shrq    $0x3, %r12
// 18f: 44 89 67 40                   movl    %r12d, 0x40(%rdi)
// 193: 31 c0                         xorl    %eax, %eax
// 195: 48 83 c4 18                   addq    $0x18, %rsp
// 199: 5b                            popq    %rbx
// 19a: 41 5c                         popq    %r12
// 19c: 41 5d                         popq    %r13
// 19e: 41 5e                         popq    %r14
// 1a0: 41 5f                         popq    %r15
// 1a2: 5d                            popq    %rbp
// 1a3: c3                            retq
// 1a4: 
static const unsigned char _CHECK_VALIDITYplus_BUILD_MAP_code_body[421] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x35, 0x01, 0x00, 0x00, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x89, 0xd9, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x4d, 0x8d, 0x24, 0xce, 0x49, 0x8d, 0x14, 0xce, 0x48, 0x83, 0xc2, 0x08, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x01, 0xdb, 0x85, 0xdb, 0x0f, 0x8e, 0x87, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8d, 0x2c, 0x00, 0x49, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x13, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x4a, 0x41, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x1c, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd3, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xc5, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xbe, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xad, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x72, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0x01, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x49, 0x29, 0xfc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x67, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_BUILD_MAP_code_holes[12] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x30, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BUILD_MAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BUILD_MAP_data_holes[1];

// _CHECK_VALIDITYplus_BUILD_SET
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BUILD_SET.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f5                      movq    %rsi, %r13
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 0f 84 16 01 00 00             je      0x13e <_JIT_ENTRY+0x13e>
// 28: 49 89 d4                      movq    %rdx, %r12
// 2b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002d:  R_X86_64_64  PySet_New
// 35: 31 ff                         xorl    %edi, %edi
// 37: ff d0                         callq   *%rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 0f 84 26 01 00 00             je      0x168 <_JIT_ENTRY+0x168>
// 42: 49 89 c6                      movq    %rax, %r14
// 45: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000047:  R_X86_64_64  _JIT_OPARG
// 4f: 66 85 c0                      testw   %ax, %ax
// 52: 0f 84 94 01 00 00             je      0x1ec <_JIT_ENTRY+0x1ec>
// 58: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
// 5d: 4c 89 34 24                   movq    %r14, (%rsp)
// 61: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 66: 0f b7 c0                      movzwl  %ax, %eax
// 69: 48 c1 e0 03                   shlq    $0x3, %rax
// 6d: 4d 89 ef                      movq    %r13, %r15
// 70: 49 29 c7                      subq    %rax, %r15
// 73: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000075:  R_X86_64_64  _JIT_OPARG
// 7d: 0f b7 c0                      movzwl  %ax, %eax
// 80: 83 f8 02                      cmpl    $0x2, %eax
// 83: bb 01 00 00 00                movl    $0x1, %ebx
// 88: 0f 43 d8                      cmovael %eax, %ebx
// 8b: 45 31 f6                      xorl    %r14d, %r14d
// 8e: 31 ed                         xorl    %ebp, %ebp
// 90: eb 1a                         jmp     0xac <_JIT_ENTRY+0xac>
// 92: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// a0: 49 ff c6                      incq    %r14
// a3: 4c 39 f3                      cmpq    %r14, %rbx
// a6: 0f 84 c1 00 00 00             je      0x16d <_JIT_ENTRY+0x16d>
// ac: 4f 8b 24 f7                   movq    (%r15,%r14,8), %r12
// b0: 85 ed                         testl   %ebp, %ebp
// b2: 74 1c                         je      0xd0 <_JIT_ENTRY+0xd0>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 7e 31                         jle     0xee <_JIT_ENTRY+0xee>
// bd: 85 c0                         testl   %eax, %eax
// bf: 78 df                         js      0xa0 <_JIT_ENTRY+0xa0>
// c1: eb 51                         jmp     0x114 <_JIT_ENTRY+0x114>
// c3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// d0: 48 8b 3c 24                   movq    (%rsp), %rdi
// d4: 4c 89 e6                      movq    %r12, %rsi
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  PySet_Add
// e1: ff d0                         callq   *%rax
// e3: 89 c5                         movl    %eax, %ebp
// e5: 49 8b 04 24                   movq    (%r12), %rax
// e9: 48 85 c0                      testq   %rax, %rax
// ec: 7f cf                         jg      0xbd <_JIT_ENTRY+0xbd>
// ee: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f0:  R_X86_64_64  .rodata.str1.1
// f8: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// fd: 4c 89 e2                      movq    %r12, %rdx
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_NegativeRefcount
// 10a: ff d0                         callq   *%rax
// 10c: 49 8b 04 24                   movq    (%r12), %rax
// 110: 85 c0                         testl   %eax, %eax
// 112: 78 8c                         js      0xa0 <_JIT_ENTRY+0xa0>
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11e: ff d0                         callq   *%rax
// 120: 49 ff 0c 24                   decq    (%r12)
// 124: 0f 85 76 ff ff ff             jne     0xa0 <_JIT_ENTRY+0xa0>
// 12a: 4c 89 e7                      movq    %r12, %rdi
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _Py_Dealloc
// 137: ff d0                         callq   *%rax
// 139: e9 62 ff ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 13e: 49 29 dd                      subq    %rbx, %r13
// 141: 49 83 c5 b8                   addq    $-0x48, %r13
// 145: 49 c1 ed 03                   shrq    $0x3, %r13
// 149: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 14d: 48 8b 03                      movq    (%rbx), %rax
// 150: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000152:  R_X86_64_64  _JIT_TARGET
// 15a: 89 c9                         movl    %ecx, %ecx
// 15c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 160: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 166: eb 75                         jmp     0x1dd <_JIT_ENTRY+0x1dd>
// 168: 4d 89 ef                      movq    %r13, %r15
// 16b: eb 5f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 16d: 85 ed                         testl   %ebp, %ebp
// 16f: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 174: 4c 8b 34 24                   movq    (%rsp), %r14
// 178: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 17d: 74 6d                         je      0x1ec <_JIT_ENTRY+0x1ec>
// 17f: 49 8b 06                      movq    (%r14), %rax
// 182: 48 85 c0                      testq   %rax, %rax
// 185: 7f 21                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 196: 4c 89 f2                      movq    %r14, %rdx
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 06                      movq    (%r14), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 20                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b6: ff d0                         callq   *%rax
// 1b8: 49 ff 0e                      decq    (%r14)
// 1bb: 75 0f                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 4c 89 f7                      movq    %r14, %rdi
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: ff d0                         callq   *%rax
// 1cc: 49 29 df                      subq    %rbx, %r15
// 1cf: 49 83 c7 b8                   addq    $-0x48, %r15
// 1d3: 49 c1 ef 03                   shrq    $0x3, %r15
// 1d7: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1db: 31 c0                         xorl    %eax, %eax
// 1dd: 48 83 c4 18                   addq    $0x18, %rsp
// 1e1: 5b                            popq    %rbx
// 1e2: 41 5c                         popq    %r12
// 1e4: 41 5d                         popq    %r13
// 1e6: 41 5e                         popq    %r14
// 1e8: 41 5f                         popq    %r15
// 1ea: 5d                            popq    %rbp
// 1eb: c3                            retq
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _JIT_OPARG
// 1f6: 0f b7 c8                      movzwl  %ax, %ecx
// 1f9: 0f b7 c0                      movzwl  %ax, %eax
// 1fc: 48 c1 e0 03                   shlq    $0x3, %rax
// 200: 48 f7 d8                      negq    %rax
// 203: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 208: b8 01 00 00 00                movl    $0x1, %eax
// 20d: 29 c8                         subl    %ecx, %eax
// 20f: 48 98                         cltq
// 211: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 219: 4c 01 ee                      addq    %r13, %rsi
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _JIT_CONTINUE
// 226: 48 89 df                      movq    %rbx, %rdi
// 229: 4c 89 e2                      movq    %r12, %rdx
// 22c: 48 83 c4 18                   addq    $0x18, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: ff e0                         jmpq    *%rax
// 23c: 
static const unsigned char _CHECK_VALIDITYplus_BUILD_SET_code_body[573] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x26, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x64, 0x24, 0x08, 0x4c, 0x89, 0x34, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xd8, 0x45, 0x31, 0xf6, 0x31, 0xed, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x4f, 0x8b, 0x24, 0xf7, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x31, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x51, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xcf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x8c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x76, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x62, 0xff, 0xff, 0xff, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x75, 0x4d, 0x89, 0xef, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x34, 0x24, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x74, 0x6d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_BUILD_SET_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BUILD_SET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BUILD_SET_data_holes[1];

// _CHECK_VALIDITYplus_BUILD_SLICE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BUILD_SLICE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 74 25                         je      0x49 <_JIT_ENTRY+0x49>
// 24: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 29: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002b:  R_X86_64_64  _JIT_OPARG
// 33: 66 83 f8 03                   cmpw    $0x3, %ax
// 37: 75 3d                         jne     0x76 <_JIT_ENTRY+0x76>
// 39: 31 c9                         xorl    %ecx, %ecx
// 3b: 66 83 f8 03                   cmpw    $0x3, %ax
// 3f: 0f 95 c1                      setne   %cl
// 42: 4d 8b 64 ce f8                movq    -0x8(%r14,%rcx,8), %r12
// 47: eb 30                         jmp     0x79 <_JIT_ENTRY+0x79>
// 49: 49 29 de                      subq    %rbx, %r14
// 4c: 49 83 c6 b8                   addq    $-0x48, %r14
// 50: 49 c1 ee 03                   shrq    $0x3, %r14
// 54: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 58: 48 8b 03                      movq    (%rbx), %rax
// 5b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005d:  R_X86_64_64  _JIT_TARGET
// 65: 89 c9                         movl    %ecx, %ecx
// 67: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 71: e9 a9 01 00 00                jmp     0x21f <_JIT_ENTRY+0x21f>
// 76: 45 31 e4                      xorl    %r12d, %r12d
// 79: 31 c9                         xorl    %ecx, %ecx
// 7b: 66 83 f8 03                   cmpw    $0x3, %ax
// 7f: 0f 94 c1                      sete    %cl
// 82: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 87: 29 c8                         subl    %ecx, %eax
// 89: f7 d1                         notl    %ecx
// 8b: 48 63 c9                      movslq  %ecx, %rcx
// 8e: 48 89 0c 24                   movq    %rcx, (%rsp)
// 92: 49 8b 2c ce                   movq    (%r14,%rcx,8), %rbp
// 96: 48 98                         cltq
// 98: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 9d: 4d 8b 3c c6                   movq    (%r14,%rax,8), %r15
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  PySlice_New
// ab: 4c 89 ff                      movq    %r15, %rdi
// ae: 48 89 ee                      movq    %rbp, %rsi
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 89 c5                      movq    %rax, %r13
// b9: 49 8b 07                      movq    (%r15), %rax
// bc: 48 85 c0                      testq   %rax, %rax
// bf: 7e 06                         jle     0xc7 <_JIT_ENTRY+0xc7>
// c1: 85 c0                         testl   %eax, %eax
// c3: 79 27                         jns     0xec <_JIT_ENTRY+0xec>
// c5: eb 36                         jmp     0xfd <_JIT_ENTRY+0xfd>
// c7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c9:  R_X86_64_64  .rodata.str1.1
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_NegativeRefcount
// db: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// e0: 4c 89 fa                      movq    %r15, %rdx
// e3: ff d0                         callq   *%rax
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 85 c0                         testl   %eax, %eax
// ea: 78 11                         js      0xfd <_JIT_ENTRY+0xfd>
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_DECREF_DecRefTotal
// f6: ff d0                         callq   *%rax
// f8: 49 ff 0f                      decq    (%r15)
// fb: 74 0f                         je      0x10c <_JIT_ENTRY+0x10c>
// fd: 48 8b 45 00                   movq    (%rbp), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7e 1e                         jle     0x124 <_JIT_ENTRY+0x124>
// 106: 85 c0                         testl   %eax, %eax
// 108: 79 40                         jns     0x14a <_JIT_ENTRY+0x14a>
// 10a: eb 5f                         jmp     0x16b <_JIT_ENTRY+0x16b>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_Dealloc
// 116: 4c 89 ff                      movq    %r15, %rdi
// 119: ff d0                         callq   *%rax
// 11b: 48 8b 45 00                   movq    (%rbp), %rax
// 11f: 48 85 c0                      testq   %rax, %rax
// 122: 7f e2                         jg      0x106 <_JIT_ENTRY+0x106>
// 124: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000126:  R_X86_64_64  .rodata.str1.1
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_NegativeRefcount
// 138: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 13d: 48 89 ea                      movq    %rbp, %rdx
// 140: ff d0                         callq   *%rax
// 142: 48 8b 45 00                   movq    (%rbp), %rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 78 21                         js      0x16b <_JIT_ENTRY+0x16b>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 154: ff d0                         callq   *%rax
// 156: 48 ff 4d 00                   decq    (%rbp)
// 15a: 75 0f                         jne     0x16b <_JIT_ENTRY+0x16b>
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _Py_Dealloc
// 166: 48 89 ef                      movq    %rbp, %rdi
// 169: ff d0                         callq   *%rax
// 16b: 4d 85 e4                      testq   %r12, %r12
// 16e: 74 47                         je      0x1b7 <_JIT_ENTRY+0x1b7>
// 170: 49 8b 04 24                   movq    (%r12), %rax
// 174: 48 85 c0                      testq   %rax, %rax
// 177: 7e 06                         jle     0x17f <_JIT_ENTRY+0x17f>
// 179: 85 c0                         testl   %eax, %eax
// 17b: 79 28                         jns     0x1a5 <_JIT_ENTRY+0x1a5>
// 17d: eb 38                         jmp     0x1b7 <_JIT_ENTRY+0x1b7>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1+0x39
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 198: 4c 89 e2                      movq    %r12, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 04 24                   movq    (%r12), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 12                         js      0x1b7 <_JIT_ENTRY+0x1b7>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 49 ff 0c 24                   decq    (%r12)
// 1b5: 74 3b                         je      0x1f2 <_JIT_ENTRY+0x1f2>
// 1b7: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1bc: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1c0: 4d 85 ed                      testq   %r13, %r13
// 1c3: 74 4a                         je      0x20f <_JIT_ENTRY+0x20f>
// 1c5: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1c9: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1cd: 4c 89 28                      movq    %r13, (%rax)
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_CONTINUE
// 1da: 48 89 df                      movq    %rbx, %rdi
// 1dd: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1e2: 48 83 c4 18                   addq    $0x18, %rsp
// 1e6: 5b                            popq    %rbx
// 1e7: 41 5c                         popq    %r12
// 1e9: 41 5d                         popq    %r13
// 1eb: 41 5e                         popq    %r14
// 1ed: 41 5f                         popq    %r15
// 1ef: 5d                            popq    %rbp
// 1f0: ff e0                         jmpq    *%rax
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_Dealloc
// 1fc: 4c 89 e7                      movq    %r12, %rdi
// 1ff: ff d0                         callq   *%rax
// 201: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 206: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 20a: 4d 85 ed                      testq   %r13, %r13
// 20d: 75 b6                         jne     0x1c5 <_JIT_ENTRY+0x1c5>
// 20f: 48 29 d8                      subq    %rbx, %rax
// 212: 48 83 c0 b8                   addq    $-0x48, %rax
// 216: 48 c1 e8 03                   shrq    $0x3, %rax
// 21a: 89 43 40                      movl    %eax, 0x40(%rbx)
// 21d: 31 c0                         xorl    %eax, %eax
// 21f: 48 83 c4 18                   addq    $0x18, %rsp
// 223: 5b                            popq    %rbx
// 224: 41 5c                         popq    %r12
// 226: 41 5d                         popq    %r13
// 228: 41 5e                         popq    %r14
// 22a: 41 5f                         popq    %r15
// 22c: 5d                            popq    %rbp
// 22d: c3                            retq
// 22e: 
static const unsigned char _CHECK_VALIDITYplus_BUILD_SLICE_code_body[559] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x25, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x3d, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x95, 0xc1, 0x4d, 0x8b, 0x64, 0xce, 0xf8, 0xeb, 0x30, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xa9, 0x01, 0x00, 0x00, 0x45, 0x31, 0xe4, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc1, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc8, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x8b, 0x2c, 0xce, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x10, 0x4d, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x47, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3b, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x4a, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x34, 0xce, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x75, 0xb6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_BUILD_SLICE_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BUILD_SLICE_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BUILD_SLICE_data_holes[1];

// _CHECK_VALIDITYplus_BUILD_STRING
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BUILD_STRING.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 0f 84 33 01 00 00             je      0x158 <_JIT_ENTRY+0x158>
// 25: 48 89 14 24                   movq    %rdx, (%rsp)
// 29: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 2e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000030:  R_X86_64_64  _JIT_OPARG
// 38: 0f b7 d3                      movzwl  %bx, %edx
// 3b: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 43: 4d 89 f4                      movq    %r14, %r12
// 46: 49 29 c4                      subq    %rax, %r12
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _PyUnicode_JoinArray
// 53: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000055:  R_X86_64_64  _PyRuntime
// 5d: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 6e: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 74: 0f 8e 89 00 00 00             jle     0x103 <_JIT_ENTRY+0x103>
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 44 0f b7 e8                   movzwl  %ax, %r13d
// 88: 49 ff c5                      incq    %r13
// 8b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000097:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9f: eb 18                         jmp     0xb9 <_JIT_ENTRY+0xb9>
// a1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// b0: 49 ff cd                      decq    %r13
// b3: 49 83 fd 01                   cmpq    $0x1, %r13
// b7: 7e 4a                         jle     0x103 <_JIT_ENTRY+0x103>
// b9: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// bd: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// c1: 49 8b 07                      movq    (%r15), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7e 07                         jle     0xd0 <_JIT_ENTRY+0xd0>
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 e3                         js      0xb0 <_JIT_ENTRY+0xb0>
// cd: eb 1c                         jmp     0xeb <_JIT_ENTRY+0xeb>
// cf: 90                            nop
// d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d2:  R_X86_64_64  .rodata.str1.1
// da: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// df: 4c 89 fa                      movq    %r15, %rdx
// e2: ff d3                         callq   *%rbx
// e4: 49 8b 07                      movq    (%r15), %rax
// e7: 85 c0                         testl   %eax, %eax
// e9: 78 c5                         js      0xb0 <_JIT_ENTRY+0xb0>
// eb: ff d5                         callq   *%rbp
// ed: 49 ff 0f                      decq    (%r15)
// f0: 75 be                         jne     0xb0 <_JIT_ENTRY+0xb0>
// f2: 4c 89 ff                      movq    %r15, %rdi
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: eb ad                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 103: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 108: 48 85 d2                      testq   %rdx, %rdx
// 10b: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 110: 74 70                         je      0x182 <_JIT_ENTRY+0x182>
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _JIT_OPARG
// 11c: 0f b7 c8                      movzwl  %ax, %ecx
// 11f: 0f b7 c0                      movzwl  %ax, %eax
// 122: 48 c1 e0 03                   shlq    $0x3, %rax
// 126: 48 f7 d8                      negq    %rax
// 129: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 12d: b8 01 00 00 00                movl    $0x1, %eax
// 132: 29 c8                         subl    %ecx, %eax
// 134: 48 98                         cltq
// 136: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _JIT_CONTINUE
// 144: 48 8b 14 24                   movq    (%rsp), %rdx
// 148: 48 83 c4 18                   addq    $0x18, %rsp
// 14c: 5b                            popq    %rbx
// 14d: 41 5c                         popq    %r12
// 14f: 41 5d                         popq    %r13
// 151: 41 5e                         popq    %r14
// 153: 41 5f                         popq    %r15
// 155: 5d                            popq    %rbp
// 156: ff e0                         jmpq    *%rax
// 158: 49 29 fe                      subq    %rdi, %r14
// 15b: 49 83 c6 b8                   addq    $-0x48, %r14
// 15f: 49 c1 ee 03                   shrq    $0x3, %r14
// 163: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 167: 48 8b 07                      movq    (%rdi), %rax
// 16a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016c:  R_X86_64_64  _JIT_TARGET
// 174: 89 c9                         movl    %ecx, %ecx
// 176: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 180: eb 11                         jmp     0x193 <_JIT_ENTRY+0x193>
// 182: 49 29 fc                      subq    %rdi, %r12
// 185: 49 83 c4 b8                   addq    $-0x48, %r12
// 189: 49 c1 ec 03                   shrq    $0x3, %r12
// 18d: 44 89 67 40                   movl    %r12d, 0x40(%rdi)
// 191: 31 c0                         xorl    %eax, %eax
// 193: 48 83 c4 18                   addq    $0x18, %rsp
// 197: 5b                            popq    %rbx
// 198: 41 5c                         popq    %r12
// 19a: 41 5d                         popq    %r13
// 19c: 41 5e                         popq    %r14
// 19e: 41 5f                         popq    %r15
// 1a0: 5d                            popq    %rbp
// 1a1: c3                            retq
// 1a2: 
static const unsigned char _CHECK_VALIDITYplus_BUILD_STRING_code_body[419] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x33, 0x01, 0x00, 0x00, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x89, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x4a, 0x41, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x1c, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd3, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xc5, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xbe, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xad, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x49, 0x29, 0xfc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x67, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_BUILD_STRING_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x30, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_BUILD_STRING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_BUILD_STRING_data_holes[1];

// _CHECK_VALIDITYplus_BUILD_TUPLE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_BUILD_TUPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 f6                      movq    %rsi, %r14
// b: 48 89 fb                      movq    %rdi, %rbx
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 77                         je      0x95 <_JIT_ENTRY+0x95>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  _JIT_OPARG
// 2b: 0f b7 f0                      movzwl  %ax, %esi
// 2e: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 36: 4d 89 f4                      movq    %r14, %r12
// 39: 49 29 c4                      subq    %rax, %r12
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  _PyTuple_FromArraySteal
// 46: 4c 89 e7                      movq    %r12, %rdi
// 49: ff d0                         callq   *%rax
// 4b: 48 85 c0                      testq   %rax, %rax
// 4e: 74 6f                         je      0xbf <_JIT_ENTRY+0xbf>
// 50: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: 0f b7 d1                      movzwl  %cx, %edx
// 5d: 0f b7 c9                      movzwl  %cx, %ecx
// 60: 48 c1 e1 03                   shlq    $0x3, %rcx
// 64: 48 f7 d9                      negq    %rcx
// 67: 49 89 04 0e                   movq    %rax, (%r14,%rcx)
// 6b: b8 01 00 00 00                movl    $0x1, %eax
// 70: 29 d0                         subl    %edx, %eax
// 72: 48 98                         cltq
// 74: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _JIT_CONTINUE
// 82: 48 89 df                      movq    %rbx, %rdi
// 85: 4c 89 fa                      movq    %r15, %rdx
// 88: 48 83 c4 08                   addq    $0x8, %rsp
// 8c: 5b                            popq    %rbx
// 8d: 41 5c                         popq    %r12
// 8f: 41 5e                         popq    %r14
// 91: 41 5f                         popq    %r15
// 93: ff e0                         jmpq    *%rax
// 95: 49 29 de                      subq    %rbx, %r14
// 98: 49 83 c6 b8                   addq    $-0x48, %r14
// 9c: 49 c1 ee 03                   shrq    $0x3, %r14
// a0: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// a4: 48 8b 03                      movq    (%rbx), %rax
// a7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a9:  R_X86_64_64  _JIT_TARGET
// b1: 89 c9                         movl    %ecx, %ecx
// b3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// b7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// bd: eb 11                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// bf: 49 29 dc                      subq    %rbx, %r12
// c2: 49 83 c4 b8                   addq    $-0x48, %r12
// c6: 49 c1 ec 03                   shrq    $0x3, %r12
// ca: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// ce: 31 c0                         xorl    %eax, %eax
// d0: 48 83 c4 08                   addq    $0x8, %rsp
// d4: 5b                            popq    %rbx
// d5: 41 5c                         popq    %r12
// d7: 41 5e                         popq    %r14
// d9: 41 5f                         popq    %r15
// db: c3                            retq
// dc: 
static const unsigned char _CHECK_VALIDITYplus_BUILD_TUPLE_code_body[221] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x77, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x6f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x04, 0x0e, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_BUILD_TUPLE_code_holes[7] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_BUILD_TUPLE_data_body[1];
static const Hole _CHECK_VALIDITYplus_BUILD_TUPLE_data_holes[1];

// _CHECK_VALIDITYplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_BUILTIN_CLASS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 0f 84 5a 01 00 00             je      0x182 <_JIT_ENTRY+0x182>
// 28: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002a:  R_X86_64_64  _JIT_OPARG
// 32: 0f b7 f9                      movzwl  %cx, %edi
// 35: 89 f8                         movl    %edi, %eax
// 37: f7 d0                         notl    %eax
// 39: 4c 63 c8                      movslq  %eax, %r9
// 3c: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 40: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 45: 29 fe                         subl    %edi, %esi
// 47: 4c 63 d6                      movslq  %esi, %r10
// 4a: 0f b7 c9                      movzwl  %cx, %ecx
// 4d: 48 89 ce                      movq    %rcx, %rsi
// 50: 48 f7 de                      negq    %rsi
// 53: 44 8d 77 01                   leal    0x1(%rdi), %r14d
// 57: 48 85 c0                      testq   %rax, %rax
// 5a: 48 f7 d1                      notq    %rcx
// 5d: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 61: 44 0f 44 f7                   cmovel  %edi, %r14d
// 65: 4b 8b 3c d7                   movq    (%r15,%r10,8), %rdi
// 69: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 6d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 74: 0f 84 08 01 00 00             je      0x182 <_JIT_ENTRY+0x182>
// 7a: 4c 8b 87 90 01 00 00          movq    0x190(%rdi), %r8
// 81: 4d 85 c0                      testq   %r8, %r8
// 84: 0f 84 f8 00 00 00             je      0x182 <_JIT_ENTRY+0x182>
// 8a: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 8f: 4c 89 0c 24                   movq    %r9, (%rsp)
// 93: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 98: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 9c: 48 85 c0                      testq   %rax, %rax
// 9f: 41 0f 94 c4                   sete    %r12b
// a3: 44 89 f2                      movl    %r14d, %edx
// a6: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// ab: 48 89 ee                      movq    %rbp, %rsi
// ae: 31 c9                         xorl    %ecx, %ecx
// b0: 41 ff d0                      callq   *%r8
// b3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _JIT_OPARG
// c2: 66 85 c0                      testw   %ax, %ax
// c5: 0f 94 c0                      sete    %al
// c8: 41 84 c4                      testb   %al, %r12b
// cb: 0f 84 e8 00 00 00             je      0x1b9 <_JIT_ENTRY+0x1b9>
// d1: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// d6: 49 8b 06                      movq    (%r14), %rax
// d9: 48 85 c0                      testq   %rax, %rax
// dc: 7f 21                         jg      0xff <_JIT_ENTRY+0xff>
// de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e0:  R_X86_64_64  .rodata.str1.1
// e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ea:  R_X86_64_64  _Py_NegativeRefcount
// f2: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// f7: 4c 89 f2                      movq    %r14, %rdx
// fa: ff d0                         callq   *%rax
// fc: 49 8b 06                      movq    (%r14), %rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 106: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 10b: 78 20                         js      0x12d <_JIT_ENTRY+0x12d>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 49 ff 0e                      decq    (%r14)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 4c 89 f7                      movq    %r14, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 132: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 136: 4d 85 ed                      testq   %r13, %r13
// 139: 74 35                         je      0x170 <_JIT_ENTRY+0x170>
// 13b: 48 8b 0c 24                   movq    (%rsp), %rcx
// 13f: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 143: 4c 89 28                      movq    %r13, (%rax)
// 146: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 14b: 48 8b 00                      movq    (%rax), %rax
// 14e: 84 c0                         testb   %al, %al
// 150: 0f 84 e1 00 00 00             je      0x237 <_JIT_ENTRY+0x237>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_HandlePending
// 160: 4c 89 e7                      movq    %r12, %rdi
// 163: ff d0                         callq   *%rax
// 165: 85 c0                         testl   %eax, %eax
// 167: 0f 84 ca 00 00 00             je      0x237 <_JIT_ENTRY+0x237>
// 16d: 4c 89 f0                      movq    %r14, %rax
// 170: 48 29 d8                      subq    %rbx, %rax
// 173: 48 83 c0 b8                   addq    $-0x48, %rax
// 177: 48 c1 e8 03                   shrq    $0x3, %rax
// 17b: 89 43 40                      movl    %eax, 0x40(%rbx)
// 17e: 31 c0                         xorl    %eax, %eax
// 180: eb 28                         jmp     0x1aa <_JIT_ENTRY+0x1aa>
// 182: 49 29 df                      subq    %rbx, %r15
// 185: 49 83 c7 b8                   addq    $-0x48, %r15
// 189: 49 c1 ef 03                   shrq    $0x3, %r15
// 18d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 191: 48 8b 03                      movq    (%rbx), %rax
// 194: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000196:  R_X86_64_64  _JIT_TARGET
// 19e: 89 c9                         movl    %ecx, %ecx
// 1a0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1a4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1aa: 48 83 c4 28                   addq    $0x28, %rsp
// 1ae: 5b                            popq    %rbx
// 1af: 41 5c                         popq    %r12
// 1b1: 41 5d                         popq    %r13
// 1b3: 41 5e                         popq    %r14
// 1b5: 41 5f                         popq    %r15
// 1b7: 5d                            popq    %rbp
// 1b8: c3                            retq
// 1b9: 41 83 fe 02                   cmpl    $0x2, %r14d
// 1bd: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 1c3: 45 0f 43 ee                   cmovael %r14d, %r13d
// 1c7: 45 31 e4                      xorl    %r12d, %r12d
// 1ca: eb 10                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cc: 0f 1f 40 00                   nopl    (%rax)
// 1d0: 49 ff c4                      incq    %r12
// 1d3: 4d 39 e5                      cmpq    %r12, %r13
// 1d6: 0f 84 f5 fe ff ff             je      0xd1 <_JIT_ENTRY+0xd1>
// 1dc: 4e 8b 74 e5 00                movq    (%rbp,%r12,8), %r14
// 1e1: 49 8b 06                      movq    (%r14), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 26                         jmp     0x215 <_JIT_ENTRY+0x215>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ff: 4c 89 f2                      movq    %r14, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 06                      movq    (%r14), %rax
// 211: 85 c0                         testl   %eax, %eax
// 213: 78 bb                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21f: ff d0                         callq   *%rax
// 221: 49 ff 0e                      decq    (%r14)
// 224: 75 aa                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 4c 89 f7                      movq    %r14, %rdi
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: ff d0                         callq   *%rax
// 235: eb 99                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_CONTINUE
// 241: 48 89 df                      movq    %rbx, %rdi
// 244: 4c 89 f6                      movq    %r14, %rsi
// 247: 4c 89 e2                      movq    %r12, %rdx
// 24a: 48 83 c4 28                   addq    $0x28, %rsp
// 24e: 5b                            popq    %rbx
// 24f: 41 5c                         popq    %r12
// 251: 41 5d                         popq    %r13
// 253: 41 5e                         popq    %r14
// 255: 41 5f                         popq    %r15
// 257: 5d                            popq    %rbp
// 258: ff e0                         jmpq    *%rax
// 25a: 
static const unsigned char _CHECK_VALIDITYplus_CALL_BUILTIN_CLASS_code_body[603] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf9, 0x89, 0xf8, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xfe, 0x4c, 0x63, 0xd6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x77, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xf7, 0x4b, 0x8b, 0x3c, 0xd7, 0x48, 0x8b, 0x77, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x08, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x87, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc4, 0x44, 0x89, 0xf2, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc4, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x74, 0x35, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x34, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xca, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x28, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xee, 0x45, 0x31, 0xe4, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe5, 0x0f, 0x84, 0xf5, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xe5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_CALL_BUILTIN_CLASS_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CALL_BUILTIN_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_BUILTIN_CLASS_data_holes[1];

// _CHECK_VALIDITYplus_CALL_BUILTIN_FAST
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_BUILTIN_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 0f 84 64 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 28: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002a:  R_X86_64_64  _JIT_OPARG
// 32: 0f b7 f9                      movzwl  %cx, %edi
// 35: 89 f8                         movl    %edi, %eax
// 37: f7 d0                         notl    %eax
// 39: 4c 63 c8                      movslq  %eax, %r9
// 3c: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 40: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 45: 29 fe                         subl    %edi, %esi
// 47: 4c 63 d6                      movslq  %esi, %r10
// 4a: 0f b7 c9                      movzwl  %cx, %ecx
// 4d: 48 89 ce                      movq    %rcx, %rsi
// 50: 48 f7 de                      negq    %rsi
// 53: 44 8d 67 01                   leal    0x1(%rdi), %r12d
// 57: 48 85 c0                      testq   %rax, %rax
// 5a: 48 f7 d1                      notq    %rcx
// 5d: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 61: 44 0f 44 e7                   cmovel  %edi, %r12d
// 65: 4b 8b 3c d7                   movq    (%r15,%r10,8), %rdi
// 69: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000006b:  R_X86_64_64  PyCFunction_Type
// 73: 48 39 77 08                   cmpq    %rsi, 0x8(%rdi)
// 77: 0f 85 0f 01 00 00             jne     0x18c <_JIT_ENTRY+0x18c>
// 7d: 4c 8b 47 10                   movq    0x10(%rdi), %r8
// 81: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 89: 0f 85 fd 00 00 00             jne     0x18c <_JIT_ENTRY+0x18c>
// 8f: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 94: 4c 89 0c 24                   movq    %r9, (%rsp)
// 98: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 9d: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// a1: 48 85 c0                      testq   %rax, %rax
// a4: 41 0f 94 c6                   sete    %r14b
// a8: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// ad: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// b1: 44 89 e2                      movl    %r12d, %edx
// b4: 48 89 ee                      movq    %rbp, %rsi
// b7: 41 ff 50 08                   callq   *0x8(%r8)
// bb: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _JIT_OPARG
// ca: 66 85 c0                      testw   %ax, %ax
// cd: 0f 94 c0                      sete    %al
// d0: 41 84 c6                      testb   %al, %r14b
// d3: 0f 84 ea 00 00 00             je      0x1c3 <_JIT_ENTRY+0x1c3>
// d9: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// de: 49 8b 04 24                   movq    (%r12), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 100: 4c 89 e2                      movq    %r12, %rdx
// 103: ff d0                         callq   *%rax
// 105: 49 8b 04 24                   movq    (%r12), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 110: 78 21                         js      0x133 <_JIT_ENTRY+0x133>
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11c: ff d0                         callq   *%rax
// 11e: 49 ff 0c 24                   decq    (%r12)
// 122: 75 0f                         jne     0x133 <_JIT_ENTRY+0x133>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _Py_Dealloc
// 12e: 4c 89 e7                      movq    %r12, %rdi
// 131: ff d0                         callq   *%rax
// 133: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 138: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 13c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 141: 48 85 d2                      testq   %rdx, %rdx
// 144: 74 34                         je      0x17a <_JIT_ENTRY+0x17a>
// 146: 48 8b 0c 24                   movq    (%rsp), %rcx
// 14a: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 14e: 48 89 10                      movq    %rdx, (%rax)
// 151: 49 8b 46 10                   movq    0x10(%r14), %rax
// 155: 48 8b 00                      movq    (%rax), %rax
// 158: 84 c0                         testb   %al, %al
// 15a: 0f 84 e9 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_HandlePending
// 16a: 4c 89 f7                      movq    %r14, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 c0                         testl   %eax, %eax
// 171: 0f 84 d2 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 177: 4c 89 f8                      movq    %r15, %rax
// 17a: 48 29 d8                      subq    %rbx, %rax
// 17d: 48 83 c0 b8                   addq    $-0x48, %rax
// 181: 48 c1 e8 03                   shrq    $0x3, %rax
// 185: 89 43 40                      movl    %eax, 0x40(%rbx)
// 188: 31 c0                         xorl    %eax, %eax
// 18a: eb 28                         jmp     0x1b4 <_JIT_ENTRY+0x1b4>
// 18c: 49 29 df                      subq    %rbx, %r15
// 18f: 49 83 c7 b8                   addq    $-0x48, %r15
// 193: 49 c1 ef 03                   shrq    $0x3, %r15
// 197: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 19b: 48 8b 03                      movq    (%rbx), %rax
// 19e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a0:  R_X86_64_64  _JIT_TARGET
// 1a8: 89 c9                         movl    %ecx, %ecx
// 1aa: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ae: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b4: 48 83 c4 28                   addq    $0x28, %rsp
// 1b8: 5b                            popq    %rbx
// 1b9: 41 5c                         popq    %r12
// 1bb: 41 5d                         popq    %r13
// 1bd: 41 5e                         popq    %r14
// 1bf: 41 5f                         popq    %r15
// 1c1: 5d                            popq    %rbp
// 1c2: c3                            retq
// 1c3: 41 83 fc 02                   cmpl    $0x2, %r12d
// 1c7: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1cd: 45 0f 43 f4                   cmovael %r12d, %r14d
// 1d1: 45 31 e4                      xorl    %r12d, %r12d
// 1d4: eb 16                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1d6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 1e0: 49 ff c4                      incq    %r12
// 1e3: 4d 39 e6                      cmpq    %r12, %r14
// 1e6: 0f 84 ed fe ff ff             je      0xd9 <_JIT_ENTRY+0xd9>
// 1ec: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 1f1: 49 8b 45 00                   movq    (%r13), %rax
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 7e 06                         jle     0x200 <_JIT_ENTRY+0x200>
// 1fa: 85 c0                         testl   %eax, %eax
// 1fc: 78 e2                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1fe: eb 26                         jmp     0x226 <_JIT_ENTRY+0x226>
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 ba                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 a8                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 97                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_CONTINUE
// 253: 48 89 df                      movq    %rbx, %rdi
// 256: 4c 89 fe                      movq    %r15, %rsi
// 259: 4c 89 f2                      movq    %r14, %rdx
// 25c: 48 83 c4 28                   addq    $0x28, %rsp
// 260: 5b                            popq    %rbx
// 261: 41 5c                         popq    %r12
// 263: 41 5d                         popq    %r13
// 265: 41 5e                         popq    %r14
// 267: 41 5f                         popq    %r15
// 269: 5d                            popq    %rbp
// 26a: ff e0                         jmpq    *%rax
// 26c: 
static const unsigned char _CHECK_VALIDITYplus_CALL_BUILTIN_FAST_code_body[621] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x64, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf9, 0x89, 0xf8, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xfe, 0x4c, 0x63, 0xd6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x67, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xe7, 0x4b, 0x8b, 0x3c, 0xd7, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x77, 0x08, 0x0f, 0x85, 0x0f, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x47, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xfd, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x7f, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xe9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x28, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf4, 0x45, 0x31, 0xe4, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe6, 0x0f, 0x84, 0xed, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_CALL_BUILTIN_FAST_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CALL_BUILTIN_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_BUILTIN_FAST_data_holes[1];

// _CHECK_VALIDITYplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 0f 84 66 01 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// 28: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002a:  R_X86_64_64  _JIT_OPARG
// 32: 0f b7 f9                      movzwl  %cx, %edi
// 35: 89 f8                         movl    %edi, %eax
// 37: f7 d0                         notl    %eax
// 39: 4c 63 c8                      movslq  %eax, %r9
// 3c: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 40: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 45: 29 fe                         subl    %edi, %esi
// 47: 4c 63 d6                      movslq  %esi, %r10
// 4a: 0f b7 c9                      movzwl  %cx, %ecx
// 4d: 48 89 ce                      movq    %rcx, %rsi
// 50: 48 f7 de                      negq    %rsi
// 53: 44 8d 67 01                   leal    0x1(%rdi), %r12d
// 57: 48 85 c0                      testq   %rax, %rax
// 5a: 48 f7 d1                      notq    %rcx
// 5d: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 61: 44 0f 44 e7                   cmovel  %edi, %r12d
// 65: 4b 8b 3c d7                   movq    (%r15,%r10,8), %rdi
// 69: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000006b:  R_X86_64_64  PyCFunction_Type
// 73: 48 39 77 08                   cmpq    %rsi, 0x8(%rdi)
// 77: 0f 85 11 01 00 00             jne     0x18e <_JIT_ENTRY+0x18e>
// 7d: 4c 8b 47 10                   movq    0x10(%rdi), %r8
// 81: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 89: 0f 85 ff 00 00 00             jne     0x18e <_JIT_ENTRY+0x18e>
// 8f: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 94: 4c 89 0c 24                   movq    %r9, (%rsp)
// 98: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 9d: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// a1: 48 85 c0                      testq   %rax, %rax
// a4: 41 0f 94 c6                   sete    %r14b
// a8: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// ad: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// b1: 44 89 e2                      movl    %r12d, %edx
// b4: 48 89 ee                      movq    %rbp, %rsi
// b7: 31 c9                         xorl    %ecx, %ecx
// b9: 41 ff 50 08                   callq   *0x8(%r8)
// bd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  _JIT_OPARG
// cc: 66 85 c0                      testw   %ax, %ax
// cf: 0f 94 c0                      sete    %al
// d2: 41 84 c6                      testb   %al, %r14b
// d5: 0f 84 ea 00 00 00             je      0x1c5 <_JIT_ENTRY+0x1c5>
// db: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// e0: 49 8b 04 24                   movq    (%r12), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7f 22                         jg      0x10b <_JIT_ENTRY+0x10b>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  .rodata.str1.1
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_NegativeRefcount
// fd: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 102: 4c 89 e2                      movq    %r12, %rdx
// 105: ff d0                         callq   *%rax
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 112: 78 21                         js      0x135 <_JIT_ENTRY+0x135>
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11e: ff d0                         callq   *%rax
// 120: 49 ff 0c 24                   decq    (%r12)
// 124: 75 0f                         jne     0x135 <_JIT_ENTRY+0x135>
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _Py_Dealloc
// 130: 4c 89 e7                      movq    %r12, %rdi
// 133: ff d0                         callq   *%rax
// 135: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 13a: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 13e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 143: 48 85 d2                      testq   %rdx, %rdx
// 146: 74 34                         je      0x17c <_JIT_ENTRY+0x17c>
// 148: 48 8b 0c 24                   movq    (%rsp), %rcx
// 14c: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 150: 48 89 10                      movq    %rdx, (%rax)
// 153: 49 8b 46 10                   movq    0x10(%r14), %rax
// 157: 48 8b 00                      movq    (%rax), %rax
// 15a: 84 c0                         testb   %al, %al
// 15c: 0f 84 e7 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_HandlePending
// 16c: 4c 89 f7                      movq    %r14, %rdi
// 16f: ff d0                         callq   *%rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 0f 84 d0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 179: 4c 89 f8                      movq    %r15, %rax
// 17c: 48 29 d8                      subq    %rbx, %rax
// 17f: 48 83 c0 b8                   addq    $-0x48, %rax
// 183: 48 c1 e8 03                   shrq    $0x3, %rax
// 187: 89 43 40                      movl    %eax, 0x40(%rbx)
// 18a: 31 c0                         xorl    %eax, %eax
// 18c: eb 28                         jmp     0x1b6 <_JIT_ENTRY+0x1b6>
// 18e: 49 29 df                      subq    %rbx, %r15
// 191: 49 83 c7 b8                   addq    $-0x48, %r15
// 195: 49 c1 ef 03                   shrq    $0x3, %r15
// 199: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 19d: 48 8b 03                      movq    (%rbx), %rax
// 1a0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a2:  R_X86_64_64  _JIT_TARGET
// 1aa: 89 c9                         movl    %ecx, %ecx
// 1ac: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b6: 48 83 c4 28                   addq    $0x28, %rsp
// 1ba: 5b                            popq    %rbx
// 1bb: 41 5c                         popq    %r12
// 1bd: 41 5d                         popq    %r13
// 1bf: 41 5e                         popq    %r14
// 1c1: 41 5f                         popq    %r15
// 1c3: 5d                            popq    %rbp
// 1c4: c3                            retq
// 1c5: 41 83 fc 02                   cmpl    $0x2, %r12d
// 1c9: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1cf: 45 0f 43 f4                   cmovael %r12d, %r14d
// 1d3: 45 31 e4                      xorl    %r12d, %r12d
// 1d6: eb 14                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1d8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1e0: 49 ff c4                      incq    %r12
// 1e3: 4d 39 e6                      cmpq    %r12, %r14
// 1e6: 0f 84 ef fe ff ff             je      0xdb <_JIT_ENTRY+0xdb>
// 1ec: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 1f1: 49 8b 45 00                   movq    (%r13), %rax
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 7e 06                         jle     0x200 <_JIT_ENTRY+0x200>
// 1fa: 85 c0                         testl   %eax, %eax
// 1fc: 78 e2                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1fe: eb 26                         jmp     0x226 <_JIT_ENTRY+0x226>
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 ba                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 a8                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 97                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_CONTINUE
// 253: 48 89 df                      movq    %rbx, %rdi
// 256: 4c 89 fe                      movq    %r15, %rsi
// 259: 4c 89 f2                      movq    %r14, %rdx
// 25c: 48 83 c4 28                   addq    $0x28, %rsp
// 260: 5b                            popq    %rbx
// 261: 41 5c                         popq    %r12
// 263: 41 5d                         popq    %r13
// 265: 41 5e                         popq    %r14
// 267: 41 5f                         popq    %r15
// 269: 5d                            popq    %rbp
// 26a: ff e0                         jmpq    *%rax
// 26c: 
static const unsigned char _CHECK_VALIDITYplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[621] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x66, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf9, 0x89, 0xf8, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xfe, 0x4c, 0x63, 0xd6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x67, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xe7, 0x4b, 0x8b, 0x3c, 0xd7, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x77, 0x08, 0x0f, 0x85, 0x11, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x47, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xff, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x7f, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x28, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf4, 0x45, 0x31, 0xe4, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe6, 0x0f, 0x84, 0xef, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _CHECK_VALIDITYplus_CALL_BUILTIN_O
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_BUILTIN_O.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 0f 84 9d 00 00 00             je      0xc5 <_JIT_ENTRY+0xc5>
// 28: 49 89 d7                      movq    %rdx, %r15
// 2b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002d:  R_X86_64_64  _JIT_OPARG
// 35: 0f b7 c1                      movzwl  %cx, %eax
// 38: 89 c2                         movl    %eax, %edx
// 3a: f7 d2                         notl    %edx
// 3c: 4c 63 ea                      movslq  %edx, %r13
// 3f: 0f b7 e9                      movzwl  %cx, %ebp
// 42: 48 89 e9                      movq    %rbp, %rcx
// 45: 48 f7 d9                      negq    %rcx
// 48: 31 d2                         xorl    %edx, %edx
// 4a: 66 85 ed                      testw   %bp, %bp
// 4d: 0f 94 c2                      sete    %dl
// 50: 31 f6                         xorl    %esi, %esi
// 52: 66 83 fd 01                   cmpw    $0x1, %bp
// 56: 40 0f 94 c6                   sete    %sil
// 5a: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 5f: 48 f7 d5                      notq    %rbp
// 62: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 66: 0f 44 d6                      cmovel  %esi, %edx
// 69: 80 fa 01                      cmpb    $0x1, %dl
// 6c: 75 57                         jne     0xc5 <_JIT_ENTRY+0xc5>
// 6e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 73: 29 c1                         subl    %eax, %ecx
// 75: 48 63 c9                      movslq  %ecx, %rcx
// 78: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// 7c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007e:  R_X86_64_64  PyCFunction_Type
// 86: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 8b: 75 38                         jne     0xc5 <_JIT_ENTRY+0xc5>
// 8d: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 92: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 96: 75 2d                         jne     0xc5 <_JIT_ENTRY+0xc5>
// 98: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 9d: 4c 8b 40 08                   movq    0x8(%rax), %r8
// a1: 41 8b 4f 2c                   movl    0x2c(%r15), %ecx
// a5: 8d 51 ff                      leal    -0x1(%rcx), %edx
// a8: 41 89 57 2c                   movl    %edx, 0x2c(%r15)
// ac: 85 c9                         testl   %ecx, %ecx
// ae: 7e 4c                         jle     0xfc <_JIT_ENTRY+0xfc>
// b0: 49 8b 0c ee                   movq    (%r14,%rbp,8), %rcx
// b4: 48 89 0c 24                   movq    %rcx, (%rsp)
// b8: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// bc: 75 7a                         jne     0x138 <_JIT_ENTRY+0x138>
// be: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// c3: eb 75                         jmp     0x13a <_JIT_ENTRY+0x13a>
// c5: 49 29 de                      subq    %rbx, %r14
// c8: 49 83 c6 b8                   addq    $-0x48, %r14
// cc: 49 c1 ee 03                   shrq    $0x3, %r14
// d0: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// d4: 48 8b 03                      movq    (%rbx), %rax
// d7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d9:  R_X86_64_64  _JIT_TARGET
// e1: 89 c9                         movl    %ecx, %ecx
// e3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// e7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// ed: 48 83 c4 18                   addq    $0x18, %rsp
// f1: 5b                            popq    %rbx
// f2: 41 5c                         popq    %r12
// f4: 41 5d                         popq    %r13
// f6: 41 5e                         popq    %r14
// f8: 41 5f                         popq    %r15
// fa: 5d                            popq    %rbp
// fb: c3                            retq
// fc: 4c 89 04 24                   movq    %r8, (%rsp)
// 100: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1+0x39
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_CheckRecursiveCall
// 114: 4c 89 ff                      movq    %r15, %rdi
// 117: ff d0                         callq   *%rax
// 119: 85 c0                         testl   %eax, %eax
// 11b: 0f 85 32 01 00 00             jne     0x253 <_JIT_ENTRY+0x253>
// 121: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 126: 4c 8b 04 24                   movq    (%rsp), %r8
// 12a: 49 8b 0c ee                   movq    (%r14,%rbp,8), %rcx
// 12e: 48 89 0c 24                   movq    %rcx, (%rsp)
// 132: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 136: 74 86                         je      0xbe <_JIT_ENTRY+0xbe>
// 138: 31 ff                         xorl    %edi, %edi
// 13a: 48 8b 2c 24                   movq    (%rsp), %rbp
// 13e: 48 89 ee                      movq    %rbp, %rsi
// 141: 41 ff d0                      callq   *%r8
// 144: 41 ff 47 2c                   incl    0x2c(%r15)
// 148: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 14d: 48 8b 45 00                   movq    (%rbp), %rax
// 151: 48 85 c0                      testq   %rax, %rax
// 154: 7f 26                         jg      0x17c <_JIT_ENTRY+0x17c>
// 156: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000158:  R_X86_64_64  .rodata.str1.1
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_NegativeRefcount
// 16a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16f: 48 8b 2c 24                   movq    (%rsp), %rbp
// 173: 48 89 ea                      movq    %rbp, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 45 00                   movq    (%rbp), %rax
// 17c: 85 c0                         testl   %eax, %eax
// 17e: 78 25                         js      0x1a5 <_JIT_ENTRY+0x1a5>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18a: ff d0                         callq   *%rax
// 18c: 48 8b 04 24                   movq    (%rsp), %rax
// 190: 48 ff 08                      decq    (%rax)
// 193: 75 10                         jne     0x1a5 <_JIT_ENTRY+0x1a5>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 48 85 c0                      testq   %rax, %rax
// 1ac: 7f 22                         jg      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b0:  R_X86_64_64  .rodata.str1.1
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _Py_NegativeRefcount
// 1c2: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c7: 4c 89 e2                      movq    %r12, %rdx
// 1ca: ff d0                         callq   *%rax
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 21                         js      0x1f5 <_JIT_ENTRY+0x1f5>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 49 ff 0c 24                   decq    (%r12)
// 1e4: 75 0f                         jne     0x1f5 <_JIT_ENTRY+0x1f5>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_Dealloc
// 1f0: 4c 89 e7                      movq    %r12, %rdi
// 1f3: ff d0                         callq   *%rax
// 1f5: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1fa: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1fe: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 203: 48 85 c9                      testq   %rcx, %rcx
// 206: 74 48                         je      0x250 <_JIT_ENTRY+0x250>
// 208: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 20c: 48 89 08                      movq    %rcx, (%rax)
// 20f: 49 8b 47 10                   movq    0x10(%r15), %rax
// 213: 48 8b 00                      movq    (%rax), %rax
// 216: 84 c0                         testb   %al, %al
// 218: 74 13                         je      0x22d <_JIT_ENTRY+0x22d>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_HandlePending
// 224: 4c 89 ff                      movq    %r15, %rdi
// 227: ff d0                         callq   *%rax
// 229: 85 c0                         testl   %eax, %eax
// 22b: 75 26                         jne     0x253 <_JIT_ENTRY+0x253>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _JIT_CONTINUE
// 237: 48 89 df                      movq    %rbx, %rdi
// 23a: 4c 89 f6                      movq    %r14, %rsi
// 23d: 4c 89 fa                      movq    %r15, %rdx
// 240: 48 83 c4 18                   addq    $0x18, %rsp
// 244: 5b                            popq    %rbx
// 245: 41 5c                         popq    %r12
// 247: 41 5d                         popq    %r13
// 249: 41 5e                         popq    %r14
// 24b: 41 5f                         popq    %r15
// 24d: 5d                            popq    %rbp
// 24e: ff e0                         jmpq    *%rax
// 250: 49 89 c6                      movq    %rax, %r14
// 253: 49 29 de                      subq    %rbx, %r14
// 256: 49 83 c6 b8                   addq    $-0x48, %r14
// 25a: 49 c1 ee 03                   shrq    $0x3, %r14
// 25e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 262: 31 c0                         xorl    %eax, %eax
// 264: e9 84 fe ff ff                jmp     0xed <_JIT_ENTRY+0xed>
// 269: 
static const unsigned char _CHECK_VALIDITYplus_CALL_BUILTIN_O_code_body[618] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x9d, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x31, 0xd2, 0x66, 0x85, 0xed, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xfd, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x0f, 0x44, 0xd6, 0x80, 0xfa, 0x01, 0x75, 0x57, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2d, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x8b, 0x40, 0x08, 0x41, 0x8b, 0x4f, 0x2c, 0x8d, 0x51, 0xff, 0x41, 0x89, 0x57, 0x2c, 0x85, 0xc9, 0x7e, 0x4c, 0x49, 0x8b, 0x0c, 0xee, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x0c, 0xee, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x48, 0x8b, 0x2c, 0x24, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x41, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x2c, 0x24, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x48, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x84, 0xfe, 0xff, 0xff};
static const Hole _CHECK_VALIDITYplus_CALL_BUILTIN_O_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CHECK_VALIDITYplus_CALL_BUILTIN_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_BUILTIN_O_data_holes[1];

// _CHECK_VALIDITYplus_CALL_INTRINSIC_1
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_INTRINSIC_1.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 3d                         je      0x5c <_JIT_ENTRY+0x5c>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  _JIT_OPARG
// 30: 0f b7 c0                      movzwl  %ax, %eax
// 33: 48 c1 e0 04                   shlq    $0x4, %rax
// 37: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000039:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 41: 48 89 d7                      movq    %rdx, %rdi
// 44: 4c 89 e6                      movq    %r12, %rsi
// 47: ff 14 08                      callq   *(%rax,%rcx)
// 4a: 49 89 c5                      movq    %rax, %r13
// 4d: 49 8b 04 24                   movq    (%r12), %rax
// 51: 48 85 c0                      testq   %rax, %rax
// 54: 7e 33                         jle     0x89 <_JIT_ENTRY+0x89>
// 56: 85 c0                         testl   %eax, %eax
// 58: 79 55                         jns     0xaf <_JIT_ENTRY+0xaf>
// 5a: eb 65                         jmp     0xc1 <_JIT_ENTRY+0xc1>
// 5c: 4c 29 f3                      subq    %r14, %rbx
// 5f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 63: 48 c1 eb 03                   shrq    $0x3, %rbx
// 67: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 6b: 49 8b 06                      movq    (%r14), %rax
// 6e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000070:  R_X86_64_64  _JIT_TARGET
// 78: 89 c9                         movl    %ecx, %ecx
// 7a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 7e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 84: e9 88 00 00 00                jmp     0x111 <_JIT_ENTRY+0x111>
// 89: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008b:  R_X86_64_64  .rodata.str1.1
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _Py_NegativeRefcount
// 9d: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// a2: 4c 89 e2                      movq    %r12, %rdx
// a5: ff d0                         callq   *%rax
// a7: 49 8b 04 24                   movq    (%r12), %rax
// ab: 85 c0                         testl   %eax, %eax
// ad: 78 12                         js      0xc1 <_JIT_ENTRY+0xc1>
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b9: ff d0                         callq   *%rax
// bb: 49 ff 0c 24                   decq    (%r12)
// bf: 74 27                         je      0xe8 <_JIT_ENTRY+0xe8>
// c1: 4d 85 ed                      testq   %r13, %r13
// c4: 74 36                         je      0xfc <_JIT_ENTRY+0xfc>
// c6: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _JIT_CONTINUE
// d4: 4c 89 f7                      movq    %r14, %rdi
// d7: 48 89 de                      movq    %rbx, %rsi
// da: 4c 89 fa                      movq    %r15, %rdx
// dd: 5b                            popq    %rbx
// de: 41 5c                         popq    %r12
// e0: 41 5d                         popq    %r13
// e2: 41 5e                         popq    %r14
// e4: 41 5f                         popq    %r15
// e6: ff e0                         jmpq    *%rax
// e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ea:  R_X86_64_64  _Py_Dealloc
// f2: 4c 89 e7                      movq    %r12, %rdi
// f5: ff d0                         callq   *%rax
// f7: 4d 85 ed                      testq   %r13, %r13
// fa: 75 ca                         jne     0xc6 <_JIT_ENTRY+0xc6>
// fc: 48 83 c3 f8                   addq    $-0x8, %rbx
// 100: 4c 29 f3                      subq    %r14, %rbx
// 103: 48 83 c3 b8                   addq    $-0x48, %rbx
// 107: 48 c1 eb 03                   shrq    $0x3, %rbx
// 10b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 10f: 31 c0                         xorl    %eax, %eax
// 111: 5b                            popq    %rbx
// 112: 41 5c                         popq    %r12
// 114: 41 5d                         popq    %r13
// 116: 41 5e                         popq    %r14
// 118: 41 5f                         popq    %r15
// 11a: c3                            retq
// 11b: 
static const unsigned char _CHECK_VALIDITYplus_CALL_INTRINSIC_1_code_body[284] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3d, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0x14, 0x08, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x88, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x27, 0x4d, 0x85, 0xed, 0x74, 0x36, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xca, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_CALL_INTRINSIC_1_code_holes[10] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CALL_INTRINSIC_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_INTRINSIC_1_data_holes[1];

// _CHECK_VALIDITYplus_CALL_INTRINSIC_2
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_INTRINSIC_2.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 44                         je      0x65 <_JIT_ENTRY+0x65>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  _JIT_OPARG
// 36: 0f b7 c0                      movzwl  %ax, %eax
// 39: 48 c1 e0 04                   shlq    $0x4, %rax
// 3d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000003f:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 47: 48 89 d7                      movq    %rdx, %rdi
// 4a: 48 89 ee                      movq    %rbp, %rsi
// 4d: 4c 89 e2                      movq    %r12, %rdx
// 50: ff 14 08                      callq   *(%rax,%rcx)
// 53: 49 89 c5                      movq    %rax, %r13
// 56: 48 8b 45 00                   movq    (%rbp), %rax
// 5a: 48 85 c0                      testq   %rax, %rax
// 5d: 7e 33                         jle     0x92 <_JIT_ENTRY+0x92>
// 5f: 85 c0                         testl   %eax, %eax
// 61: 79 55                         jns     0xb8 <_JIT_ENTRY+0xb8>
// 63: eb 65                         jmp     0xca <_JIT_ENTRY+0xca>
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 48 8b 03                      movq    (%rbx), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_TARGET
// 81: 89 c9                         movl    %ecx, %ecx
// 83: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 87: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 8d: e9 f2 00 00 00                jmp     0x184 <_JIT_ENTRY+0x184>
// 92: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000094:  R_X86_64_64  .rodata.str1.1
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_NegativeRefcount
// a6: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// ab: 48 89 ea                      movq    %rbp, %rdx
// ae: ff d0                         callq   *%rax
// b0: 48 8b 45 00                   movq    (%rbp), %rax
// b4: 85 c0                         testl   %eax, %eax
// b6: 78 12                         js      0xca <_JIT_ENTRY+0xca>
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c2: ff d0                         callq   *%rax
// c4: 48 ff 4d 00                   decq    (%rbp)
// c8: 74 0f                         je      0xd9 <_JIT_ENTRY+0xd9>
// ca: 49 8b 04 24                   movq    (%r12), %rax
// ce: 48 85 c0                      testq   %rax, %rax
// d1: 7e 1e                         jle     0xf1 <_JIT_ENTRY+0xf1>
// d3: 85 c0                         testl   %eax, %eax
// d5: 79 40                         jns     0x117 <_JIT_ENTRY+0x117>
// d7: eb 50                         jmp     0x129 <_JIT_ENTRY+0x129>
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _Py_Dealloc
// e3: 48 89 ef                      movq    %rbp, %rdi
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 48 85 c0                      testq   %rax, %rax
// ef: 7f e2                         jg      0xd3 <_JIT_ENTRY+0xd3>
// f1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f3:  R_X86_64_64  .rodata.str1.1
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_NegativeRefcount
// 105: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 10a: 4c 89 e2                      movq    %r12, %rdx
// 10d: ff d0                         callq   *%rax
// 10f: 49 8b 04 24                   movq    (%r12), %rax
// 113: 85 c0                         testl   %eax, %eax
// 115: 78 12                         js      0x129 <_JIT_ENTRY+0x129>
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 121: ff d0                         callq   *%rax
// 123: 49 ff 0c 24                   decq    (%r12)
// 127: 74 33                         je      0x15c <_JIT_ENTRY+0x15c>
// 129: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 12d: 4d 85 ed                      testq   %r13, %r13
// 130: 74 42                         je      0x174 <_JIT_ENTRY+0x174>
// 132: 49 83 c6 f8                   addq    $-0x8, %r14
// 136: 4c 89 28                      movq    %r13, (%rax)
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _JIT_CONTINUE
// 143: 48 89 df                      movq    %rbx, %rdi
// 146: 4c 89 f6                      movq    %r14, %rsi
// 149: 4c 89 fa                      movq    %r15, %rdx
// 14c: 48 83 c4 08                   addq    $0x8, %rsp
// 150: 5b                            popq    %rbx
// 151: 41 5c                         popq    %r12
// 153: 41 5d                         popq    %r13
// 155: 41 5e                         popq    %r14
// 157: 41 5f                         popq    %r15
// 159: 5d                            popq    %rbp
// 15a: ff e0                         jmpq    *%rax
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _Py_Dealloc
// 166: 4c 89 e7                      movq    %r12, %rdi
// 169: ff d0                         callq   *%rax
// 16b: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 16f: 4d 85 ed                      testq   %r13, %r13
// 172: 75 be                         jne     0x132 <_JIT_ENTRY+0x132>
// 174: 48 29 d8                      subq    %rbx, %rax
// 177: 48 83 c0 b8                   addq    $-0x48, %rax
// 17b: 48 c1 e8 03                   shrq    $0x3, %rax
// 17f: 89 43 40                      movl    %eax, 0x40(%rbx)
// 182: 31 c0                         xorl    %eax, %eax
// 184: 48 83 c4 08                   addq    $0x8, %rsp
// 188: 5b                            popq    %rbx
// 189: 41 5c                         popq    %r12
// 18b: 41 5d                         popq    %r13
// 18d: 41 5e                         popq    %r14
// 18f: 41 5f                         popq    %r15
// 191: 5d                            popq    %rbp
// 192: c3                            retq
// 193: 
static const unsigned char _CHECK_VALIDITYplus_CALL_INTRINSIC_2_code_body[404] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x44, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0x14, 0x08, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xf2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x33, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xed, 0x74, 0x42, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xed, 0x75, 0xbe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_CALL_INTRINSIC_2_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CALL_INTRINSIC_2_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_INTRINSIC_2_data_holes[1];

// _CHECK_VALIDITYplus_CALL_ISINSTANCE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_ISINSTANCE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 74 64                         je      0x88 <_JIT_ENTRY+0x88>
// 24: 49 89 d7                      movq    %rdx, %r15
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  _JIT_OPARG
// 31: 0f b7 c8                      movzwl  %ax, %ecx
// 34: 89 ca                         movl    %ecx, %edx
// 36: f7 d2                         notl    %edx
// 38: 48 63 ea                      movslq  %edx, %rbp
// 3b: 0f b7 c0                      movzwl  %ax, %eax
// 3e: 48 89 c2                      movq    %rax, %rdx
// 41: 48 f7 da                      negq    %rdx
// 44: 31 f6                         xorl    %esi, %esi
// 46: 66 83 f8 01                   cmpw    $0x1, %ax
// 4a: 40 0f 94 c6                   sete    %sil
// 4e: 31 ff                         xorl    %edi, %edi
// 50: 66 83 f8 02                   cmpw    $0x2, %ax
// 54: 40 0f 94 c7                   sete    %dil
// 58: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 5d: 48 f7 d0                      notq    %rax
// 60: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 64: 0f 44 f7                      cmovel  %edi, %esi
// 67: 40 80 fe 01                   cmpb    $0x1, %sil
// 6b: 75 1b                         jne     0x88 <_JIT_ENTRY+0x88>
// 6d: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 72: 29 ca                         subl    %ecx, %edx
// 74: 48 63 d2                      movslq  %edx, %rdx
// 77: 4d 8b 24 d6                   movq    (%r14,%rdx,8), %r12
// 7b: 49 8b 4f 10                   movq    0x10(%r15), %rcx
// 7f: 4c 3b a1 b8 54 06 00          cmpq    0x654b8(%rcx), %r12
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 49 29 de                      subq    %rbx, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 97: 48 8b 03                      movq    (%rbx), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 18                   addq    $0x18, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// c4: 4d 8b 2c c6                   movq    (%r14,%rax,8), %r13
// c8: 49 8b 74 c6 08                movq    0x8(%r14,%rax,8), %rsi
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  PyObject_IsInstance
// d7: 4c 89 ef                      movq    %r13, %rdi
// da: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// df: ff d0                         callq   *%rax
// e1: 85 c0                         testl   %eax, %eax
// e3: 0f 88 43 01 00 00             js      0x22c <_JIT_ENTRY+0x22c>
// e9: 89 c7                         movl    %eax, %edi
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  PyBool_FromLong
// f5: ff d0                         callq   *%rax
// f7: 48 89 04 24                   movq    %rax, (%rsp)
// fb: 49 8b 45 00                   movq    (%r13), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 11d: 4c 89 ea                      movq    %r13, %rdx
// 120: ff d0                         callq   *%rax
// 122: 49 8b 45 00                   movq    (%r13), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 49 ff 4d 00                   decq    (%r13)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 4c 89 ef                      movq    %r13, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 150: 49 8b 45 00                   movq    (%r13), %rax
// 154: 48 85 c0                      testq   %rax, %rax
// 157: 7f 22                         jg      0x17b <_JIT_ENTRY+0x17b>
// 159: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015b:  R_X86_64_64  .rodata.str1.1
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_NegativeRefcount
// 16d: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 172: 4c 89 ea                      movq    %r13, %rdx
// 175: ff d0                         callq   *%rax
// 177: 49 8b 45 00                   movq    (%r13), %rax
// 17b: 85 c0                         testl   %eax, %eax
// 17d: 78 21                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 189: ff d0                         callq   *%rax
// 18b: 49 ff 4d 00                   decq    (%r13)
// 18f: 75 0f                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_Dealloc
// 19b: 4c 89 ef                      movq    %r13, %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 22                         jg      0x1cb <_JIT_ENTRY+0x1cb>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 21                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 75 0f                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_Dealloc
// 1eb: 4c 89 e7                      movq    %r12, %rdi
// 1ee: ff d0                         callq   *%rax
// 1f0: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1f5: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1f9: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1fd: 48 85 c9                      testq   %rcx, %rcx
// 200: 74 27                         je      0x229 <_JIT_ENTRY+0x229>
// 202: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 206: 48 89 08                      movq    %rcx, (%rax)
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_CONTINUE
// 213: 48 89 df                      movq    %rbx, %rdi
// 216: 4c 89 fa                      movq    %r15, %rdx
// 219: 48 83 c4 18                   addq    $0x18, %rsp
// 21d: 5b                            popq    %rbx
// 21e: 41 5c                         popq    %r12
// 220: 41 5d                         popq    %r13
// 222: 41 5e                         popq    %r14
// 224: 41 5f                         popq    %r15
// 226: 5d                            popq    %rbp
// 227: ff e0                         jmpq    *%rax
// 229: 49 89 c6                      movq    %rax, %r14
// 22c: 49 29 de                      subq    %rbx, %r14
// 22f: 49 83 c6 b8                   addq    $-0x48, %r14
// 233: 49 c1 ee 03                   shrq    $0x3, %r14
// 237: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 23b: 31 c0                         xorl    %eax, %eax
// 23d: e9 6e fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 242: 
static const unsigned char _CHECK_VALIDITYplus_CALL_ISINSTANCE_code_body[579] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x64, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x4d, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x4f, 0x10, 0x4c, 0x3b, 0xa1, 0xb8, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x2c, 0xc6, 0x49, 0x8b, 0x74, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x08, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x43, 0x01, 0x00, 0x00, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x27, 0x49, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x6e, 0xfe, 0xff, 0xff};
static const Hole _CHECK_VALIDITYplus_CALL_ISINSTANCE_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x29, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CALL_ISINSTANCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_ISINSTANCE_data_holes[1];

// _CHECK_VALIDITYplus_CALL_LEN
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_LEN.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 74 63                         je      0x87 <_JIT_ENTRY+0x87>
// 24: 49 89 d7                      movq    %rdx, %r15
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  _JIT_OPARG
// 31: 0f b7 c8                      movzwl  %ax, %ecx
// 34: 89 ca                         movl    %ecx, %edx
// 36: f7 d2                         notl    %edx
// 38: 4c 63 ea                      movslq  %edx, %r13
// 3b: 0f b7 c0                      movzwl  %ax, %eax
// 3e: 48 89 c2                      movq    %rax, %rdx
// 41: 48 f7 da                      negq    %rdx
// 44: 31 f6                         xorl    %esi, %esi
// 46: 66 85 c0                      testw   %ax, %ax
// 49: 40 0f 94 c6                   sete    %sil
// 4d: 31 ff                         xorl    %edi, %edi
// 4f: 66 83 f8 01                   cmpw    $0x1, %ax
// 53: 40 0f 94 c7                   sete    %dil
// 57: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 5c: 48 f7 d0                      notq    %rax
// 5f: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 63: 0f 44 f7                      cmovel  %edi, %esi
// 66: 40 80 fe 01                   cmpb    $0x1, %sil
// 6a: 75 1b                         jne     0x87 <_JIT_ENTRY+0x87>
// 6c: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 71: 29 ca                         subl    %ecx, %edx
// 73: 4c 63 e2                      movslq  %edx, %r12
// 76: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 7a: 49 8b 4f 10                   movq    0x10(%r15), %rcx
// 7e: 48 3b a9 c0 54 06 00          cmpq    0x654c0(%rcx), %rbp
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 18                   addq    $0x18, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  PyObject_Size
// cc: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// d1: ff d0                         callq   *%rax
// d3: 48 85 c0                      testq   %rax, %rax
// d6: 0f 88 f1 00 00 00             js      0x1cd <_JIT_ENTRY+0x1cd>
// dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000de:  R_X86_64_64  PyLong_FromSsize_t
// e6: 48 89 c7                      movq    %rax, %rdi
// e9: ff d1                         callq   *%rcx
// eb: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// f0: 48 8b 45 00                   movq    (%rbp), %rax
// f4: 48 85 c0                      testq   %rax, %rax
// f7: 7f 22                         jg      0x11b <_JIT_ENTRY+0x11b>
// f9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fb:  R_X86_64_64  .rodata.str1.1
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_NegativeRefcount
// 10d: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 112: 48 89 ea                      movq    %rbp, %rdx
// 115: ff d0                         callq   *%rax
// 117: 48 8b 45 00                   movq    (%rbp), %rax
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 78 21                         js      0x140 <_JIT_ENTRY+0x140>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 129: ff d0                         callq   *%rax
// 12b: 48 ff 4d 00                   decq    (%rbp)
// 12f: 75 0f                         jne     0x140 <_JIT_ENTRY+0x140>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _Py_Dealloc
// 13b: 48 89 ef                      movq    %rbp, %rdi
// 13e: ff d0                         callq   *%rax
// 140: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 145: 48 8b 45 00                   movq    (%rbp), %rax
// 149: 48 85 c0                      testq   %rax, %rax
// 14c: 7f 22                         jg      0x170 <_JIT_ENTRY+0x170>
// 14e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000150:  R_X86_64_64  .rodata.str1.1
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_NegativeRefcount
// 162: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 167: 48 89 ea                      movq    %rbp, %rdx
// 16a: ff d0                         callq   *%rax
// 16c: 48 8b 45 00                   movq    (%rbp), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 21                         js      0x195 <_JIT_ENTRY+0x195>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 ff 4d 00                   decq    (%rbp)
// 184: 75 0f                         jne     0x195 <_JIT_ENTRY+0x195>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_Dealloc
// 190: 48 89 ef                      movq    %rbp, %rdi
// 193: ff d0                         callq   *%rax
// 195: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 199: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 19e: 48 85 c9                      testq   %rcx, %rcx
// 1a1: 74 27                         je      0x1ca <_JIT_ENTRY+0x1ca>
// 1a3: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 1a7: 48 89 08                      movq    %rcx, (%rax)
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _JIT_CONTINUE
// 1b4: 48 89 df                      movq    %rbx, %rdi
// 1b7: 4c 89 fa                      movq    %r15, %rdx
// 1ba: 48 83 c4 18                   addq    $0x18, %rsp
// 1be: 5b                            popq    %rbx
// 1bf: 41 5c                         popq    %r12
// 1c1: 41 5d                         popq    %r13
// 1c3: 41 5e                         popq    %r14
// 1c5: 41 5f                         popq    %r15
// 1c7: 5d                            popq    %rbp
// 1c8: ff e0                         jmpq    *%rax
// 1ca: 49 89 c6                      movq    %rax, %r14
// 1cd: 49 29 de                      subq    %rbx, %r14
// 1d0: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d4: 49 c1 ee 03                   shrq    $0x3, %r14
// 1d8: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1dc: 31 c0                         xorl    %eax, %eax
// 1de: e9 cc fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1e3: 
static const unsigned char _CHECK_VALIDITYplus_CALL_LEN_code_body[484] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x63, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x4f, 0x10, 0x48, 0x3b, 0xa9, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xf1, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x27, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xcc, 0xfe, 0xff, 0xff};
static const Hole _CHECK_VALIDITYplus_CALL_LEN_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x29, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CALL_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_LEN_data_holes[1];

// _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 74 73                         je      0x97 <_JIT_ENTRY+0x97>
// 24: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000026:  R_X86_64_64  _JIT_OPARG
// 2e: 0f b7 f9                      movzwl  %cx, %edi
// 31: 89 f8                         movl    %edi, %eax
// 33: f7 d0                         notl    %eax
// 35: 4c 63 c8                      movslq  %eax, %r9
// 38: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 3c: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 41: 29 fe                         subl    %edi, %esi
// 43: 4c 63 d6                      movslq  %esi, %r10
// 46: 0f b7 c9                      movzwl  %cx, %ecx
// 49: 48 89 ce                      movq    %rcx, %rsi
// 4c: 48 f7 de                      negq    %rsi
// 4f: 44 8d 6f 01                   leal    0x1(%rdi), %r13d
// 53: 48 85 c0                      testq   %rax, %rax
// 56: 48 f7 d1                      notq    %rcx
// 59: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 5d: 44 0f 44 ef                   cmovel  %edi, %r13d
// 61: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 65: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000067:  R_X86_64_64  PyMethodDescr_Type
// 6f: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 74: 75 21                         jne     0x97 <_JIT_ENTRY+0x97>
// 76: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 7b: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 83: 75 12                         jne     0x97 <_JIT_ENTRY+0x97>
// 85: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 89: 48 8b 3e                      movq    (%rsi), %rdi
// 8c: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 90: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 95: 74 37                         je      0xce <_JIT_ENTRY+0xce>
// 97: 49 29 df                      subq    %rbx, %r15
// 9a: 49 83 c7 b8                   addq    $-0x48, %r15
// 9e: 49 c1 ef 03                   shrq    $0x3, %r15
// a2: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// a6: 48 8b 03                      movq    (%rbx), %rax
// a9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ab:  R_X86_64_64  _JIT_TARGET
// b3: 89 c9                         movl    %ecx, %ecx
// b5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// b9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// bf: 48 83 c4 28                   addq    $0x28, %rsp
// c3: 5b                            popq    %rbx
// c4: 41 5c                         popq    %r12
// c6: 41 5d                         popq    %r13
// c8: 41 5e                         popq    %r14
// ca: 41 5f                         popq    %r15
// cc: 5d                            popq    %rbp
// cd: c3                            retq
// ce: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// d3: 4c 89 0c 24                   movq    %r9, (%rsp)
// d7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// dc: 48 85 c0                      testq   %rax, %rax
// df: 40 0f 94 c5                   sete    %bpl
// e3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// e7: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// ec: 48 83 c6 08                   addq    $0x8, %rsi
// f0: 48 63 d0                      movslq  %eax, %rdx
// f3: 41 ff 50 08                   callq   *0x8(%r8)
// f7: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 66 85 c0                      testw   %ax, %ax
// 109: 0f 94 c0                      sete    %al
// 10c: 40 84 c5                      testb   %al, %bpl
// 10f: 0f 84 b1 00 00 00             je      0x1c6 <_JIT_ENTRY+0x1c6>
// 115: 49 8b 04 24                   movq    (%r12), %rax
// 119: 48 85 c0                      testq   %rax, %rax
// 11c: 7f 22                         jg      0x140 <_JIT_ENTRY+0x140>
// 11e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000120:  R_X86_64_64  .rodata.str1.1
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_NegativeRefcount
// 132: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 137: 4c 89 e2                      movq    %r12, %rdx
// 13a: ff d0                         callq   *%rax
// 13c: 49 8b 04 24                   movq    (%r12), %rax
// 140: 85 c0                         testl   %eax, %eax
// 142: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 147: 78 21                         js      0x16a <_JIT_ENTRY+0x16a>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 49 ff 0c 24                   decq    (%r12)
// 159: 75 0f                         jne     0x16a <_JIT_ENTRY+0x16a>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_Dealloc
// 165: 4c 89 e7                      movq    %r12, %rdi
// 168: ff d0                         callq   *%rax
// 16a: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 16f: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 173: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 178: 48 85 d2                      testq   %rdx, %rdx
// 17b: 74 34                         je      0x1b1 <_JIT_ENTRY+0x1b1>
// 17d: 48 8b 0c 24                   movq    (%rsp), %rcx
// 181: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 185: 48 89 10                      movq    %rdx, (%rax)
// 188: 49 8b 46 10                   movq    0x10(%r14), %rax
// 18c: 48 8b 00                      movq    (%rax), %rax
// 18f: 84 c0                         testb   %al, %al
// 191: 0f 84 c2 00 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_HandlePending
// 1a1: 4c 89 f7                      movq    %r14, %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 85 c0                         testl   %eax, %eax
// 1a8: 0f 84 ab 00 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 1ae: 4c 89 f8                      movq    %r15, %rax
// 1b1: 48 29 d8                      subq    %rbx, %rax
// 1b4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1b8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1bc: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1bf: 31 c0                         xorl    %eax, %eax
// 1c1: e9 f9 fe ff ff                jmp     0xbf <_JIT_ENTRY+0xbf>
// 1c6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ca: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1d0: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1d4: 31 ed                         xorl    %ebp, %ebp
// 1d6: eb 14                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1d8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1e0: 48 ff c5                      incq    %rbp
// 1e3: 49 39 ee                      cmpq    %rbp, %r14
// 1e6: 0f 84 29 ff ff ff             je      0x115 <_JIT_ENTRY+0x115>
// 1ec: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1f1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1f5: 49 8b 45 00                   movq    (%r13), %rax
// 1f9: 48 85 c0                      testq   %rax, %rax
// 1fc: 7e 12                         jle     0x210 <_JIT_ENTRY+0x210>
// 1fe: 85 c0                         testl   %eax, %eax
// 200: 78 de                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 202: eb 32                         jmp     0x236 <_JIT_ENTRY+0x236>
// 204: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 21f: 4c 89 ea                      movq    %r13, %rdx
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_NegativeRefcount
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 45 00                   movq    (%r13), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 78 aa                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 240: ff d0                         callq   *%rax
// 242: 49 ff 4d 00                   decq    (%r13)
// 246: 75 98                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 248: 4c 89 ef                      movq    %r13, %rdi
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_Dealloc
// 255: ff d0                         callq   *%rax
// 257: eb 87                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_CONTINUE
// 263: 48 89 df                      movq    %rbx, %rdi
// 266: 4c 89 fe                      movq    %r15, %rsi
// 269: 4c 89 f2                      movq    %r14, %rdx
// 26c: 48 83 c4 28                   addq    $0x28, %rsp
// 270: 5b                            popq    %rbx
// 271: 41 5c                         popq    %r12
// 273: 41 5d                         popq    %r13
// 275: 41 5e                         popq    %r14
// 277: 41 5f                         popq    %r15
// 279: 5d                            popq    %rbp
// 27a: ff e0                         jmpq    *%rax
// 27c: 
static const unsigned char _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[637] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x73, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf9, 0x89, 0xf8, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xfe, 0x4c, 0x63, 0xd6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x6f, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xef, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x75, 0x21, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x74, 0x24, 0x20, 0x48, 0x83, 0xc6, 0x08, 0x48, 0x63, 0xd0, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xf9, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x29, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x26, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 74 73                         je      0x97 <_JIT_ENTRY+0x97>
// 24: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000026:  R_X86_64_64  _JIT_OPARG
// 2e: 0f b7 f9                      movzwl  %cx, %edi
// 31: 89 f8                         movl    %edi, %eax
// 33: f7 d0                         notl    %eax
// 35: 4c 63 c8                      movslq  %eax, %r9
// 38: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 3c: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 41: 29 fe                         subl    %edi, %esi
// 43: 4c 63 d6                      movslq  %esi, %r10
// 46: 0f b7 c9                      movzwl  %cx, %ecx
// 49: 48 89 ce                      movq    %rcx, %rsi
// 4c: 48 f7 de                      negq    %rsi
// 4f: 44 8d 6f 01                   leal    0x1(%rdi), %r13d
// 53: 48 85 c0                      testq   %rax, %rax
// 56: 48 f7 d1                      notq    %rcx
// 59: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 5d: 44 0f 44 ef                   cmovel  %edi, %r13d
// 61: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 65: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000067:  R_X86_64_64  PyMethodDescr_Type
// 6f: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 74: 75 21                         jne     0x97 <_JIT_ENTRY+0x97>
// 76: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 7b: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 83: 75 12                         jne     0x97 <_JIT_ENTRY+0x97>
// 85: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 89: 48 8b 3e                      movq    (%rsi), %rdi
// 8c: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 90: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 95: 74 37                         je      0xce <_JIT_ENTRY+0xce>
// 97: 49 29 df                      subq    %rbx, %r15
// 9a: 49 83 c7 b8                   addq    $-0x48, %r15
// 9e: 49 c1 ef 03                   shrq    $0x3, %r15
// a2: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// a6: 48 8b 03                      movq    (%rbx), %rax
// a9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ab:  R_X86_64_64  _JIT_TARGET
// b3: 89 c9                         movl    %ecx, %ecx
// b5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// b9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// bf: 48 83 c4 28                   addq    $0x28, %rsp
// c3: 5b                            popq    %rbx
// c4: 41 5c                         popq    %r12
// c6: 41 5d                         popq    %r13
// c8: 41 5e                         popq    %r14
// ca: 41 5f                         popq    %r15
// cc: 5d                            popq    %rbp
// cd: c3                            retq
// ce: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// d3: 4c 89 0c 24                   movq    %r9, (%rsp)
// d7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// dc: 48 85 c0                      testq   %rax, %rax
// df: 40 0f 94 c5                   sete    %bpl
// e3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// e7: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// ec: 48 83 c6 08                   addq    $0x8, %rsi
// f0: 48 63 d0                      movslq  %eax, %rdx
// f3: 31 c9                         xorl    %ecx, %ecx
// f5: 41 ff 50 08                   callq   *0x8(%r8)
// f9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _JIT_OPARG
// 108: 66 85 c0                      testw   %ax, %ax
// 10b: 0f 94 c0                      sete    %al
// 10e: 40 84 c5                      testb   %al, %bpl
// 111: 0f 84 b1 00 00 00             je      0x1c8 <_JIT_ENTRY+0x1c8>
// 117: 49 8b 04 24                   movq    (%r12), %rax
// 11b: 48 85 c0                      testq   %rax, %rax
// 11e: 7f 22                         jg      0x142 <_JIT_ENTRY+0x142>
// 120: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000122:  R_X86_64_64  .rodata.str1.1
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_NegativeRefcount
// 134: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 139: 4c 89 e2                      movq    %r12, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 49 8b 04 24                   movq    (%r12), %rax
// 142: 85 c0                         testl   %eax, %eax
// 144: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 171: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 175: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 17a: 48 85 d2                      testq   %rdx, %rdx
// 17d: 74 34                         je      0x1b3 <_JIT_ENTRY+0x1b3>
// 17f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 183: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 187: 48 89 10                      movq    %rdx, (%rax)
// 18a: 49 8b 46 10                   movq    0x10(%r14), %rax
// 18e: 48 8b 00                      movq    (%rax), %rax
// 191: 84 c0                         testb   %al, %al
// 193: 0f 84 c0 00 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_HandlePending
// 1a3: 4c 89 f7                      movq    %r14, %rdi
// 1a6: ff d0                         callq   *%rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 0f 84 a9 00 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 1b0: 4c 89 f8                      movq    %r15, %rax
// 1b3: 48 29 d8                      subq    %rbx, %rax
// 1b6: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ba: 48 c1 e8 03                   shrq    $0x3, %rax
// 1be: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1c1: 31 c0                         xorl    %eax, %eax
// 1c3: e9 f7 fe ff ff                jmp     0xbf <_JIT_ENTRY+0xbf>
// 1c8: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1cc: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1d2: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1d6: 31 ed                         xorl    %ebp, %ebp
// 1d8: eb 12                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1da: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 1e0: 48 ff c5                      incq    %rbp
// 1e3: 49 39 ee                      cmpq    %rbp, %r14
// 1e6: 0f 84 2b ff ff ff             je      0x117 <_JIT_ENTRY+0x117>
// 1ec: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1f1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1f5: 49 8b 45 00                   movq    (%r13), %rax
// 1f9: 48 85 c0                      testq   %rax, %rax
// 1fc: 7e 12                         jle     0x210 <_JIT_ENTRY+0x210>
// 1fe: 85 c0                         testl   %eax, %eax
// 200: 78 de                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 202: eb 32                         jmp     0x236 <_JIT_ENTRY+0x236>
// 204: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 21f: 4c 89 ea                      movq    %r13, %rdx
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_NegativeRefcount
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 45 00                   movq    (%r13), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 78 aa                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 240: ff d0                         callq   *%rax
// 242: 49 ff 4d 00                   decq    (%r13)
// 246: 75 98                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 248: 4c 89 ef                      movq    %r13, %rdi
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_Dealloc
// 255: ff d0                         callq   *%rax
// 257: eb 87                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_CONTINUE
// 263: 48 89 df                      movq    %rbx, %rdi
// 266: 4c 89 fe                      movq    %r15, %rsi
// 269: 4c 89 f2                      movq    %r14, %rdx
// 26c: 48 83 c4 28                   addq    $0x28, %rsp
// 270: 5b                            popq    %rbx
// 271: 41 5c                         popq    %r12
// 273: 41 5d                         popq    %r13
// 275: 41 5e                         popq    %r14
// 277: 41 5f                         popq    %r15
// 279: 5d                            popq    %rbp
// 27a: ff e0                         jmpq    *%rax
// 27c: 
static const unsigned char _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[637] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x73, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf9, 0x89, 0xf8, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xfe, 0x4c, 0x63, 0xd6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x6f, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xef, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x75, 0x21, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x75, 0x12, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x74, 0x24, 0x20, 0x48, 0x83, 0xc6, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xf7, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x2b, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x26, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_NOARGS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 0f 84 c3 01 00 00             je      0x1eb <_JIT_ENTRY+0x1eb>
// 28: 49 89 d7                      movq    %rdx, %r15
// 2b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002d:  R_X86_64_64  _JIT_OPARG
// 35: 0f b7 c8                      movzwl  %ax, %ecx
// 38: 89 ca                         movl    %ecx, %edx
// 3a: f7 d2                         notl    %edx
// 3c: 4c 63 ea                      movslq  %edx, %r13
// 3f: 0f b7 c0                      movzwl  %ax, %eax
// 42: 48 89 c2                      movq    %rax, %rdx
// 45: 48 f7 da                      negq    %rdx
// 48: 31 f6                         xorl    %esi, %esi
// 4a: 66 85 c0                      testw   %ax, %ax
// 4d: 40 0f 94 c6                   sete    %sil
// 51: 31 ff                         xorl    %edi, %edi
// 53: 66 83 f8 01                   cmpw    $0x1, %ax
// 57: 40 0f 94 c7                   sete    %dil
// 5b: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 60: 48 f7 d0                      notq    %rax
// 63: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 67: 0f 44 f7                      cmovel  %edi, %esi
// 6a: 40 80 fe 01                   cmpb    $0x1, %sil
// 6e: 0f 85 77 01 00 00             jne     0x1eb <_JIT_ENTRY+0x1eb>
// 74: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 79: 29 ca                         subl    %ecx, %edx
// 7b: 48 63 ea                      movslq  %edx, %rbp
// 7e: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 82: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000084:  R_X86_64_64  PyMethodDescr_Type
// 8c: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 91: 0f 85 54 01 00 00             jne     0x1eb <_JIT_ENTRY+0x1eb>
// 97: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 9b: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 9f: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// a4: 0f 85 41 01 00 00             jne     0x1eb <_JIT_ENTRY+0x1eb>
// aa: 49 8b 44 24 28                movq    0x28(%r12), %rax
// af: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// b3: 0f 85 32 01 00 00             jne     0x1eb <_JIT_ENTRY+0x1eb>
// b9: 48 8b 50 08                   movq    0x8(%rax), %rdx
// bd: 41 8b 47 2c                   movl    0x2c(%r15), %eax
// c1: 8d 48 ff                      leal    -0x1(%rax), %ecx
// c4: 41 89 4f 2c                   movl    %ecx, 0x2c(%r15)
// c8: 85 c0                         testl   %eax, %eax
// ca: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// cf: 0f 8e 4d 01 00 00             jle     0x222 <_JIT_ENTRY+0x222>
// d5: 31 f6                         xorl    %esi, %esi
// d7: ff d2                         callq   *%rdx
// d9: 41 ff 47 2c                   incl    0x2c(%r15)
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// e7: 48 8b 00                      movq    (%rax), %rax
// ea: 48 85 c0                      testq   %rax, %rax
// ed: 7f 28                         jg      0x117 <_JIT_ENTRY+0x117>
// ef: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f1:  R_X86_64_64  .rodata.str1.1
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_NegativeRefcount
// 103: be 10 0c 00 00                movl    $0xc10, %esi            # imm = 0xC10
// 108: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 10d: ff d0                         callq   *%rax
// 10f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 114: 48 8b 00                      movq    (%rax), %rax
// 117: 85 c0                         testl   %eax, %eax
// 119: 78 22                         js      0x13d <_JIT_ENTRY+0x13d>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 125: ff d0                         callq   *%rax
// 127: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 12c: 48 ff 0f                      decq    (%rdi)
// 12f: 75 0c                         jne     0x13d <_JIT_ENTRY+0x13d>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _Py_Dealloc
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 04 24                   movq    (%r12), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 22                         jg      0x168 <_JIT_ENTRY+0x168>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 11 0c 00 00                movl    $0xc11, %esi            # imm = 0xC11
// 15f: 4c 89 e2                      movq    %r12, %rdx
// 162: ff d0                         callq   *%rax
// 164: 49 8b 04 24                   movq    (%r12), %rax
// 168: 85 c0                         testl   %eax, %eax
// 16a: 78 21                         js      0x18d <_JIT_ENTRY+0x18d>
// 16c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 176: ff d0                         callq   *%rax
// 178: 49 ff 0c 24                   decq    (%r12)
// 17c: 75 0f                         jne     0x18d <_JIT_ENTRY+0x18d>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_Dealloc
// 188: 4c 89 e7                      movq    %r12, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 191: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 196: 48 85 c9                      testq   %rcx, %rcx
// 199: 0f 84 b4 00 00 00             je      0x253 <_JIT_ENTRY+0x253>
// 19f: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1a3: 48 89 08                      movq    %rcx, (%rax)
// 1a6: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1aa: 48 8b 00                      movq    (%rax), %rax
// 1ad: 84 c0                         testb   %al, %al
// 1af: 74 17                         je      0x1c8 <_JIT_ENTRY+0x1c8>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_HandlePending
// 1bb: 4c 89 ff                      movq    %r15, %rdi
// 1be: ff d0                         callq   *%rax
// 1c0: 85 c0                         testl   %eax, %eax
// 1c2: 0f 85 8e 00 00 00             jne     0x256 <_JIT_ENTRY+0x256>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _JIT_CONTINUE
// 1d2: 48 89 df                      movq    %rbx, %rdi
// 1d5: 4c 89 f6                      movq    %r14, %rsi
// 1d8: 4c 89 fa                      movq    %r15, %rdx
// 1db: 48 83 c4 18                   addq    $0x18, %rsp
// 1df: 5b                            popq    %rbx
// 1e0: 41 5c                         popq    %r12
// 1e2: 41 5d                         popq    %r13
// 1e4: 41 5e                         popq    %r14
// 1e6: 41 5f                         popq    %r15
// 1e8: 5d                            popq    %rbp
// 1e9: ff e0                         jmpq    *%rax
// 1eb: 49 29 de                      subq    %rbx, %r14
// 1ee: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f2: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1fa: 48 8b 03                      movq    (%rbx), %rax
// 1fd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ff:  R_X86_64_64  _JIT_TARGET
// 207: 89 c9                         movl    %ecx, %ecx
// 209: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 20d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 213: 48 83 c4 18                   addq    $0x18, %rsp
// 217: 5b                            popq    %rbx
// 218: 41 5c                         popq    %r12
// 21a: 41 5d                         popq    %r13
// 21c: 41 5e                         popq    %r14
// 21e: 41 5f                         popq    %r15
// 220: 5d                            popq    %rbp
// 221: c3                            retq
// 222: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000224:  R_X86_64_64  .rodata.str1.1+0x39
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_CheckRecursiveCall
// 236: 4c 89 ff                      movq    %r15, %rdi
// 239: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 23e: ff d0                         callq   *%rax
// 240: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 245: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 24a: 85 c0                         testl   %eax, %eax
// 24c: 75 08                         jne     0x256 <_JIT_ENTRY+0x256>
// 24e: e9 82 fe ff ff                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 253: 49 89 c6                      movq    %rax, %r14
// 256: 49 29 de                      subq    %rbx, %r14
// 259: 49 83 c6 b8                   addq    $-0x48, %r14
// 25d: 49 c1 ee 03                   shrq    $0x3, %r14
// 261: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 265: 31 c0                         xorl    %eax, %eax
// 267: eb aa                         jmp     0x213 <_JIT_ENTRY+0x213>
// 269: 
static const unsigned char _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[618] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0xc3, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x0f, 0x85, 0x77, 0x01, 0x00, 0x00, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xea, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x54, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0x8b, 0x47, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x0f, 0x85, 0x41, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x50, 0x08, 0x41, 0x8b, 0x47, 0x2c, 0x8d, 0x48, 0xff, 0x41, 0x89, 0x4f, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x0f, 0x8e, 0x4d, 0x01, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd2, 0x41, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x0c, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0x54, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x85, 0xc0, 0x75, 0x08, 0xe9, 0x82, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xaa};
static const Hole _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_O.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 0f 84 82 00 00 00             je      0xaa <_JIT_ENTRY+0xaa>
// 28: 49 89 d7                      movq    %rdx, %r15
// 2b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002d:  R_X86_64_64  _JIT_OPARG
// 35: 0f b7 c8                      movzwl  %ax, %ecx
// 38: 89 ca                         movl    %ecx, %edx
// 3a: f7 d2                         notl    %edx
// 3c: 48 63 ea                      movslq  %edx, %rbp
// 3f: 0f b7 c0                      movzwl  %ax, %eax
// 42: 48 89 c2                      movq    %rax, %rdx
// 45: 48 f7 da                      negq    %rdx
// 48: 31 f6                         xorl    %esi, %esi
// 4a: 66 83 f8 01                   cmpw    $0x1, %ax
// 4e: 40 0f 94 c6                   sete    %sil
// 52: 31 ff                         xorl    %edi, %edi
// 54: 66 83 f8 02                   cmpw    $0x2, %ax
// 58: 40 0f 94 c7                   sete    %dil
// 5c: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 61: 48 f7 d0                      notq    %rax
// 64: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 68: 0f 44 f7                      cmovel  %edi, %esi
// 6b: 40 80 fe 01                   cmpb    $0x1, %sil
// 6f: 75 39                         jne     0xaa <_JIT_ENTRY+0xaa>
// 71: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 76: 29 ca                         subl    %ecx, %edx
// 78: 4c 63 ea                      movslq  %edx, %r13
// 7b: 4f 8b 24 ee                   movq    (%r14,%r13,8), %r12
// 7f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000081:  R_X86_64_64  PyMethodDescr_Type
// 89: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 8e: 75 1a                         jne     0xaa <_JIT_ENTRY+0xaa>
// 90: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 95: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 99: 75 0f                         jne     0xaa <_JIT_ENTRY+0xaa>
// 9b: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 9f: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// a3: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// a8: 74 37                         je      0xe1 <_JIT_ENTRY+0xe1>
// aa: 49 29 de                      subq    %rbx, %r14
// ad: 49 83 c6 b8                   addq    $-0x48, %r14
// b1: 49 c1 ee 03                   shrq    $0x3, %r14
// b5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b9: 48 8b 03                      movq    (%rbx), %rax
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_TARGET
// c6: 89 c9                         movl    %ecx, %ecx
// c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d2: 48 83 c4 18                   addq    $0x18, %rsp
// d6: 5b                            popq    %rbx
// d7: 41 5c                         popq    %r12
// d9: 41 5d                         popq    %r13
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: 5d                            popq    %rbp
// e0: c3                            retq
// e1: 49 8b 74 c6 08                movq    0x8(%r14,%rax,8), %rsi
// e6: 48 8b 51 08                   movq    0x8(%rcx), %rdx
// ea: 41 8b 47 2c                   movl    0x2c(%r15), %eax
// ee: 8d 48 ff                      leal    -0x1(%rax), %ecx
// f1: 41 89 4f 2c                   movl    %ecx, 0x2c(%r15)
// f5: 85 c0                         testl   %eax, %eax
// f7: 48 89 34 24                   movq    %rsi, (%rsp)
// fb: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 100: 0f 8e 5e 01 00 00             jle     0x264 <_JIT_ENTRY+0x264>
// 106: ff d2                         callq   *%rdx
// 108: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 10d: 41 ff 47 2c                   incl    0x2c(%r15)
// 111: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 116: 48 8b 02                      movq    (%rdx), %rax
// 119: 48 85 c0                      testq   %rax, %rax
// 11c: 7f 23                         jg      0x141 <_JIT_ENTRY+0x141>
// 11e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000120:  R_X86_64_64  .rodata.str1.1
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_NegativeRefcount
// 132: be bf 0b 00 00                movl    $0xbbf, %esi            # imm = 0xBBF
// 137: ff d0                         callq   *%rax
// 139: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 13e: 48 8b 00                      movq    (%rax), %rax
// 141: 85 c0                         testl   %eax, %eax
// 143: 78 22                         js      0x167 <_JIT_ENTRY+0x167>
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: ff d0                         callq   *%rax
// 151: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 156: 48 ff 0f                      decq    (%rdi)
// 159: 75 0c                         jne     0x167 <_JIT_ENTRY+0x167>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_Dealloc
// 165: ff d0                         callq   *%rax
// 167: 48 8b 04 24                   movq    (%rsp), %rax
// 16b: 48 8b 00                      movq    (%rax), %rax
// 16e: 48 85 c0                      testq   %rax, %rax
// 171: 7f 26                         jg      0x199 <_JIT_ENTRY+0x199>
// 173: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000175:  R_X86_64_64  .rodata.str1.1
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_NegativeRefcount
// 187: be c0 0b 00 00                movl    $0xbc0, %esi            # imm = 0xBC0
// 18c: 48 8b 14 24                   movq    (%rsp), %rdx
// 190: ff d0                         callq   *%rax
// 192: 48 8b 04 24                   movq    (%rsp), %rax
// 196: 48 8b 00                      movq    (%rax), %rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 21                         js      0x1be <_JIT_ENTRY+0x1be>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a7: ff d0                         callq   *%rax
// 1a9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ad: 48 ff 0f                      decq    (%rdi)
// 1b0: 75 0c                         jne     0x1be <_JIT_ENTRY+0x1be>
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_Dealloc
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 04 24                   movq    (%r12), %rax
// 1c2: 48 85 c0                      testq   %rax, %rax
// 1c5: 7f 22                         jg      0x1e9 <_JIT_ENTRY+0x1e9>
// 1c7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c9:  R_X86_64_64  .rodata.str1.1
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_NegativeRefcount
// 1db: be c1 0b 00 00                movl    $0xbc1, %esi            # imm = 0xBC1
// 1e0: 4c 89 e2                      movq    %r12, %rdx
// 1e3: ff d0                         callq   *%rax
// 1e5: 49 8b 04 24                   movq    (%r12), %rax
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 21                         js      0x20e <_JIT_ENTRY+0x20e>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f7: ff d0                         callq   *%rax
// 1f9: 49 ff 0c 24                   decq    (%r12)
// 1fd: 75 0f                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_Dealloc
// 209: 4c 89 e7                      movq    %r12, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 212: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 217: 48 85 c9                      testq   %rcx, %rcx
// 21a: 74 7d                         je      0x299 <_JIT_ENTRY+0x299>
// 21c: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 220: 48 89 08                      movq    %rcx, (%rax)
// 223: 49 8b 47 10                   movq    0x10(%r15), %rax
// 227: 48 8b 00                      movq    (%rax), %rax
// 22a: 84 c0                         testb   %al, %al
// 22c: 74 13                         je      0x241 <_JIT_ENTRY+0x241>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_HandlePending
// 238: 4c 89 ff                      movq    %r15, %rdi
// 23b: ff d0                         callq   *%rax
// 23d: 85 c0                         testl   %eax, %eax
// 23f: 75 5b                         jne     0x29c <_JIT_ENTRY+0x29c>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_CONTINUE
// 24b: 48 89 df                      movq    %rbx, %rdi
// 24e: 4c 89 f6                      movq    %r14, %rsi
// 251: 4c 89 fa                      movq    %r15, %rdx
// 254: 48 83 c4 18                   addq    $0x18, %rsp
// 258: 5b                            popq    %rbx
// 259: 41 5c                         popq    %r12
// 25b: 41 5d                         popq    %r13
// 25d: 41 5e                         popq    %r14
// 25f: 41 5f                         popq    %r15
// 261: 5d                            popq    %rbp
// 262: ff e0                         jmpq    *%rax
// 264: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000266:  R_X86_64_64  .rodata.str1.1+0x39
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_CheckRecursiveCall
// 278: 4c 89 ff                      movq    %r15, %rdi
// 27b: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 280: ff d0                         callq   *%rax
// 282: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 287: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 28c: 48 8b 34 24                   movq    (%rsp), %rsi
// 290: 85 c0                         testl   %eax, %eax
// 292: 75 08                         jne     0x29c <_JIT_ENTRY+0x29c>
// 294: e9 6d fe ff ff                jmp     0x106 <_JIT_ENTRY+0x106>
// 299: 49 89 c6                      movq    %rax, %r14
// 29c: 49 29 de                      subq    %rbx, %r14
// 29f: 49 83 c6 b8                   addq    $-0x48, %r14
// 2a3: 49 c1 ee 03                   shrq    $0x3, %r14
// 2a7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2ab: 31 c0                         xorl    %eax, %eax
// 2ad: e9 20 fe ff ff                jmp     0xd2 <_JIT_ENTRY+0xd2>
// 2b2: 
static const unsigned char _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_O_code_body[691] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x39, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xea, 0x4f, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x1a, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x0f, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x74, 0xc6, 0x08, 0x48, 0x8b, 0x51, 0x08, 0x41, 0x8b, 0x47, 0x2c, 0x8d, 0x48, 0xff, 0x41, 0x89, 0x4f, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x34, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x0f, 0x8e, 0x5e, 0x01, 0x00, 0x00, 0xff, 0xd2, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x41, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xbf, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc0, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x7d, 0x4d, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x5b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0x54, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x34, 0x24, 0x85, 0xc0, 0x75, 0x08, 0xe9, 0x6d, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x20, 0xfe, 0xff, 0xff};
static const Hole _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_O_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _CHECK_VALIDITYplus_CALL_STR_1
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_STR_1.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 39                         je      0x5a <_JIT_ENTRY+0x5a>
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  _JIT_OPARG
// 2b: 0f b7 c0                      movzwl  %ax, %eax
// 2e: 89 c1                         movl    %eax, %ecx
// 30: f7 d1                         notl    %ecx
// 32: 4c 63 e1                      movslq  %ecx, %r12
// 35: 4b 83 3c e7 00                cmpq    $0x0, (%r15,%r12,8)
// 3a: 75 1e                         jne     0x5a <_JIT_ENTRY+0x5a>
// 3c: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 41: 29 c1                         subl    %eax, %ecx
// 43: 48 63 c1                      movslq  %ecx, %rax
// 46: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  PyUnicode_Type
// 54: 49 39 45 00                   cmpq    %rax, (%r13)
// 58: 74 37                         je      0x91 <_JIT_ENTRY+0x91>
// 5a: 49 29 df                      subq    %rbx, %r15
// 5d: 49 83 c7 b8                   addq    $-0x48, %r15
// 61: 49 c1 ef 03                   shrq    $0x3, %r15
// 65: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 69: 48 8b 03                      movq    (%rbx), %rax
// 6c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006e:  R_X86_64_64  _JIT_TARGET
// 76: 89 c9                         movl    %ecx, %ecx
// 78: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 7c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 82: 48 83 c4 08                   addq    $0x8, %rsp
// 86: 5b                            popq    %rbx
// 87: 41 5c                         popq    %r12
// 89: 41 5d                         popq    %r13
// 8b: 41 5e                         popq    %r14
// 8d: 41 5f                         popq    %r15
// 8f: 5d                            popq    %rbp
// 90: c3                            retq
// 91: 49 89 d6                      movq    %rdx, %r14
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _JIT_OPARG
// 9e: 0f b7 c0                      movzwl  %ax, %eax
// a1: 48 c1 e0 03                   shlq    $0x3, %rax
// a5: 4c 89 f9                      movq    %r15, %rcx
// a8: 48 29 c1                      subq    %rax, %rcx
// ab: 48 8b 29                      movq    (%rcx), %rbp
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  PyObject_Str
// b8: 48 89 ef                      movq    %rbp, %rdi
// bb: ff d0                         callq   *%rax
// bd: 48 89 04 24                   movq    %rax, (%rsp)
// c1: 48 8b 45 00                   movq    (%rbp), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// e3: 48 89 ea                      movq    %rbp, %rdx
// e6: ff d0                         callq   *%rax
// e8: 48 8b 45 00                   movq    (%rbp), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 78 21                         js      0x111 <_JIT_ENTRY+0x111>
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fa: ff d0                         callq   *%rax
// fc: 48 ff 4d 00                   decq    (%rbp)
// 100: 75 0f                         jne     0x111 <_JIT_ENTRY+0x111>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_Dealloc
// 10c: 48 89 ef                      movq    %rbp, %rdi
// 10f: ff d0                         callq   *%rax
// 111: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000113:  R_X86_64_64  PyUnicode_Type
// 11b: 48 8b 45 00                   movq    (%rbp), %rax
// 11f: 48 85 c0                      testq   %rax, %rax
// 122: 7f 22                         jg      0x146 <_JIT_ENTRY+0x146>
// 124: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000126:  R_X86_64_64  .rodata.str1.1
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_NegativeRefcount
// 138: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 13d: 48 89 ea                      movq    %rbp, %rdx
// 140: ff d0                         callq   *%rax
// 142: 48 8b 45 00                   movq    (%rbp), %rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 78 28                         js      0x172 <_JIT_ENTRY+0x172>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 154: ff d0                         callq   *%rax
// 156: 48 ff 4d 00                   decq    (%rbp)
// 15a: 75 16                         jne     0x172 <_JIT_ENTRY+0x172>
// 15c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015e:  R_X86_64_64  PyUnicode_Type
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_Dealloc
// 170: ff d0                         callq   *%rax
// 172: 48 8b 04 24                   movq    (%rsp), %rax
// 176: 48 85 c0                      testq   %rax, %rax
// 179: 74 29                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 17b: 4f 8d 3c e7                   leaq    (%r15,%r12,8), %r15
// 17f: 49 89 45 00                   movq    %rax, (%r13)
// 183: 49 8b 46 10                   movq    0x10(%r14), %rax
// 187: 48 8b 00                      movq    (%rax), %rax
// 18a: 84 c0                         testb   %al, %al
// 18c: 74 2c                         je      0x1ba <_JIT_ENTRY+0x1ba>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 4c 89 f7                      movq    %r14, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 74 19                         je      0x1ba <_JIT_ENTRY+0x1ba>
// 1a1: 4d 89 fd                      movq    %r15, %r13
// 1a4: 49 29 dd                      subq    %rbx, %r13
// 1a7: 49 83 c5 b8                   addq    $-0x48, %r13
// 1ab: 49 c1 ed 03                   shrq    $0x3, %r13
// 1af: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 1b3: 31 c0                         xorl    %eax, %eax
// 1b5: e9 c8 fe ff ff                jmp     0x82 <_JIT_ENTRY+0x82>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _JIT_CONTINUE
// 1c4: 48 89 df                      movq    %rbx, %rdi
// 1c7: 4c 89 fe                      movq    %r15, %rsi
// 1ca: 4c 89 f2                      movq    %r14, %rdx
// 1cd: 48 83 c4 08                   addq    $0x8, %rsp
// 1d1: 5b                            popq    %rbx
// 1d2: 41 5c                         popq    %r12
// 1d4: 41 5d                         popq    %r13
// 1d6: 41 5e                         popq    %r14
// 1d8: 41 5f                         popq    %r15
// 1da: 5d                            popq    %rbp
// 1db: ff e0                         jmpq    *%rax
// 1dd: 
static const unsigned char _CHECK_VALIDITYplus_CALL_STR_1_code_body[478] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x39, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xe1, 0x4b, 0x83, 0x3c, 0xe7, 0x00, 0x75, 0x1e, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d, 0x2c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf9, 0x48, 0x29, 0xc1, 0x48, 0x8b, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x29, 0x4f, 0x8d, 0x3c, 0xe7, 0x49, 0x89, 0x45, 0x00, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x19, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xc8, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_CALL_STR_1_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CALL_STR_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_STR_1_data_holes[1];

// _CHECK_VALIDITYplus_CALL_TUPLE_1
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_TUPLE_1.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 39                         je      0x5a <_JIT_ENTRY+0x5a>
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  _JIT_OPARG
// 2b: 0f b7 c0                      movzwl  %ax, %eax
// 2e: 89 c1                         movl    %eax, %ecx
// 30: f7 d1                         notl    %ecx
// 32: 4c 63 e1                      movslq  %ecx, %r12
// 35: 4b 83 3c e7 00                cmpq    $0x0, (%r15,%r12,8)
// 3a: 75 1e                         jne     0x5a <_JIT_ENTRY+0x5a>
// 3c: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 41: 29 c1                         subl    %eax, %ecx
// 43: 48 63 c1                      movslq  %ecx, %rax
// 46: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  PyTuple_Type
// 54: 49 39 45 00                   cmpq    %rax, (%r13)
// 58: 74 37                         je      0x91 <_JIT_ENTRY+0x91>
// 5a: 49 29 df                      subq    %rbx, %r15
// 5d: 49 83 c7 b8                   addq    $-0x48, %r15
// 61: 49 c1 ef 03                   shrq    $0x3, %r15
// 65: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 69: 48 8b 03                      movq    (%rbx), %rax
// 6c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006e:  R_X86_64_64  _JIT_TARGET
// 76: 89 c9                         movl    %ecx, %ecx
// 78: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 7c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 82: 48 83 c4 08                   addq    $0x8, %rsp
// 86: 5b                            popq    %rbx
// 87: 41 5c                         popq    %r12
// 89: 41 5d                         popq    %r13
// 8b: 41 5e                         popq    %r14
// 8d: 41 5f                         popq    %r15
// 8f: 5d                            popq    %rbp
// 90: c3                            retq
// 91: 49 89 d6                      movq    %rdx, %r14
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _JIT_OPARG
// 9e: 0f b7 c0                      movzwl  %ax, %eax
// a1: 48 c1 e0 03                   shlq    $0x3, %rax
// a5: 4c 89 f9                      movq    %r15, %rcx
// a8: 48 29 c1                      subq    %rax, %rcx
// ab: 48 8b 29                      movq    (%rcx), %rbp
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  PySequence_Tuple
// b8: 48 89 ef                      movq    %rbp, %rdi
// bb: ff d0                         callq   *%rax
// bd: 48 89 04 24                   movq    %rax, (%rsp)
// c1: 48 8b 45 00                   movq    (%rbp), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// e3: 48 89 ea                      movq    %rbp, %rdx
// e6: ff d0                         callq   *%rax
// e8: 48 8b 45 00                   movq    (%rbp), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 78 21                         js      0x111 <_JIT_ENTRY+0x111>
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fa: ff d0                         callq   *%rax
// fc: 48 ff 4d 00                   decq    (%rbp)
// 100: 75 0f                         jne     0x111 <_JIT_ENTRY+0x111>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_Dealloc
// 10c: 48 89 ef                      movq    %rbp, %rdi
// 10f: ff d0                         callq   *%rax
// 111: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000113:  R_X86_64_64  PyTuple_Type
// 11b: 48 8b 45 00                   movq    (%rbp), %rax
// 11f: 48 85 c0                      testq   %rax, %rax
// 122: 7f 22                         jg      0x146 <_JIT_ENTRY+0x146>
// 124: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000126:  R_X86_64_64  .rodata.str1.1
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_NegativeRefcount
// 138: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 13d: 48 89 ea                      movq    %rbp, %rdx
// 140: ff d0                         callq   *%rax
// 142: 48 8b 45 00                   movq    (%rbp), %rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 78 28                         js      0x172 <_JIT_ENTRY+0x172>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 154: ff d0                         callq   *%rax
// 156: 48 ff 4d 00                   decq    (%rbp)
// 15a: 75 16                         jne     0x172 <_JIT_ENTRY+0x172>
// 15c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015e:  R_X86_64_64  PyTuple_Type
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_Dealloc
// 170: ff d0                         callq   *%rax
// 172: 48 8b 04 24                   movq    (%rsp), %rax
// 176: 48 85 c0                      testq   %rax, %rax
// 179: 74 29                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 17b: 4f 8d 3c e7                   leaq    (%r15,%r12,8), %r15
// 17f: 49 89 45 00                   movq    %rax, (%r13)
// 183: 49 8b 46 10                   movq    0x10(%r14), %rax
// 187: 48 8b 00                      movq    (%rax), %rax
// 18a: 84 c0                         testb   %al, %al
// 18c: 74 2c                         je      0x1ba <_JIT_ENTRY+0x1ba>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 4c 89 f7                      movq    %r14, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 74 19                         je      0x1ba <_JIT_ENTRY+0x1ba>
// 1a1: 4d 89 fd                      movq    %r15, %r13
// 1a4: 49 29 dd                      subq    %rbx, %r13
// 1a7: 49 83 c5 b8                   addq    $-0x48, %r13
// 1ab: 49 c1 ed 03                   shrq    $0x3, %r13
// 1af: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 1b3: 31 c0                         xorl    %eax, %eax
// 1b5: e9 c8 fe ff ff                jmp     0x82 <_JIT_ENTRY+0x82>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _JIT_CONTINUE
// 1c4: 48 89 df                      movq    %rbx, %rdi
// 1c7: 4c 89 fe                      movq    %r15, %rsi
// 1ca: 4c 89 f2                      movq    %r14, %rdx
// 1cd: 48 83 c4 08                   addq    $0x8, %rsp
// 1d1: 5b                            popq    %rbx
// 1d2: 41 5c                         popq    %r12
// 1d4: 41 5d                         popq    %r13
// 1d6: 41 5e                         popq    %r14
// 1d8: 41 5f                         popq    %r15
// 1da: 5d                            popq    %rbp
// 1db: ff e0                         jmpq    *%rax
// 1dd: 
static const unsigned char _CHECK_VALIDITYplus_CALL_TUPLE_1_code_body[478] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x39, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xe1, 0x4b, 0x83, 0x3c, 0xe7, 0x00, 0x75, 0x1e, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d, 0x2c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf9, 0x48, 0x29, 0xc1, 0x48, 0x8b, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x29, 0x4f, 0x8d, 0x3c, 0xe7, 0x49, 0x89, 0x45, 0x00, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x19, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xc8, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_CALL_TUPLE_1_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CALL_TUPLE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_TUPLE_1_data_holes[1];

// _CHECK_VALIDITYplus_CALL_TYPE_1
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CALL_TYPE_1.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 42                         je      0x63 <_JIT_ENTRY+0x63>
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  _JIT_OPARG
// 2b: f7 d0                         notl    %eax
// 2d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 32: 48 63 e8                      movslq  %eax, %rbp
// 35: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 3a: 75 27                         jne     0x63 <_JIT_ENTRY+0x63>
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  _JIT_OPARG
// 46: 0f b7 c0                      movzwl  %ax, %eax
// 49: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 4e: 29 c1                         subl    %eax, %ecx
// 50: 48 63 c1                      movslq  %ecx, %rax
// 53: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000055:  R_X86_64_64  PyType_Type
// 5d: 4d 39 24 c6                   cmpq    %r12, (%r14,%rax,8)
// 61: 74 37                         je      0x9a <_JIT_ENTRY+0x9a>
// 63: 49 29 de                      subq    %rbx, %r14
// 66: 49 83 c6 b8                   addq    $-0x48, %r14
// 6a: 49 c1 ee 03                   shrq    $0x3, %r14
// 6e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 72: 48 8b 03                      movq    (%rbx), %rax
// 75: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000077:  R_X86_64_64  _JIT_TARGET
// 7f: 89 c9                         movl    %ecx, %ecx
// 81: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 85: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 8b: 48 83 c4 08                   addq    $0x8, %rsp
// 8f: 5b                            popq    %rbx
// 90: 41 5c                         popq    %r12
// 92: 41 5d                         popq    %r13
// 94: 41 5e                         popq    %r14
// 96: 41 5f                         popq    %r15
// 98: 5d                            popq    %rbp
// 99: c3                            retq
// 9a: 49 89 d7                      movq    %rdx, %r15
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  _JIT_OPARG
// a7: 0f b7 c0                      movzwl  %ax, %eax
// aa: 48 c1 e0 03                   shlq    $0x3, %rax
// ae: 4c 89 f1                      movq    %r14, %rcx
// b1: 48 29 c1                      subq    %rax, %rcx
// b4: 4c 8b 29                      movq    (%rcx), %r13
// b7: 49 8b 45 08                   movq    0x8(%r13), %rax
// bb: 48 89 04 24                   movq    %rax, (%rsp)
// bf: 8b 00                         movl    (%rax), %eax
// c1: ff c0                         incl    %eax
// c3: 75 0f                         jne     0xd4 <_JIT_ENTRY+0xd4>
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 7e 21                         jle     0xef <_JIT_ENTRY+0xef>
// ce: 85 c0                         testl   %eax, %eax
// d0: 79 43                         jns     0x115 <_JIT_ENTRY+0x115>
// d2: eb 62                         jmp     0x136 <_JIT_ENTRY+0x136>
// d4: 48 8b 0c 24                   movq    (%rsp), %rcx
// d8: 89 01                         movl    %eax, (%rcx)
// da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dc:  R_X86_64_64  _Py_INCREF_IncRefTotal
// e4: ff d0                         callq   *%rax
// e6: 49 8b 45 00                   movq    (%r13), %rax
// ea: 48 85 c0                      testq   %rax, %rax
// ed: 7f df                         jg      0xce <_JIT_ENTRY+0xce>
// ef: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f1:  R_X86_64_64  .rodata.str1.1
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_NegativeRefcount
// 103: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 108: 4c 89 ea                      movq    %r13, %rdx
// 10b: ff d0                         callq   *%rax
// 10d: 49 8b 45 00                   movq    (%r13), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 21                         js      0x136 <_JIT_ENTRY+0x136>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 4d 00                   decq    (%r13)
// 125: 75 0f                         jne     0x136 <_JIT_ENTRY+0x136>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 4d 8d 2c ee                   leaq    (%r14,%rbp,8), %r13
// 165: 85 c0                         testl   %eax, %eax
// 167: 78 28                         js      0x191 <_JIT_ENTRY+0x191>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 75 16                         jne     0x191 <_JIT_ENTRY+0x191>
// 17b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017d:  R_X86_64_64  PyType_Type
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_Dealloc
// 18f: ff d0                         callq   *%rax
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c1                      movslq  %ecx, %rax
// 1a8: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1ac: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_CONTINUE
// 1ba: 48 89 df                      movq    %rbx, %rdi
// 1bd: 4c 89 ee                      movq    %r13, %rsi
// 1c0: 4c 89 fa                      movq    %r15, %rdx
// 1c3: 48 83 c4 08                   addq    $0x8, %rsp
// 1c7: 5b                            popq    %rbx
// 1c8: 41 5c                         popq    %r12
// 1ca: 41 5d                         popq    %r13
// 1cc: 41 5e                         popq    %r14
// 1ce: 41 5f                         popq    %r15
// 1d0: 5d                            popq    %rbp
// 1d1: ff e0                         jmpq    *%rax
// 1d3: 
static const unsigned char _CHECK_VALIDITYplus_CALL_TYPE_1_code_body[468] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x42, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x24, 0xc6, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x29, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x89, 0x04, 0x24, 0x8b, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x85, 0xc0, 0x79, 0x43, 0xeb, 0x62, 0x48, 0x8b, 0x0c, 0x24, 0x89, 0x01, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xee, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x89, 0x0c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_CALL_TYPE_1_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CALL_TYPE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CALL_TYPE_1_data_holes[1];

// _CHECK_VALIDITYplus_CHECK_ATTR_CLASS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CHECK_ATTR_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 2f                         je      0x3f <_JIT_ENTRY+0x3f>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 18: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 1f: 74 1e                         je      0x3f <_JIT_ENTRY+0x3f>
// 21: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000023:  R_X86_64_64  _JIT_OPERAND
// 2b: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 31: 75 0c                         jne     0x3f <_JIT_ENTRY+0x3f>
// 33: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000035:  R_X86_64_64  _JIT_CONTINUE
// 3d: ff e0                         jmpq    *%rax
// 3f: 48 29 fe                      subq    %rdi, %rsi
// 42: 48 83 c6 b8                   addq    $-0x48, %rsi
// 46: 48 c1 ee 03                   shrq    $0x3, %rsi
// 4a: 89 77 40                      movl    %esi, 0x40(%rdi)
// 4d: 48 8b 07                      movq    (%rdi), %rax
// 50: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000052:  R_X86_64_64  _JIT_TARGET
// 5a: 89 c9                         movl    %ecx, %ecx
// 5c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 60: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 66: c3                            retq
// 67: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_ATTR_CLASS_code_body[104] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x2f, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x1e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_CHECK_ATTR_CLASS_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x35, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_ATTR_CLASS_data_body[1];
static const Hole _CHECK_VALIDITYplus_CHECK_ATTR_CLASS_data_holes[1];

// _CHECK_VALIDITYplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CHECK_ATTR_METHOD_LAZY_DICT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 16                         je      0x26 <_JIT_ENTRY+0x26>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 18: 48 8b 89 20 01 00 00          movq    0x120(%rcx), %rcx
// 1f: 48 83 3c 08 00                cmpq    $0x0, (%rax,%rcx)
// 24: 74 28                         je      0x4e <_JIT_ENTRY+0x4e>
// 26: 48 29 fe                      subq    %rdi, %rsi
// 29: 48 83 c6 b8                   addq    $-0x48, %rsi
// 2d: 48 c1 ee 03                   shrq    $0x3, %rsi
// 31: 89 77 40                      movl    %esi, 0x40(%rdi)
// 34: 48 8b 07                      movq    (%rdi), %rax
// 37: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000039:  R_X86_64_64  _JIT_TARGET
// 41: 89 c9                         movl    %ecx, %ecx
// 43: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 47: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 4d: c3                            retq
// 4e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000050:  R_X86_64_64  _JIT_CONTINUE
// 58: ff e0                         jmpq    *%rax
// 5a: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[91] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x16, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x08, 0x00, 0x74, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[4] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x50, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[1];
static const Hole _CHECK_VALIDITYplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _CHECK_VALIDITYplus_CHECK_ATTR_MODULE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CHECK_ATTR_MODULE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 37                         je      0x47 <_JIT_ENTRY+0x47>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  PyModule_Type
// 1e: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 22: 75 23                         jne     0x47 <_JIT_ENTRY+0x47>
// 24: 48 8b 40 10                   movq    0x10(%rax), %rax
// 28: 48 8b 40 20                   movq    0x20(%rax), %rax
// 2c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002e:  R_X86_64_64  _JIT_OPERAND
// 36: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 39: 75 0c                         jne     0x47 <_JIT_ENTRY+0x47>
// 3b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003d:  R_X86_64_64  _JIT_CONTINUE
// 45: ff e0                         jmpq    *%rax
// 47: 48 29 fe                      subq    %rdi, %rsi
// 4a: 48 83 c6 b8                   addq    $-0x48, %rsi
// 4e: 48 c1 ee 03                   shrq    $0x3, %rsi
// 52: 89 77 40                      movl    %esi, 0x40(%rdi)
// 55: 48 8b 07                      movq    (%rdi), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: c3                            retq
// 6f: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_ATTR_MODULE_code_body[112] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x37, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x23, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_CHECK_ATTR_MODULE_code_holes[6] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_ATTR_MODULE_data_body[1];
static const Hole _CHECK_VALIDITYplus_CHECK_ATTR_MODULE_data_holes[1];

// _CHECK_VALIDITYplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CHECK_ATTR_WITH_HINT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 1d                         je      0x2d <_JIT_ENTRY+0x2d>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// 18: a8 01                         testb   $0x1, %al
// 1a: 75 11                         jne     0x2d <_JIT_ENTRY+0x2d>
// 1c: 48 85 c0                      testq   %rax, %rax
// 1f: 74 0c                         je      0x2d <_JIT_ENTRY+0x2d>
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  _JIT_CONTINUE
// 2b: ff e0                         jmpq    *%rax
// 2d: 48 29 fe                      subq    %rdi, %rsi
// 30: 48 83 c6 b8                   addq    $-0x48, %rsi
// 34: 48 c1 ee 03                   shrq    $0x3, %rsi
// 38: 89 77 40                      movl    %esi, 0x40(%rdi)
// 3b: 48 8b 07                      movq    (%rdi), %rax
// 3e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000040:  R_X86_64_64  _JIT_TARGET
// 48: 89 c9                         movl    %ecx, %ecx
// 4a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 4e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 54: c3                            retq
// 55: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_ATTR_WITH_HINT_code_body[86] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x1d, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x75, 0x11, 0x48, 0x85, 0xc0, 0x74, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_CHECK_ATTR_WITH_HINT_code_holes[4] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_ATTR_WITH_HINT_data_body[1];
static const Hole _CHECK_VALIDITYplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _CHECK_VALIDITYplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 45                         je      0x55 <_JIT_ENTRY+0x55>
// 10: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000012:  R_X86_64_64  _JIT_OPARG
// 1a: f7 d0                         notl    %eax
// 1c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21: 48 98                         cltq
// 23: 48 83 3c c6 00                cmpq    $0x0, (%rsi,%rax,8)
// 28: 75 2b                         jne     0x55 <_JIT_ENTRY+0x55>
// 2a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002c:  R_X86_64_64  _JIT_OPARG
// 34: 0f b7 c0                      movzwl  %ax, %eax
// 37: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 3c: 29 c1                         subl    %eax, %ecx
// 3e: 48 63 c1                      movslq  %ecx, %rax
// 41: 48 8b 04 c6                   movq    (%rsi,%rax,8), %rax
// 45: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000047:  R_X86_64_64  PyMethod_Type
// 4f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 53: 74 28                         je      0x7d <_JIT_ENTRY+0x7d>
// 55: 48 29 fe                      subq    %rdi, %rsi
// 58: 48 83 c6 b8                   addq    $-0x48, %rsi
// 5c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 60: 89 77 40                      movl    %esi, 0x40(%rdi)
// 63: 48 8b 07                      movq    (%rdi), %rax
// 66: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000068:  R_X86_64_64  _JIT_TARGET
// 70: 89 c9                         movl    %ecx, %ecx
// 72: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 76: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7c: c3                            retq
// 7d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007f:  R_X86_64_64  _JIT_CONTINUE
// 87: ff e0                         jmpq    *%rax
// 89: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[138] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x45, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x83, 0x3c, 0xc6, 0x00, 0x75, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x04, 0xc6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[7] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x12, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[1];
static const Hole _CHECK_VALIDITYplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _CHECK_VALIDITYplus_CHECK_EG_MATCH
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CHECK_EG_MATCH.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 74 63                         je      0x87 <_JIT_ENTRY+0x87>
// 24: 49 89 d4                      movq    %rdx, %r12
// 27: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// 2b: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 39: 48 89 d7                      movq    %rdx, %rdi
// 3c: 4c 89 fe                      movq    %r15, %rsi
// 3f: ff d0                         callq   *%rax
// 41: 85 c0                         testl   %eax, %eax
// 43: 78 6f                         js      0xb4 <_JIT_ENTRY+0xb4>
// 45: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 57: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000059:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 61: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 66: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 6b: 4c 89 ef                      movq    %r13, %rdi
// 6e: 4c 89 fe                      movq    %r15, %rsi
// 71: ff d0                         callq   *%rax
// 73: 89 c5                         movl    %eax, %ebp
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7e 50                         jle     0xce <_JIT_ENTRY+0xce>
// 7e: 85 c0                         testl   %eax, %eax
// 80: 79 72                         jns     0xf4 <_JIT_ENTRY+0xf4>
// 82: e9 8e 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 87: 4c 29 f3                      subq    %r14, %rbx
// 8a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 8e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 92: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 96: 49 8b 06                      movq    (%r14), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: e9 d7 01 00 00                jmp     0x28b <_JIT_ENTRY+0x28b>
// b4: 49 8b 45 00                   movq    (%r13), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e 02 01 00 00             jle     0x1c3 <_JIT_ENTRY+0x1c3>
// c1: 85 c0                         testl   %eax, %eax
// c3: 0f 89 20 01 00 00             jns     0x1e9 <_JIT_ENTRY+0x1e9>
// c9: e9 3c 01 00 00                jmp     0x20a <_JIT_ENTRY+0x20a>
// ce: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d0:  R_X86_64_64  .rodata.str1.1
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _Py_NegativeRefcount
// e2: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// e7: 4c 89 ea                      movq    %r13, %rdx
// ea: ff d0                         callq   *%rax
// ec: 49 8b 45 00                   movq    (%r13), %rax
// f0: 85 c0                         testl   %eax, %eax
// f2: 78 21                         js      0x115 <_JIT_ENTRY+0x115>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fe: ff d0                         callq   *%rax
// 100: 49 ff 4d 00                   decq    (%r13)
// 104: 75 0f                         jne     0x115 <_JIT_ENTRY+0x115>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_Dealloc
// 110: 4c 89 ef                      movq    %r13, %rdi
// 113: ff d0                         callq   *%rax
// 115: 49 8b 07                      movq    (%r15), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 7e 06                         jle     0x123 <_JIT_ENTRY+0x123>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 79 27                         jns     0x148 <_JIT_ENTRY+0x148>
// 121: eb 3a                         jmp     0x15d <_JIT_ENTRY+0x15d>
// 123: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000125:  R_X86_64_64  .rodata.str1.1
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _Py_NegativeRefcount
// 137: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 13c: 4c 89 fa                      movq    %r15, %rdx
// 13f: ff d0                         callq   *%rax
// 141: 49 8b 07                      movq    (%r15), %rax
// 144: 85 c0                         testl   %eax, %eax
// 146: 78 15                         js      0x15d <_JIT_ENTRY+0x15d>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 152: ff d0                         callq   *%rax
// 154: 49 ff 0f                      decq    (%r15)
// 157: 0f 84 02 01 00 00             je      0x25f <_JIT_ENTRY+0x25f>
// 15d: 85 ed                         testl   %ebp, %ebp
// 15f: 0f 88 11 01 00 00             js      0x276 <_JIT_ENTRY+0x276>
// 165: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16a: 48 85 ff                      testq   %rdi, %rdi
// 16d: 0f 84 03 01 00 00             je      0x276 <_JIT_ENTRY+0x276>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_NoneStruct
// 17d: 48 39 c7                      cmpq    %rax, %rdi
// 180: 74 11                         je      0x193 <_JIT_ENTRY+0x193>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  PyErr_SetHandledException
// 18c: ff d0                         callq   *%rax
// 18e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 193: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 198: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 19c: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a2:  R_X86_64_64  _JIT_CONTINUE
// 1aa: 4c 89 f7                      movq    %r14, %rdi
// 1ad: 48 89 de                      movq    %rbx, %rsi
// 1b0: 4c 89 e2                      movq    %r12, %rdx
// 1b3: 48 83 c4 18                   addq    $0x18, %rsp
// 1b7: 5b                            popq    %rbx
// 1b8: 41 5c                         popq    %r12
// 1ba: 41 5d                         popq    %r13
// 1bc: 41 5e                         popq    %r14
// 1be: 41 5f                         popq    %r15
// 1c0: 5d                            popq    %rbp
// 1c1: ff e0                         jmpq    *%rax
// 1c3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c5:  R_X86_64_64  .rodata.str1.1
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_NegativeRefcount
// 1d7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 1dc: 4c 89 ea                      movq    %r13, %rdx
// 1df: ff d0                         callq   *%rax
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 85 c0                         testl   %eax, %eax
// 1e7: 78 21                         js      0x20a <_JIT_ENTRY+0x20a>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f3: ff d0                         callq   *%rax
// 1f5: 49 ff 4d 00                   decq    (%r13)
// 1f9: 75 0f                         jne     0x20a <_JIT_ENTRY+0x20a>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 ef                      movq    %r13, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 49 8b 07                      movq    (%r15), %rax
// 20d: 48 85 c0                      testq   %rax, %rax
// 210: 7e 06                         jle     0x218 <_JIT_ENTRY+0x218>
// 212: 85 c0                         testl   %eax, %eax
// 214: 79 27                         jns     0x23d <_JIT_ENTRY+0x23d>
// 216: eb 5e                         jmp     0x276 <_JIT_ENTRY+0x276>
// 218: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021a:  R_X86_64_64  .rodata.str1.1
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_NegativeRefcount
// 22c: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 231: 4c 89 fa                      movq    %r15, %rdx
// 234: ff d0                         callq   *%rax
// 236: 49 8b 07                      movq    (%r15), %rax
// 239: 85 c0                         testl   %eax, %eax
// 23b: 78 39                         js      0x276 <_JIT_ENTRY+0x276>
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 247: ff d0                         callq   *%rax
// 249: 49 ff 0f                      decq    (%r15)
// 24c: 75 28                         jne     0x276 <_JIT_ENTRY+0x276>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_Dealloc
// 258: 4c 89 ff                      movq    %r15, %rdi
// 25b: ff d0                         callq   *%rax
// 25d: eb 17                         jmp     0x276 <_JIT_ENTRY+0x276>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_Dealloc
// 269: 4c 89 ff                      movq    %r15, %rdi
// 26c: ff d0                         callq   *%rax
// 26e: 85 ed                         testl   %ebp, %ebp
// 270: 0f 89 ef fe ff ff             jns     0x165 <_JIT_ENTRY+0x165>
// 276: 48 83 c3 f0                   addq    $-0x10, %rbx
// 27a: 4c 29 f3                      subq    %r14, %rbx
// 27d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 281: 48 c1 eb 03                   shrq    $0x3, %rbx
// 285: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 289: 31 c0                         xorl    %eax, %eax
// 28b: 48 83 c4 18                   addq    $0x18, %rsp
// 28f: 5b                            popq    %rbx
// 290: 41 5c                         popq    %r12
// 292: 41 5d                         popq    %r13
// 294: 41 5e                         popq    %r14
// 296: 41 5f                         popq    %r15
// 298: 5d                            popq    %rbp
// 299: c3                            retq
// 29a: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_EG_MATCH_code_body[667] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x63, 0x49, 0x89, 0xd4, 0x4c, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x7b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x6f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x50, 0x85, 0xc0, 0x79, 0x72, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd7, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x02, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x20, 0x01, 0x00, 0x00, 0xe9, 0x3c, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x3a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x02, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x11, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x03, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x5e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x39, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xef, 0xfe, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_CHECK_EG_MATCH_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CHECK_EG_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CHECK_EG_MATCH_data_holes[1];

// _CHECK_VALIDITYplus_CHECK_EXC_MATCH
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CHECK_EXC_MATCH.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 46                         je      0x67 <_JIT_ENTRY+0x67>
// 21: 49 89 d4                      movq    %rdx, %r12
// 24: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// 28: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 36: 48 89 d7                      movq    %rdx, %rdi
// 39: 4c 89 fe                      movq    %r15, %rsi
// 3c: ff d0                         callq   *%rax
// 3e: 85 c0                         testl   %eax, %eax
// 40: 78 52                         js      0x94 <_JIT_ENTRY+0x94>
// 42: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000044:  R_X86_64_64  PyErr_GivenExceptionMatches
// 4c: 4c 89 ef                      movq    %r13, %rdi
// 4f: 4c 89 fe                      movq    %r15, %rsi
// 52: ff d0                         callq   *%rax
// 54: 89 c5                         movl    %eax, %ebp
// 56: 49 8b 07                      movq    (%r15), %rax
// 59: 48 85 c0                      testq   %rax, %rax
// 5c: 7e 53                         jle     0xb1 <_JIT_ENTRY+0xb1>
// 5e: 85 c0                         testl   %eax, %eax
// 60: 79 74                         jns     0xd6 <_JIT_ENTRY+0xd6>
// 62: e9 8f 00 00 00                jmp     0xf6 <_JIT_ENTRY+0xf6>
// 67: 4c 29 f3                      subq    %r14, %rbx
// 6a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 72: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 76: 49 8b 06                      movq    (%r14), %rax
// 79: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007b:  R_X86_64_64  _JIT_TARGET
// 83: 89 c9                         movl    %ecx, %ecx
// 85: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 89: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 8f: e9 fd 00 00 00                jmp     0x191 <_JIT_ENTRY+0x191>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 0f 8e 97 00 00 00             jle     0x137 <_JIT_ENTRY+0x137>
// a0: 48 83 c3 f8                   addq    $-0x8, %rbx
// a4: 85 c0                         testl   %eax, %eax
// a6: 0f 89 b4 00 00 00             jns     0x160 <_JIT_ENTRY+0x160>
// ac: e9 cf 00 00 00                jmp     0x180 <_JIT_ENTRY+0x180>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// ca: 4c 89 fa                      movq    %r15, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 07                      movq    (%r15), %rax
// d2: 85 c0                         testl   %eax, %eax
// d4: 78 20                         js      0xf6 <_JIT_ENTRY+0xf6>
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e0: ff d0                         callq   *%rax
// e2: 49 ff 0f                      decq    (%r15)
// e5: 75 0f                         jne     0xf6 <_JIT_ENTRY+0xf6>
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_Dealloc
// f1: 4c 89 ff                      movq    %r15, %rdi
// f4: ff d0                         callq   *%rax
// f6: 85 ed                         testl   %ebp, %ebp
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_FalseStruct
// 102: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000104:  R_X86_64_64  _Py_TrueStruct
// 10c: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 110: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _JIT_CONTINUE
// 11e: 4c 89 f7                      movq    %r14, %rdi
// 121: 48 89 de                      movq    %rbx, %rsi
// 124: 4c 89 e2                      movq    %r12, %rdx
// 127: 48 83 c4 08                   addq    $0x8, %rsp
// 12b: 5b                            popq    %rbx
// 12c: 41 5c                         popq    %r12
// 12e: 41 5d                         popq    %r13
// 130: 41 5e                         popq    %r14
// 132: 41 5f                         popq    %r15
// 134: 5d                            popq    %rbp
// 135: ff e0                         jmpq    *%rax
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 150: 4c 89 fa                      movq    %r15, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 48 83 c3 f8                   addq    $-0x8, %rbx
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 20                         js      0x180 <_JIT_ENTRY+0x180>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0f                      decq    (%r15)
// 16f: 75 0f                         jne     0x180 <_JIT_ENTRY+0x180>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 ff                      movq    %r15, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 4c 29 f3                      subq    %r14, %rbx
// 183: 48 83 c3 b8                   addq    $-0x48, %rbx
// 187: 48 c1 eb 03                   shrq    $0x3, %rbx
// 18b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 18f: 31 c0                         xorl    %eax, %eax
// 191: 48 83 c4 08                   addq    $0x8, %rsp
// 195: 5b                            popq    %rbx
// 196: 41 5c                         popq    %r12
// 198: 41 5d                         popq    %r13
// 19a: 41 5e                         popq    %r14
// 19c: 41 5f                         popq    %r15
// 19e: 5d                            popq    %rbp
// 19f: c3                            retq
// 1a0: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_EXC_MATCH_code_body[417] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x46, 0x49, 0x89, 0xd4, 0x4c, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x7b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x52, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x53, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x8f, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xfd, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x97, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x0f, 0x89, 0xb4, 0x00, 0x00, 0x00, 0xe9, 0xcf, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_CHECK_EXC_MATCH_code_holes[16] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CHECK_EXC_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CHECK_EXC_MATCH_data_holes[1];

// _CHECK_VALIDITYplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CHECK_FUNCTION_EXACT_ARGS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 6f                         je      0x7f <_JIT_ENTRY+0x7f>
// 10: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000012:  R_X86_64_64  _JIT_OPARG
// 1a: 0f b7 c0                      movzwl  %ax, %eax
// 1d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 22: 29 c1                         subl    %eax, %ecx
// 24: 48 63 c9                      movslq  %ecx, %rcx
// 27: 48 8b 0c ce                   movq    (%rsi,%rcx,8), %rcx
// 2b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000002d:  R_X86_64_64  PyFunction_Type
// 35: 4c 39 41 08                   cmpq    %r8, 0x8(%rcx)
// 39: 75 44                         jne     0x7f <_JIT_ENTRY+0x7f>
// 3b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000003d:  R_X86_64_64  _JIT_OPERAND
// 45: 44 39 81 88 00 00 00          cmpl    %r8d, 0x88(%rcx)
// 4c: 75 31                         jne     0x7f <_JIT_ENTRY+0x7f>
// 4e: f7 d0                         notl    %eax
// 50: 48 98                         cltq
// 52: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 56: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000058:  R_X86_64_64  _JIT_OPARG
// 60: 45 0f b7 c0                   movzwl  %r8w, %r8d
// 64: 48 83 3c c6 01                cmpq    $0x1, (%rsi,%rax,8)
// 69: 41 83 d8 ff                   sbbl    $-0x1, %r8d
// 6d: 44 39 41 34                   cmpl    %r8d, 0x34(%rcx)
// 71: 75 0c                         jne     0x7f <_JIT_ENTRY+0x7f>
// 73: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000075:  R_X86_64_64  _JIT_CONTINUE
// 7d: ff e0                         jmpq    *%rax
// 7f: 48 29 fe                      subq    %rdi, %rsi
// 82: 48 83 c6 b8                   addq    $-0x48, %rsi
// 86: 48 c1 ee 03                   shrq    $0x3, %rsi
// 8a: 89 77 40                      movl    %esi, 0x40(%rdi)
// 8d: 48 8b 07                      movq    (%rdi), %rax
// 90: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000092:  R_X86_64_64  _JIT_TARGET
// 9a: 89 c9                         movl    %ecx, %ecx
// 9c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a6: c3                            retq
// a7: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_FUNCTION_EXACT_ARGS_code_body[168] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x6f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x48, 0x8b, 0x0c, 0xce, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x41, 0x08, 0x75, 0x44, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x39, 0x81, 0x88, 0x00, 0x00, 0x00, 0x75, 0x31, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x8b, 0x49, 0x30, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc0, 0x48, 0x83, 0x3c, 0xc6, 0x01, 0x41, 0x83, 0xd8, 0xff, 0x44, 0x39, 0x41, 0x34, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[8] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x12, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_FUNCTION_EXACT_ARGS_data_body[1];
static const Hole _CHECK_VALIDITYplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _CHECK_VALIDITYplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 89 f3                      movq    %rsi, %rbx
// 8: 49 89 fe                      movq    %rdi, %r14
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_EXECUTOR
// 15: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 19: 74 3b                         je      0x56 <_JIT_ENTRY+0x56>
// 1b: 49 89 d7                      movq    %rdx, %r15
// 1e: 48 8b 7b f8                   movq    -0x8(%rbx), %rdi
// 22: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 26: 75 14                         jne     0x3c <_JIT_ENTRY+0x3c>
// 28: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 36: ff d0                         callq   *%rax
// 38: 84 c0                         testb   %al, %al
// 3a: 74 1a                         je      0x56 <_JIT_ENTRY+0x56>
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  _JIT_CONTINUE
// 46: 4c 89 f7                      movq    %r14, %rdi
// 49: 48 89 de                      movq    %rbx, %rsi
// 4c: 4c 89 fa                      movq    %r15, %rdx
// 4f: 5b                            popq    %rbx
// 50: 41 5e                         popq    %r14
// 52: 41 5f                         popq    %r15
// 54: ff e0                         jmpq    *%rax
// 56: 4c 29 f3                      subq    %r14, %rbx
// 59: 48 83 c3 b8                   addq    $-0x48, %rbx
// 5d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 61: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 65: 49 8b 06                      movq    (%r14), %rax
// 68: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006a:  R_X86_64_64  _JIT_TARGET
// 72: 89 c9                         movl    %ecx, %ecx
// 74: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 7c: 5b                            popq    %rbx
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[131] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3b, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x7b, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x1a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[5] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[1];
static const Hole _CHECK_VALIDITYplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _CHECK_VALIDITYplus_CHECK_PEP_523
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CHECK_PEP_523.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 0e                         je      0x1e <_JIT_ENTRY+0x1e>
// 10: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 14: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// 1c: 74 28                         je      0x46 <_JIT_ENTRY+0x46>
// 1e: 48 29 fe                      subq    %rdi, %rsi
// 21: 48 83 c6 b8                   addq    $-0x48, %rsi
// 25: 48 c1 ee 03                   shrq    $0x3, %rsi
// 29: 89 77 40                      movl    %esi, 0x40(%rdi)
// 2c: 48 8b 07                      movq    (%rdi), %rax
// 2f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000031:  R_X86_64_64  _JIT_TARGET
// 39: 89 c9                         movl    %ecx, %ecx
// 3b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 3f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 45: c3                            retq
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_CONTINUE
// 50: ff e0                         jmpq    *%rax
// 52: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_PEP_523_code_body[83] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x0e, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x74, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_CHECK_PEP_523_code_holes[4] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_PEP_523_data_body[1];
static const Hole _CHECK_VALIDITYplus_CHECK_PEP_523_data_holes[1];

// _CHECK_VALIDITYplus_CHECK_STACK_SPACE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CHECK_STACK_SPACE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 4a                         je      0x5a <_JIT_ENTRY+0x5a>
// 10: 48 8b 82 00 01 00 00          movq    0x100(%rdx), %rax
// 17: 48 85 c0                      testq   %rax, %rax
// 1a: 74 3e                         je      0x5a <_JIT_ENTRY+0x5a>
// 1c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000001e:  R_X86_64_64  _JIT_OPARG
// 26: 0f b7 c9                      movzwl  %cx, %ecx
// 29: 41 b8 fe ff ff ff             movl    $0xfffffffe, %r8d       # imm = 0xFFFFFFFE
// 2f: 41 29 c8                      subl    %ecx, %r8d
// 32: 49 63 c8                      movslq  %r8d, %rcx
// 35: 48 8b 0c ce                   movq    (%rsi,%rcx,8), %rcx
// 39: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 3d: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// 41: 4c 8b 82 08 01 00 00          movq    0x108(%rdx), %r8
// 48: 49 29 c0                      subq    %rax, %r8
// 4b: 49 c1 f8 03                   sarq    $0x3, %r8
// 4f: 49 39 c8                      cmpq    %rcx, %r8
// 52: 7e 06                         jle     0x5a <_JIT_ENTRY+0x5a>
// 54: 83 7a 24 02                   cmpl    $0x2, 0x24(%rdx)
// 58: 7d 28                         jge     0x82 <_JIT_ENTRY+0x82>
// 5a: 48 29 fe                      subq    %rdi, %rsi
// 5d: 48 83 c6 b8                   addq    $-0x48, %rsi
// 61: 48 c1 ee 03                   shrq    $0x3, %rsi
// 65: 89 77 40                      movl    %esi, 0x40(%rdi)
// 68: 48 8b 07                      movq    (%rdi), %rax
// 6b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006d:  R_X86_64_64  _JIT_TARGET
// 75: 89 c9                         movl    %ecx, %ecx
// 77: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 7b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 81: c3                            retq
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _JIT_CONTINUE
// 8c: ff e0                         jmpq    *%rax
// 8e: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_STACK_SPACE_code_body[143] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x4a, 0x48, 0x8b, 0x82, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x3e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x41, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xc8, 0x49, 0x63, 0xc8, 0x48, 0x8b, 0x0c, 0xce, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x4c, 0x8b, 0x82, 0x08, 0x01, 0x00, 0x00, 0x49, 0x29, 0xc0, 0x49, 0xc1, 0xf8, 0x03, 0x49, 0x39, 0xc8, 0x7e, 0x06, 0x83, 0x7a, 0x24, 0x02, 0x7d, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_CHECK_STACK_SPACE_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x1e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_STACK_SPACE_data_body[1];
static const Hole _CHECK_VALIDITYplus_CHECK_STACK_SPACE_data_holes[1];

// _CHECK_VALIDITYplus_CHECK_VALIDITY
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CHECK_VALIDITY.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 0c                         je      0x1c <_JIT_ENTRY+0x1c>
// 10: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000012:  R_X86_64_64  _JIT_CONTINUE
// 1a: ff e0                         jmpq    *%rax
// 1c: 48 29 fe                      subq    %rdi, %rsi
// 1f: 48 83 c6 b8                   addq    $-0x48, %rsi
// 23: 48 c1 ee 03                   shrq    $0x3, %rsi
// 27: 89 77 40                      movl    %esi, 0x40(%rdi)
// 2a: 48 8b 07                      movq    (%rdi), %rax
// 2d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002f:  R_X86_64_64  _JIT_TARGET
// 37: 89 c9                         movl    %ecx, %ecx
// 39: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 3d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 43: c3                            retq
// 44: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_VALIDITY_code_body[69] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_CHECK_VALIDITY_code_holes[4] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x12, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_CHECK_VALIDITY_data_body[1];
static const Hole _CHECK_VALIDITYplus_CHECK_VALIDITY_data_holes[1];

// _CHECK_VALIDITYplus_COMPARE_OP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_COMPARE_OP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 3f                         je      0x60 <_JIT_ENTRY+0x60>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  _JIT_OPARG
// 36: 0f b7 d0                      movzwl  %ax, %edx
// 39: c1 ea 05                      shrl    $0x5, %edx
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  PyObject_RichCompare
// 46: 48 89 ef                      movq    %rbp, %rdi
// 49: 4c 89 ee                      movq    %r13, %rsi
// 4c: ff d0                         callq   *%rax
// 4e: 49 89 c4                      movq    %rax, %r12
// 51: 48 8b 45 00                   movq    (%rbp), %rax
// 55: 48 85 c0                      testq   %rax, %rax
// 58: 7e 33                         jle     0x8d <_JIT_ENTRY+0x8d>
// 5a: 85 c0                         testl   %eax, %eax
// 5c: 79 55                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 5e: eb 65                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// 60: 49 29 de                      subq    %rbx, %r14
// 63: 49 83 c6 b8                   addq    $-0x48, %r14
// 67: 49 c1 ee 03                   shrq    $0x3, %r14
// 6b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 6f: 48 8b 03                      movq    (%rbx), %rax
// 72: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000074:  R_X86_64_64  _JIT_TARGET
// 7c: 89 c9                         movl    %ecx, %ecx
// 7e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 82: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 88: e9 8b 01 00 00                jmp     0x218 <_JIT_ENTRY+0x218>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// a6: 48 89 ea                      movq    %rbp, %rdx
// a9: ff d0                         callq   *%rax
// ab: 48 8b 45 00                   movq    (%rbp), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 12                         js      0xc5 <_JIT_ENTRY+0xc5>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 48 ff 4d 00                   decq    (%rbp)
// c3: 74 0f                         je      0xd4 <_JIT_ENTRY+0xd4>
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 7e 1e                         jle     0xec <_JIT_ENTRY+0xec>
// ce: 85 c0                         testl   %eax, %eax
// d0: 79 40                         jns     0x112 <_JIT_ENTRY+0x112>
// d2: eb 54                         jmp     0x128 <_JIT_ENTRY+0x128>
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_Dealloc
// de: 48 89 ef                      movq    %rbp, %rdi
// e1: ff d0                         callq   *%rax
// e3: 49 8b 45 00                   movq    (%r13), %rax
// e7: 48 85 c0                      testq   %rax, %rax
// ea: 7f e2                         jg      0xce <_JIT_ENTRY+0xce>
// ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ee:  R_X86_64_64  .rodata.str1.1
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  _Py_NegativeRefcount
// 100: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 105: 4c 89 ea                      movq    %r13, %rdx
// 108: ff d0                         callq   *%rax
// 10a: 49 8b 45 00                   movq    (%r13), %rax
// 10e: 85 c0                         testl   %eax, %eax
// 110: 78 16                         js      0x128 <_JIT_ENTRY+0x128>
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11c: ff d0                         callq   *%rax
// 11e: 49 ff 4d 00                   decq    (%r13)
// 122: 0f 84 c3 00 00 00             je      0x1eb <_JIT_ENTRY+0x1eb>
// 128: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 12c: 4d 85 e4                      testq   %r12, %r12
// 12f: 0f 84 d2 00 00 00             je      0x207 <_JIT_ENTRY+0x207>
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _JIT_OPARG
// 13f: a8 10                         testb   $0x10, %al
// 141: 74 7d                         je      0x1c0 <_JIT_ENTRY+0x1c0>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  PyObject_IsTrue
// 14d: 4c 89 e7                      movq    %r12, %rdi
// 150: ff d0                         callq   *%rax
// 152: 89 c5                         movl    %eax, %ebp
// 154: 49 8b 04 24                   movq    (%r12), %rax
// 158: 48 85 c0                      testq   %rax, %rax
// 15b: 7f 22                         jg      0x17f <_JIT_ENTRY+0x17f>
// 15d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015f:  R_X86_64_64  .rodata.str1.1
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_NegativeRefcount
// 171: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 176: 4c 89 e2                      movq    %r12, %rdx
// 179: ff d0                         callq   *%rax
// 17b: 49 8b 04 24                   movq    (%r12), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 21                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 49 ff 0c 24                   decq    (%r12)
// 193: 75 0f                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 4c 89 e7                      movq    %r12, %rdi
// 1a2: ff d0                         callq   *%rax
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_FalseStruct
// 1ae: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001b0:  R_X86_64_64  _Py_TrueStruct
// 1b8: 85 ed                         testl   %ebp, %ebp
// 1ba: 4c 0f 44 e0                   cmoveq  %rax, %r12
// 1be: 78 47                         js      0x207 <_JIT_ENTRY+0x207>
// 1c0: 49 83 c6 f8                   addq    $-0x8, %r14
// 1c4: 4d 89 65 00                   movq    %r12, (%r13)
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _JIT_CONTINUE
// 1d2: 48 89 df                      movq    %rbx, %rdi
// 1d5: 4c 89 f6                      movq    %r14, %rsi
// 1d8: 4c 89 fa                      movq    %r15, %rdx
// 1db: 48 83 c4 08                   addq    $0x8, %rsp
// 1df: 5b                            popq    %rbx
// 1e0: 41 5c                         popq    %r12
// 1e2: 41 5d                         popq    %r13
// 1e4: 41 5e                         popq    %r14
// 1e6: 41 5f                         popq    %r15
// 1e8: 5d                            popq    %rbp
// 1e9: ff e0                         jmpq    *%rax
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 ef                      movq    %r13, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 1fe: 4d 85 e4                      testq   %r12, %r12
// 201: 0f 85 2e ff ff ff             jne     0x135 <_JIT_ENTRY+0x135>
// 207: 49 29 dd                      subq    %rbx, %r13
// 20a: 49 83 c5 b8                   addq    $-0x48, %r13
// 20e: 49 c1 ed 03                   shrq    $0x3, %r13
// 212: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 216: 31 c0                         xorl    %eax, %eax
// 218: 48 83 c4 08                   addq    $0x8, %rsp
// 21c: 5b                            popq    %rbx
// 21d: 41 5c                         popq    %r12
// 21f: 41 5d                         popq    %r13
// 221: 41 5e                         popq    %r14
// 223: 41 5f                         popq    %r15
// 225: 5d                            popq    %rbp
// 226: c3                            retq
// 227: 
static const unsigned char _CHECK_VALIDITYplus_COMPARE_OP_code_body[552] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3f, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x6e, 0xf0, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8b, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x74, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe0, 0x78, 0x47, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xf0, 0x4d, 0x85, 0xe4, 0x0f, 0x85, 0x2e, 0xff, 0xff, 0xff, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_COMPARE_OP_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x74, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_COMPARE_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_COMPARE_OP_data_holes[1];

// _CHECK_VALIDITYplus_COMPARE_OP_FLOAT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_COMPARE_OP_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 74 1f                         je      0x43 <_JIT_ENTRY+0x43>
// 24: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 28: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002a:  R_X86_64_64  PyFloat_Type
// 32: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 37: 75 0a                         jne     0x43 <_JIT_ENTRY+0x43>
// 39: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 3d: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 41: 74 37                         je      0x7a <_JIT_ENTRY+0x7a>
// 43: 49 29 de                      subq    %rbx, %r14
// 46: 49 83 c6 b8                   addq    $-0x48, %r14
// 4a: 49 c1 ee 03                   shrq    $0x3, %r14
// 4e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 52: 48 8b 03                      movq    (%rbx), %rax
// 55: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000057:  R_X86_64_64  _JIT_TARGET
// 5f: 89 c9                         movl    %ecx, %ecx
// 61: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 65: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6b: 48 83 c4 18                   addq    $0x18, %rsp
// 6f: 5b                            popq    %rbx
// 70: 41 5c                         popq    %r12
// 72: 41 5d                         popq    %r13
// 74: 41 5e                         popq    %r14
// 76: 41 5f                         popq    %r15
// 78: 5d                            popq    %rbp
// 79: c3                            retq
// 7a: 49 89 d7                      movq    %rdx, %r15
// 7d: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 84: f2 0f 11 44 24 10             movsd   %xmm0, 0x10(%rsp)
// 8a: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 90: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// 96: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 9c: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000009e:  R_X86_64_64  PyInterpreterState_Get
// a6: 75 1e                         jne     0xc6 <_JIT_ENTRY+0xc6>
// a8: ff d5                         callq   *%rbp
// aa: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// b1: 49 ff 0c 24                   decq    (%r12)
// b5: 75 0f                         jne     0xc6 <_JIT_ENTRY+0xc6>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _PyFloat_ExactDealloc
// c1: 4c 89 e7                      movq    %r12, %rdi
// c4: ff d0                         callq   *%rax
// c6: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// ca: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// cf: 75 1e                         jne     0xef <_JIT_ENTRY+0xef>
// d1: ff d5                         callq   *%rbp
// d3: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// da: 49 ff 4d 00                   decq    (%r13)
// de: 75 0f                         jne     0xef <_JIT_ENTRY+0xef>
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _PyFloat_ExactDealloc
// ea: 4c 89 ef                      movq    %r13, %rdi
// ed: ff d0                         callq   *%rax
// ef: 31 c0                         xorl    %eax, %eax
// f1: f2 0f 10 44 24 10             movsd   0x10(%rsp), %xmm0       # xmm0 = mem[0],zero
// f7: f2 0f 10 4c 24 08             movsd   0x8(%rsp), %xmm1        # xmm1 = mem[0],zero
// fd: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 101: 0f 93 c0                      setae   %al
// 104: 01 c0                         addl    %eax, %eax
// 106: 31 c9                         xorl    %ecx, %ecx
// 108: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 10c: 0f 93 c1                      setae   %cl
// 10f: 09 c1                         orl     %eax, %ecx
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _JIT_OPARG
// 11b: 0f a3 c8                      btl     %ecx, %eax
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_FalseStruct
// 128: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012a:  R_X86_64_64  _Py_TrueStruct
// 132: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 136: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _JIT_CONTINUE
// 144: 48 89 df                      movq    %rbx, %rdi
// 147: 4c 89 e6                      movq    %r12, %rsi
// 14a: 4c 89 fa                      movq    %r15, %rdx
// 14d: 48 83 c4 18                   addq    $0x18, %rsp
// 151: 5b                            popq    %rbx
// 152: 41 5c                         popq    %r12
// 154: 41 5d                         popq    %r13
// 156: 41 5e                         popq    %r14
// 158: 41 5f                         popq    %r15
// 15a: 5d                            popq    %rbp
// 15b: ff e0                         jmpq    *%rax
// 15d: 
static const unsigned char _CHECK_VALIDITYplus_COMPARE_OP_FLOAT_code_body[350] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x1f, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x0a, 0x4d, 0x8b, 0x6e, 0xf8, 0x49, 0x39, 0x45, 0x08, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x10, 0x4c, 0x24, 0x08, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_COMPARE_OP_FLOAT_code_holes[11] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_COMPARE_OP_FLOAT_data_body[1];
static const Hole _CHECK_VALIDITYplus_COMPARE_OP_FLOAT_data_holes[1];

// _CHECK_VALIDITYplus_COMPARE_OP_INT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_COMPARE_OP_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 74 34                         je      0x58 <_JIT_ENTRY+0x58>
// 24: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 28: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002a:  R_X86_64_64  PyLong_Type
// 32: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 37: 75 1f                         jne     0x58 <_JIT_ENTRY+0x58>
// 39: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 3d: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 41: 75 15                         jne     0x58 <_JIT_ENTRY+0x58>
// 43: 49 8b 6c 24 10                movq    0x10(%r12), %rbp
// 48: 48 83 fd 0f                   cmpq    $0xf, %rbp
// 4c: 77 0a                         ja      0x58 <_JIT_ENTRY+0x58>
// 4e: 49 8b 45 10                   movq    0x10(%r13), %rax
// 52: 48 83 f8 0f                   cmpq    $0xf, %rax
// 56: 76 37                         jbe     0x8f <_JIT_ENTRY+0x8f>
// 58: 49 29 de                      subq    %rbx, %r14
// 5b: 49 83 c6 b8                   addq    $-0x48, %r14
// 5f: 49 c1 ee 03                   shrq    $0x3, %r14
// 63: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 67: 48 8b 03                      movq    (%rbx), %rax
// 6a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006c:  R_X86_64_64  _JIT_TARGET
// 74: 89 c9                         movl    %ecx, %ecx
// 76: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 7a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 80: 48 83 c4 18                   addq    $0x18, %rsp
// 84: 5b                            popq    %rbx
// 85: 41 5c                         popq    %r12
// 87: 41 5d                         popq    %r13
// 89: 41 5e                         popq    %r14
// 8b: 41 5f                         popq    %r15
// 8d: 5d                            popq    %rbp
// 8e: c3                            retq
// 8f: 49 89 d7                      movq    %rdx, %r15
// 92: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 97: 41 8b 44 24 18                movl    0x18(%r12), %eax
// 9c: 48 89 04 24                   movq    %rax, (%rsp)
// a0: 41 8b 45 18                   movl    0x18(%r13), %eax
// a4: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a9: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// af: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b1:  R_X86_64_64  PyInterpreterState_Get
// b9: 75 3c                         jne     0xf7 <_JIT_ENTRY+0xf7>
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  PyInterpreterState_Get
// c5: ff d0                         callq   *%rax
// c7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyInterpreterState_Get
// d8: 49 ff 0c 24                   decq    (%r12)
// dc: 75 19                         jne     0xf7 <_JIT_ENTRY+0xf7>
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  PyObject_Free
// e8: 4c 89 e7                      movq    %r12, %rdi
// eb: ff d0                         callq   *%rax
// ed: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ef:  R_X86_64_64  PyInterpreterState_Get
// f7: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// fb: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 100: 75 1e                         jne     0x120 <_JIT_ENTRY+0x120>
// 102: ff d1                         callq   *%rcx
// 104: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 75 0f                         jne     0x120 <_JIT_ENTRY+0x120>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  PyObject_Free
// 11b: 4c 89 ef                      movq    %r13, %rdi
// 11e: ff d0                         callq   *%rax
// 120: 83 e5 03                      andl    $0x3, %ebp
// 123: b8 01 00 00 00                movl    $0x1, %eax
// 128: b9 01 00 00 00                movl    $0x1, %ecx
// 12d: 48 29 e9                      subq    %rbp, %rcx
// 130: 48 0f af 0c 24                imulq   (%rsp), %rcx
// 135: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 13a: 83 e2 03                      andl    $0x3, %edx
// 13d: 48 29 d0                      subq    %rdx, %rax
// 140: 48 0f af 44 24 08             imulq   0x8(%rsp), %rax
// 146: 31 d2                         xorl    %edx, %edx
// 148: 31 f6                         xorl    %esi, %esi
// 14a: 48 39 c1                      cmpq    %rax, %rcx
// 14d: 0f 9d c2                      setge   %dl
// 150: 40 0f 9e c6                   setle   %sil
// 154: 01 d2                         addl    %edx, %edx
// 156: 09 d6                         orl     %edx, %esi
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _JIT_OPARG
// 162: 0f a3 f0                      btl     %esi, %eax
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_FalseStruct
// 16f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000171:  R_X86_64_64  _Py_TrueStruct
// 179: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 17d: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_CONTINUE
// 18b: 48 89 df                      movq    %rbx, %rdi
// 18e: 4c 89 e6                      movq    %r12, %rsi
// 191: 4c 89 fa                      movq    %r15, %rdx
// 194: 48 83 c4 18                   addq    $0x18, %rsp
// 198: 5b                            popq    %rbx
// 199: 41 5c                         popq    %r12
// 19b: 41 5d                         popq    %r13
// 19d: 41 5e                         popq    %r14
// 19f: 41 5f                         popq    %r15
// 1a1: 5d                            popq    %rbp
// 1a2: ff e0                         jmpq    *%rax
// 1a4: 
static const unsigned char _CHECK_VALIDITYplus_COMPARE_OP_INT_code_body[421] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x34, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x1f, 0x4d, 0x8b, 0x6e, 0xf8, 0x49, 0x39, 0x45, 0x08, 0x75, 0x15, 0x49, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x83, 0xfd, 0x0f, 0x77, 0x0a, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x83, 0xf8, 0x0f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x89, 0x04, 0x24, 0x41, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x66, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0xe5, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x48, 0x29, 0xe9, 0x48, 0x0f, 0xaf, 0x0c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x83, 0xe2, 0x03, 0x48, 0x29, 0xd0, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x08, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_COMPARE_OP_INT_code_holes[14] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_COMPARE_OP_INT_data_body[1];
static const Hole _CHECK_VALIDITYplus_COMPARE_OP_INT_data_holes[1];

// _CHECK_VALIDITYplus_COMPARE_OP_STR
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_COMPARE_OP_STR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 1f                         je      0x40 <_JIT_ENTRY+0x40>
// 21: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyUnicode_Type
// 2f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 33: 75 0b                         jne     0x40 <_JIT_ENTRY+0x40>
// 35: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 39: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3e: 74 37                         je      0x77 <_JIT_ENTRY+0x77>
// 40: 49 29 de                      subq    %rbx, %r14
// 43: 49 83 c6 b8                   addq    $-0x48, %r14
// 47: 49 c1 ee 03                   shrq    $0x3, %r14
// 4b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 4f: 48 8b 03                      movq    (%rbx), %rax
// 52: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000054:  R_X86_64_64  _JIT_TARGET
// 5c: 89 c9                         movl    %ecx, %ecx
// 5e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 62: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 68: 48 83 c4 08                   addq    $0x8, %rsp
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: 5d                            popq    %rbp
// 76: c3                            retq
// 77: 49 89 d7                      movq    %rdx, %r15
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _PyUnicode_Equal
// 84: 4c 89 ef                      movq    %r13, %rdi
// 87: 4c 89 e6                      movq    %r12, %rsi
// 8a: ff d0                         callq   *%rax
// 8c: 89 c5                         movl    %eax, %ebp
// 8e: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 93: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000095:  R_X86_64_64  PyInterpreterState_Get
// 9d: 75 3c                         jne     0xdb <_JIT_ENTRY+0xdb>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  PyInterpreterState_Get
// a9: ff d0                         callq   *%rax
// ab: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b4:  R_X86_64_64  PyInterpreterState_Get
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 75 19                         jne     0xdb <_JIT_ENTRY+0xdb>
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  _PyUnicode_ExactDealloc
// cc: 4c 89 ef                      movq    %r13, %rdi
// cf: ff d0                         callq   *%rax
// d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d3:  R_X86_64_64  PyInterpreterState_Get
// db: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// df: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// e5: 75 1e                         jne     0x105 <_JIT_ENTRY+0x105>
// e7: ff d1                         callq   *%rcx
// e9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// f0: 49 ff 0c 24                   decq    (%r12)
// f4: 75 0f                         jne     0x105 <_JIT_ENTRY+0x105>
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  _PyUnicode_ExactDealloc
// 100: 4c 89 e7                      movq    %r12, %rdi
// 103: ff d0                         callq   *%rax
// 105: 83 c5 07                      addl    $0x7, %ebp
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  _JIT_OPARG
// 112: 66 85 e8                      testw   %bp, %ax
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_FalseStruct
// 11f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000121:  R_X86_64_64  _Py_TrueStruct
// 129: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 12d: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _JIT_CONTINUE
// 13b: 48 89 df                      movq    %rbx, %rdi
// 13e: 4c 89 ee                      movq    %r13, %rsi
// 141: 4c 89 fa                      movq    %r15, %rdx
// 144: 48 83 c4 08                   addq    $0x8, %rsp
// 148: 5b                            popq    %rbx
// 149: 41 5c                         popq    %r12
// 14b: 41 5d                         popq    %r13
// 14d: 41 5e                         popq    %r14
// 14f: 41 5f                         popq    %r15
// 151: 5d                            popq    %rbp
// 152: ff e0                         jmpq    *%rax
// 154: 
static const unsigned char _CHECK_VALIDITYplus_COMPARE_OP_STR_code_body[341] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x1f, 0x4d, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x75, 0x0b, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf8, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0xc5, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_COMPARE_OP_STR_code_holes[15] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_COMPARE_OP_STR_data_body[1];
static const Hole _CHECK_VALIDITYplus_COMPARE_OP_STR_data_holes[1];

// _CHECK_VALIDITYplus_CONTAINS_OP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CONTAINS_OP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 2e                         je      0x4f <_JIT_ENTRY+0x4f>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 28: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  PySequence_Contains
// 36: 4c 89 e7                      movq    %r12, %rdi
// 39: 4c 89 ee                      movq    %r13, %rsi
// 3c: ff d0                         callq   *%rax
// 3e: 89 c5                         movl    %eax, %ebp
// 40: 49 8b 45 00                   movq    (%r13), %rax
// 44: 48 85 c0                      testq   %rax, %rax
// 47: 7e 33                         jle     0x7c <_JIT_ENTRY+0x7c>
// 49: 85 c0                         testl   %eax, %eax
// 4b: 79 55                         jns     0xa2 <_JIT_ENTRY+0xa2>
// 4d: eb 65                         jmp     0xb4 <_JIT_ENTRY+0xb4>
// 4f: 49 29 de                      subq    %rbx, %r14
// 52: 49 83 c6 b8                   addq    $-0x48, %r14
// 56: 49 c1 ee 03                   shrq    $0x3, %r14
// 5a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 5e: 48 8b 03                      movq    (%rbx), %rax
// 61: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000063:  R_X86_64_64  _JIT_TARGET
// 6b: 89 c9                         movl    %ecx, %ecx
// 6d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 71: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 77: e9 17 01 00 00                jmp     0x193 <_JIT_ENTRY+0x193>
// 7c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007e:  R_X86_64_64  .rodata.str1.1
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_NegativeRefcount
// 90: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 95: 4c 89 ea                      movq    %r13, %rdx
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 85 c0                         testl   %eax, %eax
// a0: 78 12                         js      0xb4 <_JIT_ENTRY+0xb4>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ac: ff d0                         callq   *%rax
// ae: 49 ff 4d 00                   decq    (%r13)
// b2: 74 0f                         je      0xc3 <_JIT_ENTRY+0xc3>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 7e 1e                         jle     0xdb <_JIT_ENTRY+0xdb>
// bd: 85 c0                         testl   %eax, %eax
// bf: 79 40                         jns     0x101 <_JIT_ENTRY+0x101>
// c1: eb 50                         jmp     0x113 <_JIT_ENTRY+0x113>
// c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c5:  R_X86_64_64  _Py_Dealloc
// cd: 4c 89 ef                      movq    %r13, %rdi
// d0: ff d0                         callq   *%rax
// d2: 49 8b 04 24                   movq    (%r12), %rax
// d6: 48 85 c0                      testq   %rax, %rax
// d9: 7f e2                         jg      0xbd <_JIT_ENTRY+0xbd>
// db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dd:  R_X86_64_64  .rodata.str1.1
// e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e7:  R_X86_64_64  _Py_NegativeRefcount
// ef: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// f4: 4c 89 e2                      movq    %r12, %rdx
// f7: ff d0                         callq   *%rax
// f9: 49 8b 04 24                   movq    (%r12), %rax
// fd: 85 c0                         testl   %eax, %eax
// ff: 78 12                         js      0x113 <_JIT_ENTRY+0x113>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10b: ff d0                         callq   *%rax
// 10d: 49 ff 0c 24                   decq    (%r12)
// 111: 74 59                         je      0x16c <_JIT_ENTRY+0x16c>
// 113: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 117: 85 ed                         testl   %ebp, %ebp
// 119: 78 68                         js      0x183 <_JIT_ENTRY+0x183>
// 11b: 49 83 c6 f8                   addq    $-0x8, %r14
// 11f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000121:  R_X86_64_64  _JIT_OPARG
// 129: 0f b7 c9                      movzwl  %cx, %ecx
// 12c: 39 cd                         cmpl    %ecx, %ebp
// 12e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000130:  R_X86_64_64  _Py_FalseStruct
// 138: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013a:  R_X86_64_64  _Py_TrueStruct
// 142: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 146: 48 89 10                      movq    %rdx, (%rax)
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _JIT_CONTINUE
// 153: 48 89 df                      movq    %rbx, %rdi
// 156: 4c 89 f6                      movq    %r14, %rsi
// 159: 4c 89 fa                      movq    %r15, %rdx
// 15c: 48 83 c4 08                   addq    $0x8, %rsp
// 160: 5b                            popq    %rbx
// 161: 41 5c                         popq    %r12
// 163: 41 5d                         popq    %r13
// 165: 41 5e                         popq    %r14
// 167: 41 5f                         popq    %r15
// 169: 5d                            popq    %rbp
// 16a: ff e0                         jmpq    *%rax
// 16c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016e:  R_X86_64_64  _Py_Dealloc
// 176: 4c 89 e7                      movq    %r12, %rdi
// 179: ff d0                         callq   *%rax
// 17b: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 79 98                         jns     0x11b <_JIT_ENTRY+0x11b>
// 183: 48 29 d8                      subq    %rbx, %rax
// 186: 48 83 c0 b8                   addq    $-0x48, %rax
// 18a: 48 c1 e8 03                   shrq    $0x3, %rax
// 18e: 89 43 40                      movl    %eax, 0x40(%rbx)
// 191: 31 c0                         xorl    %eax, %eax
// 193: 48 83 c4 08                   addq    $0x8, %rsp
// 197: 5b                            popq    %rbx
// 198: 41 5c                         popq    %r12
// 19a: 41 5d                         popq    %r13
// 19c: 41 5e                         popq    %r14
// 19e: 41 5f                         popq    %r15
// 1a0: 5d                            popq    %rbp
// 1a1: c3                            retq
// 1a2: 
static const unsigned char _CHECK_VALIDITYplus_CONTAINS_OP_code_body[419] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x2e, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x17, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x59, 0x49, 0x8d, 0x46, 0xf0, 0x85, 0xed, 0x78, 0x68, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0xcd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf0, 0x85, 0xed, 0x79, 0x98, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_CONTAINS_OP_code_holes[16] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CONTAINS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CONTAINS_OP_data_holes[1];

// _CHECK_VALIDITYplus_CONVERT_VALUE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_CONVERT_VALUE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 36                         je      0x55 <_JIT_ENTRY+0x55>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  _JIT_OPARG
// 30: 0f b7 c0                      movzwl  %ax, %eax
// 33: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000035:  R_X86_64_64  .rodata
// 3d: 4c 89 e7                      movq    %r12, %rdi
// 40: ff 14 c1                      callq   *(%rcx,%rax,8)
// 43: 49 89 c5                      movq    %rax, %r13
// 46: 49 8b 04 24                   movq    (%r12), %rax
// 4a: 48 85 c0                      testq   %rax, %rax
// 4d: 7e 33                         jle     0x82 <_JIT_ENTRY+0x82>
// 4f: 85 c0                         testl   %eax, %eax
// 51: 79 55                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 53: eb 65                         jmp     0xba <_JIT_ENTRY+0xba>
// 55: 4c 29 f3                      subq    %r14, %rbx
// 58: 48 83 c3 b8                   addq    $-0x48, %rbx
// 5c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 60: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000069:  R_X86_64_64  _JIT_TARGET
// 71: 89 c9                         movl    %ecx, %ecx
// 73: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 77: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7d: e9 88 00 00 00                jmp     0x10a <_JIT_ENTRY+0x10a>
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 12                         js      0xba <_JIT_ENTRY+0xba>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 74 27                         je      0xe1 <_JIT_ENTRY+0xe1>
// ba: 4d 85 ed                      testq   %r13, %r13
// bd: 74 36                         je      0xf5 <_JIT_ENTRY+0xf5>
// bf: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c5:  R_X86_64_64  _JIT_CONTINUE
// cd: 4c 89 f7                      movq    %r14, %rdi
// d0: 48 89 de                      movq    %rbx, %rsi
// d3: 4c 89 fa                      movq    %r15, %rdx
// d6: 5b                            popq    %rbx
// d7: 41 5c                         popq    %r12
// d9: 41 5d                         popq    %r13
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: ff e0                         jmpq    *%rax
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _Py_Dealloc
// eb: 4c 89 e7                      movq    %r12, %rdi
// ee: ff d0                         callq   *%rax
// f0: 4d 85 ed                      testq   %r13, %r13
// f3: 75 ca                         jne     0xbf <_JIT_ENTRY+0xbf>
// f5: 48 83 c3 f8                   addq    $-0x8, %rbx
// f9: 4c 29 f3                      subq    %r14, %rbx
// fc: 48 83 c3 b8                   addq    $-0x48, %rbx
// 100: 48 c1 eb 03                   shrq    $0x3, %rbx
// 104: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 108: 31 c0                         xorl    %eax, %eax
// 10a: 5b                            popq    %rbx
// 10b: 41 5c                         popq    %r12
// 10d: 41 5d                         popq    %r13
// 10f: 41 5e                         popq    %r14
// 111: 41 5f                         popq    %r15
// 113: c3                            retq
// 114: 
static const unsigned char _CHECK_VALIDITYplus_CONVERT_VALUE_code_body[277] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x36, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x88, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x27, 0x4d, 0x85, 0xed, 0x74, 0x36, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xca, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_CONVERT_VALUE_code_holes[10] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x35, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x69, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_CONVERT_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_CONVERT_VALUE_data_holes[4] = {
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _CHECK_VALIDITYplus_COPY
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_COPY.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 5c                         je      0x7a <_JIT_ENTRY+0x7a>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  _JIT_OPARG
// 2b: 0f b7 c0                      movzwl  %ax, %eax
// 2e: 48 c1 e0 03                   shlq    $0x3, %rax
// 32: 48 89 d9                      movq    %rbx, %rcx
// 35: 48 29 c1                      subq    %rax, %rcx
// 38: 4c 8b 21                      movq    (%rcx), %r12
// 3b: 41 8b 04 24                   movl    (%r12), %eax
// 3f: ff c0                         incl    %eax
// 41: 74 10                         je      0x53 <_JIT_ENTRY+0x53>
// 43: 41 89 04 24                   movl    %eax, (%r12)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 51: ff d0                         callq   *%rax
// 53: 4c 89 23                      movq    %r12, (%rbx)
// 56: 48 83 c3 08                   addq    $0x8, %rbx
// 5a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005c:  R_X86_64_64  _JIT_CONTINUE
// 64: 4c 89 f7                      movq    %r14, %rdi
// 67: 48 89 de                      movq    %rbx, %rsi
// 6a: 4c 89 fa                      movq    %r15, %rdx
// 6d: 48 83 c4 08                   addq    $0x8, %rsp
// 71: 5b                            popq    %rbx
// 72: 41 5c                         popq    %r12
// 74: 41 5e                         popq    %r14
// 76: 41 5f                         popq    %r15
// 78: ff e0                         jmpq    *%rax
// 7a: 4c 29 f3                      subq    %r14, %rbx
// 7d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 81: 48 c1 eb 03                   shrq    $0x3, %rbx
// 85: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 89: 49 8b 06                      movq    (%r14), %rax
// 8c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008e:  R_X86_64_64  _JIT_TARGET
// 96: 89 c9                         movl    %ecx, %ecx
// 98: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a2: 48 83 c4 08                   addq    $0x8, %rsp
// a6: 5b                            popq    %rbx
// a7: 41 5c                         popq    %r12
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: c3                            retq
// ae: 
static const unsigned char _CHECK_VALIDITYplus_COPY_code_body[175] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x5c, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x21, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_COPY_code_holes[6] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_COPY_data_body[1];
static const Hole _CHECK_VALIDITYplus_COPY_data_holes[1];

// _CHECK_VALIDITYplus_COPY_FREE_VARS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_COPY_FREE_VARS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 0f 84 b5 00 00 00             je      0xd7 <_JIT_ENTRY+0xd7>
// 22: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 27: 48 89 3c 24                   movq    %rdi, (%rsp)
// 2b: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 66 85 c0                      testw   %ax, %ax
// 3d: 74 70                         je      0xaf <_JIT_ENTRY+0xaf>
// 3f: 48 8b 14 24                   movq    (%rsp), %rdx
// 43: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 47: 4c 8b 60 48                   movq    0x48(%rax), %r12
// 4b: 48 8b 02                      movq    (%rdx), %rax
// 4e: 8b 40 48                      movl    0x48(%rax), %eax
// 51: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: 0f b7 c9                      movzwl  %cx, %ecx
// 5e: 29 c8                         subl    %ecx, %eax
// 60: 83 f9 02                      cmpl    $0x2, %ecx
// 63: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 69: 44 0f 43 e9                   cmovael %ecx, %r13d
// 6d: 48 98                         cltq
// 6f: 48 8d 2c c2                   leaq    (%rdx,%rax,8), %rbp
// 73: 48 83 c5 48                   addq    $0x48, %rbp
// 77: 45 31 ff                      xorl    %r15d, %r15d
// 7a: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: eb 17                         jmp     0x9d <_JIT_ENTRY+0x9d>
// 86: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 90: 4a 89 5c fd 00                movq    %rbx, (%rbp,%r15,8)
// 95: 49 ff c7                      incq    %r15
// 98: 4d 39 fd                      cmpq    %r15, %r13
// 9b: 74 12                         je      0xaf <_JIT_ENTRY+0xaf>
// 9d: 4b 8b 5c fc 18                movq    0x18(%r12,%r15,8), %rbx
// a2: 8b 03                         movl    (%rbx), %eax
// a4: ff c0                         incl    %eax
// a6: 74 e8                         je      0x90 <_JIT_ENTRY+0x90>
// a8: 89 03                         movl    %eax, (%rbx)
// aa: 41 ff d6                      callq   *%r14
// ad: eb e1                         jmp     0x90 <_JIT_ENTRY+0x90>
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  _JIT_CONTINUE
// b9: 48 8b 3c 24                   movq    (%rsp), %rdi
// bd: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// c2: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// c7: 48 83 c4 18                   addq    $0x18, %rsp
// cb: 5b                            popq    %rbx
// cc: 41 5c                         popq    %r12
// ce: 41 5d                         popq    %r13
// d0: 41 5e                         popq    %r14
// d2: 41 5f                         popq    %r15
// d4: 5d                            popq    %rbp
// d5: ff e0                         jmpq    *%rax
// d7: 48 29 fe                      subq    %rdi, %rsi
// da: 48 83 c6 b8                   addq    $-0x48, %rsi
// de: 48 c1 ee 03                   shrq    $0x3, %rsi
// e2: 89 77 40                      movl    %esi, 0x40(%rdi)
// e5: 48 8b 07                      movq    (%rdi), %rax
// e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ea:  R_X86_64_64  _JIT_TARGET
// f2: 89 c9                         movl    %ecx, %ecx
// f4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// f8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// fe: 48 83 c4 18                   addq    $0x18, %rsp
// 102: 5b                            popq    %rbx
// 103: 41 5c                         popq    %r12
// 105: 41 5d                         popq    %r13
// 107: 41 5e                         popq    %r14
// 109: 41 5f                         popq    %r15
// 10b: 5d                            popq    %rbp
// 10c: c3                            retq
// 10d: 
static const unsigned char _CHECK_VALIDITYplus_COPY_FREE_VARS_code_body[270] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0xb5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x70, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x42, 0x10, 0x4c, 0x8b, 0x60, 0x48, 0x48, 0x8b, 0x02, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe9, 0x48, 0x98, 0x48, 0x8d, 0x2c, 0xc2, 0x48, 0x83, 0xc5, 0x48, 0x45, 0x31, 0xff, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x17, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x89, 0x5c, 0xfd, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfd, 0x74, 0x12, 0x4b, 0x8b, 0x5c, 0xfc, 0x18, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0xe8, 0x89, 0x03, 0x41, 0xff, 0xd6, 0xeb, 0xe1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_COPY_FREE_VARS_code_holes[7] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_COPY_FREE_VARS_data_body[1];
static const Hole _CHECK_VALIDITYplus_COPY_FREE_VARS_data_holes[1];

// _CHECK_VALIDITYplus_DELETE_ATTR
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_DELETE_ATTR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 44                         je      0x65 <_JIT_ENTRY+0x65>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 28: 49 8b 06                      movq    (%r14), %rax
// 2b: 48 8b 40 20                   movq    0x20(%rax), %rax
// 2f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c9                      movzwl  %cx, %ecx
// 3c: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 41: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000043:  R_X86_64_64  PyObject_DelAttr
// 4b: 4c 89 e7                      movq    %r12, %rdi
// 4e: ff d0                         callq   *%rax
// 50: 89 c5                         movl    %eax, %ebp
// 52: 49 8b 04 24                   movq    (%r12), %rax
// 56: 48 85 c0                      testq   %rax, %rax
// 59: 7e 34                         jle     0x8f <_JIT_ENTRY+0x8f>
// 5b: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// 5f: 85 c0                         testl   %eax, %eax
// 61: 79 56                         jns     0xb9 <_JIT_ENTRY+0xb9>
// 63: eb 66                         jmp     0xcb <_JIT_ENTRY+0xcb>
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 49 8b 06                      movq    (%r14), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_TARGET
// 81: 89 c9                         movl    %ecx, %ecx
// 83: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 87: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 8d: eb 55                         jmp     0xe4 <_JIT_ENTRY+0xe4>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// b5: 85 c0                         testl   %eax, %eax
// b7: 78 12                         js      0xcb <_JIT_ENTRY+0xcb>
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c3: ff d0                         callq   *%rax
// c5: 49 ff 0c 24                   decq    (%r12)
// c9: 74 28                         je      0xf3 <_JIT_ENTRY+0xf3>
// cb: 85 ed                         testl   %ebp, %ebp
// cd: 49 0f 44 dd                   cmoveq  %r13, %rbx
// d1: 74 37                         je      0x10a <_JIT_ENTRY+0x10a>
// d3: 4c 29 f3                      subq    %r14, %rbx
// d6: 48 83 c3 b0                   addq    $-0x50, %rbx
// da: 48 c1 eb 03                   shrq    $0x3, %rbx
// de: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// e2: 31 c0                         xorl    %eax, %eax
// e4: 48 83 c4 08                   addq    $0x8, %rsp
// e8: 5b                            popq    %rbx
// e9: 41 5c                         popq    %r12
// eb: 41 5d                         popq    %r13
// ed: 41 5e                         popq    %r14
// ef: 41 5f                         popq    %r15
// f1: 5d                            popq    %rbp
// f2: c3                            retq
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 e7                      movq    %r12, %rdi
// 100: ff d0                         callq   *%rax
// 102: 85 ed                         testl   %ebp, %ebp
// 104: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 108: 75 c9                         jne     0xd3 <_JIT_ENTRY+0xd3>
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _JIT_CONTINUE
// 114: 4c 89 f7                      movq    %r14, %rdi
// 117: 48 89 de                      movq    %rbx, %rsi
// 11a: 4c 89 fa                      movq    %r15, %rdx
// 11d: 48 83 c4 08                   addq    $0x8, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5d                         popq    %r13
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: 5d                            popq    %rbp
// 12b: ff e0                         jmpq    *%rax
// 12d: 
static const unsigned char _CHECK_VALIDITYplus_DELETE_ATTR_code_body[302] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x44, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x66, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x55, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_DELETE_ATTR_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_DELETE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_DELETE_ATTR_data_holes[1];

// _CHECK_VALIDITYplus_DELETE_DEREF
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_DELETE_DEREF.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 3c                         je      0x5a <_JIT_ENTRY+0x5a>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  _JIT_OPARG
// 2b: 0f b7 c0                      movzwl  %ax, %eax
// 2e: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// 33: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 37: 4d 85 e4                      testq   %r12, %r12
// 3a: 74 48                         je      0x84 <_JIT_ENTRY+0x84>
// 3c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 44: 49 8b 04 24                   movq    (%r12), %rax
// 48: 48 85 c0                      testq   %rax, %rax
// 4b: 7e 73                         jle     0xc0 <_JIT_ENTRY+0xc0>
// 4d: 85 c0                         testl   %eax, %eax
// 4f: 0f 89 91 00 00 00             jns     0xe6 <_JIT_ENTRY+0xe6>
// 55: e9 ad 00 00 00                jmp     0x107 <_JIT_ENTRY+0x107>
// 5a: 4c 29 f3                      subq    %r14, %rbx
// 5d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 61: 48 c1 eb 03                   shrq    $0x3, %rbx
// 65: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 69: 49 8b 06                      movq    (%r14), %rax
// 6c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006e:  R_X86_64_64  _JIT_TARGET
// 76: 89 c9                         movl    %ecx, %ecx
// 78: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 7c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 82: eb 30                         jmp     0xb4 <_JIT_ENTRY+0xb4>
// 84: 49 8b 36                      movq    (%r14), %rsi
// 87: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000089:  R_X86_64_64  _JIT_OPARG
// 91: 0f b7 d0                      movzwl  %ax, %edx
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _PyEval_FormatExcUnbound
// 9e: 4c 89 ff                      movq    %r15, %rdi
// a1: ff d0                         callq   *%rax
// a3: 4c 29 f3                      subq    %r14, %rbx
// a6: 48 83 c3 b8                   addq    $-0x48, %rbx
// aa: 48 c1 eb 03                   shrq    $0x3, %rbx
// ae: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// b2: 31 c0                         xorl    %eax, %eax
// b4: 48 83 c4 08                   addq    $0x8, %rsp
// b8: 5b                            popq    %rbx
// b9: 41 5c                         popq    %r12
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: c3                            retq
// c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_NegativeRefcount
// d4: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// d9: 4c 89 e2                      movq    %r12, %rdx
// dc: ff d0                         callq   *%rax
// de: 49 8b 04 24                   movq    (%r12), %rax
// e2: 85 c0                         testl   %eax, %eax
// e4: 78 21                         js      0x107 <_JIT_ENTRY+0x107>
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// f0: ff d0                         callq   *%rax
// f2: 49 ff 0c 24                   decq    (%r12)
// f6: 75 0f                         jne     0x107 <_JIT_ENTRY+0x107>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_Dealloc
// 102: 4c 89 e7                      movq    %r12, %rdi
// 105: ff d0                         callq   *%rax
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  _JIT_CONTINUE
// 111: 4c 89 f7                      movq    %r14, %rdi
// 114: 48 89 de                      movq    %rbx, %rsi
// 117: 4c 89 fa                      movq    %r15, %rdx
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5e                         popq    %r14
// 123: 41 5f                         popq    %r15
// 125: ff e0                         jmpq    *%rax
// 127: 
static const unsigned char _CHECK_VALIDITYplus_DELETE_DEREF_code_body[296] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3c, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x48, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x73, 0x85, 0xc0, 0x0f, 0x89, 0x91, 0x00, 0x00, 0x00, 0xe9, 0xad, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x30, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_DELETE_DEREF_code_holes[11] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_DELETE_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_DELETE_DEREF_data_holes[1];

// _CHECK_VALIDITYplus_DELETE_FAST
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_DELETE_FAST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 4a                         je      0x68 <_JIT_ENTRY+0x68>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  _JIT_OPARG
// 2b: 0f b7 c0                      movzwl  %ax, %eax
// 2e: 4d 8b 64 c6 48                movq    0x48(%r14,%rax,8), %r12
// 33: 4d 85 e4                      testq   %r12, %r12
// 36: 74 5a                         je      0x92 <_JIT_ENTRY+0x92>
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _JIT_OPARG
// 42: 0f b7 c0                      movzwl  %ax, %eax
// 45: 49 c7 44 c6 48 00 00 00 00    movq    $0x0, 0x48(%r14,%rax,8)
// 4e: 49 8b 04 24                   movq    (%r12), %rax
// 52: 48 85 c0                      testq   %rax, %rax
// 55: 0f 8e a1 00 00 00             jle     0xfc <_JIT_ENTRY+0xfc>
// 5b: 85 c0                         testl   %eax, %eax
// 5d: 0f 89 bf 00 00 00             jns     0x122 <_JIT_ENTRY+0x122>
// 63: e9 db 00 00 00                jmp     0x143 <_JIT_ENTRY+0x143>
// 68: 4c 29 f3                      subq    %r14, %rbx
// 6b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 73: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 77: 49 8b 06                      movq    (%r14), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_TARGET
// 84: 89 c9                         movl    %ecx, %ecx
// 86: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 8a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 90: eb 5e                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  PyExc_UnboundLocalError
// 9c: 4c 8b 20                      movq    (%rax), %r12
// 9f: 49 8b 06                      movq    (%r14), %rax
// a2: 48 8b 78 60                   movq    0x60(%rax), %rdi
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _JIT_OPARG
// b0: 0f b7 f0                      movzwl  %ax, %esi
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  PyTuple_GetItem
// bd: ff d0                         callq   *%rax
// bf: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000c1:  R_X86_64_64  .rodata.str1.1
// c9: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000cb:  R_X86_64_64  _PyEval_FormatExcCheckArg
// d3: 4c 89 ff                      movq    %r15, %rdi
// d6: 4c 89 e6                      movq    %r12, %rsi
// d9: 48 89 c1                      movq    %rax, %rcx
// dc: 41 ff d0                      callq   *%r8
// df: 4c 29 f3                      subq    %r14, %rbx
// e2: 48 83 c3 b8                   addq    $-0x48, %rbx
// e6: 48 c1 eb 03                   shrq    $0x3, %rbx
// ea: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// ee: 31 c0                         xorl    %eax, %eax
// f0: 48 83 c4 08                   addq    $0x8, %rsp
// f4: 5b                            popq    %rbx
// f5: 41 5c                         popq    %r12
// f7: 41 5e                         popq    %r14
// f9: 41 5f                         popq    %r15
// fb: c3                            retq
// fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fe:  R_X86_64_64  .rodata.str1.1+0x4a
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_NegativeRefcount
// 110: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 115: 4c 89 e2                      movq    %r12, %rdx
// 118: ff d0                         callq   *%rax
// 11a: 49 8b 04 24                   movq    (%r12), %rax
// 11e: 85 c0                         testl   %eax, %eax
// 120: 78 21                         js      0x143 <_JIT_ENTRY+0x143>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 12c: ff d0                         callq   *%rax
// 12e: 49 ff 0c 24                   decq    (%r12)
// 132: 75 0f                         jne     0x143 <_JIT_ENTRY+0x143>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_Dealloc
// 13e: 4c 89 e7                      movq    %r12, %rdi
// 141: ff d0                         callq   *%rax
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _JIT_CONTINUE
// 14d: 4c 89 f7                      movq    %r14, %rdi
// 150: 48 89 de                      movq    %rbx, %rsi
// 153: 4c 89 fa                      movq    %r15, %rdx
// 156: 48 83 c4 08                   addq    $0x8, %rsp
// 15a: 5b                            popq    %rbx
// 15b: 41 5c                         popq    %r12
// 15d: 41 5e                         popq    %r14
// 15f: 41 5f                         popq    %r15
// 161: ff e0                         jmpq    *%rax
// 163: 
static const unsigned char _CHECK_VALIDITYplus_DELETE_FAST_code_body[356] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x4a, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x64, 0xc6, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x5a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0xc7, 0x44, 0xc6, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xa1, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xbf, 0x00, 0x00, 0x00, 0xe9, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x5e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_DELETE_FAST_code_holes[15] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4a},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// 7a: 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_DELETE_FAST_data_body[129] = {0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_DELETE_FAST_data_holes[1];

// _CHECK_VALIDITYplus_DELETE_GLOBAL
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_DELETE_GLOBAL.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 0f 84 93 00 00 00             je      0xb5 <_JIT_ENTRY+0xb5>
// 22: 49 89 d7                      movq    %rdx, %r15
// 25: 49 8b 06                      movq    (%r14), %rax
// 28: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 2c: 48 8b 40 20                   movq    0x20(%rax), %rax
// 30: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 42: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000044:  R_X86_64_64  PyDict_DelItem
// 4c: 4c 89 e6                      movq    %r12, %rsi
// 4f: ff d0                         callq   *%rax
// 51: 85 c0                         testl   %eax, %eax
// 53: 0f 84 90 00 00 00             je      0xe9 <_JIT_ENTRY+0xe9>
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  PyExc_KeyError
// 63: 48 8b 30                      movq    (%rax), %rsi
// 66: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000068:  R_X86_64_64  _PyErr_ExceptionMatches
// 70: 4c 89 ff                      movq    %r15, %rdi
// 73: ff d0                         callq   *%rax
// 75: 85 c0                         testl   %eax, %eax
// 77: 74 29                         je      0xa2 <_JIT_ENTRY+0xa2>
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  PyExc_NameError
// 83: 48 8b 30                      movq    (%rax), %rsi
// 86: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 9a: 4c 89 ff                      movq    %r15, %rdi
// 9d: 4c 89 e1                      movq    %r12, %rcx
// a0: ff d0                         callq   *%rax
// a2: 4c 29 f3                      subq    %r14, %rbx
// a5: 48 83 c3 b8                   addq    $-0x48, %rbx
// a9: 48 c1 eb 03                   shrq    $0x3, %rbx
// ad: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// b1: 31 c0                         xorl    %eax, %eax
// b3: eb 28                         jmp     0xdd <_JIT_ENTRY+0xdd>
// b5: 4c 29 f3                      subq    %r14, %rbx
// b8: 48 83 c3 b8                   addq    $-0x48, %rbx
// bc: 48 c1 eb 03                   shrq    $0x3, %rbx
// c0: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  _JIT_TARGET
// d1: 89 c9                         movl    %ecx, %ecx
// d3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// dd: 48 83 c4 08                   addq    $0x8, %rsp
// e1: 5b                            popq    %rbx
// e2: 41 5c                         popq    %r12
// e4: 41 5e                         popq    %r14
// e6: 41 5f                         popq    %r15
// e8: c3                            retq
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _JIT_CONTINUE
// f3: 4c 89 f7                      movq    %r14, %rdi
// f6: 48 89 de                      movq    %rbx, %rsi
// f9: 4c 89 fa                      movq    %r15, %rdx
// fc: 48 83 c4 08                   addq    $0x8, %rsp
// 100: 5b                            popq    %rbx
// 101: 41 5c                         popq    %r12
// 103: 41 5e                         popq    %r14
// 105: 41 5f                         popq    %r15
// 107: ff e0                         jmpq    *%rax
// 109: 
static const unsigned char _CHECK_VALIDITYplus_DELETE_GLOBAL_code_body[266] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x28, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_DELETE_GLOBAL_code_holes[11] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "name '%.200s' is not defined\x00"
// 1d: 00 00 00
static const unsigned char _CHECK_VALIDITYplus_DELETE_GLOBAL_data_body[33] = {0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_DELETE_GLOBAL_data_holes[1];

// _CHECK_VALIDITYplus_DELETE_NAME
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_DELETE_NAME.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 67                         je      0x85 <_JIT_ENTRY+0x85>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 49 8b 06                      movq    (%r14), %rax
// 24: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 28: 48 8b 40 20                   movq    0x20(%rax), %rax
// 2c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002e:  R_X86_64_64  _JIT_OPARG
// 36: 0f b7 c9                      movzwl  %cx, %ecx
// 39: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 3e: 48 85 ff                      testq   %rdi, %rdi
// 41: 74 6c                         je      0xaf <_JIT_ENTRY+0xaf>
// 43: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000045:  R_X86_64_64  PyObject_DelItem
// 4d: 4c 89 e6                      movq    %r12, %rsi
// 50: ff d0                         callq   *%rax
// 52: 85 c0                         testl   %eax, %eax
// 54: 0f 84 9e 00 00 00             je      0xf8 <_JIT_ENTRY+0xf8>
// 5a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005c:  R_X86_64_64  PyExc_NameError
// 64: 48 8b 30                      movq    (%rax), %rsi
// 67: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000069:  R_X86_64_64  .rodata.str1.1+0x1b
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 7b: 4c 89 ff                      movq    %r15, %rdi
// 7e: 4c 89 e1                      movq    %r12, %rcx
// 81: ff d0                         callq   *%rax
// 83: eb 56                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 85: 4c 29 f3                      subq    %r14, %rbx
// 88: 48 83 c3 b8                   addq    $-0x48, %rbx
// 8c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 90: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000099:  R_X86_64_64  _JIT_TARGET
// a1: 89 c9                         movl    %ecx, %ecx
// a3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// ad: eb 3d                         jmp     0xec <_JIT_ENTRY+0xec>
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyExc_SystemError
// b9: 48 8b 30                      movq    (%rax), %rsi
// bc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000be:  R_X86_64_64  .rodata.str1.1
// c6: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000c8:  R_X86_64_64  _PyErr_Format
// d0: 4c 89 ff                      movq    %r15, %rdi
// d3: 4c 89 e1                      movq    %r12, %rcx
// d6: 31 c0                         xorl    %eax, %eax
// d8: 41 ff d0                      callq   *%r8
// db: 4c 29 f3                      subq    %r14, %rbx
// de: 48 83 c3 b8                   addq    $-0x48, %rbx
// e2: 48 c1 eb 03                   shrq    $0x3, %rbx
// e6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// ea: 31 c0                         xorl    %eax, %eax
// ec: 48 83 c4 08                   addq    $0x8, %rsp
// f0: 5b                            popq    %rbx
// f1: 41 5c                         popq    %r12
// f3: 41 5e                         popq    %r14
// f5: 41 5f                         popq    %r15
// f7: c3                            retq
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_CONTINUE
// 102: 4c 89 f7                      movq    %r14, %rdi
// 105: 48 89 de                      movq    %rbx, %rsi
// 108: 4c 89 fa                      movq    %r15, %rdx
// 10b: 48 83 c4 08                   addq    $0x8, %rsp
// 10f: 5b                            popq    %rbx
// 110: 41 5c                         popq    %r12
// 112: 41 5e                         popq    %r14
// 114: 41 5f                         popq    %r15
// 116: ff e0                         jmpq    *%rax
// 118: 
static const unsigned char _CHECK_VALIDITYplus_DELETE_NAME_code_body[281] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x67, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x6c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x9e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xeb, 0x56, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x3d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_DELETE_NAME_code_holes[12] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "no locals when deleting %R\x00name '%.200s' is not defined\x00"
// 38: 
static const unsigned char _CHECK_VALIDITYplus_DELETE_NAME_data_body[57] = {0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00};
static const Hole _CHECK_VALIDITYplus_DELETE_NAME_data_holes[1];

// _CHECK_VALIDITYplus_DELETE_SUBSCR
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_DELETE_SUBSCR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 2e                         je      0x4f <_JIT_ENTRY+0x4f>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// 28: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  PyObject_DelItem
// 36: 4c 89 ef                      movq    %r13, %rdi
// 39: 4c 89 e6                      movq    %r12, %rsi
// 3c: ff d0                         callq   *%rax
// 3e: 89 c5                         movl    %eax, %ebp
// 40: 49 8b 45 00                   movq    (%r13), %rax
// 44: 48 85 c0                      testq   %rax, %rax
// 47: 7e 33                         jle     0x7c <_JIT_ENTRY+0x7c>
// 49: 85 c0                         testl   %eax, %eax
// 4b: 79 55                         jns     0xa2 <_JIT_ENTRY+0xa2>
// 4d: eb 65                         jmp     0xb4 <_JIT_ENTRY+0xb4>
// 4f: 4c 29 f3                      subq    %r14, %rbx
// 52: 48 83 c3 b8                   addq    $-0x48, %rbx
// 56: 48 c1 eb 03                   shrq    $0x3, %rbx
// 5a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 5e: 49 8b 06                      movq    (%r14), %rax
// 61: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000063:  R_X86_64_64  _JIT_TARGET
// 6b: 89 c9                         movl    %ecx, %ecx
// 6d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 71: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 77: e9 b8 00 00 00                jmp     0x134 <_JIT_ENTRY+0x134>
// 7c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007e:  R_X86_64_64  .rodata.str1.1
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_NegativeRefcount
// 90: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 95: 4c 89 ea                      movq    %r13, %rdx
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 85 c0                         testl   %eax, %eax
// a0: 78 12                         js      0xb4 <_JIT_ENTRY+0xb4>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ac: ff d0                         callq   *%rax
// ae: 49 ff 4d 00                   decq    (%r13)
// b2: 74 13                         je      0xc7 <_JIT_ENTRY+0xc7>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 7e 22                         jle     0xdf <_JIT_ENTRY+0xdf>
// bd: 4c 8d 6b f0                   leaq    -0x10(%rbx), %r13
// c1: 85 c0                         testl   %eax, %eax
// c3: 79 44                         jns     0x109 <_JIT_ENTRY+0x109>
// c5: eb 54                         jmp     0x11b <_JIT_ENTRY+0x11b>
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _Py_Dealloc
// d1: 4c 89 ef                      movq    %r13, %rdi
// d4: ff d0                         callq   *%rax
// d6: 49 8b 04 24                   movq    (%r12), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7f de                         jg      0xbd <_JIT_ENTRY+0xbd>
// df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _Py_NegativeRefcount
// f3: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// f8: 4c 89 e2                      movq    %r12, %rdx
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 4c 8d 6b f0                   leaq    -0x10(%rbx), %r13
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 12                         js      0x11b <_JIT_ENTRY+0x11b>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 49 ff 0c 24                   decq    (%r12)
// 119: 74 28                         je      0x143 <_JIT_ENTRY+0x143>
// 11b: 85 ed                         testl   %ebp, %ebp
// 11d: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 121: 74 37                         je      0x15a <_JIT_ENTRY+0x15a>
// 123: 4c 29 f3                      subq    %r14, %rbx
// 126: 48 83 c3 a8                   addq    $-0x58, %rbx
// 12a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 12e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 132: 31 c0                         xorl    %eax, %eax
// 134: 48 83 c4 08                   addq    $0x8, %rsp
// 138: 5b                            popq    %rbx
// 139: 41 5c                         popq    %r12
// 13b: 41 5d                         popq    %r13
// 13d: 41 5e                         popq    %r14
// 13f: 41 5f                         popq    %r15
// 141: 5d                            popq    %rbp
// 142: c3                            retq
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_Dealloc
// 14d: 4c 89 e7                      movq    %r12, %rdi
// 150: ff d0                         callq   *%rax
// 152: 85 ed                         testl   %ebp, %ebp
// 154: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 158: 75 c9                         jne     0x123 <_JIT_ENTRY+0x123>
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  _JIT_CONTINUE
// 164: 4c 89 f7                      movq    %r14, %rdi
// 167: 48 89 de                      movq    %rbx, %rsi
// 16a: 4c 89 fa                      movq    %r15, %rdx
// 16d: 48 83 c4 08                   addq    $0x8, %rsp
// 171: 5b                            popq    %rbx
// 172: 41 5c                         popq    %r12
// 174: 41 5d                         popq    %r13
// 176: 41 5e                         popq    %r14
// 178: 41 5f                         popq    %r15
// 17a: 5d                            popq    %rbp
// 17b: ff e0                         jmpq    *%rax
// 17d: 
static const unsigned char _CHECK_VALIDITYplus_DELETE_SUBSCR_code_body[382] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x2e, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x6b, 0xf0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_DELETE_SUBSCR_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_DELETE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_DELETE_SUBSCR_data_holes[1];

// _CHECK_VALIDITYplus_DICT_MERGE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_DICT_MERGE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 fb                      movq    %rdi, %rbx
// c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000e:  R_X86_64_64  _JIT_EXECUTOR
// 16: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1a: 74 5b                         je      0x77 <_JIT_ENTRY+0x77>
// 1c: 49 89 d4                      movq    %rdx, %r12
// 1f: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 23: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  _JIT_OPARG
// 31: 0f b7 c0                      movzwl  %ax, %eax
// 34: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       # imm = 0xFFFFFFFC
// 39: 29 c1                         subl    %eax, %ecx
// 3b: f7 d0                         notl    %eax
// 3d: 48 98                         cltq
// 3f: 48 8b 3c c6                   movq    (%rsi,%rax,8), %rdi
// 43: 48 63 c1                      movslq  %ecx, %rax
// 46: 4c 8b 2c c6                   movq    (%rsi,%rax,8), %r13
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  _PyDict_MergeEx
// 54: 4c 89 fe                      movq    %r15, %rsi
// 57: ba 02 00 00 00                movl    $0x2, %edx
// 5c: ff d0                         callq   *%rax
// 5e: 85 c0                         testl   %eax, %eax
// 60: 78 41                         js      0xa3 <_JIT_ENTRY+0xa3>
// 62: 49 8b 07                      movq    (%r15), %rax
// 65: 48 85 c0                      testq   %rax, %rax
// 68: 7e 63                         jle     0xcd <_JIT_ENTRY+0xcd>
// 6a: 85 c0                         testl   %eax, %eax
// 6c: 0f 89 80 00 00 00             jns     0xf2 <_JIT_ENTRY+0xf2>
// 72: e9 9b 00 00 00                jmp     0x112 <_JIT_ENTRY+0x112>
// 77: 48 29 de                      subq    %rbx, %rsi
// 7a: 48 83 c6 b8                   addq    $-0x48, %rsi
// 7e: 48 c1 ee 03                   shrq    $0x3, %rsi
// 82: 89 73 40                      movl    %esi, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: e9 e3 00 00 00                jmp     0x186 <_JIT_ENTRY+0x186>
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _PyEval_FormatKwargsError
// ad: 4c 89 e7                      movq    %r12, %rdi
// b0: 4c 89 ee                      movq    %r13, %rsi
// b3: 4c 89 fa                      movq    %r15, %rdx
// b6: ff d0                         callq   *%rax
// b8: 49 8b 07                      movq    (%r15), %rax
// bb: 48 85 c0                      testq   %rax, %rax
// be: 7e 70                         jle     0x130 <_JIT_ENTRY+0x130>
// c0: 85 c0                         testl   %eax, %eax
// c2: 0f 89 8d 00 00 00             jns     0x155 <_JIT_ENTRY+0x155>
// c8: e9 a8 00 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// e6: 4c 89 fa                      movq    %r15, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 07                      movq    (%r15), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 20                         js      0x112 <_JIT_ENTRY+0x112>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 49 ff 0f                      decq    (%r15)
// 101: 75 0f                         jne     0x112 <_JIT_ENTRY+0x112>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_Dealloc
// 10d: 4c 89 ff                      movq    %r15, %rdi
// 110: ff d0                         callq   *%rax
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _JIT_CONTINUE
// 11c: 48 89 df                      movq    %rbx, %rdi
// 11f: 4c 89 f6                      movq    %r14, %rsi
// 122: 4c 89 e2                      movq    %r12, %rdx
// 125: 5b                            popq    %rbx
// 126: 41 5c                         popq    %r12
// 128: 41 5d                         popq    %r13
// 12a: 41 5e                         popq    %r14
// 12c: 41 5f                         popq    %r15
// 12e: ff e0                         jmpq    *%rax
// 130: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000132:  R_X86_64_64  .rodata.str1.1
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_NegativeRefcount
// 144: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 149: 4c 89 fa                      movq    %r15, %rdx
// 14c: ff d0                         callq   *%rax
// 14e: 49 8b 07                      movq    (%r15), %rax
// 151: 85 c0                         testl   %eax, %eax
// 153: 78 20                         js      0x175 <_JIT_ENTRY+0x175>
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15f: ff d0                         callq   *%rax
// 161: 49 ff 0f                      decq    (%r15)
// 164: 75 0f                         jne     0x175 <_JIT_ENTRY+0x175>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_Dealloc
// 170: 4c 89 ff                      movq    %r15, %rdi
// 173: ff d0                         callq   *%rax
// 175: 49 29 de                      subq    %rbx, %r14
// 178: 49 83 c6 b8                   addq    $-0x48, %r14
// 17c: 49 c1 ee 03                   shrq    $0x3, %r14
// 180: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 184: 31 c0                         xorl    %eax, %eax
// 186: 5b                            popq    %rbx
// 187: 41 5c                         popq    %r12
// 189: 41 5d                         popq    %r13
// 18b: 41 5e                         popq    %r14
// 18d: 41 5f                         popq    %r15
// 18f: c3                            retq
// 190: 
static const unsigned char _CHECK_VALIDITYplus_DICT_MERGE_code_body[401] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x5b, 0x49, 0x89, 0xd4, 0x4c, 0x8d, 0x76, 0xf8, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x8b, 0x3c, 0xc6, 0x48, 0x63, 0xc1, 0x4c, 0x8b, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9b, 0x00, 0x00, 0x00, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x70, 0x85, 0xc0, 0x0f, 0x89, 0x8d, 0x00, 0x00, 0x00, 0xe9, 0xa8, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_DICT_MERGE_code_holes[15] = {
    {0xe, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x29, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_DICT_MERGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_DICT_MERGE_data_holes[1];

// _CHECK_VALIDITYplus_DICT_UPDATE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_DICT_UPDATE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 fb                      movq    %rdi, %rbx
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_EXECUTOR
// 15: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 19: 74 4e                         je      0x69 <_JIT_ENTRY+0x69>
// 1b: 49 89 d4                      movq    %rdx, %r12
// 1e: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 22: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  _JIT_OPARG
// 30: f7 d0                         notl    %eax
// 32: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 37: 48 98                         cltq
// 39: 48 8b 3c c6                   movq    (%rsi,%rax,8), %rdi
// 3d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003f:  R_X86_64_64  PyDict_Update
// 47: 4c 89 fe                      movq    %r15, %rsi
// 4a: ff d0                         callq   *%rax
// 4c: 85 c0                         testl   %eax, %eax
// 4e: 78 45                         js      0x95 <_JIT_ENTRY+0x95>
// 50: 49 8b 07                      movq    (%r15), %rax
// 53: 48 85 c0                      testq   %rax, %rax
// 56: 0f 8e 9f 00 00 00             jle     0xfb <_JIT_ENTRY+0xfb>
// 5c: 85 c0                         testl   %eax, %eax
// 5e: 0f 89 bc 00 00 00             jns     0x120 <_JIT_ENTRY+0x120>
// 64: e9 d7 00 00 00                jmp     0x140 <_JIT_ENTRY+0x140>
// 69: 48 29 de                      subq    %rbx, %rsi
// 6c: 48 83 c6 b8                   addq    $-0x48, %rsi
// 70: 48 c1 ee 03                   shrq    $0x3, %rsi
// 74: 89 73 40                      movl    %esi, 0x40(%rbx)
// 77: 48 8b 03                      movq    (%rbx), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_TARGET
// 84: 89 c9                         movl    %ecx, %ecx
// 86: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 8a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 90: e9 21 01 00 00                jmp     0x1b6 <_JIT_ENTRY+0x1b6>
// 95: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000097:  R_X86_64_64  PyExc_AttributeError
// 9f: 48 8b 30                      movq    (%rax), %rsi
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _PyErr_ExceptionMatches
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 74 31                         je      0xe6 <_JIT_ENTRY+0xe6>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  PyExc_TypeError
// bf: 48 8b 30                      movq    (%rax), %rsi
// c2: 49 8b 47 08                   movq    0x8(%r15), %rax
// c6: 48 8b 48 18                   movq    0x18(%rax), %rcx
// ca: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1+0x39
// d4: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000d6:  R_X86_64_64  _PyErr_Format
// de: 4c 89 e7                      movq    %r12, %rdi
// e1: 31 c0                         xorl    %eax, %eax
// e3: 41 ff d0                      callq   *%r8
// e6: 49 8b 07                      movq    (%r15), %rax
// e9: 48 85 c0                      testq   %rax, %rax
// ec: 7e 72                         jle     0x160 <_JIT_ENTRY+0x160>
// ee: 85 c0                         testl   %eax, %eax
// f0: 0f 89 8f 00 00 00             jns     0x185 <_JIT_ENTRY+0x185>
// f6: e9 aa 00 00 00                jmp     0x1a5 <_JIT_ENTRY+0x1a5>
// fb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fd:  R_X86_64_64  .rodata.str1.1
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_NegativeRefcount
// 10f: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 114: 4c 89 fa                      movq    %r15, %rdx
// 117: ff d0                         callq   *%rax
// 119: 49 8b 07                      movq    (%r15), %rax
// 11c: 85 c0                         testl   %eax, %eax
// 11e: 78 20                         js      0x140 <_JIT_ENTRY+0x140>
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 12a: ff d0                         callq   *%rax
// 12c: 49 ff 0f                      decq    (%r15)
// 12f: 75 0f                         jne     0x140 <_JIT_ENTRY+0x140>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _Py_Dealloc
// 13b: 4c 89 ff                      movq    %r15, %rdi
// 13e: ff d0                         callq   *%rax
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _JIT_CONTINUE
// 14a: 48 89 df                      movq    %rbx, %rdi
// 14d: 4c 89 f6                      movq    %r14, %rsi
// 150: 4c 89 e2                      movq    %r12, %rdx
// 153: 48 83 c4 08                   addq    $0x8, %rsp
// 157: 5b                            popq    %rbx
// 158: 41 5c                         popq    %r12
// 15a: 41 5e                         popq    %r14
// 15c: 41 5f                         popq    %r15
// 15e: ff e0                         jmpq    *%rax
// 160: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000162:  R_X86_64_64  .rodata.str1.1
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_NegativeRefcount
// 174: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 179: 4c 89 fa                      movq    %r15, %rdx
// 17c: ff d0                         callq   *%rax
// 17e: 49 8b 07                      movq    (%r15), %rax
// 181: 85 c0                         testl   %eax, %eax
// 183: 78 20                         js      0x1a5 <_JIT_ENTRY+0x1a5>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18f: ff d0                         callq   *%rax
// 191: 49 ff 0f                      decq    (%r15)
// 194: 75 0f                         jne     0x1a5 <_JIT_ENTRY+0x1a5>
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _Py_Dealloc
// 1a0: 4c 89 ff                      movq    %r15, %rdi
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 29 de                      subq    %rbx, %r14
// 1a8: 49 83 c6 b8                   addq    $-0x48, %r14
// 1ac: 49 c1 ee 03                   shrq    $0x3, %r14
// 1b0: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1b4: 31 c0                         xorl    %eax, %eax
// 1b6: 48 83 c4 08                   addq    $0x8, %rsp
// 1ba: 5b                            popq    %rbx
// 1bb: 41 5c                         popq    %r12
// 1bd: 41 5e                         popq    %r14
// 1bf: 41 5f                         popq    %r15
// 1c1: c3                            retq
// 1c2: 
static const unsigned char _CHECK_VALIDITYplus_DICT_UPDATE_code_body[451] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x4e, 0x49, 0x89, 0xd4, 0x4c, 0x8d, 0x76, 0xf8, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x45, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9f, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xbc, 0x00, 0x00, 0x00, 0xe9, 0xd7, 0x00, 0x00, 0x00, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x21, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x47, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x72, 0x85, 0xc0, 0x0f, 0x89, 0x8f, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_DICT_UPDATE_code_holes[19] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object is not a mapping\x00"
// 5a: 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_DICT_UPDATE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_DICT_UPDATE_data_holes[1];

// _CHECK_VALIDITYplus_END_SEND
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_END_SEND.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 21                         je      0x42 <_JIT_ENTRY+0x42>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 28: 49 8b 6e f8                   movq    -0x8(%r14), %rbp
// 2c: 49 8b 04 24                   movq    (%r12), %rax
// 30: 48 85 c0                      testq   %rax, %rax
// 33: 7e 44                         jle     0x79 <_JIT_ENTRY+0x79>
// 35: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 39: 85 c0                         testl   %eax, %eax
// 3b: 79 66                         jns     0xa3 <_JIT_ENTRY+0xa3>
// 3d: e9 82 00 00 00                jmp     0xc4 <_JIT_ENTRY+0xc4>
// 42: 49 29 de                      subq    %rbx, %r14
// 45: 49 83 c6 b8                   addq    $-0x48, %r14
// 49: 49 c1 ee 03                   shrq    $0x3, %r14
// 4d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 51: 48 8b 03                      movq    (%rbx), %rax
// 54: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000056:  R_X86_64_64  _JIT_TARGET
// 5e: 89 c9                         movl    %ecx, %ecx
// 60: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 64: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6a: 48 83 c4 08                   addq    $0x8, %rsp
// 6e: 5b                            popq    %rbx
// 6f: 41 5c                         popq    %r12
// 71: 41 5d                         popq    %r13
// 73: 41 5e                         popq    %r14
// 75: 41 5f                         popq    %r15
// 77: 5d                            popq    %rbp
// 78: c3                            retq
// 79: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: be 66 00 00 00                movl    $0x66, %esi
// 92: 4c 89 e2                      movq    %r12, %rdx
// 95: ff d0                         callq   *%rax
// 97: 49 8b 04 24                   movq    (%r12), %rax
// 9b: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 9f: 85 c0                         testl   %eax, %eax
// a1: 78 21                         js      0xc4 <_JIT_ENTRY+0xc4>
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ad: ff d0                         callq   *%rax
// af: 49 ff 0c 24                   decq    (%r12)
// b3: 75 0f                         jne     0xc4 <_JIT_ENTRY+0xc4>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_Dealloc
// bf: 4c 89 e7                      movq    %r12, %rdi
// c2: ff d0                         callq   *%rax
// c4: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  _JIT_CONTINUE
// d2: 48 89 df                      movq    %rbx, %rdi
// d5: 4c 89 ee                      movq    %r13, %rsi
// d8: 4c 89 fa                      movq    %r15, %rdx
// db: 48 83 c4 08                   addq    $0x8, %rsp
// df: 5b                            popq    %rbx
// e0: 41 5c                         popq    %r12
// e2: 41 5d                         popq    %r13
// e4: 41 5e                         popq    %r14
// e6: 41 5f                         popq    %r15
// e8: 5d                            popq    %rbp
// e9: ff e0                         jmpq    *%rax
// eb: 
static const unsigned char _CHECK_VALIDITYplus_END_SEND_code_body[236] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x21, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf0, 0x49, 0x8b, 0x6e, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x44, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x79, 0x66, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_END_SEND_code_holes[8] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_END_SEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_END_SEND_data_holes[1];

// _CHECK_VALIDITYplus_EXIT_INIT_CHECK
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_EXIT_INIT_CHECK.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 89 f3                      movq    %rsi, %rbx
// 8: 49 89 fe                      movq    %rdi, %r14
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_EXECUTOR
// 15: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 19: 74 54                         je      0x6f <_JIT_ENTRY+0x6f>
// 1b: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 1f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000021:  R_X86_64_64  _Py_NoneStruct
// 29: 48 39 c8                      cmpq    %rcx, %rax
// 2c: 74 73                         je      0xa1 <_JIT_ENTRY+0xa1>
// 2e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000030:  R_X86_64_64  PyExc_TypeError
// 38: 48 8b 39                      movq    (%rcx), %rdi
// 3b: 48 8b 40 08                   movq    0x8(%rax), %rax
// 3f: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 43: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000045:  R_X86_64_64  .rodata.str1.1
// 4d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004f:  R_X86_64_64  PyErr_Format
// 57: 45 31 ff                      xorl    %r15d, %r15d
// 5a: 31 c0                         xorl    %eax, %eax
// 5c: ff d1                         callq   *%rcx
// 5e: 4c 29 f3                      subq    %r14, %rbx
// 61: 48 83 c3 b8                   addq    $-0x48, %rbx
// 65: 48 c1 eb 03                   shrq    $0x3, %rbx
// 69: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 6d: eb 29                         jmp     0x98 <_JIT_ENTRY+0x98>
// 6f: 4c 29 f3                      subq    %r14, %rbx
// 72: 48 83 c3 b8                   addq    $-0x48, %rbx
// 76: 48 c1 eb 03                   shrq    $0x3, %rbx
// 7a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 7e: 49 8b 06                      movq    (%r14), %rax
// 81: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000083:  R_X86_64_64  _JIT_TARGET
// 8b: 89 c9                         movl    %ecx, %ecx
// 8d: 4c 8d 3c 48                   leaq    (%rax,%rcx,2), %r15
// 91: 49 81 c7 c8 00 00 00          addq    $0xc8, %r15
// 98: 4c 89 f8                      movq    %r15, %rax
// 9b: 5b                            popq    %rbx
// 9c: 41 5e                         popq    %r14
// 9e: 41 5f                         popq    %r15
// a0: c3                            retq
// a1: 48 83 c3 f8                   addq    $-0x8, %rbx
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_CONTINUE
// af: 4c 89 f7                      movq    %r14, %rdi
// b2: 48 89 de                      movq    %rbx, %rsi
// b5: 5b                            popq    %rbx
// b6: 41 5e                         popq    %r14
// b8: 41 5f                         popq    %r15
// ba: ff e0                         jmpq    *%rax
// bc: 
static const unsigned char _CHECK_VALIDITYplus_EXIT_INIT_CHECK_code_body[189] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x54, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x73, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x31, 0xff, 0x31, 0xc0, 0xff, 0xd1, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0xeb, 0x29, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x4c, 0x8d, 0x3c, 0x48, 0x49, 0x81, 0xc7, 0xc8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_EXIT_INIT_CHECK_code_holes[8] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x30, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "__init__() should return None, not '%.200s'\x00"
// 2c: 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_EXIT_INIT_CHECK_data_body[49] = {0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_EXIT_INIT_CHECK_data_holes[1];

// _CHECK_VALIDITYplus_EXIT_TRACE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_EXIT_TRACE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 29 fe                      subq    %rdi, %rsi
// 3: 48 83 c6 b8                   addq    $-0x48, %rsi
// 7: 48 c1 ee 03                   shrq    $0x3, %rsi
// b: 89 77 40                      movl    %esi, 0x40(%rdi)
// e: 48 8b 07                      movq    (%rdi), %rax
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_TARGET
// 1b: 89 c9                         movl    %ecx, %ecx
// 1d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27: c3                            retq
// 28: 
static const unsigned char _CHECK_VALIDITYplus_EXIT_TRACE_code_body[41] = {0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_EXIT_TRACE_code_holes[2] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_EXIT_TRACE_data_body[1];
static const Hole _CHECK_VALIDITYplus_EXIT_TRACE_data_holes[1];

// _CHECK_VALIDITYplus_FORMAT_SIMPLE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_FORMAT_SIMPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 3f                         je      0x5e <_JIT_ENTRY+0x5e>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  PyUnicode_Type
// 30: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 35: 0f 84 90 00 00 00             je      0xcb <_JIT_ENTRY+0xcb>
// 3b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003d:  R_X86_64_64  PyObject_Format
// 45: 4c 89 e7                      movq    %r12, %rdi
// 48: 31 f6                         xorl    %esi, %esi
// 4a: ff d0                         callq   *%rax
// 4c: 49 89 c5                      movq    %rax, %r13
// 4f: 49 8b 04 24                   movq    (%r12), %rax
// 53: 48 85 c0                      testq   %rax, %rax
// 56: 7e 33                         jle     0x8b <_JIT_ENTRY+0x8b>
// 58: 85 c0                         testl   %eax, %eax
// 5a: 79 55                         jns     0xb1 <_JIT_ENTRY+0xb1>
// 5c: eb 65                         jmp     0xc3 <_JIT_ENTRY+0xc3>
// 5e: 4c 29 f3                      subq    %r14, %rbx
// 61: 48 83 c3 b8                   addq    $-0x48, %rbx
// 65: 48 c1 eb 03                   shrq    $0x3, %rbx
// 69: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 6d: 49 8b 06                      movq    (%r14), %rax
// 70: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000072:  R_X86_64_64  _JIT_TARGET
// 7a: 89 c9                         movl    %ecx, %ecx
// 7c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 80: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 86: e9 8e 00 00 00                jmp     0x119 <_JIT_ENTRY+0x119>
// 8b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008d:  R_X86_64_64  .rodata.str1.1
// 95: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000097:  R_X86_64_64  _Py_NegativeRefcount
// 9f: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// a4: 4c 89 e2                      movq    %r12, %rdx
// a7: ff d0                         callq   *%rax
// a9: 49 8b 04 24                   movq    (%r12), %rax
// ad: 85 c0                         testl   %eax, %eax
// af: 78 12                         js      0xc3 <_JIT_ENTRY+0xc3>
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bb: ff d0                         callq   *%rax
// bd: 49 ff 0c 24                   decq    (%r12)
// c1: 74 2a                         je      0xed <_JIT_ENTRY+0xed>
// c3: 4d 89 ec                      movq    %r13, %r12
// c6: 4d 85 ed                      testq   %r13, %r13
// c9: 74 39                         je      0x104 <_JIT_ENTRY+0x104>
// cb: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _JIT_CONTINUE
// d9: 4c 89 f7                      movq    %r14, %rdi
// dc: 48 89 de                      movq    %rbx, %rsi
// df: 4c 89 fa                      movq    %r15, %rdx
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: ff e0                         jmpq    *%rax
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_Dealloc
// f7: 4c 89 e7                      movq    %r12, %rdi
// fa: ff d0                         callq   *%rax
// fc: 4d 89 ec                      movq    %r13, %r12
// ff: 4d 85 ed                      testq   %r13, %r13
// 102: 75 c7                         jne     0xcb <_JIT_ENTRY+0xcb>
// 104: 48 83 c3 f8                   addq    $-0x8, %rbx
// 108: 4c 29 f3                      subq    %r14, %rbx
// 10b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 10f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 113: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 117: 31 c0                         xorl    %eax, %eax
// 119: 5b                            popq    %rbx
// 11a: 41 5c                         popq    %r12
// 11c: 41 5d                         popq    %r13
// 11e: 41 5e                         popq    %r14
// 120: 41 5f                         popq    %r15
// 122: c3                            retq
// 123: 
static const unsigned char _CHECK_VALIDITYplus_FORMAT_SIMPLE_code_body[292] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3f, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2a, 0x4d, 0x89, 0xec, 0x4d, 0x85, 0xed, 0x74, 0x39, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x4d, 0x85, 0xed, 0x75, 0xc7, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_FORMAT_SIMPLE_code_holes[10] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_FORMAT_SIMPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_FORMAT_SIMPLE_data_holes[1];

// _CHECK_VALIDITYplus_FORMAT_WITH_SPEC
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_FORMAT_WITH_SPEC.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 2f                         je      0x50 <_JIT_ENTRY+0x50>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  PyObject_Format
// 36: 48 89 ef                      movq    %rbp, %rdi
// 39: 4c 89 ee                      movq    %r13, %rsi
// 3c: ff d0                         callq   *%rax
// 3e: 49 89 c4                      movq    %rax, %r12
// 41: 48 8b 45 00                   movq    (%rbp), %rax
// 45: 48 85 c0                      testq   %rax, %rax
// 48: 7e 33                         jle     0x7d <_JIT_ENTRY+0x7d>
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 55                         jns     0xa3 <_JIT_ENTRY+0xa3>
// 4e: eb 65                         jmp     0xb5 <_JIT_ENTRY+0xb5>
// 50: 49 29 de                      subq    %rbx, %r14
// 53: 49 83 c6 b8                   addq    $-0x48, %r14
// 57: 49 c1 ee 03                   shrq    $0x3, %r14
// 5b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 5f: 48 8b 03                      movq    (%rbx), %rax
// 62: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000064:  R_X86_64_64  _JIT_TARGET
// 6c: 89 c9                         movl    %ecx, %ecx
// 6e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 72: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 78: e9 f2 00 00 00                jmp     0x16f <_JIT_ENTRY+0x16f>
// 7d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007f:  R_X86_64_64  .rodata.str1.1
// 87: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000089:  R_X86_64_64  _Py_NegativeRefcount
// 91: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 96: 48 89 ea                      movq    %rbp, %rdx
// 99: ff d0                         callq   *%rax
// 9b: 48 8b 45 00                   movq    (%rbp), %rax
// 9f: 85 c0                         testl   %eax, %eax
// a1: 78 12                         js      0xb5 <_JIT_ENTRY+0xb5>
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ad: ff d0                         callq   *%rax
// af: 48 ff 4d 00                   decq    (%rbp)
// b3: 74 0f                         je      0xc4 <_JIT_ENTRY+0xc4>
// b5: 49 8b 45 00                   movq    (%r13), %rax
// b9: 48 85 c0                      testq   %rax, %rax
// bc: 7e 1e                         jle     0xdc <_JIT_ENTRY+0xdc>
// be: 85 c0                         testl   %eax, %eax
// c0: 79 40                         jns     0x102 <_JIT_ENTRY+0x102>
// c2: eb 50                         jmp     0x114 <_JIT_ENTRY+0x114>
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _Py_Dealloc
// ce: 48 89 ef                      movq    %rbp, %rdi
// d1: ff d0                         callq   *%rax
// d3: 49 8b 45 00                   movq    (%r13), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7f e2                         jg      0xbe <_JIT_ENTRY+0xbe>
// dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000de:  R_X86_64_64  .rodata.str1.1
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _Py_NegativeRefcount
// f0: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// f5: 4c 89 ea                      movq    %r13, %rdx
// f8: ff d0                         callq   *%rax
// fa: 49 8b 45 00                   movq    (%r13), %rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 78 12                         js      0x114 <_JIT_ENTRY+0x114>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 4d 00                   decq    (%r13)
// 112: 74 33                         je      0x147 <_JIT_ENTRY+0x147>
// 114: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 118: 4d 85 e4                      testq   %r12, %r12
// 11b: 74 42                         je      0x15f <_JIT_ENTRY+0x15f>
// 11d: 49 83 c6 f8                   addq    $-0x8, %r14
// 121: 4c 89 20                      movq    %r12, (%rax)
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _JIT_CONTINUE
// 12e: 48 89 df                      movq    %rbx, %rdi
// 131: 4c 89 f6                      movq    %r14, %rsi
// 134: 4c 89 fa                      movq    %r15, %rdx
// 137: 48 83 c4 08                   addq    $0x8, %rsp
// 13b: 5b                            popq    %rbx
// 13c: 41 5c                         popq    %r12
// 13e: 41 5d                         popq    %r13
// 140: 41 5e                         popq    %r14
// 142: 41 5f                         popq    %r15
// 144: 5d                            popq    %rbp
// 145: ff e0                         jmpq    *%rax
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_Dealloc
// 151: 4c 89 ef                      movq    %r13, %rdi
// 154: ff d0                         callq   *%rax
// 156: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 15a: 4d 85 e4                      testq   %r12, %r12
// 15d: 75 be                         jne     0x11d <_JIT_ENTRY+0x11d>
// 15f: 48 29 d8                      subq    %rbx, %rax
// 162: 48 83 c0 b8                   addq    $-0x48, %rax
// 166: 48 c1 e8 03                   shrq    $0x3, %rax
// 16a: 89 43 40                      movl    %eax, 0x40(%rbx)
// 16d: 31 c0                         xorl    %eax, %eax
// 16f: 48 83 c4 08                   addq    $0x8, %rsp
// 173: 5b                            popq    %rbx
// 174: 41 5c                         popq    %r12
// 176: 41 5d                         popq    %r13
// 178: 41 5e                         popq    %r14
// 17a: 41 5f                         popq    %r15
// 17c: 5d                            popq    %rbp
// 17d: c3                            retq
// 17e: 
static const unsigned char _CHECK_VALIDITYplus_FORMAT_WITH_SPEC_code_body[383] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x2f, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x6e, 0xf0, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xf2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x33, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x42, 0x49, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x75, 0xbe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_FORMAT_WITH_SPEC_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_FORMAT_WITH_SPEC_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_FORMAT_WITH_SPEC_data_holes[1];

// _CHECK_VALIDITYplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_FOR_ITER_TIER_TWO.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 0f 84 d5 00 00 00             je      0xf7 <_JIT_ENTRY+0xf7>
// 22: 49 89 d4                      movq    %rdx, %r12
// 25: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 29: 49 8b 47 08                   movq    0x8(%r15), %rax
// 2d: 4c 89 ff                      movq    %r15, %rdi
// 30: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// 36: 48 85 c0                      testq   %rax, %rax
// 39: 74 27                         je      0x62 <_JIT_ENTRY+0x62>
// 3b: 48 89 03                      movq    %rax, (%rbx)
// 3e: 48 83 c3 08                   addq    $0x8, %rbx
// 42: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000044:  R_X86_64_64  _JIT_CONTINUE
// 4c: 4c 89 f7                      movq    %r14, %rdi
// 4f: 48 89 de                      movq    %rbx, %rsi
// 52: 4c 89 e2                      movq    %r12, %rdx
// 55: 48 83 c4 08                   addq    $0x8, %rsp
// 59: 5b                            popq    %rbx
// 5a: 41 5c                         popq    %r12
// 5c: 41 5e                         popq    %r14
// 5e: 41 5f                         popq    %r15
// 60: ff e0                         jmpq    *%rax
// 62: 49 8b 44 24 68                movq    0x68(%r12), %rax
// 67: 48 85 c0                      testq   %rax, %rax
// 6a: 74 3a                         je      0xa6 <_JIT_ENTRY+0xa6>
// 6c: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 71: 74 33                         je      0xa6 <_JIT_ENTRY+0xa6>
// 73: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000075:  R_X86_64_64  PyExc_StopIteration
// 7d: 48 8b 30                      movq    (%rax), %rsi
// 80: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000082:  R_X86_64_64  _PyErr_ExceptionMatches
// 8a: 4c 89 e7                      movq    %r12, %rdi
// 8d: ff d0                         callq   *%rax
// 8f: 85 c0                         testl   %eax, %eax
// 91: 0f 84 94 00 00 00             je      0x12b <_JIT_ENTRY+0x12b>
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _PyErr_Clear
// a1: 4c 89 e7                      movq    %r12, %rdi
// a4: ff d0                         callq   *%rax
// a6: 49 8b 07                      movq    (%r15), %rax
// a9: 48 85 c0                      testq   %rax, %rax
// ac: 7f 21                         jg      0xcf <_JIT_ENTRY+0xcf>
// ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b0:  R_X86_64_64  .rodata.str1.1
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_NegativeRefcount
// c2: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// c7: 4c 89 fa                      movq    %r15, %rdx
// ca: ff d0                         callq   *%rax
// cc: 49 8b 07                      movq    (%r15), %rax
// cf: 48 83 c3 f8                   addq    $-0x8, %rbx
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 20                         js      0xf7 <_JIT_ENTRY+0xf7>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 0f                      decq    (%r15)
// e6: 75 0f                         jne     0xf7 <_JIT_ENTRY+0xf7>
// e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ea:  R_X86_64_64  _Py_Dealloc
// f2: 4c 89 ff                      movq    %r15, %rdi
// f5: ff d0                         callq   *%rax
// f7: 4c 29 f3                      subq    %r14, %rbx
// fa: 48 83 c3 b8                   addq    $-0x48, %rbx
// fe: 48 c1 eb 03                   shrq    $0x3, %rbx
// 102: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 106: 49 8b 06                      movq    (%r14), %rax
// 109: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010b:  R_X86_64_64  _JIT_TARGET
// 113: 89 c9                         movl    %ecx, %ecx
// 115: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 119: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11f: 48 83 c4 08                   addq    $0x8, %rsp
// 123: 5b                            popq    %rbx
// 124: 41 5c                         popq    %r12
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: c3                            retq
// 12b: 4c 29 f3                      subq    %r14, %rbx
// 12e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 132: 48 c1 eb 03                   shrq    $0x3, %rbx
// 136: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 13a: 31 c0                         xorl    %eax, %eax
// 13c: eb e1                         jmp     0x11f <_JIT_ENTRY+0x11f>
// 13e: 
static const unsigned char _CHECK_VALIDITYplus_FOR_ITER_TIER_TWO_code_body[319] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd4, 0x4c, 0x8b, 0x7b, 0xf8, 0x49, 0x8b, 0x47, 0x08, 0x4c, 0x89, 0xff, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x8b, 0x44, 0x24, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x3a, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0xe1};
static const Hole _CHECK_VALIDITYplus_FOR_ITER_TIER_TWO_code_holes[11] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_FOR_ITER_TIER_TWO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_FOR_ITER_TIER_TWO_data_holes[1];

// _CHECK_VALIDITYplus_GET_AITER
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GET_AITER.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 0f 84 f4 00 00 00             je      0x117 <_JIT_ENTRY+0x117>
// 23: 49 89 d4                      movq    %rdx, %r12
// 26: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 2a: 49 8b 47 08                   movq    0x8(%r15), %rax
// 2e: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 32: 48 85 c9                      testq   %rcx, %rcx
// 35: 0f 84 9e 00 00 00             je      0xd9 <_JIT_ENTRY+0xd9>
// 3b: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 3f: 48 85 c9                      testq   %rcx, %rcx
// 42: 0f 84 91 00 00 00             je      0xd9 <_JIT_ENTRY+0xd9>
// 48: 4c 89 ff                      movq    %r15, %rdi
// 4b: ff d1                         callq   *%rcx
// 4d: 49 89 c5                      movq    %rax, %r13
// 50: 49 8b 07                      movq    (%r15), %rax
// 53: 48 85 c0                      testq   %rax, %rax
// 56: 7f 21                         jg      0x79 <_JIT_ENTRY+0x79>
// 58: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000005a:  R_X86_64_64  .rodata.str1.1
// 62: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000064:  R_X86_64_64  _Py_NegativeRefcount
// 6c: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 71: 4c 89 fa                      movq    %r15, %rdx
// 74: ff d0                         callq   *%rax
// 76: 49 8b 07                      movq    (%r15), %rax
// 79: 85 c0                         testl   %eax, %eax
// 7b: 78 15                         js      0x92 <_JIT_ENTRY+0x92>
// 7d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 87: ff d0                         callq   *%rax
// 89: 49 ff 0f                      decq    (%r15)
// 8c: 0f 84 7a 01 00 00             je      0x20c <_JIT_ENTRY+0x20c>
// 92: 4d 85 ed                      testq   %r13, %r13
// 95: 0f 84 89 01 00 00             je      0x224 <_JIT_ENTRY+0x224>
// 9b: 49 8b 45 08                   movq    0x8(%r13), %rax
// 9f: 48 8b 48 50                   movq    0x50(%rax), %rcx
// a3: 48 85 c9                      testq   %rcx, %rcx
// a6: 0f 84 ea 00 00 00             je      0x196 <_JIT_ENTRY+0x196>
// ac: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// b1: 0f 84 df 00 00 00             je      0x196 <_JIT_ENTRY+0x196>
// b7: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _JIT_CONTINUE
// c5: 4c 89 f7                      movq    %r14, %rdi
// c8: 48 89 de                      movq    %rbx, %rsi
// cb: 4c 89 e2                      movq    %r12, %rdx
// ce: 5b                            popq    %rbx
// cf: 41 5c                         popq    %r12
// d1: 41 5d                         popq    %r13
// d3: 41 5e                         popq    %r14
// d5: 41 5f                         popq    %r15
// d7: ff e0                         jmpq    *%rax
// d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000db:  R_X86_64_64  PyExc_TypeError
// e3: 48 8b 31                      movq    (%rcx), %rsi
// e6: 48 8b 48 18                   movq    0x18(%rax), %rcx
// ea: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000f6:  R_X86_64_64  _PyErr_Format
// fe: 4c 89 e7                      movq    %r12, %rdi
// 101: 31 c0                         xorl    %eax, %eax
// 103: 41 ff d0                      callq   *%r8
// 106: 49 8b 07                      movq    (%r15), %rax
// 109: 48 85 c0                      testq   %rax, %rax
// 10c: 7e 36                         jle     0x144 <_JIT_ENTRY+0x144>
// 10e: 85 c0                         testl   %eax, %eax
// 110: 79 5b                         jns     0x16d <_JIT_ENTRY+0x16d>
// 112: e9 0d 01 00 00                jmp     0x224 <_JIT_ENTRY+0x224>
// 117: 4c 29 f3                      subq    %r14, %rbx
// 11a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 11e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 122: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 126: 49 8b 06                      movq    (%r14), %rax
// 129: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012b:  R_X86_64_64  _JIT_TARGET
// 133: 89 c9                         movl    %ecx, %ecx
// 135: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 139: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 13f: e9 f5 00 00 00                jmp     0x239 <_JIT_ENTRY+0x239>
// 144: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000146:  R_X86_64_64  .rodata.str1.1
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_NegativeRefcount
// 158: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 15d: 4c 89 fa                      movq    %r15, %rdx
// 160: ff d0                         callq   *%rax
// 162: 49 8b 07                      movq    (%r15), %rax
// 165: 85 c0                         testl   %eax, %eax
// 167: 0f 88 b7 00 00 00             js      0x224 <_JIT_ENTRY+0x224>
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 177: ff d0                         callq   *%rax
// 179: 49 ff 0f                      decq    (%r15)
// 17c: 0f 85 a2 00 00 00             jne     0x224 <_JIT_ENTRY+0x224>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: 4c 89 ff                      movq    %r15, %rdi
// 18f: ff d0                         callq   *%rax
// 191: e9 8e 00 00 00                jmp     0x224 <_JIT_ENTRY+0x224>
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  PyExc_TypeError
// 1a0: 48 8b 31                      movq    (%rcx), %rsi
// 1a3: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1a7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a9:  R_X86_64_64  .rodata.str1.1+0x7a
// 1b1: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001b3:  R_X86_64_64  _PyErr_Format
// 1bb: 4c 89 e7                      movq    %r12, %rdi
// 1be: 31 c0                         xorl    %eax, %eax
// 1c0: 41 ff d0                      callq   *%r8
// 1c3: 49 8b 45 00                   movq    (%r13), %rax
// 1c7: 48 85 c0                      testq   %rax, %rax
// 1ca: 7f 22                         jg      0x1ee <_JIT_ENTRY+0x1ee>
// 1cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ce:  R_X86_64_64  .rodata.str1.1
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_NegativeRefcount
// 1e0: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 1e5: 4c 89 ea                      movq    %r13, %rdx
// 1e8: ff d0                         callq   *%rax
// 1ea: 49 8b 45 00                   movq    (%r13), %rax
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 32                         js      0x224 <_JIT_ENTRY+0x224>
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 ff 4d 00                   decq    (%r13)
// 202: 4d 89 ef                      movq    %r13, %r15
// 205: 75 1d                         jne     0x224 <_JIT_ENTRY+0x224>
// 207: e9 76 ff ff ff                jmp     0x182 <_JIT_ENTRY+0x182>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_Dealloc
// 216: 4c 89 ff                      movq    %r15, %rdi
// 219: ff d0                         callq   *%rax
// 21b: 4d 85 ed                      testq   %r13, %r13
// 21e: 0f 85 77 fe ff ff             jne     0x9b <_JIT_ENTRY+0x9b>
// 224: 48 83 c3 f8                   addq    $-0x8, %rbx
// 228: 4c 29 f3                      subq    %r14, %rbx
// 22b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 22f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 233: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 237: 31 c0                         xorl    %eax, %eax
// 239: 5b                            popq    %rbx
// 23a: 41 5c                         popq    %r12
// 23c: 41 5d                         popq    %r13
// 23e: 41 5e                         popq    %r14
// 240: 41 5f                         popq    %r15
// 242: c3                            retq
// 243: 
static const unsigned char _CHECK_VALIDITYplus_GET_AITER_code_body[580] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0xf4, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd4, 0x4c, 0x8b, 0x7b, 0xf8, 0x49, 0x8b, 0x47, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x9e, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x91, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd1, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x7a, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x89, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0xdf, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x36, 0x85, 0xc0, 0x79, 0x5b, 0xe9, 0x0d, 0x01, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xf5, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0xb7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x4d, 0x89, 0xef, 0x75, 0x1d, 0xe9, 0x76, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x77, 0xfe, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_GET_AITER_code_holes[21] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
// d2: 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_GET_AITER_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_GET_AITER_data_holes[1];

// _CHECK_VALIDITYplus_GET_ANEXT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GET_ANEXT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 0f 84 bb 00 00 00             je      0xde <_JIT_ENTRY+0xde>
// 23: 49 89 d7                      movq    %rdx, %r15
// 26: 48 8b 7b f8                   movq    -0x8(%rbx), %rdi
// 2a: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 2e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000030:  R_X86_64_64  PyAsyncGen_Type
// 38: 48 39 c8                      cmpq    %rcx, %rax
// 3b: 0f 84 fc 00 00 00             je      0x13d <_JIT_ENTRY+0x13d>
// 41: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 45: 48 85 c9                      testq   %rcx, %rcx
// 48: 0f 84 bd 00 00 00             je      0x10b <_JIT_ENTRY+0x10b>
// 4e: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 52: 48 85 c9                      testq   %rcx, %rcx
// 55: 0f 84 b0 00 00 00             je      0x10b <_JIT_ENTRY+0x10b>
// 5b: ff d1                         callq   *%rcx
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 0f 84 8d 01 00 00             je      0x1f3 <_JIT_ENTRY+0x1f3>
// 66: 49 89 c4                      movq    %rax, %r12
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 73: 4c 89 e7                      movq    %r12, %rdi
// 76: ff d0                         callq   *%rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 0f 84 f4 00 00 00             je      0x175 <_JIT_ENTRY+0x175>
// 81: 49 89 c5                      movq    %rax, %r13
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f 22                         jg      0xaf <_JIT_ENTRY+0xaf>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 0f 88 99 00 00 00             js      0x150 <_JIT_ENTRY+0x150>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c1: ff d0                         callq   *%rax
// c3: 49 ff 0c 24                   decq    (%r12)
// c7: 0f 85 83 00 00 00             jne     0x150 <_JIT_ENTRY+0x150>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_Dealloc
// d7: 4c 89 e7                      movq    %r12, %rdi
// da: ff d0                         callq   *%rax
// dc: eb 72                         jmp     0x150 <_JIT_ENTRY+0x150>
// de: 4c 29 f3                      subq    %r14, %rbx
// e1: 48 83 c3 b8                   addq    $-0x48, %rbx
// e5: 48 c1 eb 03                   shrq    $0x3, %rbx
// e9: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// ed: 49 8b 06                      movq    (%r14), %rax
// f0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f2:  R_X86_64_64  _JIT_TARGET
// fa: 89 c9                         movl    %ecx, %ecx
// fc: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 100: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 106: e9 f9 00 00 00                jmp     0x204 <_JIT_ENTRY+0x204>
// 10b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010d:  R_X86_64_64  PyExc_TypeError
// 115: 48 8b 31                      movq    (%rcx), %rsi
// 118: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 11c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000011e:  R_X86_64_64  .rodata.str1.1+0x39
// 126: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000128:  R_X86_64_64  _PyErr_Format
// 130: 4c 89 ff                      movq    %r15, %rdi
// 133: 31 c0                         xorl    %eax, %eax
// 135: 41 ff d0                      callq   *%r8
// 138: e9 b6 00 00 00                jmp     0x1f3 <_JIT_ENTRY+0x1f3>
// 13d: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 141: ff 50 10                      callq   *0x10(%rax)
// 144: 49 89 c5                      movq    %rax, %r13
// 147: 48 85 c0                      testq   %rax, %rax
// 14a: 0f 84 a3 00 00 00             je      0x1f3 <_JIT_ENTRY+0x1f3>
// 150: 4c 89 2b                      movq    %r13, (%rbx)
// 153: 48 83 c3 08                   addq    $0x8, %rbx
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _JIT_CONTINUE
// 161: 4c 89 f7                      movq    %r14, %rdi
// 164: 48 89 de                      movq    %rbx, %rsi
// 167: 4c 89 fa                      movq    %r15, %rdx
// 16a: 5b                            popq    %rbx
// 16b: 41 5c                         popq    %r12
// 16d: 41 5d                         popq    %r13
// 16f: 41 5e                         popq    %r14
// 171: 41 5f                         popq    %r15
// 173: ff e0                         jmpq    *%rax
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  PyExc_TypeError
// 17f: 48 8b 38                      movq    (%rax), %rdi
// 182: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 187: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 18b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1+0x7c
// 195: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000197:  R_X86_64_64  _PyErr_FormatFromCause
// 19f: 31 c0                         xorl    %eax, %eax
// 1a1: ff d1                         callq   *%rcx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 22                         jg      0x1ce <_JIT_ENTRY+0x1ce>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be f8 02 00 00                movl    $0x2f8, %esi            # imm = 0x2F8
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 8b 04 24                   movq    (%r12), %rax
// 1ce: 85 c0                         testl   %eax, %eax
// 1d0: 78 21                         js      0x1f3 <_JIT_ENTRY+0x1f3>
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1dc: ff d0                         callq   *%rax
// 1de: 49 ff 0c 24                   decq    (%r12)
// 1e2: 75 0f                         jne     0x1f3 <_JIT_ENTRY+0x1f3>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_Dealloc
// 1ee: 4c 89 e7                      movq    %r12, %rdi
// 1f1: ff d0                         callq   *%rax
// 1f3: 4c 29 f3                      subq    %r14, %rbx
// 1f6: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1fa: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1fe: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 202: 31 c0                         xorl    %eax, %eax
// 204: 5b                            popq    %rbx
// 205: 41 5c                         popq    %r12
// 207: 41 5d                         popq    %r13
// 209: 41 5e                         popq    %r14
// 20b: 41 5f                         popq    %r15
// 20d: c3                            retq
// 20e: 
static const unsigned char _CHECK_VALIDITYplus_GET_ANEXT_code_body[527] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x7b, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xbd, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf4, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x99, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x72, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xf9, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xb6, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x50, 0xff, 0x50, 0x10, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_GET_ANEXT_code_holes[20] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x30, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
// ba: 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_GET_ANEXT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_GET_ANEXT_data_holes[1];

// _CHECK_VALIDITYplus_GET_AWAITABLE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GET_AWAITABLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 34                         je      0x55 <_JIT_ENTRY+0x55>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 28: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002a:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 32: 4c 89 ef                      movq    %r13, %rdi
// 35: ff d0                         callq   *%rax
// 37: 49 89 c4                      movq    %rax, %r12
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 74 43                         je      0x82 <_JIT_ENTRY+0x82>
// 3f: 49 8b 45 00                   movq    (%r13), %rax
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 7e 63                         jle     0xab <_JIT_ENTRY+0xab>
// 48: 85 c0                         testl   %eax, %eax
// 4a: 0f 89 81 00 00 00             jns     0xd1 <_JIT_ENTRY+0xd1>
// 50: e9 92 00 00 00                jmp     0xe7 <_JIT_ENTRY+0xe7>
// 55: 4c 29 f3                      subq    %r14, %rbx
// 58: 48 83 c3 b8                   addq    $-0x48, %rbx
// 5c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 60: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000069:  R_X86_64_64  _JIT_TARGET
// 71: 89 c9                         movl    %ecx, %ecx
// 73: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 77: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7d: e9 a7 01 00 00                jmp     0x229 <_JIT_ENTRY+0x229>
// 82: 49 8b 75 08                   movq    0x8(%r13), %rsi
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _JIT_OPARG
// 90: 0f b7 d0                      movzwl  %ax, %edx
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _PyEval_FormatAwaitableError
// 9d: 4c 89 ff                      movq    %r15, %rdi
// a0: ff d0                         callq   *%rax
// a2: 49 8b 45 00                   movq    (%r13), %rax
// a6: 48 85 c0                      testq   %rax, %rax
// a9: 7f 9d                         jg      0x48 <_JIT_ENTRY+0x48>
// ab: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ad:  R_X86_64_64  .rodata.str1.1
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_NegativeRefcount
// bf: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// c4: 4c 89 ea                      movq    %r13, %rdx
// c7: ff d0                         callq   *%rax
// c9: 49 8b 45 00                   movq    (%r13), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 16                         js      0xe7 <_JIT_ENTRY+0xe7>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 4d 00                   decq    (%r13)
// e1: 0f 84 15 01 00 00             je      0x1fc <_JIT_ENTRY+0x1fc>
// e7: 4d 85 e4                      testq   %r12, %r12
// ea: 0f 84 24 01 00 00             je      0x214 <_JIT_ENTRY+0x214>
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  PyCoro_Type
// fa: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// ff: 74 27                         je      0x128 <_JIT_ENTRY+0x128>
// 101: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _JIT_CONTINUE
// 10f: 4c 89 f7                      movq    %r14, %rdi
// 112: 48 89 de                      movq    %rbx, %rsi
// 115: 4c 89 fa                      movq    %r15, %rdx
// 118: 48 83 c4 08                   addq    $0x8, %rsp
// 11c: 5b                            popq    %rbx
// 11d: 41 5c                         popq    %r12
// 11f: 41 5d                         popq    %r13
// 121: 41 5e                         popq    %r14
// 123: 41 5f                         popq    %r15
// 125: 5d                            popq    %rbp
// 126: ff e0                         jmpq    *%rax
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _PyGen_yf
// 132: 4c 89 e7                      movq    %r12, %rdi
// 135: ff d0                         callq   *%rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 74 c5                         je      0x101 <_JIT_ENTRY+0x101>
// 13c: 49 89 c5                      movq    %rax, %r13
// 13f: 48 8b 00                      movq    (%rax), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 7f 22                         jg      0x169 <_JIT_ENTRY+0x169>
// 147: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 160: 4c 89 ea                      movq    %r13, %rdx
// 163: ff d0                         callq   *%rax
// 165: 49 8b 45 00                   movq    (%r13), %rax
// 169: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 17                         js      0x18e <_JIT_ENTRY+0x18e>
// 177: ff d5                         callq   *%rbp
// 179: 49 ff 4d 00                   decq    (%r13)
// 17d: 75 0f                         jne     0x18e <_JIT_ENTRY+0x18e>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 ef                      movq    %r13, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: 49 8b 04 24                   movq    (%r12), %rax
// 192: 48 85 c0                      testq   %rax, %rax
// 195: 7f 22                         jg      0x1b9 <_JIT_ENTRY+0x1b9>
// 197: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000199:  R_X86_64_64  .rodata.str1.1
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NegativeRefcount
// 1ab: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 1b0: 4c 89 e2                      movq    %r12, %rdx
// 1b3: ff d0                         callq   *%rax
// 1b5: 49 8b 04 24                   movq    (%r12), %rax
// 1b9: 85 c0                         testl   %eax, %eax
// 1bb: 78 17                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1bd: ff d5                         callq   *%rbp
// 1bf: 49 ff 0c 24                   decq    (%r12)
// 1c3: 75 0f                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_Dealloc
// 1cf: 4c 89 e7                      movq    %r12, %rdi
// 1d2: ff d0                         callq   *%rax
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  PyExc_RuntimeError
// 1de: 48 8b 30                      movq    (%rax), %rsi
// 1e1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001e3:  R_X86_64_64  .rodata.str1.1+0x39
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _PyErr_SetString
// 1f5: 4c 89 ff                      movq    %r15, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: eb 18                         jmp     0x214 <_JIT_ENTRY+0x214>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_Dealloc
// 206: 4c 89 ef                      movq    %r13, %rdi
// 209: ff d0                         callq   *%rax
// 20b: 4d 85 e4                      testq   %r12, %r12
// 20e: 0f 85 dc fe ff ff             jne     0xf0 <_JIT_ENTRY+0xf0>
// 214: 48 83 c3 f8                   addq    $-0x8, %rbx
// 218: 4c 29 f3                      subq    %r14, %rbx
// 21b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 21f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 223: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 227: 31 c0                         xorl    %eax, %eax
// 229: 48 83 c4 08                   addq    $0x8, %rsp
// 22d: 5b                            popq    %rbx
// 22e: 41 5c                         popq    %r12
// 230: 41 5d                         popq    %r13
// 232: 41 5e                         popq    %r14
// 234: 41 5f                         popq    %r15
// 236: 5d                            popq    %rbp
// 237: c3                            retq
// 238: 
static const unsigned char _CHECK_VALIDITYplus_GET_AWAITABLE_code_body[569] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x34, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x85, 0xc0, 0x74, 0x43, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x92, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xa7, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x9d, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x15, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x24, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x27, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xc5, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x85, 0xdc, 0xfe, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_GET_AWAITABLE_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00'
// 5c: 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_GET_AWAITABLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_GET_AWAITABLE_data_holes[1];

// _CHECK_VALIDITYplus_GET_ITER
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GET_ITER.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 28                         je      0x47 <_JIT_ENTRY+0x47>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  PyObject_GetIter
// 30: 4c 89 ef                      movq    %r13, %rdi
// 33: ff d0                         callq   *%rax
// 35: 49 89 c4                      movq    %rax, %r12
// 38: 49 8b 45 00                   movq    (%r13), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 33                         jle     0x74 <_JIT_ENTRY+0x74>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 55                         jns     0x9a <_JIT_ENTRY+0x9a>
// 45: eb 65                         jmp     0xac <_JIT_ENTRY+0xac>
// 47: 4c 29 f3                      subq    %r14, %rbx
// 4a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 4e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 52: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 56: 49 8b 06                      movq    (%r14), %rax
// 59: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005b:  R_X86_64_64  _JIT_TARGET
// 63: 89 c9                         movl    %ecx, %ecx
// 65: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 69: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6f: e9 88 00 00 00                jmp     0xfc <_JIT_ENTRY+0xfc>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 8d: 4c 89 ea                      movq    %r13, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 45 00                   movq    (%r13), %rax
// 96: 85 c0                         testl   %eax, %eax
// 98: 78 12                         js      0xac <_JIT_ENTRY+0xac>
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a4: ff d0                         callq   *%rax
// a6: 49 ff 4d 00                   decq    (%r13)
// aa: 74 27                         je      0xd3 <_JIT_ENTRY+0xd3>
// ac: 4d 85 e4                      testq   %r12, %r12
// af: 74 36                         je      0xe7 <_JIT_ENTRY+0xe7>
// b1: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _JIT_CONTINUE
// bf: 4c 89 f7                      movq    %r14, %rdi
// c2: 48 89 de                      movq    %rbx, %rsi
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: 5b                            popq    %rbx
// c9: 41 5c                         popq    %r12
// cb: 41 5d                         popq    %r13
// cd: 41 5e                         popq    %r14
// cf: 41 5f                         popq    %r15
// d1: ff e0                         jmpq    *%rax
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_Dealloc
// dd: 4c 89 ef                      movq    %r13, %rdi
// e0: ff d0                         callq   *%rax
// e2: 4d 85 e4                      testq   %r12, %r12
// e5: 75 ca                         jne     0xb1 <_JIT_ENTRY+0xb1>
// e7: 48 83 c3 f8                   addq    $-0x8, %rbx
// eb: 4c 29 f3                      subq    %r14, %rbx
// ee: 48 83 c3 b8                   addq    $-0x48, %rbx
// f2: 48 c1 eb 03                   shrq    $0x3, %rbx
// f6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// fa: 31 c0                         xorl    %eax, %eax
// fc: 5b                            popq    %rbx
// fd: 41 5c                         popq    %r12
// ff: 41 5d                         popq    %r13
// 101: 41 5e                         popq    %r14
// 103: 41 5f                         popq    %r15
// 105: c3                            retq
// 106: 
static const unsigned char _CHECK_VALIDITYplus_GET_ITER_code_body[263] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x28, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x88, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x27, 0x4d, 0x85, 0xe4, 0x74, 0x36, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xca, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_GET_ITER_code_holes[9] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_GET_ITER_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_GET_ITER_data_holes[1];

// _CHECK_VALIDITYplus_GET_LEN
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GET_LEN.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 89 f3                      movq    %rsi, %rbx
// 8: 49 89 fe                      movq    %rdi, %r14
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_EXECUTOR
// 15: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 19: 74 4d                         je      0x68 <_JIT_ENTRY+0x68>
// 1b: 49 89 d7                      movq    %rdx, %r15
// 1e: 48 8b 7b f8                   movq    -0x8(%rbx), %rdi
// 22: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000024:  R_X86_64_64  PyObject_Size
// 2c: ff d0                         callq   *%rax
// 2e: 48 85 c0                      testq   %rax, %rax
// 31: 78 61                         js      0x94 <_JIT_ENTRY+0x94>
// 33: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000035:  R_X86_64_64  PyLong_FromSsize_t
// 3d: 48 89 c7                      movq    %rax, %rdi
// 40: ff d1                         callq   *%rcx
// 42: 48 85 c0                      testq   %rax, %rax
// 45: 74 4d                         je      0x94 <_JIT_ENTRY+0x94>
// 47: 48 89 03                      movq    %rax, (%rbx)
// 4a: 48 83 c3 08                   addq    $0x8, %rbx
// 4e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000050:  R_X86_64_64  _JIT_CONTINUE
// 58: 4c 89 f7                      movq    %r14, %rdi
// 5b: 48 89 de                      movq    %rbx, %rsi
// 5e: 4c 89 fa                      movq    %r15, %rdx
// 61: 5b                            popq    %rbx
// 62: 41 5e                         popq    %r14
// 64: 41 5f                         popq    %r15
// 66: ff e0                         jmpq    *%rax
// 68: 4c 29 f3                      subq    %r14, %rbx
// 6b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 73: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 77: 49 8b 06                      movq    (%r14), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_TARGET
// 84: 89 c9                         movl    %ecx, %ecx
// 86: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 8e: 5b                            popq    %rbx
// 8f: 41 5e                         popq    %r14
// 91: 41 5f                         popq    %r15
// 93: c3                            retq
// 94: 4c 29 f3                      subq    %r14, %rbx
// 97: 48 83 c3 b8                   addq    $-0x48, %rbx
// 9b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 9f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// a3: 31 c0                         xorl    %eax, %eax
// a5: 5b                            popq    %rbx
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: c3                            retq
// ab: 
static const unsigned char _CHECK_VALIDITYplus_GET_LEN_code_body[172] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x4d, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x7b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0x61, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x74, 0x4d, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_GET_LEN_code_holes[6] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x24, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x35, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x50, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GET_LEN_data_body[1];
static const Hole _CHECK_VALIDITYplus_GET_LEN_data_holes[1];

// _CHECK_VALIDITYplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GET_YIELD_FROM_ITER.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 0f 84 a2 00 00 00             je      0xc5 <_JIT_ENTRY+0xc5>
// 23: 49 89 d7                      movq    %rdx, %r15
// 26: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 2a: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 2f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000031:  R_X86_64_64  PyCoro_Type
// 39: 48 39 c8                      cmpq    %rcx, %rax
// 3c: 0f 84 ad 00 00 00             je      0xef <_JIT_ENTRY+0xef>
// 42: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000044:  R_X86_64_64  PyGen_Type
// 4c: 48 39 c8                      cmpq    %rcx, %rax
// 4f: 0f 84 a8 00 00 00             je      0xfd <_JIT_ENTRY+0xfd>
// 55: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000057:  R_X86_64_64  PyObject_GetIter
// 5f: 4c 89 e7                      movq    %r12, %rdi
// 62: ff d0                         callq   *%rax
// 64: 48 85 c0                      testq   %rax, %rax
// 67: 0f 84 d8 00 00 00             je      0x145 <_JIT_ENTRY+0x145>
// 6d: 49 89 c5                      movq    %rax, %r13
// 70: 49 8b 04 24                   movq    (%r12), %rax
// 74: 48 85 c0                      testq   %rax, %rax
// 77: 7f 22                         jg      0x9b <_JIT_ENTRY+0x9b>
// 79: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 92: 4c 89 e2                      movq    %r12, %rdx
// 95: ff d0                         callq   *%rax
// 97: 49 8b 04 24                   movq    (%r12), %rax
// 9b: 85 c0                         testl   %eax, %eax
// 9d: 78 21                         js      0xc0 <_JIT_ENTRY+0xc0>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a9: ff d0                         callq   *%rax
// ab: 49 ff 0c 24                   decq    (%r12)
// af: 75 0f                         jne     0xc0 <_JIT_ENTRY+0xc0>
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_Dealloc
// bb: 4c 89 e7                      movq    %r12, %rdi
// be: ff d0                         callq   *%rax
// c0: 4d 89 ec                      movq    %r13, %r12
// c3: eb 38                         jmp     0xfd <_JIT_ENTRY+0xfd>
// c5: 4c 29 f3                      subq    %r14, %rbx
// c8: 48 83 c3 b8                   addq    $-0x48, %rbx
// cc: 48 c1 eb 03                   shrq    $0x3, %rbx
// d0: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d9:  R_X86_64_64  _JIT_TARGET
// e1: 89 c9                         movl    %ecx, %ecx
// e3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// e7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// ed: eb 67                         jmp     0x156 <_JIT_ENTRY+0x156>
// ef: 49 8b 06                      movq    (%r14), %rax
// f2: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// f6: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// fb: 74 22                         je      0x11f <_JIT_ENTRY+0x11f>
// fd: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_CONTINUE
// 10b: 4c 89 f7                      movq    %r14, %rdi
// 10e: 48 89 de                      movq    %rbx, %rsi
// 111: 4c 89 fa                      movq    %r15, %rdx
// 114: 5b                            popq    %rbx
// 115: 41 5c                         popq    %r12
// 117: 41 5d                         popq    %r13
// 119: 41 5e                         popq    %r14
// 11b: 41 5f                         popq    %r15
// 11d: ff e0                         jmpq    *%rax
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  PyExc_TypeError
// 129: 48 8b 30                      movq    (%rax), %rsi
// 12c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000012e:  R_X86_64_64  .rodata.str1.1+0x39
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _PyErr_SetString
// 140: 4c 89 ff                      movq    %r15, %rdi
// 143: ff d0                         callq   *%rax
// 145: 4c 29 f3                      subq    %r14, %rbx
// 148: 48 83 c3 b8                   addq    $-0x48, %rbx
// 14c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 150: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 154: 31 c0                         xorl    %eax, %eax
// 156: 5b                            popq    %rbx
// 157: 41 5c                         popq    %r12
// 159: 41 5d                         popq    %r13
// 15b: 41 5e                         popq    %r14
// 15d: 41 5f                         popq    %r15
// 15f: c3                            retq
// 160: 
static const unsigned char _CHECK_VALIDITYplus_GET_YIELD_FROM_ITER_code_body[353] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0xeb, 0x38, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x67, 0x49, 0x8b, 0x06, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x22, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_GET_YIELD_FROM_ITER_code_holes[14] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
// 7d: 00 00 00
static const unsigned char _CHECK_VALIDITYplus_GET_YIELD_FROM_ITER_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_GET_YIELD_FROM_ITER_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_BOTH_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 1e                         je      0x2e <_JIT_ENTRY+0x2e>
// 10: 48 8b 4e f0                   movq    -0x10(%rsi), %rcx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  PyFloat_Type
// 1e: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 22: 75 0a                         jne     0x2e <_JIT_ENTRY+0x2e>
// 24: 48 8b 4e f8                   movq    -0x8(%rsi), %rcx
// 28: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 2c: 74 28                         je      0x56 <_JIT_ENTRY+0x56>
// 2e: 48 29 fe                      subq    %rdi, %rsi
// 31: 48 83 c6 b8                   addq    $-0x48, %rsi
// 35: 48 c1 ee 03                   shrq    $0x3, %rsi
// 39: 89 77 40                      movl    %esi, 0x40(%rdi)
// 3c: 48 8b 07                      movq    (%rdi), %rax
// 3f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000041:  R_X86_64_64  _JIT_TARGET
// 49: 89 c9                         movl    %ecx, %ecx
// 4b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 4f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 55: c3                            retq
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _JIT_CONTINUE
// 60: ff e0                         jmpq    *%rax
// 62: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_BOTH_FLOAT_code_body[99] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x1e, 0x48, 0x8b, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x0a, 0x48, 0x8b, 0x4e, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_GUARD_BOTH_FLOAT_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_BOTH_FLOAT_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_BOTH_FLOAT_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_BOTH_INT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_BOTH_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 1e                         je      0x2e <_JIT_ENTRY+0x2e>
// 10: 48 8b 4e f0                   movq    -0x10(%rsi), %rcx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  PyLong_Type
// 1e: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 22: 75 0a                         jne     0x2e <_JIT_ENTRY+0x2e>
// 24: 48 8b 4e f8                   movq    -0x8(%rsi), %rcx
// 28: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 2c: 74 28                         je      0x56 <_JIT_ENTRY+0x56>
// 2e: 48 29 fe                      subq    %rdi, %rsi
// 31: 48 83 c6 b8                   addq    $-0x48, %rsi
// 35: 48 c1 ee 03                   shrq    $0x3, %rsi
// 39: 89 77 40                      movl    %esi, 0x40(%rdi)
// 3c: 48 8b 07                      movq    (%rdi), %rax
// 3f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000041:  R_X86_64_64  _JIT_TARGET
// 49: 89 c9                         movl    %ecx, %ecx
// 4b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 4f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 55: c3                            retq
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _JIT_CONTINUE
// 60: ff e0                         jmpq    *%rax
// 62: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_BOTH_INT_code_body[99] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x1e, 0x48, 0x8b, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x0a, 0x48, 0x8b, 0x4e, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_GUARD_BOTH_INT_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_BOTH_INT_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_BOTH_INT_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_BOTH_UNICODE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 1e                         je      0x2e <_JIT_ENTRY+0x2e>
// 10: 48 8b 4e f0                   movq    -0x10(%rsi), %rcx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  PyUnicode_Type
// 1e: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 22: 75 0a                         jne     0x2e <_JIT_ENTRY+0x2e>
// 24: 48 8b 4e f8                   movq    -0x8(%rsi), %rcx
// 28: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 2c: 74 28                         je      0x56 <_JIT_ENTRY+0x56>
// 2e: 48 29 fe                      subq    %rdi, %rsi
// 31: 48 83 c6 b8                   addq    $-0x48, %rsi
// 35: 48 c1 ee 03                   shrq    $0x3, %rsi
// 39: 89 77 40                      movl    %esi, 0x40(%rdi)
// 3c: 48 8b 07                      movq    (%rdi), %rax
// 3f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000041:  R_X86_64_64  _JIT_TARGET
// 49: 89 c9                         movl    %ecx, %ecx
// 4b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 4f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 55: c3                            retq
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _JIT_CONTINUE
// 60: ff e0                         jmpq    *%rax
// 62: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_BOTH_UNICODE_code_body[99] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x1e, 0x48, 0x8b, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x0a, 0x48, 0x8b, 0x4e, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_GUARD_BOTH_UNICODE_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_BOTH_UNICODE_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_BOTH_UNICODE_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_BUILTINS_VERSION.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 36                         je      0x46 <_JIT_ENTRY+0x46>
// 10: 48 8b 47 20                   movq    0x20(%rdi), %rax
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  PyDict_Type
// 1e: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 22: 75 22                         jne     0x46 <_JIT_ENTRY+0x46>
// 24: 48 8b 40 20                   movq    0x20(%rax), %rax
// 28: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002a:  R_X86_64_64  _JIT_OPERAND
// 32: 0f b7 c9                      movzwl  %cx, %ecx
// 35: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 38: 75 0c                         jne     0x46 <_JIT_ENTRY+0x46>
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _JIT_CONTINUE
// 44: ff e0                         jmpq    *%rax
// 46: 48 29 fe                      subq    %rdi, %rsi
// 49: 48 83 c6 b8                   addq    $-0x48, %rsi
// 4d: 48 c1 ee 03                   shrq    $0x3, %rsi
// 51: 89 77 40                      movl    %esi, 0x40(%rdi)
// 54: 48 8b 07                      movq    (%rdi), %rax
// 57: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000059:  R_X86_64_64  _JIT_TARGET
// 61: 89 c9                         movl    %ecx, %ecx
// 63: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 67: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6d: c3                            retq
// 6e: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_BUILTINS_VERSION_code_body[111] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x36, 0x48, 0x8b, 0x47, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x22, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_GUARD_BUILTINS_VERSION_code_holes[6] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_BUILTINS_VERSION_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_DORV_VALUES
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_DORV_VALUES.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 0a                         je      0x1a <_JIT_ENTRY+0x1a>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// 18: 75 28                         jne     0x42 <_JIT_ENTRY+0x42>
// 1a: 48 29 fe                      subq    %rdi, %rsi
// 1d: 48 83 c6 b8                   addq    $-0x48, %rsi
// 21: 48 c1 ee 03                   shrq    $0x3, %rsi
// 25: 89 77 40                      movl    %esi, 0x40(%rdi)
// 28: 48 8b 07                      movq    (%rdi), %rax
// 2b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002d:  R_X86_64_64  _JIT_TARGET
// 35: 89 c9                         movl    %ecx, %ecx
// 37: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 3b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 41: c3                            retq
// 42: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000044:  R_X86_64_64  _JIT_CONTINUE
// 4c: ff e0                         jmpq    *%rax
// 4e: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_DORV_VALUES_code_body[79] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x0a, 0x48, 0x8b, 0x46, 0xf8, 0xf6, 0x40, 0xe8, 0x01, 0x75, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_GUARD_DORV_VALUES_code_holes[4] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_DORV_VALUES_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_DORV_VALUES_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 89 f3                      movq    %rsi, %rbx
// 8: 49 89 fe                      movq    %rdi, %r14
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_EXECUTOR
// 15: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 19: 74 3b                         je      0x56 <_JIT_ENTRY+0x56>
// 1b: 49 89 d7                      movq    %rdx, %r15
// 1e: 48 8b 7b f8                   movq    -0x8(%rbx), %rdi
// 22: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 26: 75 14                         jne     0x3c <_JIT_ENTRY+0x3c>
// 28: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 36: ff d0                         callq   *%rax
// 38: 84 c0                         testb   %al, %al
// 3a: 74 1a                         je      0x56 <_JIT_ENTRY+0x56>
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  _JIT_CONTINUE
// 46: 4c 89 f7                      movq    %r14, %rdi
// 49: 48 89 de                      movq    %rbx, %rsi
// 4c: 4c 89 fa                      movq    %r15, %rdx
// 4f: 5b                            popq    %rbx
// 50: 41 5e                         popq    %r14
// 52: 41 5f                         popq    %r15
// 54: ff e0                         jmpq    *%rax
// 56: 4c 29 f3                      subq    %r14, %rbx
// 59: 48 83 c3 b8                   addq    $-0x48, %rbx
// 5d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 61: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 65: 49 8b 06                      movq    (%r14), %rax
// 68: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006a:  R_X86_64_64  _JIT_TARGET
// 72: 89 c9                         movl    %ecx, %ecx
// 74: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 7c: 5b                            popq    %rbx
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[131] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3b, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x7b, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x1a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[5] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_GLOBALS_VERSION.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 36                         je      0x46 <_JIT_ENTRY+0x46>
// 10: 48 8b 47 18                   movq    0x18(%rdi), %rax
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  PyDict_Type
// 1e: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 22: 75 22                         jne     0x46 <_JIT_ENTRY+0x46>
// 24: 48 8b 40 20                   movq    0x20(%rax), %rax
// 28: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002a:  R_X86_64_64  _JIT_OPERAND
// 32: 0f b7 c9                      movzwl  %cx, %ecx
// 35: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 38: 75 0c                         jne     0x46 <_JIT_ENTRY+0x46>
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _JIT_CONTINUE
// 44: ff e0                         jmpq    *%rax
// 46: 48 29 fe                      subq    %rdi, %rsi
// 49: 48 83 c6 b8                   addq    $-0x48, %rsi
// 4d: 48 c1 ee 03                   shrq    $0x3, %rsi
// 51: 89 77 40                      movl    %esi, 0x40(%rdi)
// 54: 48 8b 07                      movq    (%rdi), %rax
// 57: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000059:  R_X86_64_64  _JIT_TARGET
// 61: 89 c9                         movl    %ecx, %ecx
// 63: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 67: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6d: c3                            retq
// 6e: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_GLOBALS_VERSION_code_body[111] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x36, 0x48, 0x8b, 0x47, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x22, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_GUARD_GLOBALS_VERSION_code_holes[6] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_GLOBALS_VERSION_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_IS_FALSE_POP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 20                         je      0x30 <_JIT_ENTRY+0x30>
// 10: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000012:  R_X86_64_64  _Py_TrueStruct
// 1a: 48 39 46 f8                   cmpq    %rax, -0x8(%rsi)
// 1e: 74 10                         je      0x30 <_JIT_ENTRY+0x30>
// 20: 48 83 c6 f8                   addq    $-0x8, %rsi
// 24: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000026:  R_X86_64_64  _JIT_CONTINUE
// 2e: ff e0                         jmpq    *%rax
// 30: 48 29 fe                      subq    %rdi, %rsi
// 33: 48 83 c6 b8                   addq    $-0x48, %rsi
// 37: 48 c1 ee 03                   shrq    $0x3, %rsi
// 3b: 89 77 40                      movl    %esi, 0x40(%rdi)
// 3e: 48 8b 07                      movq    (%rdi), %rax
// 41: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000043:  R_X86_64_64  _JIT_TARGET
// 4b: 89 c9                         movl    %ecx, %ecx
// 4d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 51: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 57: c3                            retq
// 58: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_IS_FALSE_POP_code_body[89] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x46, 0xf8, 0x74, 0x10, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_GUARD_IS_FALSE_POP_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x12, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x26, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_IS_FALSE_POP_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_IS_FALSE_POP_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_IS_NONE_POP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_IS_NONE_POP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 10                         je      0x20 <_JIT_ENTRY+0x20>
// 10: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000012:  R_X86_64_64  _Py_NoneStruct
// 1a: 48 39 46 f8                   cmpq    %rax, -0x8(%rsi)
// 1e: 74 28                         je      0x48 <_JIT_ENTRY+0x48>
// 20: 48 29 fe                      subq    %rdi, %rsi
// 23: 48 83 c6 b8                   addq    $-0x48, %rsi
// 27: 48 c1 ee 03                   shrq    $0x3, %rsi
// 2b: 89 77 40                      movl    %esi, 0x40(%rdi)
// 2e: 48 8b 07                      movq    (%rdi), %rax
// 31: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000033:  R_X86_64_64  _JIT_TARGET
// 3b: 89 c9                         movl    %ecx, %ecx
// 3d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 41: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 47: c3                            retq
// 48: 48 83 c6 f8                   addq    $-0x8, %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_CONTINUE
// 56: ff e0                         jmpq    *%rax
// 58: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_IS_NONE_POP_code_body[89] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x46, 0xf8, 0x74, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_GUARD_IS_NONE_POP_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x12, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_IS_NONE_POP_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_IS_NONE_POP_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_IS_NOT_NONE_POP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 29                         je      0x47 <_JIT_ENTRY+0x47>
// 1e: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 22: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000024:  R_X86_64_64  _Py_NoneStruct
// 2c: 49 39 c4                      cmpq    %rax, %r12
// 2f: 74 16                         je      0x47 <_JIT_ENTRY+0x47>
// 31: 49 89 d7                      movq    %rdx, %r15
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3e                         jle     0x7b <_JIT_ENTRY+0x7b>
// 3d: 48 83 c3 f8                   addq    $-0x8, %rbx
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 60                         jns     0xa5 <_JIT_ENTRY+0xa5>
// 45: eb 7f                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 47: 4c 29 f3                      subq    %r14, %rbx
// 4a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 4e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 52: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 56: 49 8b 06                      movq    (%r14), %rax
// 59: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005b:  R_X86_64_64  _JIT_TARGET
// 63: 89 c9                         movl    %ecx, %ecx
// 65: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 69: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6f: 48 83 c4 08                   addq    $0x8, %rsp
// 73: 5b                            popq    %rbx
// 74: 41 5c                         popq    %r12
// 76: 41 5e                         popq    %r14
// 78: 41 5f                         popq    %r15
// 7a: c3                            retq
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 94: 4c 89 e2                      movq    %r12, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 48 83 c3 f8                   addq    $-0x8, %rbx
// a1: 85 c0                         testl   %eax, %eax
// a3: 78 21                         js      0xc6 <_JIT_ENTRY+0xc6>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// af: ff d0                         callq   *%rax
// b1: 49 ff 0c 24                   decq    (%r12)
// b5: 75 0f                         jne     0xc6 <_JIT_ENTRY+0xc6>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_Dealloc
// c1: 4c 89 e7                      movq    %r12, %rdi
// c4: ff d0                         callq   *%rax
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _JIT_CONTINUE
// d0: 4c 89 f7                      movq    %r14, %rdi
// d3: 48 89 de                      movq    %rbx, %rsi
// d6: 4c 89 fa                      movq    %r15, %rdx
// d9: 48 83 c4 08                   addq    $0x8, %rsp
// dd: 5b                            popq    %rbx
// de: 41 5c                         popq    %r12
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: ff e0                         jmpq    *%rax
// e6: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_IS_NOT_NONE_POP_code_body[231] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x29, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x74, 0x16, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3e, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x79, 0x60, 0xeb, 0x7f, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_GUARD_IS_NOT_NONE_POP_code_holes[9] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x24, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_GUARD_IS_NOT_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_IS_TRUE_POP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 20                         je      0x30 <_JIT_ENTRY+0x30>
// 10: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000012:  R_X86_64_64  _Py_FalseStruct
// 1a: 48 39 46 f8                   cmpq    %rax, -0x8(%rsi)
// 1e: 74 10                         je      0x30 <_JIT_ENTRY+0x30>
// 20: 48 83 c6 f8                   addq    $-0x8, %rsi
// 24: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000026:  R_X86_64_64  _JIT_CONTINUE
// 2e: ff e0                         jmpq    *%rax
// 30: 48 29 fe                      subq    %rdi, %rsi
// 33: 48 83 c6 b8                   addq    $-0x48, %rsi
// 37: 48 c1 ee 03                   shrq    $0x3, %rsi
// 3b: 89 77 40                      movl    %esi, 0x40(%rdi)
// 3e: 48 8b 07                      movq    (%rdi), %rax
// 41: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000043:  R_X86_64_64  _JIT_TARGET
// 4b: 89 c9                         movl    %ecx, %ecx
// 4d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 51: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 57: c3                            retq
// 58: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_IS_TRUE_POP_code_body[89] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x46, 0xf8, 0x74, 0x10, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_GUARD_IS_TRUE_POP_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x12, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x26, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_IS_TRUE_POP_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_IS_TRUE_POP_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_KEYS_VERSION
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_KEYS_VERSION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 2a                         je      0x3a <_JIT_ENTRY+0x3a>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 8b 40 08                   movq    0x8(%rax), %rax
// 18: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// 1f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000021:  R_X86_64_64  _JIT_OPERAND
// 29: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 2c: 75 0c                         jne     0x3a <_JIT_ENTRY+0x3a>
// 2e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000030:  R_X86_64_64  _JIT_CONTINUE
// 38: ff e0                         jmpq    *%rax
// 3a: 48 29 fe                      subq    %rdi, %rsi
// 3d: 48 83 c6 b8                   addq    $-0x48, %rsi
// 41: 48 c1 ee 03                   shrq    $0x3, %rsi
// 45: 89 77 40                      movl    %esi, 0x40(%rdi)
// 48: 48 8b 07                      movq    (%rdi), %rax
// 4b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004d:  R_X86_64_64  _JIT_TARGET
// 55: 89 c9                         movl    %ecx, %ecx
// 57: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 5b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 61: c3                            retq
// 62: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_KEYS_VERSION_code_body[99] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x2a, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_GUARD_KEYS_VERSION_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x21, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x30, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_KEYS_VERSION_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_KEYS_VERSION_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_LIST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 23                         je      0x33 <_JIT_ENTRY+0x33>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 18: 48 85 c9                      testq   %rcx, %rcx
// 1b: 74 16                         je      0x33 <_JIT_ENTRY+0x33>
// 1d: 48 8b 40 10                   movq    0x10(%rax), %rax
// 21: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 25: 7d 0c                         jge     0x33 <_JIT_ENTRY+0x33>
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  _JIT_CONTINUE
// 31: ff e0                         jmpq    *%rax
// 33: 48 29 fe                      subq    %rdi, %rsi
// 36: 48 83 c6 b8                   addq    $-0x48, %rsi
// 3a: 48 c1 ee 03                   shrq    $0x3, %rsi
// 3e: 89 77 40                      movl    %esi, 0x40(%rdi)
// 41: 48 8b 07                      movq    (%rdi), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: c3                            retq
// 5b: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_LIST_code_body[92] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x23, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x16, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[4] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x29, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_LIST_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_RANGE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 17                         je      0x27 <_JIT_ENTRY+0x27>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// 19: 7e 0c                         jle     0x27 <_JIT_ENTRY+0x27>
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  _JIT_CONTINUE
// 25: ff e0                         jmpq    *%rax
// 27: 48 29 fe                      subq    %rdi, %rsi
// 2a: 48 83 c6 b8                   addq    $-0x48, %rsi
// 2e: 48 c1 ee 03                   shrq    $0x3, %rsi
// 32: 89 77 40                      movl    %esi, 0x40(%rdi)
// 35: 48 8b 07                      movq    (%rdi), %rax
// 38: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000003a:  R_X86_64_64  _JIT_TARGET
// 42: 89 c9                         movl    %ecx, %ecx
// 44: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 48: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 4e: c3                            retq
// 4f: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[80] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x17, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[4] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x1d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 23                         je      0x33 <_JIT_ENTRY+0x33>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 18: 48 85 c9                      testq   %rcx, %rcx
// 1b: 74 16                         je      0x33 <_JIT_ENTRY+0x33>
// 1d: 48 8b 40 10                   movq    0x10(%rax), %rax
// 21: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 25: 7d 0c                         jge     0x33 <_JIT_ENTRY+0x33>
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  _JIT_CONTINUE
// 31: ff e0                         jmpq    *%rax
// 33: 48 29 fe                      subq    %rdi, %rsi
// 36: 48 83 c6 b8                   addq    $-0x48, %rsi
// 3a: 48 c1 ee 03                   shrq    $0x3, %rsi
// 3e: 89 77 40                      movl    %esi, 0x40(%rdi)
// 41: 48 8b 07                      movq    (%rdi), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: c3                            retq
// 5b: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[92] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x23, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x16, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[4] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x29, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _CHECK_VALIDITYplus_GUARD_TYPE_VERSION
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_GUARD_TYPE_VERSION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 26                         je      0x36 <_JIT_ENTRY+0x36>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 8b 40 08                   movq    0x8(%rax), %rax
// 18: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 28: 75 0c                         jne     0x36 <_JIT_ENTRY+0x36>
// 2a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002c:  R_X86_64_64  _JIT_CONTINUE
// 34: ff e0                         jmpq    *%rax
// 36: 48 29 fe                      subq    %rdi, %rsi
// 39: 48 83 c6 b8                   addq    $-0x48, %rsi
// 3d: 48 c1 ee 03                   shrq    $0x3, %rsi
// 41: 89 77 40                      movl    %esi, 0x40(%rdi)
// 44: 48 8b 07                      movq    (%rdi), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: c3                            retq
// 5e: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_TYPE_VERSION_code_body[95] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x26, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_GUARD_TYPE_VERSION_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_GUARD_TYPE_VERSION_data_body[1];
static const Hole _CHECK_VALIDITYplus_GUARD_TYPE_VERSION_data_holes[1];

// _CHECK_VALIDITYplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 0f 84 90 00 00 00             je      0xb5 <_JIT_ENTRY+0xb5>
// 25: 48 89 14 24                   movq    %rdx, (%rsp)
// 29: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002b:  R_X86_64_64  _JIT_OPARG
// 33: 0f b7 c0                      movzwl  %ax, %eax
// 36: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 3b: 29 c1                         subl    %eax, %ecx
// 3d: 48 63 c1                      movslq  %ecx, %rax
// 40: 4c 8b 24 c3                   movq    (%rbx,%rax,8), %r12
// 44: 4d 8b 6c 24 18                movq    0x18(%r12), %r13
// 49: 41 8b 45 00                   movl    (%r13), %eax
// 4d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000004f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 57: ff c0                         incl    %eax
// 59: 74 07                         je      0x62 <_JIT_ENTRY+0x62>
// 5b: 41 89 45 00                   movl    %eax, (%r13)
// 5f: 41 ff d7                      callq   *%r15
// 62: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000064:  R_X86_64_64  _JIT_OPARG
// 6c: f7 d0                         notl    %eax
// 6e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 73: 48 98                         cltq
// 75: 4c 89 2c c3                   movq    %r13, (%rbx,%rax,8)
// 79: 49 8b 6c 24 10                movq    0x10(%r12), %rbp
// 7e: 8b 45 00                      movl    (%rbp), %eax
// 81: ff c0                         incl    %eax
// 83: 74 06                         je      0x8b <_JIT_ENTRY+0x8b>
// 85: 89 45 00                      movl    %eax, (%rbp)
// 88: 41 ff d7                      callq   *%r15
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _JIT_OPARG
// 95: 0f b7 c0                      movzwl  %ax, %eax
// 98: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 9d: 29 c1                         subl    %eax, %ecx
// 9f: 48 63 c1                      movslq  %ecx, %rax
// a2: 48 89 2c c3                   movq    %rbp, (%rbx,%rax,8)
// a6: 49 8b 04 24                   movq    (%r12), %rax
// aa: 48 85 c0                      testq   %rax, %rax
// ad: 7e 3d                         jle     0xec <_JIT_ENTRY+0xec>
// af: 85 c0                         testl   %eax, %eax
// b1: 79 5f                         jns     0x112 <_JIT_ENTRY+0x112>
// b3: eb 7e                         jmp     0x133 <_JIT_ENTRY+0x133>
// b5: 4c 29 f3                      subq    %r14, %rbx
// b8: 48 83 c3 b8                   addq    $-0x48, %rbx
// bc: 48 c1 eb 03                   shrq    $0x3, %rbx
// c0: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  _JIT_TARGET
// d1: 89 c9                         movl    %ecx, %ecx
// d3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// dd: 48 83 c4 08                   addq    $0x8, %rsp
// e1: 5b                            popq    %rbx
// e2: 41 5c                         popq    %r12
// e4: 41 5d                         popq    %r13
// e6: 41 5e                         popq    %r14
// e8: 41 5f                         popq    %r15
// ea: 5d                            popq    %rbp
// eb: c3                            retq
// ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ee:  R_X86_64_64  .rodata.str1.1
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  _Py_NegativeRefcount
// 100: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 105: 4c 89 e2                      movq    %r12, %rdx
// 108: ff d0                         callq   *%rax
// 10a: 49 8b 04 24                   movq    (%r12), %rax
// 10e: 85 c0                         testl   %eax, %eax
// 110: 78 21                         js      0x133 <_JIT_ENTRY+0x133>
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11c: ff d0                         callq   *%rax
// 11e: 49 ff 0c 24                   decq    (%r12)
// 122: 75 0f                         jne     0x133 <_JIT_ENTRY+0x133>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _Py_Dealloc
// 12e: 4c 89 e7                      movq    %r12, %rdi
// 131: ff d0                         callq   *%rax
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _JIT_OPARG
// 13d: 0f b7 c0                      movzwl  %ax, %eax
// 140: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 145: 29 c1                         subl    %eax, %ecx
// 147: 48 63 c9                      movslq  %ecx, %rcx
// 14a: 48 89 2c cb                   movq    %rbp, (%rbx,%rcx,8)
// 14e: f7 d0                         notl    %eax
// 150: 48 98                         cltq
// 152: 4c 89 2c c3                   movq    %r13, (%rbx,%rax,8)
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _JIT_CONTINUE
// 160: 4c 89 f7                      movq    %r14, %rdi
// 163: 48 89 de                      movq    %rbx, %rsi
// 166: 48 8b 14 24                   movq    (%rsp), %rdx
// 16a: 48 83 c4 08                   addq    $0x8, %rsp
// 16e: 5b                            popq    %rbx
// 16f: 41 5c                         popq    %r12
// 171: 41 5d                         popq    %r13
// 173: 41 5e                         popq    %r14
// 175: 41 5f                         popq    %r15
// 177: 5d                            popq    %rbp
// 178: ff e0                         jmpq    *%rax
// 17a: 
static const unsigned char _CHECK_VALIDITYplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[379] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x48, 0x89, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x8b, 0x24, 0xc3, 0x4d, 0x8b, 0x6c, 0x24, 0x18, 0x41, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x07, 0x41, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x89, 0x2c, 0xc3, 0x49, 0x8b, 0x6c, 0x24, 0x10, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x89, 0x2c, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3d, 0x85, 0xc0, 0x79, 0x5f, 0xeb, 0x7e, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x48, 0x89, 0x2c, 0xcb, 0xf7, 0xd0, 0x48, 0x98, 0x4c, 0x89, 0x2c, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _CHECK_VALIDITYplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_INIT_CALL_PY_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 0f 84 1f 01 00 00             je      0x144 <_JIT_ENTRY+0x144>
// 25: 49 89 d7                      movq    %rdx, %r15
// 28: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002a:  R_X86_64_64  _JIT_OPARG
// 32: 0f b7 c0                      movzwl  %ax, %eax
// 35: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 3a: 29 c1                         subl    %eax, %ecx
// 3c: f7 d0                         notl    %eax
// 3e: 48 63 d0                      movslq  %eax, %rdx
// 41: 48 63 c1                      movslq  %ecx, %rax
// 44: 4d 8b 24 c6                   movq    (%r14,%rax,8), %r12
// 48: 49 8b 0c d6                   movq    (%r14,%rdx,8), %rcx
// 4c: 49 8b 6c 24 30                movq    0x30(%r12), %rbp
// 51: 4d 8b af 00 01 00 00          movq    0x100(%r15), %r13
// 58: 48 63 45 4c                   movslq  0x4c(%rbp), %rax
// 5c: 49 8d 44 c5 00                leaq    (%r13,%rax,8), %rax
// 61: 49 89 87 00 01 00 00          movq    %rax, 0x100(%r15)
// 68: 4d 89 65 10                   movq    %r12, 0x10(%r13)
// 6c: 8b 45 00                      movl    (%rbp), %eax
// 6f: ff c0                         incl    %eax
// 71: 49 8d 14 d6                   leaq    (%r14,%rdx,8), %rdx
// 75: 48 85 c9                      testq   %rcx, %rcx
// 78: 48 89 14 24                   movq    %rdx, (%rsp)
// 7c: 0f 84 f9 00 00 00             je      0x17b <_JIT_ENTRY+0x17b>
// 82: 85 c0                         testl   %eax, %eax
// 84: 74 0f                         je      0x95 <_JIT_ENTRY+0x95>
// 86: 89 45 00                      movl    %eax, (%rbp)
// 89: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 93: ff d0                         callq   *%rax
// 95: 49 89 6d 00                   movq    %rbp, (%r13)
// 99: 41 0f 10 44 24 10             movups  0x10(%r12), %xmm0
// 9f: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// a4: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// ac: 8b 4d 48                      movl    0x48(%rbp), %ecx
// af: 41 89 4d 40                   movl    %ecx, 0x40(%r13)
// b3: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// bb: 48 81 c5 c8 00 00 00          addq    $0xc8, %rbp
// c2: 49 89 6d 38                   movq    %rbp, 0x38(%r13)
// c6: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// cd: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d4:  R_X86_64_64  _JIT_OPARG
// dc: 0f b7 e8                      movzwl  %ax, %ebp
// df: ff c5                         incl    %ebp
// e1: 85 ed                         testl   %ebp, %ebp
// e3: 0f 9f c2                      setg    %dl
// e6: 39 e9                         cmpl    %ebp, %ecx
// e8: 0f 8e 35 01 00 00             jle     0x223 <_JIT_ENTRY+0x223>
// ee: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 41 0f b7 ec                   movzwl  %r12w, %ebp
// fc: ff c5                         incl    %ebp
// fe: 48 8d 3c ed 48 00 00 00       leaq    0x48(,%rbp,8), %rdi
// 106: 4c 01 ef                      addq    %r13, %rdi
// 109: 89 e8                         movl    %ebp, %eax
// 10b: f7 d0                         notl    %eax
// 10d: 01 c1                         addl    %eax, %ecx
// 10f: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  memset
// 121: 31 f6                         xorl    %esi, %esi
// 123: ff d0                         callq   *%rax
// 125: 85 ed                         testl   %ebp, %ebp
// 127: 0f 8e da 01 00 00             jle     0x307 <_JIT_ENTRY+0x307>
// 12d: 41 0f b7 cc                   movzwl  %r12w, %ecx
// 131: 48 c1 e1 03                   shlq    $0x3, %rcx
// 135: 4c 89 f0                      movq    %r14, %rax
// 138: 48 29 c8                      subq    %rcx, %rax
// 13b: 48 83 c0 f8                   addq    $-0x8, %rax
// 13f: e9 04 01 00 00                jmp     0x248 <_JIT_ENTRY+0x248>
// 144: 49 29 de                      subq    %rbx, %r14
// 147: 49 83 c6 b8                   addq    $-0x48, %r14
// 14b: 49 c1 ee 03                   shrq    $0x3, %r14
// 14f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 153: 48 8b 03                      movq    (%rbx), %rax
// 156: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000158:  R_X86_64_64  _JIT_TARGET
// 160: 89 c9                         movl    %ecx, %ecx
// 162: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 166: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 16c: 48 83 c4 08                   addq    $0x8, %rsp
// 170: 5b                            popq    %rbx
// 171: 41 5c                         popq    %r12
// 173: 41 5d                         popq    %r13
// 175: 41 5e                         popq    %r14
// 177: 41 5f                         popq    %r15
// 179: 5d                            popq    %rbp
// 17a: c3                            retq
// 17b: 85 c0                         testl   %eax, %eax
// 17d: 74 0f                         je      0x18e <_JIT_ENTRY+0x18e>
// 17f: 89 45 00                      movl    %eax, (%rbp)
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 18c: ff d0                         callq   *%rax
// 18e: 49 89 6d 00                   movq    %rbp, (%r13)
// 192: 41 0f 10 44 24 10             movups  0x10(%r12), %xmm0
// 198: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 19d: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 1a5: 8b 45 48                      movl    0x48(%rbp), %eax
// 1a8: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 1ac: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 1b4: 48 81 c5 c8 00 00 00          addq    $0xc8, %rbp
// 1bb: 49 89 6d 38                   movq    %rbp, 0x38(%r13)
// 1bf: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 1c6: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 1cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cd:  R_X86_64_64  _JIT_OPARG
// 1d5: 0f b7 e9                      movzwl  %cx, %ebp
// 1d8: 85 ed                         testl   %ebp, %ebp
// 1da: 0f 9f c2                      setg    %dl
// 1dd: 39 e8                         cmpl    %ebp, %eax
// 1df: 7e 54                         jle     0x235 <_JIT_ENTRY+0x235>
// 1e1: 44 0f b7 e1                   movzwl  %cx, %r12d
// 1e5: 4a 8d 3c e5 48 00 00 00       leaq    0x48(,%r12,8), %rdi
// 1ed: 4c 01 ef                      addq    %r13, %rdi
// 1f0: 0f b7 e9                      movzwl  %cx, %ebp
// 1f3: 89 e9                         movl    %ebp, %ecx
// 1f5: f7 d1                         notl    %ecx
// 1f7: 01 c8                         addl    %ecx, %eax
// 1f9: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  memset
// 20b: 31 f6                         xorl    %esi, %esi
// 20d: ff d0                         callq   *%rax
// 20f: 85 ed                         testl   %ebp, %ebp
// 211: 0f 8e f0 00 00 00             jle     0x307 <_JIT_ENTRY+0x307>
// 217: 49 c1 e4 03                   shlq    $0x3, %r12
// 21b: 4c 89 f0                      movq    %r14, %rax
// 21e: 4c 29 e0                      subq    %r12, %rax
// 221: eb 25                         jmp     0x248 <_JIT_ENTRY+0x248>
// 223: f7 d0                         notl    %eax
// 225: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 22b: f6 c2 01                      testb   $0x1, %dl
// 22e: 75 14                         jne     0x244 <_JIT_ENTRY+0x244>
// 230: e9 d2 00 00 00                jmp     0x307 <_JIT_ENTRY+0x307>
// 235: 0f b7 c1                      movzwl  %cx, %eax
// 238: 48 f7 d8                      negq    %rax
// 23b: f6 c2 01                      testb   $0x1, %dl
// 23e: 0f 84 c3 00 00 00             je      0x307 <_JIT_ENTRY+0x307>
// 244: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 248: 83 fd 02                      cmpl    $0x2, %ebp
// 24b: b9 01 00 00 00                movl    $0x1, %ecx
// 250: 0f 4d cd                      cmovgel %ebp, %ecx
// 253: 83 f9 08                      cmpl    $0x8, %ecx
// 256: 72 10                         jb      0x268 <_JIT_ENTRY+0x268>
// 258: 4c 89 ea                      movq    %r13, %rdx
// 25b: 48 29 c2                      subq    %rax, %rdx
// 25e: 48 83 c2 48                   addq    $0x48, %rdx
// 262: 48 83 fa 20                   cmpq    $0x20, %rdx
// 266: 73 6a                         jae     0x2d2 <_JIT_ENTRY+0x2d2>
// 268: 31 d2                         xorl    %edx, %edx
// 26a: 48 89 d6                      movq    %rdx, %rsi
// 26d: 48 f7 d6                      notq    %rsi
// 270: 48 01 ce                      addq    %rcx, %rsi
// 273: 48 89 cf                      movq    %rcx, %rdi
// 276: 48 83 e7 03                   andq    $0x3, %rdi
// 27a: 74 15                         je      0x291 <_JIT_ENTRY+0x291>
// 27c: 0f 1f 40 00                   nopl    (%rax)
// 280: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 284: 4d 89 44 d5 48                movq    %r8, 0x48(%r13,%rdx,8)
// 289: 48 ff c2                      incq    %rdx
// 28c: 48 ff cf                      decq    %rdi
// 28f: 75 ef                         jne     0x280 <_JIT_ENTRY+0x280>
// 291: 48 83 fe 03                   cmpq    $0x3, %rsi
// 295: 72 70                         jb      0x307 <_JIT_ENTRY+0x307>
// 297: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 2a0: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 2a4: 49 89 74 d5 48                movq    %rsi, 0x48(%r13,%rdx,8)
// 2a9: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 2ae: 49 89 74 d5 50                movq    %rsi, 0x50(%r13,%rdx,8)
// 2b3: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 2b8: 49 89 74 d5 58                movq    %rsi, 0x58(%r13,%rdx,8)
// 2bd: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 2c2: 49 89 74 d5 60                movq    %rsi, 0x60(%r13,%rdx,8)
// 2c7: 48 83 c2 04                   addq    $0x4, %rdx
// 2cb: 48 39 d1                      cmpq    %rdx, %rcx
// 2ce: 75 d0                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 2d0: eb 35                         jmp     0x307 <_JIT_ENTRY+0x307>
// 2d2: 89 ca                         movl    %ecx, %edx
// 2d4: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 2da: 31 f6                         xorl    %esi, %esi
// 2dc: 0f 1f 40 00                   nopl    (%rax)
// 2e0: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 2e4: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 2e9: 41 0f 11 44 f5 48             movups  %xmm0, 0x48(%r13,%rsi,8)
// 2ef: 41 0f 11 4c f5 58             movups  %xmm1, 0x58(%r13,%rsi,8)
// 2f5: 48 83 c6 04                   addq    $0x4, %rsi
// 2f9: 48 39 f2                      cmpq    %rsi, %rdx
// 2fc: 75 e2                         jne     0x2e0 <_JIT_ENTRY+0x2e0>
// 2fe: 48 39 ca                      cmpq    %rcx, %rdx
// 301: 0f 85 63 ff ff ff             jne     0x26a <_JIT_ENTRY+0x26a>
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _JIT_OPARG
// 311: 0f b7 c0                      movzwl  %ax, %eax
// 314: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 319: 29 c1                         subl    %eax, %ecx
// 31b: 48 63 c1                      movslq  %ecx, %rax
// 31e: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _JIT_CONTINUE
// 32c: 48 89 df                      movq    %rbx, %rdi
// 32f: 48 8b 34 24                   movq    (%rsp), %rsi
// 333: 4c 89 fa                      movq    %r15, %rdx
// 336: 48 83 c4 08                   addq    $0x8, %rsp
// 33a: 5b                            popq    %rbx
// 33b: 41 5c                         popq    %r12
// 33d: 41 5d                         popq    %r13
// 33f: 41 5e                         popq    %r14
// 341: 41 5f                         popq    %r15
// 343: 5d                            popq    %rbp
// 344: ff e0                         jmpq    *%rax
// 346: 
static const unsigned char _CHECK_VALIDITYplus_INIT_CALL_PY_EXACT_ARGS_code_body[839] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x1f, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x48, 0x63, 0xc1, 0x4d, 0x8b, 0x24, 0xc6, 0x49, 0x8b, 0x0c, 0xd6, 0x49, 0x8b, 0x6c, 0x24, 0x30, 0x4d, 0x8b, 0xaf, 0x00, 0x01, 0x00, 0x00, 0x48, 0x63, 0x45, 0x4c, 0x49, 0x8d, 0x44, 0xc5, 0x00, 0x49, 0x89, 0x87, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x10, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x49, 0x8d, 0x14, 0xd6, 0x48, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x4d, 0x48, 0x41, 0x89, 0x4d, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0xff, 0xc5, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe9, 0x0f, 0x8e, 0x35, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xec, 0xff, 0xc5, 0x48, 0x8d, 0x3c, 0xed, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x89, 0xe8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x8e, 0xda, 0x01, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xcc, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xf8, 0xe9, 0x04, 0x01, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x85, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x48, 0x41, 0x89, 0x45, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe9, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe8, 0x7e, 0x54, 0x44, 0x0f, 0xb7, 0xe1, 0x4a, 0x8d, 0x3c, 0xe5, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x0f, 0xb7, 0xe9, 0x89, 0xe9, 0xf7, 0xd1, 0x01, 0xc8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x8e, 0xf0, 0x00, 0x00, 0x00, 0x49, 0xc1, 0xe4, 0x03, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xe0, 0xeb, 0x25, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xc2, 0x01, 0x75, 0x14, 0xe9, 0xd2, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xc6, 0x83, 0xfd, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x4d, 0xcd, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x4c, 0x89, 0xea, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x73, 0x6a, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x48, 0x89, 0xcf, 0x48, 0x83, 0xe7, 0x03, 0x74, 0x15, 0x0f, 0x1f, 0x40, 0x00, 0x4c, 0x8b, 0x04, 0xd0, 0x4d, 0x89, 0x44, 0xd5, 0x48, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xcf, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x70, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x34, 0xd0, 0x49, 0x89, 0x74, 0xd5, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x49, 0x89, 0x74, 0xd5, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x49, 0x89, 0x74, 0xd5, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x49, 0x89, 0x74, 0xd5, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x35, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x1f, 0x40, 0x00, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf5, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf5, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe2, 0x48, 0x39, 0xca, 0x0f, 0x85, 0x63, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x34, 0x24, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_INIT_CALL_PY_EXACT_ARGS_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_INIT_CALL_PY_EXACT_ARGS_data_body[1];
static const Hole _CHECK_VALIDITYplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _CHECK_VALIDITYplus_INSERT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_INSERT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 5a                         je      0x79 <_JIT_ENTRY+0x79>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  _JIT_OPARG
// 30: 0f b7 d0                      movzwl  %ax, %edx
// 33: f7 d0                         notl    %eax
// 35: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3a: 4c 63 e8                      movslq  %eax, %r13
// 3d: 4a 8d 3c eb                   leaq    (%rbx,%r13,8), %rdi
// 41: 48 c1 e2 03                   shlq    $0x3, %rdx
// 45: 48 89 de                      movq    %rbx, %rsi
// 48: 48 29 d6                      subq    %rdx, %rsi
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  memmove
// 55: ff d0                         callq   *%rax
// 57: 4e 89 24 eb                   movq    %r12, (%rbx,%r13,8)
// 5b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005d:  R_X86_64_64  _JIT_CONTINUE
// 65: 4c 89 f7                      movq    %r14, %rdi
// 68: 48 89 de                      movq    %rbx, %rsi
// 6b: 4c 89 fa                      movq    %r15, %rdx
// 6e: 5b                            popq    %rbx
// 6f: 41 5c                         popq    %r12
// 71: 41 5d                         popq    %r13
// 73: 41 5e                         popq    %r14
// 75: 41 5f                         popq    %r15
// 77: ff e0                         jmpq    *%rax
// 79: 4c 29 f3                      subq    %r14, %rbx
// 7c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 80: 48 c1 eb 03                   shrq    $0x3, %rbx
// 84: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 88: 49 8b 06                      movq    (%r14), %rax
// 8b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008d:  R_X86_64_64  _JIT_TARGET
// 95: 89 c9                         movl    %ecx, %ecx
// 97: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 9f: 5b                            popq    %rbx
// a0: 41 5c                         popq    %r12
// a2: 41 5d                         popq    %r13
// a4: 41 5e                         popq    %r14
// a6: 41 5f                         popq    %r15
// a8: c3                            retq
// a9: 
static const unsigned char _CHECK_VALIDITYplus_INSERT_code_body[170] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x5a, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4a, 0x8d, 0x3c, 0xeb, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0x89, 0xde, 0x48, 0x29, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4e, 0x89, 0x24, 0xeb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_INSERT_code_holes[6] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_INSERT_data_body[1];
static const Hole _CHECK_VALIDITYplus_INSERT_data_holes[1];

// _CHECK_VALIDITYplus_IS_NONE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_IS_NONE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 32                         je      0x51 <_JIT_ENTRY+0x51>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  _Py_NoneStruct
// 30: 49 39 c4                      cmpq    %rax, %r12
// 33: 74 4c                         je      0x81 <_JIT_ENTRY+0x81>
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 4f                         jle     0x8d <_JIT_ENTRY+0x8d>
// 3e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000040:  R_X86_64_64  _Py_FalseStruct
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 71                         jns     0xbd <_JIT_ENTRY+0xbd>
// 4c: e9 8d 00 00 00                jmp     0xde <_JIT_ENTRY+0xde>
// 51: 4c 29 f3                      subq    %r14, %rbx
// 54: 48 83 c3 b8                   addq    $-0x48, %rbx
// 58: 48 c1 eb 03                   shrq    $0x3, %rbx
// 5c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 60: 49 8b 06                      movq    (%r14), %rax
// 63: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000065:  R_X86_64_64  _JIT_TARGET
// 6d: 89 c9                         movl    %ecx, %ecx
// 6f: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 77: 5b                            popq    %rbx
// 78: 41 5c                         popq    %r12
// 7a: 41 5d                         popq    %r13
// 7c: 41 5e                         popq    %r14
// 7e: 41 5f                         popq    %r15
// 80: c3                            retq
// 81: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000083:  R_X86_64_64  _Py_TrueStruct
// 8b: eb 51                         jmp     0xde <_JIT_ENTRY+0xde>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000b1:  R_X86_64_64  _Py_FalseStruct
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 21                         js      0xde <_JIT_ENTRY+0xde>
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c7: ff d0                         callq   *%rax
// c9: 49 ff 0c 24                   decq    (%r12)
// cd: 75 0f                         jne     0xde <_JIT_ENTRY+0xde>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_Dealloc
// d9: 4c 89 e7                      movq    %r12, %rdi
// dc: ff d0                         callq   *%rax
// de: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e4:  R_X86_64_64  _JIT_CONTINUE
// ec: 4c 89 f7                      movq    %r14, %rdi
// ef: 48 89 de                      movq    %rbx, %rsi
// f2: 4c 89 fa                      movq    %r15, %rdx
// f5: 5b                            popq    %rbx
// f6: 41 5c                         popq    %r12
// f8: 41 5d                         popq    %r13
// fa: 41 5e                         popq    %r14
// fc: 41 5f                         popq    %r15
// fe: ff e0                         jmpq    *%rax
// 100: 
static const unsigned char _CHECK_VALIDITYplus_IS_NONE_code_body[257] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x32, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x74, 0x4c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x51, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_IS_NONE_code_holes[12] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_IS_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_IS_NONE_data_holes[1];

// _CHECK_VALIDITYplus_IS_OP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_IS_OP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 24                         je      0x45 <_JIT_ENTRY+0x45>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 28: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 2c: 49 8b 04 24                   movq    (%r12), %rax
// 30: 48 85 c0                      testq   %rax, %rax
// 33: 7e 47                         jle     0x7c <_JIT_ENTRY+0x7c>
// 35: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000037:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 69                         jns     0xac <_JIT_ENTRY+0xac>
// 43: eb 6f                         jmp     0xb4 <_JIT_ENTRY+0xb4>
// 45: 49 29 de                      subq    %rbx, %r14
// 48: 49 83 c6 b8                   addq    $-0x48, %r14
// 4c: 49 c1 ee 03                   shrq    $0x3, %r14
// 50: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 54: 48 8b 03                      movq    (%rbx), %rax
// 57: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000059:  R_X86_64_64  _JIT_TARGET
// 61: 89 c9                         movl    %ecx, %ecx
// 63: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 67: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6d: 48 83 c4 08                   addq    $0x8, %rsp
// 71: 5b                            popq    %rbx
// 72: 41 5c                         popq    %r12
// 74: 41 5d                         popq    %r13
// 76: 41 5e                         popq    %r14
// 78: 41 5f                         popq    %r15
// 7a: 5d                            popq    %rbp
// 7b: c3                            retq
// 7c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007e:  R_X86_64_64  .rodata.str1.1
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_NegativeRefcount
// 90: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 95: 4c 89 e2                      movq    %r12, %rdx
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 04 24                   movq    (%r12), %rax
// 9e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 08                         js      0xb4 <_JIT_ENTRY+0xb4>
// ac: ff d1                         callq   *%rcx
// ae: 49 ff 0c 24                   decq    (%r12)
// b2: 74 13                         je      0xc7 <_JIT_ENTRY+0xc7>
// b4: 49 8b 45 00                   movq    (%r13), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 7e 22                         jle     0xdf <_JIT_ENTRY+0xdf>
// bd: 49 8d 6e f8                   leaq    -0x8(%r14), %rbp
// c1: 85 c0                         testl   %eax, %eax
// c3: 79 44                         jns     0x109 <_JIT_ENTRY+0x109>
// c5: eb 63                         jmp     0x12a <_JIT_ENTRY+0x12a>
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _Py_Dealloc
// d1: 4c 89 e7                      movq    %r12, %rdi
// d4: ff d0                         callq   *%rax
// d6: 49 8b 45 00                   movq    (%r13), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7f de                         jg      0xbd <_JIT_ENTRY+0xbd>
// df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _Py_NegativeRefcount
// f3: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// f8: 4c 89 ea                      movq    %r13, %rdx
// fb: ff d0                         callq   *%rax
// fd: 49 8b 45 00                   movq    (%r13), %rax
// 101: 49 8d 6e f8                   leaq    -0x8(%r14), %rbp
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 49 ff 4d 00                   decq    (%r13)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 4c 89 ef                      movq    %r13, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 31 c0                         xorl    %eax, %eax
// 12c: 4d 39 ec                      cmpq    %r13, %r12
// 12f: 0f 94 c0                      sete    %al
// 132: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000134:  R_X86_64_64  _JIT_OPARG
// 13c: 66 39 c8                      cmpw    %cx, %ax
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_FalseStruct
// 149: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014b:  R_X86_64_64  _Py_TrueStruct
// 153: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 157: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _JIT_CONTINUE
// 165: 48 89 df                      movq    %rbx, %rdi
// 168: 48 89 ee                      movq    %rbp, %rsi
// 16b: 4c 89 fa                      movq    %r15, %rdx
// 16e: 48 83 c4 08                   addq    $0x8, %rsp
// 172: 5b                            popq    %rbx
// 173: 41 5c                         popq    %r12
// 175: 41 5d                         popq    %r13
// 177: 41 5e                         popq    %r14
// 179: 41 5f                         popq    %r15
// 17b: 5d                            popq    %rbp
// 17c: ff e0                         jmpq    *%rax
// 17e: 
static const unsigned char _CHECK_VALIDITYplus_IS_OP_code_body[383] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x24, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf0, 0x4d, 0x8b, 0x6e, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x47, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x69, 0xeb, 0x6f, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x13, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x49, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0x4d, 0x39, 0xec, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_IS_OP_code_holes[16] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_IS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_IS_OP_data_holes[1];

// _CHECK_VALIDITYplus_ITER_CHECK_LIST
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_ITER_CHECK_LIST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 14                         je      0x24 <_JIT_ENTRY+0x24>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  PyListIter_Type
// 1e: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 22: 74 28                         je      0x4c <_JIT_ENTRY+0x4c>
// 24: 48 29 fe                      subq    %rdi, %rsi
// 27: 48 83 c6 b8                   addq    $-0x48, %rsi
// 2b: 48 c1 ee 03                   shrq    $0x3, %rsi
// 2f: 89 77 40                      movl    %esi, 0x40(%rdi)
// 32: 48 8b 07                      movq    (%rdi), %rax
// 35: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000037:  R_X86_64_64  _JIT_TARGET
// 3f: 89 c9                         movl    %ecx, %ecx
// 41: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 45: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 4b: c3                            retq
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_CONTINUE
// 56: ff e0                         jmpq    *%rax
// 58: 
static const unsigned char _CHECK_VALIDITYplus_ITER_CHECK_LIST_code_body[89] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x14, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_ITER_CHECK_LIST_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_ITER_CHECK_LIST_data_body[1];
static const Hole _CHECK_VALIDITYplus_ITER_CHECK_LIST_data_holes[1];

// _CHECK_VALIDITYplus_ITER_CHECK_RANGE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_ITER_CHECK_RANGE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 14                         je      0x24 <_JIT_ENTRY+0x24>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  PyRangeIter_Type
// 1e: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 22: 74 28                         je      0x4c <_JIT_ENTRY+0x4c>
// 24: 48 29 fe                      subq    %rdi, %rsi
// 27: 48 83 c6 b8                   addq    $-0x48, %rsi
// 2b: 48 c1 ee 03                   shrq    $0x3, %rsi
// 2f: 89 77 40                      movl    %esi, 0x40(%rdi)
// 32: 48 8b 07                      movq    (%rdi), %rax
// 35: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000037:  R_X86_64_64  _JIT_TARGET
// 3f: 89 c9                         movl    %ecx, %ecx
// 41: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 45: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 4b: c3                            retq
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_CONTINUE
// 56: ff e0                         jmpq    *%rax
// 58: 
static const unsigned char _CHECK_VALIDITYplus_ITER_CHECK_RANGE_code_body[89] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x14, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_ITER_CHECK_RANGE_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_ITER_CHECK_RANGE_data_body[1];
static const Hole _CHECK_VALIDITYplus_ITER_CHECK_RANGE_data_holes[1];

// _CHECK_VALIDITYplus_ITER_CHECK_TUPLE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_ITER_CHECK_TUPLE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 14                         je      0x24 <_JIT_ENTRY+0x24>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  PyTupleIter_Type
// 1e: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 22: 74 28                         je      0x4c <_JIT_ENTRY+0x4c>
// 24: 48 29 fe                      subq    %rdi, %rsi
// 27: 48 83 c6 b8                   addq    $-0x48, %rsi
// 2b: 48 c1 ee 03                   shrq    $0x3, %rsi
// 2f: 89 77 40                      movl    %esi, 0x40(%rdi)
// 32: 48 8b 07                      movq    (%rdi), %rax
// 35: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000037:  R_X86_64_64  _JIT_TARGET
// 3f: 89 c9                         movl    %ecx, %ecx
// 41: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 45: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 4b: c3                            retq
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_CONTINUE
// 56: ff e0                         jmpq    *%rax
// 58: 
static const unsigned char _CHECK_VALIDITYplus_ITER_CHECK_TUPLE_code_body[89] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x14, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_ITER_CHECK_TUPLE_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_ITER_CHECK_TUPLE_data_body[1];
static const Hole _CHECK_VALIDITYplus_ITER_CHECK_TUPLE_data_holes[1];

// _CHECK_VALIDITYplus_ITER_NEXT_LIST
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_ITER_NEXT_LIST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 5e                         je      0x7c <_JIT_ENTRY+0x7c>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 25: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 29: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 2d: 48 8b 52 18                   movq    0x18(%rdx), %rdx
// 31: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 35: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 39: 4c 8b 24 ca                   movq    (%rdx,%rcx,8), %r12
// 3d: 41 8b 04 24                   movl    (%r12), %eax
// 41: ff c0                         incl    %eax
// 43: 74 10                         je      0x55 <_JIT_ENTRY+0x55>
// 45: 41 89 04 24                   movl    %eax, (%r12)
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 53: ff d0                         callq   *%rax
// 55: 4c 89 23                      movq    %r12, (%rbx)
// 58: 48 83 c3 08                   addq    $0x8, %rbx
// 5c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005e:  R_X86_64_64  _JIT_CONTINUE
// 66: 4c 89 f7                      movq    %r14, %rdi
// 69: 48 89 de                      movq    %rbx, %rsi
// 6c: 4c 89 fa                      movq    %r15, %rdx
// 6f: 48 83 c4 08                   addq    $0x8, %rsp
// 73: 5b                            popq    %rbx
// 74: 41 5c                         popq    %r12
// 76: 41 5e                         popq    %r14
// 78: 41 5f                         popq    %r15
// 7a: ff e0                         jmpq    *%rax
// 7c: 4c 29 f3                      subq    %r14, %rbx
// 7f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 83: 48 c1 eb 03                   shrq    $0x3, %rbx
// 87: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 8b: 49 8b 06                      movq    (%r14), %rax
// 8e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000090:  R_X86_64_64  _JIT_TARGET
// 98: 89 c9                         movl    %ecx, %ecx
// 9a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a4: 48 83 c4 08                   addq    $0x8, %rsp
// a8: 5b                            popq    %rbx
// a9: 41 5c                         popq    %r12
// ab: 41 5e                         popq    %r14
// ad: 41 5f                         popq    %r15
// af: c3                            retq
// b0: 
static const unsigned char _CHECK_VALIDITYplus_ITER_NEXT_LIST_code_body[177] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x5e, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x24, 0xca, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_ITER_NEXT_LIST_code_holes[5] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_ITER_NEXT_LIST_data_body[1];
static const Hole _CHECK_VALIDITYplus_ITER_NEXT_LIST_data_holes[1];

// _CHECK_VALIDITYplus_ITER_NEXT_RANGE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_ITER_NEXT_RANGE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 89 f3                      movq    %rsi, %rbx
// 8: 49 89 fe                      movq    %rdi, %r14
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_EXECUTOR
// 15: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 19: 74 4c                         je      0x67 <_JIT_ENTRY+0x67>
// 1b: 49 89 d7                      movq    %rdx, %r15
// 1e: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 22: 48 8b 78 10                   movq    0x10(%rax), %rdi
// 26: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2a: 48 01 f9                      addq    %rdi, %rcx
// 2d: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 31: 48 ff 48 20                   decq    0x20(%rax)
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  PyLong_FromLong
// 3f: ff d0                         callq   *%rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 74 4d                         je      0x93 <_JIT_ENTRY+0x93>
// 46: 48 89 03                      movq    %rax, (%rbx)
// 49: 48 83 c3 08                   addq    $0x8, %rbx
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_CONTINUE
// 57: 4c 89 f7                      movq    %r14, %rdi
// 5a: 48 89 de                      movq    %rbx, %rsi
// 5d: 4c 89 fa                      movq    %r15, %rdx
// 60: 5b                            popq    %rbx
// 61: 41 5e                         popq    %r14
// 63: 41 5f                         popq    %r15
// 65: ff e0                         jmpq    *%rax
// 67: 4c 29 f3                      subq    %r14, %rbx
// 6a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 72: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 76: 49 8b 06                      movq    (%r14), %rax
// 79: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007b:  R_X86_64_64  _JIT_TARGET
// 83: 89 c9                         movl    %ecx, %ecx
// 85: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 8d: 5b                            popq    %rbx
// 8e: 41 5e                         popq    %r14
// 90: 41 5f                         popq    %r15
// 92: c3                            retq
// 93: 4c 29 f3                      subq    %r14, %rbx
// 96: 48 83 c3 b8                   addq    $-0x48, %rbx
// 9a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 9e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// a2: 31 c0                         xorl    %eax, %eax
// a4: 5b                            popq    %rbx
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: c3                            retq
// aa: 
static const unsigned char _CHECK_VALIDITYplus_ITER_NEXT_RANGE_code_body[171] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x4c, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x01, 0xf9, 0x48, 0x89, 0x48, 0x10, 0x48, 0xff, 0x48, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4d, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_ITER_NEXT_RANGE_code_holes[5] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_ITER_NEXT_RANGE_data_body[1];
static const Hole _CHECK_VALIDITYplus_ITER_NEXT_RANGE_data_holes[1];

// _CHECK_VALIDITYplus_ITER_NEXT_TUPLE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_ITER_NEXT_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 5b                         je      0x79 <_JIT_ENTRY+0x79>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 25: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 29: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 2d: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 31: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 35: 4c 8b 64 ca 18                movq    0x18(%rdx,%rcx,8), %r12
// 3a: 41 8b 04 24                   movl    (%r12), %eax
// 3e: ff c0                         incl    %eax
// 40: 74 10                         je      0x52 <_JIT_ENTRY+0x52>
// 42: 41 89 04 24                   movl    %eax, (%r12)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 50: ff d0                         callq   *%rax
// 52: 4c 89 23                      movq    %r12, (%rbx)
// 55: 48 83 c3 08                   addq    $0x8, %rbx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _JIT_CONTINUE
// 63: 4c 89 f7                      movq    %r14, %rdi
// 66: 48 89 de                      movq    %rbx, %rsi
// 69: 4c 89 fa                      movq    %r15, %rdx
// 6c: 48 83 c4 08                   addq    $0x8, %rsp
// 70: 5b                            popq    %rbx
// 71: 41 5c                         popq    %r12
// 73: 41 5e                         popq    %r14
// 75: 41 5f                         popq    %r15
// 77: ff e0                         jmpq    *%rax
// 79: 4c 29 f3                      subq    %r14, %rbx
// 7c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 80: 48 c1 eb 03                   shrq    $0x3, %rbx
// 84: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 88: 49 8b 06                      movq    (%r14), %rax
// 8b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008d:  R_X86_64_64  _JIT_TARGET
// 95: 89 c9                         movl    %ecx, %ecx
// 97: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a1: 48 83 c4 08                   addq    $0x8, %rsp
// a5: 5b                            popq    %rbx
// a6: 41 5c                         popq    %r12
// a8: 41 5e                         popq    %r14
// aa: 41 5f                         popq    %r15
// ac: c3                            retq
// ad: 
static const unsigned char _CHECK_VALIDITYplus_ITER_NEXT_TUPLE_code_body[174] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x5b, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x64, 0xca, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_ITER_NEXT_TUPLE_code_holes[5] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_ITER_NEXT_TUPLE_data_body[1];
static const Hole _CHECK_VALIDITYplus_ITER_NEXT_TUPLE_data_holes[1];

// _CHECK_VALIDITYplus_JUMP_TO_TOP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_JUMP_TO_TOP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 89 f3                      movq    %rsi, %rbx
// 8: 49 89 fe                      movq    %rdi, %r14
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_EXECUTOR
// 15: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 19: 74 38                         je      0x53 <_JIT_ENTRY+0x53>
// 1b: 49 89 d7                      movq    %rdx, %r15
// 1e: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 22: 48 8b 00                      movq    (%rax), %rax
// 25: 84 c0                         testb   %al, %al
// 27: 74 56                         je      0x7f <_JIT_ENTRY+0x7f>
// 29: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002b:  R_X86_64_64  _Py_HandlePending
// 33: 4c 89 ff                      movq    %r15, %rdi
// 36: ff d0                         callq   *%rax
// 38: 85 c0                         testl   %eax, %eax
// 3a: 74 43                         je      0x7f <_JIT_ENTRY+0x7f>
// 3c: 4c 29 f3                      subq    %r14, %rbx
// 3f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 43: 48 c1 eb 03                   shrq    $0x3, %rbx
// 47: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 4b: 31 c0                         xorl    %eax, %eax
// 4d: 5b                            popq    %rbx
// 4e: 41 5e                         popq    %r14
// 50: 41 5f                         popq    %r15
// 52: c3                            retq
// 53: 4c 29 f3                      subq    %r14, %rbx
// 56: 48 83 c3 b8                   addq    $-0x48, %rbx
// 5a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 5e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 62: 49 8b 06                      movq    (%r14), %rax
// 65: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000067:  R_X86_64_64  _JIT_TARGET
// 6f: 89 c9                         movl    %ecx, %ecx
// 71: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 79: 5b                            popq    %rbx
// 7a: 41 5e                         popq    %r14
// 7c: 41 5f                         popq    %r15
// 7e: c3                            retq
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _JIT_CONTINUE
// 89: 4c 89 f7                      movq    %r14, %rdi
// 8c: 48 89 de                      movq    %rbx, %rsi
// 8f: 4c 89 fa                      movq    %r15, %rdx
// 92: 5b                            popq    %rbx
// 93: 41 5e                         popq    %r14
// 95: 41 5f                         popq    %r15
// 97: ff e0                         jmpq    *%rax
// 99: 
static const unsigned char _CHECK_VALIDITYplus_JUMP_TO_TOP_code_body[154] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x38, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x43, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_JUMP_TO_TOP_code_holes[5] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_JUMP_TO_TOP_data_body[1];
static const Hole _CHECK_VALIDITYplus_JUMP_TO_TOP_data_holes[1];

// _CHECK_VALIDITYplus_LIST_APPEND
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LIST_APPEND.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 89 fb                      movq    %rdi, %rbx
// 8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000a:  R_X86_64_64  _JIT_EXECUTOR
// 12: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 16: 74 3f                         je      0x57 <_JIT_ENTRY+0x57>
// 18: 49 89 d6                      movq    %rdx, %r14
// 1b: 4c 8d 7e f8                   leaq    -0x8(%rsi), %r15
// 1f: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 23: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000025:  R_X86_64_64  _JIT_OPARG
// 2d: f7 d1                         notl    %ecx
// 2f: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 35: 48 63 c9                      movslq  %ecx, %rcx
// 38: 48 8b 3c ce                   movq    (%rsi,%rcx,8), %rdi
// 3c: 48 8b 4f 10                   movq    0x10(%rdi), %rcx
// 40: 48 39 4f 20                   cmpq    %rcx, 0x20(%rdi)
// 44: 7e 3c                         jle     0x82 <_JIT_ENTRY+0x82>
// 46: 48 8b 57 18                   movq    0x18(%rdi), %rdx
// 4a: 48 89 04 ca                   movq    %rax, (%rdx,%rcx,8)
// 4e: 48 ff c1                      incq    %rcx
// 51: 48 89 4f 10                   movq    %rcx, 0x10(%rdi)
// 55: eb 3e                         jmp     0x95 <_JIT_ENTRY+0x95>
// 57: 48 29 de                      subq    %rbx, %rsi
// 5a: 48 83 c6 b8                   addq    $-0x48, %rsi
// 5e: 48 c1 ee 03                   shrq    $0x3, %rsi
// 62: 89 73 40                      movl    %esi, 0x40(%rbx)
// 65: 48 8b 03                      movq    (%rbx), %rax
// 68: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006a:  R_X86_64_64  _JIT_TARGET
// 72: 89 c9                         movl    %ecx, %ecx
// 74: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 7c: 5b                            popq    %rbx
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000084:  R_X86_64_64  _PyList_AppendTakeRefListResize
// 8c: 48 89 c6                      movq    %rax, %rsi
// 8f: ff d1                         callq   *%rcx
// 91: 85 c0                         testl   %eax, %eax
// 93: 78 1a                         js      0xaf <_JIT_ENTRY+0xaf>
// 95: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000097:  R_X86_64_64  _JIT_CONTINUE
// 9f: 48 89 df                      movq    %rbx, %rdi
// a2: 4c 89 fe                      movq    %r15, %rsi
// a5: 4c 89 f2                      movq    %r14, %rdx
// a8: 5b                            popq    %rbx
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: ff e0                         jmpq    *%rax
// af: 49 29 df                      subq    %rbx, %r15
// b2: 49 83 c7 b8                   addq    $-0x48, %r15
// b6: 49 c1 ef 03                   shrq    $0x3, %r15
// ba: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// be: 31 c0                         xorl    %eax, %eax
// c0: 5b                            popq    %rbx
// c1: 41 5e                         popq    %r14
// c3: 41 5f                         popq    %r15
// c5: c3                            retq
// c6: 
static const unsigned char _CHECK_VALIDITYplus_LIST_APPEND_code_body[199] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3f, 0x49, 0x89, 0xd6, 0x4c, 0x8d, 0x7e, 0xf8, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x48, 0x8b, 0x3c, 0xce, 0x48, 0x8b, 0x4f, 0x10, 0x48, 0x39, 0x4f, 0x20, 0x7e, 0x3c, 0x48, 0x8b, 0x57, 0x18, 0x48, 0x89, 0x04, 0xca, 0x48, 0xff, 0xc1, 0x48, 0x89, 0x4f, 0x10, 0xeb, 0x3e, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc6, 0xff, 0xd1, 0x85, 0xc0, 0x78, 0x1a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LIST_APPEND_code_holes[6] = {
    {0xa, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x25, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_LIST_APPEND_data_body[1];
static const Hole _CHECK_VALIDITYplus_LIST_APPEND_data_holes[1];

// _CHECK_VALIDITYplus_LIST_EXTEND
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LIST_EXTEND.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 fb                      movq    %rdi, %rbx
// c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000e:  R_X86_64_64  _JIT_EXECUTOR
// 16: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1a: 74 4f                         je      0x6b <_JIT_ENTRY+0x6b>
// 1c: 49 89 d4                      movq    %rdx, %r12
// 1f: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 23: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  _JIT_OPARG
// 31: f7 d0                         notl    %eax
// 33: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 38: 48 98                         cltq
// 3a: 48 8b 3c c6                   movq    (%rsi,%rax,8), %rdi
// 3e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000040:  R_X86_64_64  _PyList_Extend
// 48: 4c 89 fe                      movq    %r15, %rsi
// 4b: ff d0                         callq   *%rax
// 4d: 48 85 c0                      testq   %rax, %rax
// 50: 74 45                         je      0x97 <_JIT_ENTRY+0x97>
// 52: 49 8b 07                      movq    (%r15), %rax
// 55: 48 85 c0                      testq   %rax, %rax
// 58: 0f 8e 1a 01 00 00             jle     0x178 <_JIT_ENTRY+0x178>
// 5e: 85 c0                         testl   %eax, %eax
// 60: 0f 89 37 01 00 00             jns     0x19d <_JIT_ENTRY+0x19d>
// 66: e9 52 01 00 00                jmp     0x1bd <_JIT_ENTRY+0x1bd>
// 6b: 48 29 de                      subq    %rbx, %rsi
// 6e: 48 83 c6 b8                   addq    $-0x48, %rsi
// 72: 48 c1 ee 03                   shrq    $0x3, %rsi
// 76: 89 73 40                      movl    %esi, 0x40(%rbx)
// 79: 48 8b 03                      movq    (%rbx), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_TARGET
// 86: 89 c9                         movl    %ecx, %ecx
// 88: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 8c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 92: e9 d7 00 00 00                jmp     0x16e <_JIT_ENTRY+0x16e>
// 97: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000099:  R_X86_64_64  PyExc_TypeError
// a1: 49 8b 75 00                   movq    (%r13), %rsi
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _PyErr_ExceptionMatches
// af: 4c 89 e7                      movq    %r12, %rdi
// b2: ff d0                         callq   *%rax
// b4: 85 c0                         testl   %eax, %eax
// b6: 74 58                         je      0x110 <_JIT_ENTRY+0x110>
// b8: 49 8b 47 08                   movq    0x8(%r15), %rax
// bc: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// c4: 75 4a                         jne     0x110 <_JIT_ENTRY+0x110>
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  PySequence_Check
// d0: 4c 89 ff                      movq    %r15, %rdi
// d3: ff d0                         callq   *%rax
// d5: 85 c0                         testl   %eax, %eax
// d7: 75 37                         jne     0x110 <_JIT_ENTRY+0x110>
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _PyErr_Clear
// e3: 4c 89 e7                      movq    %r12, %rdi
// e6: ff d0                         callq   *%rax
// e8: 49 8b 75 00                   movq    (%r13), %rsi
// ec: 49 8b 47 08                   movq    0x8(%r15), %rax
// f0: 48 8b 48 18                   movq    0x18(%rax), %rcx
// f4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000f6:  R_X86_64_64  .rodata.str1.1+0x39
// fe: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000100:  R_X86_64_64  _PyErr_Format
// 108: 4c 89 e7                      movq    %r12, %rdi
// 10b: 31 c0                         xorl    %eax, %eax
// 10d: 41 ff d0                      callq   *%r8
// 110: 49 8b 07                      movq    (%r15), %rax
// 113: 48 85 c0                      testq   %rax, %rax
// 116: 7f 21                         jg      0x139 <_JIT_ENTRY+0x139>
// 118: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011a:  R_X86_64_64  .rodata.str1.1
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_NegativeRefcount
// 12c: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 131: 4c 89 fa                      movq    %r15, %rdx
// 134: ff d0                         callq   *%rax
// 136: 49 8b 07                      movq    (%r15), %rax
// 139: 85 c0                         testl   %eax, %eax
// 13b: 78 20                         js      0x15d <_JIT_ENTRY+0x15d>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0f                      decq    (%r15)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 ff                      movq    %r15, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 49 29 de                      subq    %rbx, %r14
// 160: 49 83 c6 b8                   addq    $-0x48, %r14
// 164: 49 c1 ee 03                   shrq    $0x3, %r14
// 168: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 16c: 31 c0                         xorl    %eax, %eax
// 16e: 5b                            popq    %rbx
// 16f: 41 5c                         popq    %r12
// 171: 41 5d                         popq    %r13
// 173: 41 5e                         popq    %r14
// 175: 41 5f                         popq    %r15
// 177: c3                            retq
// 178: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017a:  R_X86_64_64  .rodata.str1.1
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_NegativeRefcount
// 18c: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 191: 4c 89 fa                      movq    %r15, %rdx
// 194: ff d0                         callq   *%rax
// 196: 49 8b 07                      movq    (%r15), %rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 20                         js      0x1bd <_JIT_ENTRY+0x1bd>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 ff 0f                      decq    (%r15)
// 1ac: 75 0f                         jne     0x1bd <_JIT_ENTRY+0x1bd>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_Dealloc
// 1b8: 4c 89 ff                      movq    %r15, %rdi
// 1bb: ff d0                         callq   *%rax
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _JIT_CONTINUE
// 1c7: 48 89 df                      movq    %rbx, %rdi
// 1ca: 4c 89 f6                      movq    %r14, %rsi
// 1cd: 4c 89 e2                      movq    %r12, %rdx
// 1d0: 5b                            popq    %rbx
// 1d1: 41 5c                         popq    %r12
// 1d3: 41 5d                         popq    %r13
// 1d5: 41 5e                         popq    %r14
// 1d7: 41 5f                         popq    %r15
// 1d9: ff e0                         jmpq    *%rax
// 1db: 
static const unsigned char _CHECK_VALIDITYplus_LIST_EXTEND_code_body[476] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x4f, 0x49, 0x89, 0xd4, 0x4c, 0x8d, 0x76, 0xf8, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x1a, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x37, 0x01, 0x00, 0x00, 0xe9, 0x52, 0x01, 0x00, 0x00, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd7, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x75, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x58, 0x49, 0x8b, 0x47, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x75, 0x00, 0x49, 0x8b, 0x47, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_LIST_EXTEND_code_holes[20] = {
    {0xe, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x29, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00'
// 67: 00
static const unsigned char _CHECK_VALIDITYplus_LIST_EXTEND_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LIST_EXTEND_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_ASSERTION_ERROR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 4f                         je      0x6d <_JIT_ENTRY+0x6d>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyExc_AssertionError
// 2b: 4c 8b 20                      movq    (%rax), %r12
// 2e: 41 8b 04 24                   movl    (%r12), %eax
// 32: ff c0                         incl    %eax
// 34: 74 10                         je      0x46 <_JIT_ENTRY+0x46>
// 36: 41 89 04 24                   movl    %eax, (%r12)
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 44: ff d0                         callq   *%rax
// 46: 4c 89 23                      movq    %r12, (%rbx)
// 49: 48 83 c3 08                   addq    $0x8, %rbx
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_CONTINUE
// 57: 4c 89 f7                      movq    %r14, %rdi
// 5a: 48 89 de                      movq    %rbx, %rsi
// 5d: 4c 89 fa                      movq    %r15, %rdx
// 60: 48 83 c4 08                   addq    $0x8, %rsp
// 64: 5b                            popq    %rbx
// 65: 41 5c                         popq    %r12
// 67: 41 5e                         popq    %r14
// 69: 41 5f                         popq    %r15
// 6b: ff e0                         jmpq    *%rax
// 6d: 4c 29 f3                      subq    %r14, %rbx
// 70: 48 83 c3 b8                   addq    $-0x48, %rbx
// 74: 48 c1 eb 03                   shrq    $0x3, %rbx
// 78: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 7c: 49 8b 06                      movq    (%r14), %rax
// 7f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000081:  R_X86_64_64  _JIT_TARGET
// 89: 89 c9                         movl    %ecx, %ecx
// 8b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 8f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 95: 48 83 c4 08                   addq    $0x8, %rsp
// 99: 5b                            popq    %rbx
// 9a: 41 5c                         popq    %r12
// 9c: 41 5e                         popq    %r14
// 9e: 41 5f                         popq    %r15
// a0: c3                            retq
// a1: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ASSERTION_ERROR_code_body[162] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x4f, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_ASSERTION_ERROR_code_holes[6] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ASSERTION_ERROR_data_body[1];
static const Hole _CHECK_VALIDITYplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_ATTR
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_ATTR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 49 89 f6                      movq    %rsi, %r14
// 10: 48 89 fb                      movq    %rdi, %rbx
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_EXECUTOR
// 1d: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 21: 74 73                         je      0x96 <_JIT_ENTRY+0x96>
// 23: 49 89 d7                      movq    %rdx, %r15
// 26: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 2a: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 2e: 48 8b 03                      movq    (%rbx), %rax
// 31: 48 8b 40 20                   movq    0x20(%rax), %rax
// 35: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000037:  R_X86_64_64  _JIT_OPARG
// 3f: 89 ca                         movl    %ecx, %edx
// 41: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// 47: 48 8b 74 90 18                movq    0x18(%rax,%rdx,4), %rsi
// 4c: f6 c1 01                      testb   $0x1, %cl
// 4f: 74 72                         je      0xc3 <_JIT_ENTRY+0xc3>
// 51: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 5a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005c:  R_X86_64_64  _PyObject_GetMethod
// 64: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 69: 4c 89 e7                      movq    %r12, %rdi
// 6c: ff d0                         callq   *%rax
// 6e: 85 c0                         testl   %eax, %eax
// 70: 0f 84 85 00 00 00             je      0xfb <_JIT_ENTRY+0xfb>
// 76: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 7b: 49 89 45 00                   movq    %rax, (%r13)
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _JIT_OPARG
// 89: a8 01                         testb   $0x1, %al
// 8b: 0f 85 ca 00 00 00             jne     0x15b <_JIT_ENTRY+0x15b>
// 91: e9 c8 00 00 00                jmp     0x15e <_JIT_ENTRY+0x15e>
// 96: 49 29 de                      subq    %rbx, %r14
// 99: 49 83 c6 b8                   addq    $-0x48, %r14
// 9d: 49 c1 ee 03                   shrq    $0x3, %r14
// a1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// a5: 48 8b 03                      movq    (%rbx), %rax
// a8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000aa:  R_X86_64_64  _JIT_TARGET
// b2: 89 c9                         movl    %ecx, %ecx
// b4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// b8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// be: e9 eb 00 00 00                jmp     0x1ae <_JIT_ENTRY+0x1ae>
// c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c5:  R_X86_64_64  PyObject_GetAttr
// cd: 4c 89 e7                      movq    %r12, %rdi
// d0: ff d0                         callq   *%rax
// d2: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// d7: 49 8b 04 24                   movq    (%r12), %rax
// db: 48 85 c0                      testq   %rax, %rax
// de: 7f 46                         jg      0x126 <_JIT_ENTRY+0x126>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// f9: eb 22                         jmp     0x11d <_JIT_ENTRY+0x11d>
// fb: 49 8b 04 24                   movq    (%r12), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 11d: 4c 89 e2                      movq    %r12, %rdx
// 120: ff d0                         callq   *%rax
// 122: 49 8b 04 24                   movq    (%r12), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 12                         js      0x13c <_JIT_ENTRY+0x13c>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 49 ff 0c 24                   decq    (%r12)
// 13a: 74 48                         je      0x184 <_JIT_ENTRY+0x184>
// 13c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 74 57                         je      0x19d <_JIT_ENTRY+0x19d>
// 146: 45 31 e4                      xorl    %r12d, %r12d
// 149: 49 89 45 00                   movq    %rax, (%r13)
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _JIT_OPARG
// 157: a8 01                         testb   $0x1, %al
// 159: 74 03                         je      0x15e <_JIT_ENTRY+0x15e>
// 15b: 4d 89 26                      movq    %r12, (%r14)
// 15e: 83 e0 01                      andl    $0x1, %eax
// 161: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _JIT_CONTINUE
// 16f: 48 89 df                      movq    %rbx, %rdi
// 172: 4c 89 fa                      movq    %r15, %rdx
// 175: 48 83 c4 10                   addq    $0x10, %rsp
// 179: 5b                            popq    %rbx
// 17a: 41 5c                         popq    %r12
// 17c: 41 5d                         popq    %r13
// 17e: 41 5e                         popq    %r14
// 180: 41 5f                         popq    %r15
// 182: ff e0                         jmpq    *%rax
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 85 c0                      testq   %rax, %rax
// 19b: 75 a9                         jne     0x146 <_JIT_ENTRY+0x146>
// 19d: 49 29 dd                      subq    %rbx, %r13
// 1a0: 49 83 c5 b8                   addq    $-0x48, %r13
// 1a4: 49 c1 ed 03                   shrq    $0x3, %r13
// 1a8: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 1ac: 31 c0                         xorl    %eax, %eax
// 1ae: 48 83 c4 10                   addq    $0x10, %rsp
// 1b2: 5b                            popq    %rbx
// 1b3: 41 5c                         popq    %r12
// 1b5: 41 5d                         popq    %r13
// 1b7: 41 5e                         popq    %r14
// 1b9: 41 5f                         popq    %r15
// 1bb: c3                            retq
// 1bc: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_code_body[445] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x73, 0x49, 0x89, 0xd7, 0x4d, 0x8d, 0x6e, 0xf8, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xca, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x90, 0x18, 0xf6, 0xc1, 0x01, 0x74, 0x72, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xca, 0x00, 0x00, 0x00, 0xe9, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xeb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0xeb, 0x22, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x48, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x57, 0x45, 0x31, 0xe4, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x03, 0x4d, 0x89, 0x26, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x75, 0xa9, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_code_holes[15] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_ATTR_CLASS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_ATTR_CLASS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 2b                         je      0x4a <_JIT_ENTRY+0x4a>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 26: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000028:  R_X86_64_64  _JIT_OPERAND
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 42                         jne     0x7a <_JIT_ENTRY+0x7a>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 52                         jle     0x93 <_JIT_ENTRY+0x93>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 74                         jns     0xb9 <_JIT_ENTRY+0xb9>
// 45: e9 81 00 00 00                jmp     0xcb <_JIT_ENTRY+0xcb>
// 4a: 49 29 de                      subq    %rbx, %r14
// 4d: 49 83 c6 b8                   addq    $-0x48, %r14
// 51: 49 c1 ee 03                   shrq    $0x3, %r14
// 55: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 59: 48 8b 03                      movq    (%rbx), %rax
// 5c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005e:  R_X86_64_64  _JIT_TARGET
// 66: 89 c9                         movl    %ecx, %ecx
// 68: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 70: 5b                            popq    %rbx
// 71: 41 5c                         popq    %r12
// 73: 41 5d                         popq    %r13
// 75: 41 5e                         popq    %r14
// 77: 41 5f                         popq    %r15
// 79: c3                            retq
// 7a: 41 89 45 00                   movl    %eax, (%r13)
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 88: ff d0                         callq   *%rax
// 8a: 49 8b 04 24                   movq    (%r12), %rax
// 8e: 48 85 c0                      testq   %rax, %rax
// 91: 7f ae                         jg      0x41 <_JIT_ENTRY+0x41>
// 93: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000095:  R_X86_64_64  .rodata.str1.1
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  _Py_NegativeRefcount
// a7: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// ac: 4c 89 e2                      movq    %r12, %rdx
// af: ff d0                         callq   *%rax
// b1: 49 8b 04 24                   movq    (%r12), %rax
// b5: 85 c0                         testl   %eax, %eax
// b7: 78 12                         js      0xcb <_JIT_ENTRY+0xcb>
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c3: ff d0                         callq   *%rax
// c5: 49 ff 0c 24                   decq    (%r12)
// c9: 74 3b                         je      0x106 <_JIT_ENTRY+0x106>
// cb: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _JIT_OPARG
// d9: a8 01                         testb   $0x1, %al
// db: 74 07                         je      0xe4 <_JIT_ENTRY+0xe4>
// dd: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e4: 83 e0 01                      andl    $0x1, %eax
// e7: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_CONTINUE
// f5: 48 89 df                      movq    %rbx, %rdi
// f8: 4c 89 fa                      movq    %r15, %rdx
// fb: 5b                            popq    %rbx
// fc: 41 5c                         popq    %r12
// fe: 41 5d                         popq    %r13
// 100: 41 5e                         popq    %r14
// 102: 41 5f                         popq    %r15
// 104: ff e0                         jmpq    *%rax
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_Dealloc
// 110: 4c 89 e7                      movq    %r12, %rdi
// 113: ff d0                         callq   *%rax
// 115: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 119: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011b:  R_X86_64_64  _JIT_OPARG
// 123: a8 01                         testb   $0x1, %al
// 125: 75 b6                         jne     0xdd <_JIT_ENTRY+0xdd>
// 127: eb bb                         jmp     0xe4 <_JIT_ENTRY+0xe4>
// 129: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_CLASS_code_body[298] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x2b, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3b, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0xb6, 0xeb, 0xbb};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_CLASS_code_holes[12] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_CLASS_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_ATTR_INSTANCE_VALUE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 3d                         je      0x5c <_JIT_ENTRY+0x5c>
// 1f: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 23: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 28: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002a:  R_X86_64_64  _JIT_OPERAND
// 32: 0f b7 c9                      movzwl  %cx, %ecx
// 35: 4c 8b 6c c8 01                movq    0x1(%rax,%rcx,8), %r13
// 3a: 4d 85 ed                      testq   %r13, %r13
// 3d: 74 1d                         je      0x5c <_JIT_ENTRY+0x5c>
// 3f: 49 89 d7                      movq    %rdx, %r15
// 42: 41 8b 45 00                   movl    (%r13), %eax
// 46: ff c0                         incl    %eax
// 48: 75 42                         jne     0x8c <_JIT_ENTRY+0x8c>
// 4a: 49 8b 04 24                   movq    (%r12), %rax
// 4e: 48 85 c0                      testq   %rax, %rax
// 51: 7e 52                         jle     0xa5 <_JIT_ENTRY+0xa5>
// 53: 85 c0                         testl   %eax, %eax
// 55: 79 74                         jns     0xcb <_JIT_ENTRY+0xcb>
// 57: e9 90 00 00 00                jmp     0xec <_JIT_ENTRY+0xec>
// 5c: 49 29 de                      subq    %rbx, %r14
// 5f: 49 83 c6 b8                   addq    $-0x48, %r14
// 63: 49 c1 ee 03                   shrq    $0x3, %r14
// 67: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 6b: 48 8b 03                      movq    (%rbx), %rax
// 6e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000070:  R_X86_64_64  _JIT_TARGET
// 78: 89 c9                         movl    %ecx, %ecx
// 7a: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 82: 5b                            popq    %rbx
// 83: 41 5c                         popq    %r12
// 85: 41 5d                         popq    %r13
// 87: 41 5e                         popq    %r14
// 89: 41 5f                         popq    %r15
// 8b: c3                            retq
// 8c: 41 89 45 00                   movl    %eax, (%r13)
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 48 85 c0                      testq   %rax, %rax
// a3: 7f ae                         jg      0x53 <_JIT_ENTRY+0x53>
// a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a7:  R_X86_64_64  .rodata.str1.1
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  _Py_NegativeRefcount
// b9: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// be: 4c 89 e2                      movq    %r12, %rdx
// c1: ff d0                         callq   *%rax
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 85 c0                         testl   %eax, %eax
// c9: 78 21                         js      0xec <_JIT_ENTRY+0xec>
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d5: ff d0                         callq   *%rax
// d7: 49 ff 0c 24                   decq    (%r12)
// db: 75 0f                         jne     0xec <_JIT_ENTRY+0xec>
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_Dealloc
// e7: 4c 89 e7                      movq    %r12, %rdi
// ea: ff d0                         callq   *%rax
// ec: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _JIT_OPARG
// fa: a8 01                         testb   $0x1, %al
// fc: 74 07                         je      0x105 <_JIT_ENTRY+0x105>
// fe: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 105: 83 e0 01                      andl    $0x1, %eax
// 108: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _JIT_CONTINUE
// 116: 48 89 df                      movq    %rbx, %rdi
// 119: 4c 89 fa                      movq    %r15, %rdx
// 11c: 5b                            popq    %rbx
// 11d: 41 5c                         popq    %r12
// 11f: 41 5d                         popq    %r13
// 121: 41 5e                         popq    %r14
// 123: 41 5f                         popq    %r15
// 125: ff e0                         jmpq    *%rax
// 127: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_INSTANCE_VALUE_code_body[296] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3d, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x90, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[11] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_ATTR_METHOD_LAZY_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 52                         je      0x71 <_JIT_ENTRY+0x71>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 26: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000028:  R_X86_64_64  _JIT_OPERAND
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 74 10                         je      0x48 <_JIT_ENTRY+0x48>
// 38: 41 89 45 00                   movl    %eax, (%r13)
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 46: ff d0                         callq   *%rax
// 48: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 4c: 4c 89 23                      movq    %r12, (%rbx)
// 4f: 48 83 c3 08                   addq    $0x8, %rbx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_CONTINUE
// 5d: 4c 89 f7                      movq    %r14, %rdi
// 60: 48 89 de                      movq    %rbx, %rsi
// 63: 4c 89 fa                      movq    %r15, %rdx
// 66: 5b                            popq    %rbx
// 67: 41 5c                         popq    %r12
// 69: 41 5d                         popq    %r13
// 6b: 41 5e                         popq    %r14
// 6d: 41 5f                         popq    %r15
// 6f: ff e0                         jmpq    *%rax
// 71: 4c 29 f3                      subq    %r14, %rbx
// 74: 48 83 c3 b8                   addq    $-0x48, %rbx
// 78: 48 c1 eb 03                   shrq    $0x3, %rbx
// 7c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 80: 49 8b 06                      movq    (%r14), %rax
// 83: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000085:  R_X86_64_64  _JIT_TARGET
// 8d: 89 c9                         movl    %ecx, %ecx
// 8f: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 97: 5b                            popq    %rbx
// 98: 41 5c                         popq    %r12
// 9a: 41 5d                         popq    %r13
// 9c: 41 5e                         popq    %r14
// 9e: 41 5f                         popq    %r15
// a0: c3                            retq
// a1: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[162] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x52, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[6] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[1];
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_ATTR_METHOD_NO_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 52                         je      0x71 <_JIT_ENTRY+0x71>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 26: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000028:  R_X86_64_64  _JIT_OPERAND
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 74 10                         je      0x48 <_JIT_ENTRY+0x48>
// 38: 41 89 45 00                   movl    %eax, (%r13)
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 46: ff d0                         callq   *%rax
// 48: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 4c: 4c 89 23                      movq    %r12, (%rbx)
// 4f: 48 83 c3 08                   addq    $0x8, %rbx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_CONTINUE
// 5d: 4c 89 f7                      movq    %r14, %rdi
// 60: 48 89 de                      movq    %rbx, %rsi
// 63: 4c 89 fa                      movq    %r15, %rdx
// 66: 5b                            popq    %rbx
// 67: 41 5c                         popq    %r12
// 69: 41 5d                         popq    %r13
// 6b: 41 5e                         popq    %r14
// 6d: 41 5f                         popq    %r15
// 6f: ff e0                         jmpq    *%rax
// 71: 4c 29 f3                      subq    %r14, %rbx
// 74: 48 83 c3 b8                   addq    $-0x48, %rbx
// 78: 48 c1 eb 03                   shrq    $0x3, %rbx
// 7c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 80: 49 8b 06                      movq    (%r14), %rax
// 83: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000085:  R_X86_64_64  _JIT_TARGET
// 8d: 89 c9                         movl    %ecx, %ecx
// 8f: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 97: 5b                            popq    %rbx
// 98: 41 5c                         popq    %r12
// 9a: 41 5d                         popq    %r13
// 9c: 41 5e                         popq    %r14
// 9e: 41 5f                         popq    %r15
// a0: c3                            retq
// a1: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_NO_DICT_code_body[162] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x52, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[6] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_NO_DICT_data_body[1];
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_ATTR_METHOD_WITH_VALUES.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 52                         je      0x71 <_JIT_ENTRY+0x71>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 26: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000028:  R_X86_64_64  _JIT_OPERAND
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 74 10                         je      0x48 <_JIT_ENTRY+0x48>
// 38: 41 89 45 00                   movl    %eax, (%r13)
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 46: ff d0                         callq   *%rax
// 48: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 4c: 4c 89 23                      movq    %r12, (%rbx)
// 4f: 48 83 c3 08                   addq    $0x8, %rbx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_CONTINUE
// 5d: 4c 89 f7                      movq    %r14, %rdi
// 60: 48 89 de                      movq    %rbx, %rsi
// 63: 4c 89 fa                      movq    %r15, %rdx
// 66: 5b                            popq    %rbx
// 67: 41 5c                         popq    %r12
// 69: 41 5d                         popq    %r13
// 6b: 41 5e                         popq    %r14
// 6d: 41 5f                         popq    %r15
// 6f: ff e0                         jmpq    *%rax
// 71: 4c 29 f3                      subq    %r14, %rbx
// 74: 48 83 c3 b8                   addq    $-0x48, %rbx
// 78: 48 c1 eb 03                   shrq    $0x3, %rbx
// 7c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 80: 49 8b 06                      movq    (%r14), %rax
// 83: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000085:  R_X86_64_64  _JIT_TARGET
// 8d: 89 c9                         movl    %ecx, %ecx
// 8f: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 97: 5b                            popq    %rbx
// 98: 41 5c                         popq    %r12
// 9a: 41 5d                         popq    %r13
// 9c: 41 5e                         popq    %r14
// 9e: 41 5f                         popq    %r15
// a0: c3                            retq
// a1: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[162] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x52, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[6] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[1];
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_ATTR_MODULE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_ATTR_MODULE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 54                         je      0x73 <_JIT_ENTRY+0x73>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 26: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 2b: 48 8b 40 20                   movq    0x20(%rax), %rax
// 2f: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 33: ba 01 00 00 00                movl    $0x1, %edx
// 38: 48 d3 e2                      shlq    %cl, %rdx
// 3b: 48 01 c2                      addq    %rax, %rdx
// 3e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000040:  R_X86_64_64  _JIT_OPERAND
// 48: 0f b7 c0                      movzwl  %ax, %eax
// 4b: 48 c1 e0 04                   shlq    $0x4, %rax
// 4f: 4c 8b 6c 10 28                movq    0x28(%rax,%rdx), %r13
// 54: 4d 85 ed                      testq   %r13, %r13
// 57: 74 1a                         je      0x73 <_JIT_ENTRY+0x73>
// 59: 41 8b 45 00                   movl    (%r13), %eax
// 5d: ff c0                         incl    %eax
// 5f: 75 42                         jne     0xa3 <_JIT_ENTRY+0xa3>
// 61: 49 8b 04 24                   movq    (%r12), %rax
// 65: 48 85 c0                      testq   %rax, %rax
// 68: 7e 52                         jle     0xbc <_JIT_ENTRY+0xbc>
// 6a: 85 c0                         testl   %eax, %eax
// 6c: 79 74                         jns     0xe2 <_JIT_ENTRY+0xe2>
// 6e: e9 90 00 00 00                jmp     0x103 <_JIT_ENTRY+0x103>
// 73: 49 29 de                      subq    %rbx, %r14
// 76: 49 83 c6 b8                   addq    $-0x48, %r14
// 7a: 49 c1 ee 03                   shrq    $0x3, %r14
// 7e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 82: 48 8b 03                      movq    (%rbx), %rax
// 85: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000087:  R_X86_64_64  _JIT_TARGET
// 8f: 89 c9                         movl    %ecx, %ecx
// 91: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 99: 5b                            popq    %rbx
// 9a: 41 5c                         popq    %r12
// 9c: 41 5d                         popq    %r13
// 9e: 41 5e                         popq    %r14
// a0: 41 5f                         popq    %r15
// a2: c3                            retq
// a3: 41 89 45 00                   movl    %eax, (%r13)
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _Py_INCREF_IncRefTotal
// b1: ff d0                         callq   *%rax
// b3: 49 8b 04 24                   movq    (%r12), %rax
// b7: 48 85 c0                      testq   %rax, %rax
// ba: 7f ae                         jg      0x6a <_JIT_ENTRY+0x6a>
// bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000be:  R_X86_64_64  .rodata.str1.1
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _Py_NegativeRefcount
// d0: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// d5: 4c 89 e2                      movq    %r12, %rdx
// d8: ff d0                         callq   *%rax
// da: 49 8b 04 24                   movq    (%r12), %rax
// de: 85 c0                         testl   %eax, %eax
// e0: 78 21                         js      0x103 <_JIT_ENTRY+0x103>
// e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ec: ff d0                         callq   *%rax
// ee: 49 ff 0c 24                   decq    (%r12)
// f2: 75 0f                         jne     0x103 <_JIT_ENTRY+0x103>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_Dealloc
// fe: 4c 89 e7                      movq    %r12, %rdi
// 101: ff d0                         callq   *%rax
// 103: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  _JIT_OPARG
// 111: a8 01                         testb   $0x1, %al
// 113: 74 07                         je      0x11c <_JIT_ENTRY+0x11c>
// 115: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 11c: 83 e0 01                      andl    $0x1, %eax
// 11f: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _JIT_CONTINUE
// 12d: 48 89 df                      movq    %rbx, %rdi
// 130: 4c 89 fa                      movq    %r15, %rdx
// 133: 5b                            popq    %rbx
// 134: 41 5c                         popq    %r12
// 136: 41 5d                         popq    %r13
// 138: 41 5e                         popq    %r14
// 13a: 41 5f                         popq    %r15
// 13c: ff e0                         jmpq    *%rax
// 13e: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_MODULE_code_body[319] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x54, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x10, 0x28, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x90, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_MODULE_code_holes[11] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_MODULE_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 16                         je      0x34 <_JIT_ENTRY+0x34>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 25: 49 8b 04 24                   movq    (%r12), %rax
// 29: 48 85 c0                      testq   %rax, %rax
// 2c: 7e 3a                         jle     0x68 <_JIT_ENTRY+0x68>
// 2e: 85 c0                         testl   %eax, %eax
// 30: 79 5c                         jns     0x8e <_JIT_ENTRY+0x8e>
// 32: eb 6c                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// 34: 4c 29 f3                      subq    %r14, %rbx
// 37: 48 83 c3 b8                   addq    $-0x48, %rbx
// 3b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 43: 49 8b 06                      movq    (%r14), %rax
// 46: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000048:  R_X86_64_64  _JIT_TARGET
// 50: 89 c9                         movl    %ecx, %ecx
// 52: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 56: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5c: 48 83 c4 08                   addq    $0x8, %rsp
// 60: 5b                            popq    %rbx
// 61: 41 5c                         popq    %r12
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: c3                            retq
// 68: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006a:  R_X86_64_64  .rodata.str1.1
// 72: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000074:  R_X86_64_64  _Py_NegativeRefcount
// 7c: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 81: 4c 89 e2                      movq    %r12, %rdx
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 85 c0                         testl   %eax, %eax
// 8c: 78 12                         js      0xa0 <_JIT_ENTRY+0xa0>
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: ff d0                         callq   *%rax
// 9a: 49 ff 0c 24                   decq    (%r12)
// 9e: 74 46                         je      0xe6 <_JIT_ENTRY+0xe6>
// a0: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000000a2:  R_X86_64_64  _JIT_OPERAND
// aa: 41 8b 04 24                   movl    (%r12), %eax
// ae: ff c0                         incl    %eax
// b0: 74 10                         je      0xc2 <_JIT_ENTRY+0xc2>
// b2: 41 89 04 24                   movl    %eax, (%r12)
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// c0: ff d0                         callq   *%rax
// c2: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _JIT_CONTINUE
// d0: 4c 89 f7                      movq    %r14, %rdi
// d3: 48 89 de                      movq    %rbx, %rsi
// d6: 4c 89 fa                      movq    %r15, %rdx
// d9: 48 83 c4 08                   addq    $0x8, %rsp
// dd: 5b                            popq    %rbx
// de: 41 5c                         popq    %r12
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: ff e0                         jmpq    *%rax
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _Py_Dealloc
// f0: 4c 89 e7                      movq    %r12, %rdi
// f3: ff d0                         callq   *%rax
// f5: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000000f7:  R_X86_64_64  _JIT_OPERAND
// ff: 41 8b 04 24                   movl    (%r12), %eax
// 103: ff c0                         incl    %eax
// 105: 75 ab                         jne     0xb2 <_JIT_ENTRY+0xb2>
// 107: eb b9                         jmp     0xc2 <_JIT_ENTRY+0xc2>
// 109: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[266] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x16, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3a, 0x85, 0xc0, 0x79, 0x5c, 0xeb, 0x6c, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x46, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x75, 0xab, 0xeb, 0xb9};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[11] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x74, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 16                         je      0x34 <_JIT_ENTRY+0x34>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 25: 49 8b 04 24                   movq    (%r12), %rax
// 29: 48 85 c0                      testq   %rax, %rax
// 2c: 7e 3a                         jle     0x68 <_JIT_ENTRY+0x68>
// 2e: 85 c0                         testl   %eax, %eax
// 30: 79 5c                         jns     0x8e <_JIT_ENTRY+0x8e>
// 32: eb 6c                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// 34: 4c 29 f3                      subq    %r14, %rbx
// 37: 48 83 c3 b8                   addq    $-0x48, %rbx
// 3b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 43: 49 8b 06                      movq    (%r14), %rax
// 46: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000048:  R_X86_64_64  _JIT_TARGET
// 50: 89 c9                         movl    %ecx, %ecx
// 52: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 56: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5c: 48 83 c4 08                   addq    $0x8, %rsp
// 60: 5b                            popq    %rbx
// 61: 41 5c                         popq    %r12
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: c3                            retq
// 68: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006a:  R_X86_64_64  .rodata.str1.1
// 72: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000074:  R_X86_64_64  _Py_NegativeRefcount
// 7c: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 81: 4c 89 e2                      movq    %r12, %rdx
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 85 c0                         testl   %eax, %eax
// 8c: 78 12                         js      0xa0 <_JIT_ENTRY+0xa0>
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: ff d0                         callq   *%rax
// 9a: 49 ff 0c 24                   decq    (%r12)
// 9e: 74 46                         je      0xe6 <_JIT_ENTRY+0xe6>
// a0: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000000a2:  R_X86_64_64  _JIT_OPERAND
// aa: 41 8b 04 24                   movl    (%r12), %eax
// ae: ff c0                         incl    %eax
// b0: 74 10                         je      0xc2 <_JIT_ENTRY+0xc2>
// b2: 41 89 04 24                   movl    %eax, (%r12)
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// c0: ff d0                         callq   *%rax
// c2: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _JIT_CONTINUE
// d0: 4c 89 f7                      movq    %r14, %rdi
// d3: 48 89 de                      movq    %rbx, %rsi
// d6: 4c 89 fa                      movq    %r15, %rdx
// d9: 48 83 c4 08                   addq    $0x8, %rsp
// dd: 5b                            popq    %rbx
// de: 41 5c                         popq    %r12
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: ff e0                         jmpq    *%rax
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _Py_Dealloc
// f0: 4c 89 e7                      movq    %r12, %rdi
// f3: ff d0                         callq   *%rax
// f5: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000000f7:  R_X86_64_64  _JIT_OPERAND
// ff: 41 8b 04 24                   movl    (%r12), %eax
// 103: ff c0                         incl    %eax
// 105: 75 ab                         jne     0xb2 <_JIT_ENTRY+0xb2>
// 107: eb b9                         jmp     0xc2 <_JIT_ENTRY+0xc2>
// 109: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[266] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x16, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3a, 0x85, 0xc0, 0x79, 0x5c, 0xeb, 0x6c, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x46, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x75, 0xab, 0xeb, 0xb9};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[11] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x74, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_ATTR_SLOT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_ATTR_SLOT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 37                         je      0x56 <_JIT_ENTRY+0x56>
// 1f: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _JIT_OPERAND
// 2d: 0f b7 c0                      movzwl  %ax, %eax
// 30: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 34: 4d 85 ed                      testq   %r13, %r13
// 37: 74 1d                         je      0x56 <_JIT_ENTRY+0x56>
// 39: 49 89 d7                      movq    %rdx, %r15
// 3c: 41 8b 45 00                   movl    (%r13), %eax
// 40: ff c0                         incl    %eax
// 42: 75 42                         jne     0x86 <_JIT_ENTRY+0x86>
// 44: 49 8b 04 24                   movq    (%r12), %rax
// 48: 48 85 c0                      testq   %rax, %rax
// 4b: 7e 52                         jle     0x9f <_JIT_ENTRY+0x9f>
// 4d: 85 c0                         testl   %eax, %eax
// 4f: 79 74                         jns     0xc5 <_JIT_ENTRY+0xc5>
// 51: e9 90 00 00 00                jmp     0xe6 <_JIT_ENTRY+0xe6>
// 56: 49 29 de                      subq    %rbx, %r14
// 59: 49 83 c6 b8                   addq    $-0x48, %r14
// 5d: 49 c1 ee 03                   shrq    $0x3, %r14
// 61: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 65: 48 8b 03                      movq    (%rbx), %rax
// 68: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006a:  R_X86_64_64  _JIT_TARGET
// 72: 89 c9                         movl    %ecx, %ecx
// 74: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 7c: 5b                            popq    %rbx
// 7d: 41 5c                         popq    %r12
// 7f: 41 5d                         popq    %r13
// 81: 41 5e                         popq    %r14
// 83: 41 5f                         popq    %r15
// 85: c3                            retq
// 86: 41 89 45 00                   movl    %eax, (%r13)
// 8a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 48 85 c0                      testq   %rax, %rax
// 9d: 7f ae                         jg      0x4d <_JIT_ENTRY+0x4d>
// 9f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a1:  R_X86_64_64  .rodata.str1.1
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_NegativeRefcount
// b3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b8: 4c 89 e2                      movq    %r12, %rdx
// bb: ff d0                         callq   *%rax
// bd: 49 8b 04 24                   movq    (%r12), %rax
// c1: 85 c0                         testl   %eax, %eax
// c3: 78 21                         js      0xe6 <_JIT_ENTRY+0xe6>
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// cf: ff d0                         callq   *%rax
// d1: 49 ff 0c 24                   decq    (%r12)
// d5: 75 0f                         jne     0xe6 <_JIT_ENTRY+0xe6>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_Dealloc
// e1: 4c 89 e7                      movq    %r12, %rdi
// e4: ff d0                         callq   *%rax
// e6: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _JIT_OPARG
// f4: a8 01                         testb   $0x1, %al
// f6: 74 07                         je      0xff <_JIT_ENTRY+0xff>
// f8: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ff: 83 e0 01                      andl    $0x1, %eax
// 102: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _JIT_CONTINUE
// 110: 48 89 df                      movq    %rbx, %rdi
// 113: 4c 89 fa                      movq    %r15, %rdx
// 116: 5b                            popq    %rbx
// 117: 41 5c                         popq    %r12
// 119: 41 5d                         popq    %r13
// 11b: 41 5e                         popq    %r14
// 11d: 41 5f                         popq    %r15
// 11f: ff e0                         jmpq    *%rax
// 121: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_SLOT_code_body[290] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x37, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x90, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_SLOT_code_holes[11] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x25, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_SLOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_SLOT_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_ATTR_WITH_HINT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 0f 84 9a 00 00 00             je      0xbd <_JIT_ENTRY+0xbd>
// 23: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 27: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 2c: 48 8b 40 20                   movq    0x20(%rax), %rax
// 30: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000032:  R_X86_64_64  _JIT_OPERAND
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 39 48 18                   cmpq    %rcx, 0x18(%rax)
// 41: 76 7a                         jbe     0xbd <_JIT_ENTRY+0xbd>
// 43: 49 89 d7                      movq    %rdx, %r15
// 46: 48 8b 0b                      movq    (%rbx), %rcx
// 49: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// 4d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: 81 e6 fe ff 00 00             andl    $0xfffe, %esi           # imm = 0xFFFE
// 5d: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 61: bf 01 00 00 00                movl    $0x1, %edi
// 66: 48 d3 e7                      shlq    %cl, %rdi
// 69: 48 8b 4c b2 18                movq    0x18(%rdx,%rsi,4), %rcx
// 6e: 80 78 0a 00                   cmpb    $0x0, 0xa(%rax)
// 72: 48 8d 44 38 20                leaq    0x20(%rax,%rdi), %rax
// 77: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000079:  R_X86_64_64  _JIT_OPERAND
// 81: 0f b7 d2                      movzwl  %dx, %edx
// 84: 74 2c                         je      0xb2 <_JIT_ENTRY+0xb2>
// 86: 48 c1 e2 04                   shlq    $0x4, %rdx
// 8a: 48 39 0c 10                   cmpq    %rcx, (%rax,%rdx)
// 8e: 75 2d                         jne     0xbd <_JIT_ENTRY+0xbd>
// 90: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000092:  R_X86_64_64  _JIT_OPERAND
// 9a: 0f b7 c9                      movzwl  %cx, %ecx
// 9d: 48 c1 e1 04                   shlq    $0x4, %rcx
// a1: 48 01 c8                      addq    %rcx, %rax
// a4: 48 83 c0 08                   addq    $0x8, %rax
// a8: 4c 8b 28                      movq    (%rax), %r13
// ab: 4d 85 ed                      testq   %r13, %r13
// ae: 75 5e                         jne     0x10e <_JIT_ENTRY+0x10e>
// b0: eb 0b                         jmp     0xbd <_JIT_ENTRY+0xbd>
// b2: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// b6: 48 39 4c d0 08                cmpq    %rcx, 0x8(%rax,%rdx,8)
// bb: 74 30                         je      0xed <_JIT_ENTRY+0xed>
// bd: 49 29 de                      subq    %rbx, %r14
// c0: 49 83 c6 b8                   addq    $-0x48, %r14
// c4: 49 c1 ee 03                   shrq    $0x3, %r14
// c8: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// cc: 48 8b 03                      movq    (%rbx), %rax
// cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d1:  R_X86_64_64  _JIT_TARGET
// d9: 89 c9                         movl    %ecx, %ecx
// db: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// e3: 5b                            popq    %rbx
// e4: 41 5c                         popq    %r12
// e6: 41 5d                         popq    %r13
// e8: 41 5e                         popq    %r14
// ea: 41 5f                         popq    %r15
// ec: c3                            retq
// ed: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ef:  R_X86_64_64  _JIT_OPERAND
// f7: 0f b7 c9                      movzwl  %cx, %ecx
// fa: 48 8d 0c 49                   leaq    (%rcx,%rcx,2), %rcx
// fe: 48 8d 04 c8                   leaq    (%rax,%rcx,8), %rax
// 102: 48 83 c0 10                   addq    $0x10, %rax
// 106: 4c 8b 28                      movq    (%rax), %r13
// 109: 4d 85 ed                      testq   %r13, %r13
// 10c: 74 af                         je      0xbd <_JIT_ENTRY+0xbd>
// 10e: 41 8b 45 00                   movl    (%r13), %eax
// 112: ff c0                         incl    %eax
// 114: 75 0f                         jne     0x125 <_JIT_ENTRY+0x125>
// 116: 49 8b 04 24                   movq    (%r12), %rax
// 11a: 48 85 c0                      testq   %rax, %rax
// 11d: 7e 1f                         jle     0x13e <_JIT_ENTRY+0x13e>
// 11f: 85 c0                         testl   %eax, %eax
// 121: 79 41                         jns     0x164 <_JIT_ENTRY+0x164>
// 123: eb 60                         jmp     0x185 <_JIT_ENTRY+0x185>
// 125: 41 89 45 00                   movl    %eax, (%r13)
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 133: ff d0                         callq   *%rax
// 135: 49 8b 04 24                   movq    (%r12), %rax
// 139: 48 85 c0                      testq   %rax, %rax
// 13c: 7f e1                         jg      0x11f <_JIT_ENTRY+0x11f>
// 13e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000140:  R_X86_64_64  .rodata.str1.1
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_NegativeRefcount
// 152: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 157: 4c 89 e2                      movq    %r12, %rdx
// 15a: ff d0                         callq   *%rax
// 15c: 49 8b 04 24                   movq    (%r12), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 21                         js      0x185 <_JIT_ENTRY+0x185>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0c 24                   decq    (%r12)
// 174: 75 0f                         jne     0x185 <_JIT_ENTRY+0x185>
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _Py_Dealloc
// 180: 4c 89 e7                      movq    %r12, %rdi
// 183: ff d0                         callq   *%rax
// 185: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _JIT_OPARG
// 193: a8 01                         testb   $0x1, %al
// 195: 74 07                         je      0x19e <_JIT_ENTRY+0x19e>
// 197: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 19e: 83 e0 01                      andl    $0x1, %eax
// 1a1: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _JIT_CONTINUE
// 1af: 48 89 df                      movq    %rbx, %rdi
// 1b2: 4c 89 fa                      movq    %r15, %rdx
// 1b5: 5b                            popq    %rbx
// 1b6: 41 5c                         popq    %r12
// 1b8: 41 5d                         popq    %r13
// 1ba: 41 5e                         popq    %r14
// 1bc: 41 5f                         popq    %r15
// 1be: ff e0                         jmpq    *%rax
// 1c0: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_WITH_HINT_code_body[449] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x18, 0x76, 0x7a, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x51, 0x20, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe6, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x48, 0x09, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe7, 0x48, 0x8b, 0x4c, 0xb2, 0x18, 0x80, 0x78, 0x0a, 0x00, 0x48, 0x8d, 0x44, 0x38, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x2c, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x0c, 0x10, 0x75, 0x2d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0x01, 0xc8, 0x48, 0x83, 0xc0, 0x08, 0x4c, 0x8b, 0x28, 0x4d, 0x85, 0xed, 0x75, 0x5e, 0xeb, 0x0b, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x4c, 0xd0, 0x08, 0x74, 0x30, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x0c, 0x49, 0x48, 0x8d, 0x04, 0xc8, 0x48, 0x83, 0xc0, 0x10, 0x4c, 0x8b, 0x28, 0x4d, 0x85, 0xed, 0x74, 0xaf, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_WITH_HINT_code_holes[15] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_BUILD_CLASS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_BUILD_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 83 ec 10                   subq    $0x10, %rsp
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 5c                         je      0x7b <_JIT_ENTRY+0x7b>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  PyMapping_GetOptionalItem
// 30: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000032:  R_X86_64_64  _PyRuntime
// 3a: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// 41: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 46: ff d0                         callq   *%rax
// 48: 85 c0                         testl   %eax, %eax
// 4a: 78 7f                         js      0xcb <_JIT_ENTRY+0xcb>
// 4c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 51: 48 85 c0                      testq   %rax, %rax
// 54: 74 4f                         je      0xa5 <_JIT_ENTRY+0xa5>
// 56: 48 89 03                      movq    %rax, (%rbx)
// 59: 48 83 c3 08                   addq    $0x8, %rbx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _JIT_CONTINUE
// 67: 4c 89 f7                      movq    %r14, %rdi
// 6a: 48 89 de                      movq    %rbx, %rsi
// 6d: 4c 89 fa                      movq    %r15, %rdx
// 70: 48 83 c4 10                   addq    $0x10, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5e                         popq    %r14
// 77: 41 5f                         popq    %r15
// 79: ff e0                         jmpq    *%rax
// 7b: 4c 29 f3                      subq    %r14, %rbx
// 7e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 82: 48 c1 eb 03                   shrq    $0x3, %rbx
// 86: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 8a: 49 8b 06                      movq    (%r14), %rax
// 8d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008f:  R_X86_64_64  _JIT_TARGET
// 97: 89 c9                         movl    %ecx, %ecx
// 99: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a3: eb 37                         jmp     0xdc <_JIT_ENTRY+0xdc>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  PyExc_NameError
// af: 48 8b 30                      movq    (%rax), %rsi
// b2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000b4:  R_X86_64_64  .rodata.str1.1
// bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000be:  R_X86_64_64  _PyErr_SetString
// c6: 4c 89 ff                      movq    %r15, %rdi
// c9: ff d0                         callq   *%rax
// cb: 4c 29 f3                      subq    %r14, %rbx
// ce: 48 83 c3 b8                   addq    $-0x48, %rbx
// d2: 48 c1 eb 03                   shrq    $0x3, %rbx
// d6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// da: 31 c0                         xorl    %eax, %eax
// dc: 48 83 c4 10                   addq    $0x10, %rsp
// e0: 5b                            popq    %rbx
// e1: 41 5e                         popq    %r14
// e3: 41 5f                         popq    %r15
// e5: c3                            retq
// e6: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_BUILD_CLASS_code_body[231] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x83, 0xec, 0x10, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x5c, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x7f, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x4f, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_BUILD_CLASS_code_holes[9] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '__build_class__ not found\x00'
// 1a: 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_BUILD_CLASS_data_body[33] = {0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_BUILD_CLASS_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_CONST
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_CONST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 5b                         je      0x79 <_JIT_ENTRY+0x79>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 49 8b 06                      movq    (%r14), %rax
// 24: 48 8b 40 18                   movq    0x18(%rax), %rax
// 28: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002a:  R_X86_64_64  _JIT_OPARG
// 32: 0f b7 c9                      movzwl  %cx, %ecx
// 35: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 3a: 41 8b 04 24                   movl    (%r12), %eax
// 3e: ff c0                         incl    %eax
// 40: 74 10                         je      0x52 <_JIT_ENTRY+0x52>
// 42: 41 89 04 24                   movl    %eax, (%r12)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 50: ff d0                         callq   *%rax
// 52: 4c 89 23                      movq    %r12, (%rbx)
// 55: 48 83 c3 08                   addq    $0x8, %rbx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _JIT_CONTINUE
// 63: 4c 89 f7                      movq    %r14, %rdi
// 66: 48 89 de                      movq    %rbx, %rsi
// 69: 4c 89 fa                      movq    %r15, %rdx
// 6c: 48 83 c4 08                   addq    $0x8, %rsp
// 70: 5b                            popq    %rbx
// 71: 41 5c                         popq    %r12
// 73: 41 5e                         popq    %r14
// 75: 41 5f                         popq    %r15
// 77: ff e0                         jmpq    *%rax
// 79: 4c 29 f3                      subq    %r14, %rbx
// 7c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 80: 48 c1 eb 03                   shrq    $0x3, %rbx
// 84: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 88: 49 8b 06                      movq    (%r14), %rax
// 8b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008d:  R_X86_64_64  _JIT_TARGET
// 95: 89 c9                         movl    %ecx, %ecx
// 97: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a1: 48 83 c4 08                   addq    $0x8, %rsp
// a5: 5b                            popq    %rbx
// a6: 41 5c                         popq    %r12
// a8: 41 5e                         popq    %r14
// aa: 41 5f                         popq    %r15
// ac: c3                            retq
// ad: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_CONST_code_body[174] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x5b, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_CONST_code_holes[6] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_CONST_data_body[1];
static const Hole _CHECK_VALIDITYplus_LOAD_CONST_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_DEREF
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_DEREF.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 5d                         je      0x7b <_JIT_ENTRY+0x7b>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  _JIT_OPARG
// 2b: 0f b7 c0                      movzwl  %ax, %eax
// 2e: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// 33: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 37: 4d 85 e4                      testq   %r12, %r12
// 3a: 74 69                         je      0xa5 <_JIT_ENTRY+0xa5>
// 3c: 41 8b 04 24                   movl    (%r12), %eax
// 40: ff c0                         incl    %eax
// 42: 74 10                         je      0x54 <_JIT_ENTRY+0x54>
// 44: 41 89 04 24                   movl    %eax, (%r12)
// 48: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 52: ff d0                         callq   *%rax
// 54: 4c 89 23                      movq    %r12, (%rbx)
// 57: 48 83 c3 08                   addq    $0x8, %rbx
// 5b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005d:  R_X86_64_64  _JIT_CONTINUE
// 65: 4c 89 f7                      movq    %r14, %rdi
// 68: 48 89 de                      movq    %rbx, %rsi
// 6b: 4c 89 fa                      movq    %r15, %rdx
// 6e: 48 83 c4 08                   addq    $0x8, %rsp
// 72: 5b                            popq    %rbx
// 73: 41 5c                         popq    %r12
// 75: 41 5e                         popq    %r14
// 77: 41 5f                         popq    %r15
// 79: ff e0                         jmpq    *%rax
// 7b: 4c 29 f3                      subq    %r14, %rbx
// 7e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 82: 48 c1 eb 03                   shrq    $0x3, %rbx
// 86: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 8a: 49 8b 06                      movq    (%r14), %rax
// 8d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008f:  R_X86_64_64  _JIT_TARGET
// 97: 89 c9                         movl    %ecx, %ecx
// 99: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a3: eb 30                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// a5: 49 8b 36                      movq    (%r14), %rsi
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 0f b7 d0                      movzwl  %ax, %edx
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _PyEval_FormatExcUnbound
// bf: 4c 89 ff                      movq    %r15, %rdi
// c2: ff d0                         callq   *%rax
// c4: 4c 29 f3                      subq    %r14, %rbx
// c7: 48 83 c3 b8                   addq    $-0x48, %rbx
// cb: 48 c1 eb 03                   shrq    $0x3, %rbx
// cf: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// d3: 31 c0                         xorl    %eax, %eax
// d5: 48 83 c4 08                   addq    $0x8, %rsp
// d9: 5b                            popq    %rbx
// da: 41 5c                         popq    %r12
// dc: 41 5e                         popq    %r14
// de: 41 5f                         popq    %r15
// e0: c3                            retq
// e1: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_DEREF_code_body[226] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x5d, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x69, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x30, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_DEREF_code_holes[8] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_DEREF_data_body[1];
static const Hole _CHECK_VALIDITYplus_LOAD_DEREF_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_FAST
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 54                         je      0x72 <_JIT_ENTRY+0x72>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  _JIT_OPARG
// 2b: 0f b7 c0                      movzwl  %ax, %eax
// 2e: 4d 8b 64 c6 48                movq    0x48(%r14,%rax,8), %r12
// 33: 41 8b 04 24                   movl    (%r12), %eax
// 37: ff c0                         incl    %eax
// 39: 74 10                         je      0x4b <_JIT_ENTRY+0x4b>
// 3b: 41 89 04 24                   movl    %eax, (%r12)
// 3f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000041:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 49: ff d0                         callq   *%rax
// 4b: 4c 89 23                      movq    %r12, (%rbx)
// 4e: 48 83 c3 08                   addq    $0x8, %rbx
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _JIT_CONTINUE
// 5c: 4c 89 f7                      movq    %r14, %rdi
// 5f: 48 89 de                      movq    %rbx, %rsi
// 62: 4c 89 fa                      movq    %r15, %rdx
// 65: 48 83 c4 08                   addq    $0x8, %rsp
// 69: 5b                            popq    %rbx
// 6a: 41 5c                         popq    %r12
// 6c: 41 5e                         popq    %r14
// 6e: 41 5f                         popq    %r15
// 70: ff e0                         jmpq    *%rax
// 72: 4c 29 f3                      subq    %r14, %rbx
// 75: 48 83 c3 b8                   addq    $-0x48, %rbx
// 79: 48 c1 eb 03                   shrq    $0x3, %rbx
// 7d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 81: 49 8b 06                      movq    (%r14), %rax
// 84: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000086:  R_X86_64_64  _JIT_TARGET
// 8e: 89 c9                         movl    %ecx, %ecx
// 90: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 94: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9a: 48 83 c4 08                   addq    $0x8, %rsp
// 9e: 5b                            popq    %rbx
// 9f: 41 5c                         popq    %r12
// a1: 41 5e                         popq    %r14
// a3: 41 5f                         popq    %r15
// a5: c3                            retq
// a6: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_FAST_code_body[167] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x54, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x64, 0xc6, 0x48, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_FAST_code_holes[6] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_FAST_data_body[1];
static const Hole _CHECK_VALIDITYplus_LOAD_FAST_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_FAST_AND_CLEAR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 2e                         je      0x3e <_JIT_ENTRY+0x3e>
// 10: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000012:  R_X86_64_64  _JIT_OPARG
// 1a: 0f b7 c0                      movzwl  %ax, %eax
// 1d: 48 8b 4c c7 48                movq    0x48(%rdi,%rax,8), %rcx
// 22: 48 c7 44 c7 48 00 00 00 00    movq    $0x0, 0x48(%rdi,%rax,8)
// 2b: 48 89 0e                      movq    %rcx, (%rsi)
// 2e: 48 83 c6 08                   addq    $0x8, %rsi
// 32: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000034:  R_X86_64_64  _JIT_CONTINUE
// 3c: ff e0                         jmpq    *%rax
// 3e: 48 29 fe                      subq    %rdi, %rsi
// 41: 48 83 c6 b8                   addq    $-0x48, %rsi
// 45: 48 c1 ee 03                   shrq    $0x3, %rsi
// 49: 89 77 40                      movl    %esi, 0x40(%rdi)
// 4c: 48 8b 07                      movq    (%rdi), %rax
// 4f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000051:  R_X86_64_64  _JIT_TARGET
// 59: 89 c9                         movl    %ecx, %ecx
// 5b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 5f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 65: c3                            retq
// 66: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_FAST_AND_CLEAR_code_body[103] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x4c, 0xc7, 0x48, 0x48, 0xc7, 0x44, 0xc7, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0e, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_FAST_AND_CLEAR_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x12, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x34, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_FAST_AND_CLEAR_data_body[1];
static const Hole _CHECK_VALIDITYplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_FAST_CHECK
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_FAST_CHECK.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 59                         je      0x77 <_JIT_ENTRY+0x77>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  _JIT_OPARG
// 2b: 0f b7 c0                      movzwl  %ax, %eax
// 2e: 4d 8b 64 c6 48                movq    0x48(%r14,%rax,8), %r12
// 33: 4d 85 e4                      testq   %r12, %r12
// 36: 74 69                         je      0xa1 <_JIT_ENTRY+0xa1>
// 38: 41 8b 04 24                   movl    (%r12), %eax
// 3c: ff c0                         incl    %eax
// 3e: 74 10                         je      0x50 <_JIT_ENTRY+0x50>
// 40: 41 89 04 24                   movl    %eax, (%r12)
// 44: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000046:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 4e: ff d0                         callq   *%rax
// 50: 4c 89 23                      movq    %r12, (%rbx)
// 53: 48 83 c3 08                   addq    $0x8, %rbx
// 57: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000059:  R_X86_64_64  _JIT_CONTINUE
// 61: 4c 89 f7                      movq    %r14, %rdi
// 64: 48 89 de                      movq    %rbx, %rsi
// 67: 4c 89 fa                      movq    %r15, %rdx
// 6a: 48 83 c4 08                   addq    $0x8, %rsp
// 6e: 5b                            popq    %rbx
// 6f: 41 5c                         popq    %r12
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: ff e0                         jmpq    *%rax
// 77: 4c 29 f3                      subq    %r14, %rbx
// 7a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 7e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 82: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 86: 49 8b 06                      movq    (%r14), %rax
// 89: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008b:  R_X86_64_64  _JIT_TARGET
// 93: 89 c9                         movl    %ecx, %ecx
// 95: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 99: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9f: eb 5e                         jmp     0xff <_JIT_ENTRY+0xff>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  PyExc_UnboundLocalError
// ab: 4c 8b 20                      movq    (%rax), %r12
// ae: 49 8b 06                      movq    (%r14), %rax
// b1: 48 8b 78 60                   movq    0x60(%rax), %rdi
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _JIT_OPARG
// bf: 0f b7 f0                      movzwl  %ax, %esi
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  PyTuple_GetItem
// cc: ff d0                         callq   *%rax
// ce: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000d0:  R_X86_64_64  .rodata.str1.1
// d8: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000da:  R_X86_64_64  _PyEval_FormatExcCheckArg
// e2: 4c 89 ff                      movq    %r15, %rdi
// e5: 4c 89 e6                      movq    %r12, %rsi
// e8: 48 89 c1                      movq    %rax, %rcx
// eb: 41 ff d0                      callq   *%r8
// ee: 4c 29 f3                      subq    %r14, %rbx
// f1: 48 83 c3 b8                   addq    $-0x48, %rbx
// f5: 48 c1 eb 03                   shrq    $0x3, %rbx
// f9: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// fd: 31 c0                         xorl    %eax, %eax
// ff: 48 83 c4 08                   addq    $0x8, %rsp
// 103: 5b                            popq    %rbx
// 104: 41 5c                         popq    %r12
// 106: 41 5e                         popq    %r14
// 108: 41 5f                         popq    %r15
// 10a: c3                            retq
// 10b: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_FAST_CHECK_code_body[268] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x59, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x64, 0xc6, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x69, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x5e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_FAST_CHECK_code_holes[11] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "cannot access local variable '%s' where it is not associated with a value\x00"
// 4a: 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_FAST_CHECK_data_body[81] = {0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_FAST_CHECK_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_DEREF.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 57                         je      0x75 <_JIT_ENTRY+0x75>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 25: 49 8b 06                      movq    (%r14), %rax
// 28: 48 8b 40 60                   movq    0x60(%rax), %rax
// 2c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002e:  R_X86_64_64  _JIT_OPARG
// 36: 0f b7 c9                      movzwl  %cx, %ecx
// 39: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 3e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000040:  R_X86_64_64  PyMapping_GetOptionalItem
// 48: 48 89 e2                      movq    %rsp, %rdx
// 4b: 4c 89 e7                      movq    %r12, %rdi
// 4e: ff d0                         callq   *%rax
// 50: 85 c0                         testl   %eax, %eax
// 52: 0f 88 11 01 00 00             js      0x169 <_JIT_ENTRY+0x169>
// 58: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 5d: 74 43                         je      0xa2 <_JIT_ENTRY+0xa2>
// 5f: 49 8b 04 24                   movq    (%r12), %rax
// 63: 48 85 c0                      testq   %rax, %rax
// 66: 7e 73                         jle     0xdb <_JIT_ENTRY+0xdb>
// 68: 85 c0                         testl   %eax, %eax
// 6a: 0f 89 91 00 00 00             jns     0x101 <_JIT_ENTRY+0x101>
// 70: e9 ad 00 00 00                jmp     0x122 <_JIT_ENTRY+0x122>
// 75: 4c 29 f3                      subq    %r14, %rbx
// 78: 48 83 c3 b8                   addq    $-0x48, %rbx
// 7c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 80: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 84: 49 8b 06                      movq    (%r14), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: e9 d8 00 00 00                jmp     0x17a <_JIT_ENTRY+0x17a>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 c0                      movzwl  %ax, %eax
// af: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// b4: 48 8b 40 10                   movq    0x10(%rax), %rax
// b8: 48 89 04 24                   movq    %rax, (%rsp)
// bc: 48 85 c0                      testq   %rax, %rax
// bf: 0f 84 85 00 00 00             je      0x14a <_JIT_ENTRY+0x14a>
// c5: 8b 08                         movl    (%rax), %ecx
// c7: ff c1                         incl    %ecx
// c9: 74 94                         je      0x5f <_JIT_ENTRY+0x5f>
// cb: 89 08                         movl    %ecx, (%rax)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_INCREF_IncRefTotal
// d7: ff d0                         callq   *%rax
// d9: eb 84                         jmp     0x5f <_JIT_ENTRY+0x5f>
// db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dd:  R_X86_64_64  .rodata.str1.1
// e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e7:  R_X86_64_64  _Py_NegativeRefcount
// ef: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// f4: 4c 89 e2                      movq    %r12, %rdx
// f7: ff d0                         callq   *%rax
// f9: 49 8b 04 24                   movq    (%r12), %rax
// fd: 85 c0                         testl   %eax, %eax
// ff: 78 21                         js      0x122 <_JIT_ENTRY+0x122>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10b: ff d0                         callq   *%rax
// 10d: 49 ff 0c 24                   decq    (%r12)
// 111: 75 0f                         jne     0x122 <_JIT_ENTRY+0x122>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_Dealloc
// 11d: 4c 89 e7                      movq    %r12, %rdi
// 120: ff d0                         callq   *%rax
// 122: 48 8b 04 24                   movq    (%rsp), %rax
// 126: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _JIT_CONTINUE
// 134: 4c 89 f7                      movq    %r14, %rdi
// 137: 48 89 de                      movq    %rbx, %rsi
// 13a: 4c 89 fa                      movq    %r15, %rdx
// 13d: 48 83 c4 08                   addq    $0x8, %rsp
// 141: 5b                            popq    %rbx
// 142: 41 5c                         popq    %r12
// 144: 41 5e                         popq    %r14
// 146: 41 5f                         popq    %r15
// 148: ff e0                         jmpq    *%rax
// 14a: 49 8b 36                      movq    (%r14), %rsi
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _JIT_OPARG
// 157: 0f b7 d0                      movzwl  %ax, %edx
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  _PyEval_FormatExcUnbound
// 164: 4c 89 ff                      movq    %r15, %rdi
// 167: ff d0                         callq   *%rax
// 169: 4c 29 f3                      subq    %r14, %rbx
// 16c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 170: 48 c1 eb 03                   shrq    $0x3, %rbx
// 174: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: 48 83 c4 08                   addq    $0x8, %rsp
// 17e: 5b                            popq    %rbx
// 17f: 41 5c                         popq    %r12
// 181: 41 5e                         popq    %r14
// 183: 41 5f                         popq    %r15
// 185: c3                            retq
// 186: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_DEREF_code_body[391] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x57, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x60, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x11, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x74, 0x43, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x73, 0x85, 0xc0, 0x0f, 0x89, 0x91, 0x00, 0x00, 0x00, 0xe9, 0xad, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x8b, 0x08, 0xff, 0xc1, 0x74, 0x94, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x84, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_DEREF_code_holes[14] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_GLOBALS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 5e                         je      0x7f <_JIT_ENTRY+0x7f>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 28: 49 8b 06                      movq    (%r14), %rax
// 2b: 48 8b 40 20                   movq    0x20(%rax), %rax
// 2f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c9                      movzwl  %cx, %ecx
// 3c: 4c 8b 6c c8 18                movq    0x18(%rax,%rcx,8), %r13
// 41: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000043:  R_X86_64_64  PyMapping_GetOptionalItem
// 4b: 48 89 e2                      movq    %rsp, %rdx
// 4e: 4c 89 e7                      movq    %r12, %rdi
// 51: 4c 89 ee                      movq    %r13, %rsi
// 54: ff d5                         callq   *%rbp
// 56: 85 c0                         testl   %eax, %eax
// 58: 0f 88 ac 00 00 00             js      0x10a <_JIT_ENTRY+0x10a>
// 5e: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 63: 74 44                         je      0xa9 <_JIT_ENTRY+0xa9>
// 65: 49 8b 04 24                   movq    (%r12), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 0f 8e b8 00 00 00             jle     0x12a <_JIT_ENTRY+0x12a>
// 72: 85 c0                         testl   %eax, %eax
// 74: 0f 89 d6 00 00 00             jns     0x150 <_JIT_ENTRY+0x150>
// 7a: e9 f2 00 00 00                jmp     0x171 <_JIT_ENTRY+0x171>
// 7f: 4c 29 f3                      subq    %r14, %rbx
// 82: 48 83 c3 b8                   addq    $-0x48, %rbx
// 86: 48 c1 eb 03                   shrq    $0x3, %rbx
// 8a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 8e: 49 8b 06                      movq    (%r14), %rax
// 91: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000093:  R_X86_64_64  _JIT_TARGET
// 9b: 89 c9                         movl    %ecx, %ecx
// 9d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a7: eb 72                         jmp     0x11b <_JIT_ENTRY+0x11b>
// a9: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  PyDict_GetItemRef
// b7: 48 89 e2                      movq    %rsp, %rdx
// ba: 4c 89 ee                      movq    %r13, %rsi
// bd: ff d0                         callq   *%rax
// bf: 85 c0                         testl   %eax, %eax
// c1: 78 47                         js      0x10a <_JIT_ENTRY+0x10a>
// c3: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// c8: 75 9b                         jne     0x65 <_JIT_ENTRY+0x65>
// ca: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// ce: 48 89 e2                      movq    %rsp, %rdx
// d1: 4c 89 ee                      movq    %r13, %rsi
// d4: ff d5                         callq   *%rbp
// d6: 85 c0                         testl   %eax, %eax
// d8: 78 30                         js      0x10a <_JIT_ENTRY+0x10a>
// da: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// df: 75 84                         jne     0x65 <_JIT_ENTRY+0x65>
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  PyExc_NameError
// eb: 48 8b 30                      movq    (%rax), %rsi
// ee: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000f0:  R_X86_64_64  .rodata.str1.1+0x39
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 102: 4c 89 ff                      movq    %r15, %rdi
// 105: 4c 89 e9                      movq    %r13, %rcx
// 108: ff d0                         callq   *%rax
// 10a: 4c 29 f3                      subq    %r14, %rbx
// 10d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 111: 48 c1 eb 03                   shrq    $0x3, %rbx
// 115: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 119: 31 c0                         xorl    %eax, %eax
// 11b: 48 83 c4 08                   addq    $0x8, %rsp
// 11f: 5b                            popq    %rbx
// 120: 41 5c                         popq    %r12
// 122: 41 5d                         popq    %r13
// 124: 41 5e                         popq    %r14
// 126: 41 5f                         popq    %r15
// 128: 5d                            popq    %rbp
// 129: c3                            retq
// 12a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012c:  R_X86_64_64  .rodata.str1.1
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_NegativeRefcount
// 13e: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 143: 4c 89 e2                      movq    %r12, %rdx
// 146: ff d0                         callq   *%rax
// 148: 49 8b 04 24                   movq    (%r12), %rax
// 14c: 85 c0                         testl   %eax, %eax
// 14e: 78 21                         js      0x171 <_JIT_ENTRY+0x171>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15a: ff d0                         callq   *%rax
// 15c: 49 ff 0c 24                   decq    (%r12)
// 160: 75 0f                         jne     0x171 <_JIT_ENTRY+0x171>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_Dealloc
// 16c: 4c 89 e7                      movq    %r12, %rdi
// 16f: ff d0                         callq   *%rax
// 171: 48 8b 04 24                   movq    (%rsp), %rax
// 175: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _JIT_CONTINUE
// 183: 4c 89 f7                      movq    %r14, %rdi
// 186: 48 89 de                      movq    %rbx, %rsi
// 189: 4c 89 fa                      movq    %r15, %rdx
// 18c: 48 83 c4 08                   addq    $0x8, %rsp
// 190: 5b                            popq    %rbx
// 191: 41 5c                         popq    %r12
// 193: 41 5d                         popq    %r13
// 195: 41 5e                         popq    %r14
// 197: 41 5f                         popq    %r15
// 199: 5d                            popq    %rbp
// 19a: ff e0                         jmpq    *%rax
// 19c: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[413] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x5e, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x18, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0xac, 0x00, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x74, 0x44, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xb8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xd6, 0x00, 0x00, 0x00, 0xe9, 0xf2, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x72, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x47, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x75, 0x9b, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x30, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x75, 0x84, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe9, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_GLOBAL
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_GLOBAL.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 49 89 f6                      movq    %rsi, %r14
// 10: 48 89 fb                      movq    %rdi, %rbx
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_EXECUTOR
// 1d: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 21: 0f 84 a9 00 00 00             je      0xd0 <_JIT_ENTRY+0xd0>
// 27: 49 89 d7                      movq    %rdx, %r15
// 2a: 48 8b 03                      movq    (%rbx), %rax
// 2d: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 31: 48 8b 40 20                   movq    0x20(%rax), %rax
// 35: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000037:  R_X86_64_64  _JIT_OPARG
// 3f: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
// 45: 4c 8b 64 88 18                movq    0x18(%rax,%rcx,4), %r12
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  PyDict_Type
// 54: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 58: 75 0e                         jne     0x68 <_JIT_ENTRY+0x68>
// 5a: 48 8b 73 20                   movq    0x20(%rbx), %rsi
// 5e: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 62: 0f 84 bc 00 00 00             je      0x124 <_JIT_ENTRY+0x124>
// 68: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000006a:  R_X86_64_64  PyMapping_GetOptionalItem
// 72: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 77: 4c 89 e6                      movq    %r12, %rsi
// 7a: 41 ff d5                      callq   *%r13
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 88 13 01 00 00             js      0x198 <_JIT_ENTRY+0x198>
// 85: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 74 6e                         je      0xfd <_JIT_ENTRY+0xfd>
// 8f: 49 89 06                      movq    %rax, (%r14)
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _JIT_OPARG
// 9c: a8 01                         testb   $0x1, %al
// 9e: 74 08                         je      0xa8 <_JIT_ENTRY+0xa8>
// a0: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// a8: 83 e0 01                      andl    $0x1, %eax
// ab: ff c0                         incl    %eax
// ad: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _JIT_CONTINUE
// bb: 48 89 df                      movq    %rbx, %rdi
// be: 4c 89 fa                      movq    %r15, %rdx
// c1: 48 83 c4 10                   addq    $0x10, %rsp
// c5: 5b                            popq    %rbx
// c6: 41 5c                         popq    %r12
// c8: 41 5d                         popq    %r13
// ca: 41 5e                         popq    %r14
// cc: 41 5f                         popq    %r15
// ce: ff e0                         jmpq    *%rax
// d0: 49 29 de                      subq    %rbx, %r14
// d3: 49 83 c6 b8                   addq    $-0x48, %r14
// d7: 49 c1 ee 03                   shrq    $0x3, %r14
// db: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// df: 48 8b 03                      movq    (%rbx), %rax
// e2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e4:  R_X86_64_64  _JIT_TARGET
// ec: 89 c9                         movl    %ecx, %ecx
// ee: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// f2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// f8: e9 ac 00 00 00                jmp     0x1a9 <_JIT_ENTRY+0x1a9>
// fd: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 101: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 106: 4c 89 e6                      movq    %r12, %rsi
// 109: 41 ff d5                      callq   *%r13
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 0f 88 84 00 00 00             js      0x198 <_JIT_ENTRY+0x198>
// 114: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 119: 48 85 c0                      testq   %rax, %rax
// 11c: 0f 85 6d ff ff ff             jne     0x8f <_JIT_ENTRY+0x8f>
// 122: eb 4b                         jmp     0x16f <_JIT_ENTRY+0x16f>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _PyDict_LoadGlobal
// 12e: 4c 89 e2                      movq    %r12, %rdx
// 131: ff d0                         callq   *%rax
// 133: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 74 22                         je      0x15f <_JIT_ENTRY+0x15f>
// 13d: 8b 08                         movl    (%rax), %ecx
// 13f: ff c1                         incl    %ecx
// 141: 0f 84 48 ff ff ff             je      0x8f <_JIT_ENTRY+0x8f>
// 147: 89 08                         movl    %ecx, (%rax)
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15a: e9 30 ff ff ff                jmp     0x8f <_JIT_ENTRY+0x8f>
// 15f: 49 8b 47 68                   movq    0x68(%r15), %rax
// 163: 48 85 c0                      testq   %rax, %rax
// 166: 74 07                         je      0x16f <_JIT_ENTRY+0x16f>
// 168: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 16d: 75 29                         jne     0x198 <_JIT_ENTRY+0x198>
// 16f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000171:  R_X86_64_64  PyExc_NameError
// 179: 48 8b 30                      movq    (%rax), %rsi
// 17c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000017e:  R_X86_64_64  .rodata.str1.1
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: 4c 89 e1                      movq    %r12, %rcx
// 196: ff d0                         callq   *%rax
// 198: 49 29 de                      subq    %rbx, %r14
// 19b: 49 83 c6 b8                   addq    $-0x48, %r14
// 19f: 49 c1 ee 03                   shrq    $0x3, %r14
// 1a3: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a7: 31 c0                         xorl    %eax, %eax
// 1a9: 48 83 c4 10                   addq    $0x10, %rsp
// 1ad: 5b                            popq    %rbx
// 1ae: 41 5c                         popq    %r12
// 1b0: 41 5d                         popq    %r13
// 1b2: 41 5e                         popq    %r14
// 1b4: 41 5f                         popq    %r15
// 1b6: c3                            retq
// 1b7: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_GLOBAL_code_body[440] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x88, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x48, 0x8b, 0x73, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0x13, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x6e, 0x49, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xac, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x6d, 0xff, 0xff, 0xff, 0xeb, 0x4b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x22, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x48, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0x30, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_GLOBAL_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "name '%.200s' is not defined\x00"
// 1d: 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_GLOBAL_data_body[33] = {0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_GLOBAL_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_GLOBAL_BUILTINS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 f6                      movq    %rsi, %r14
// b: 48 89 fb                      movq    %rdi, %rbx
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 0f 84 8c 00 00 00             je      0xae <_JIT_ENTRY+0xae>
// 22: 49 89 d7                      movq    %rdx, %r15
// 25: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 29: 48 8b 40 20                   movq    0x20(%rax), %rax
// 2d: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 31: ba 01 00 00 00                movl    $0x1, %edx
// 36: 48 d3 e2                      shlq    %cl, %rdx
// 39: 48 01 c2                      addq    %rax, %rdx
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  _JIT_OPERAND
// 46: 0f b7 c0                      movzwl  %ax, %eax
// 49: 48 c1 e0 04                   shlq    $0x4, %rax
// 4d: 4c 8b 64 10 28                movq    0x28(%rax,%rdx), %r12
// 52: 4d 85 e4                      testq   %r12, %r12
// 55: 74 57                         je      0xae <_JIT_ENTRY+0xae>
// 57: 41 8b 04 24                   movl    (%r12), %eax
// 5b: ff c0                         incl    %eax
// 5d: 74 10                         je      0x6f <_JIT_ENTRY+0x6f>
// 5f: 41 89 04 24                   movl    %eax, (%r12)
// 63: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000065:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 6d: ff d0                         callq   *%rax
// 6f: 4d 89 26                      movq    %r12, (%r14)
// 72: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000074:  R_X86_64_64  _JIT_OPARG
// 7c: a8 01                         testb   $0x1, %al
// 7e: 74 08                         je      0x88 <_JIT_ENTRY+0x88>
// 80: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// 88: 83 e0 01                      andl    $0x1, %eax
// 8b: ff c0                         incl    %eax
// 8d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _JIT_CONTINUE
// 9b: 48 89 df                      movq    %rbx, %rdi
// 9e: 4c 89 fa                      movq    %r15, %rdx
// a1: 48 83 c4 08                   addq    $0x8, %rsp
// a5: 5b                            popq    %rbx
// a6: 41 5c                         popq    %r12
// a8: 41 5e                         popq    %r14
// aa: 41 5f                         popq    %r15
// ac: ff e0                         jmpq    *%rax
// ae: 49 29 de                      subq    %rbx, %r14
// b1: 49 83 c6 b8                   addq    $-0x48, %r14
// b5: 49 c1 ee 03                   shrq    $0x3, %r14
// b9: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// bd: 48 8b 03                      movq    (%rbx), %rax
// c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c2:  R_X86_64_64  _JIT_TARGET
// ca: 89 c9                         movl    %ecx, %ecx
// cc: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d6: 48 83 c4 08                   addq    $0x8, %rsp
// da: 5b                            popq    %rbx
// db: 41 5c                         popq    %r12
// dd: 41 5e                         popq    %r14
// df: 41 5f                         popq    %r15
// e1: c3                            retq
// e2: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_GLOBAL_BUILTINS_code_body[227] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x43, 0x20, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x10, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x57, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_GLOBAL_BUILTINS_code_holes[7] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x74, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_GLOBAL_BUILTINS_data_body[1];
static const Hole _CHECK_VALIDITYplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_GLOBAL_MODULE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 f6                      movq    %rsi, %r14
// b: 48 89 fb                      movq    %rdi, %rbx
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 0f 84 8c 00 00 00             je      0xae <_JIT_ENTRY+0xae>
// 22: 49 89 d7                      movq    %rdx, %r15
// 25: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 29: 48 8b 40 20                   movq    0x20(%rax), %rax
// 2d: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 31: ba 01 00 00 00                movl    $0x1, %edx
// 36: 48 d3 e2                      shlq    %cl, %rdx
// 39: 48 01 c2                      addq    %rax, %rdx
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  _JIT_OPERAND
// 46: 0f b7 c0                      movzwl  %ax, %eax
// 49: 48 c1 e0 04                   shlq    $0x4, %rax
// 4d: 4c 8b 64 10 28                movq    0x28(%rax,%rdx), %r12
// 52: 4d 85 e4                      testq   %r12, %r12
// 55: 74 57                         je      0xae <_JIT_ENTRY+0xae>
// 57: 41 8b 04 24                   movl    (%r12), %eax
// 5b: ff c0                         incl    %eax
// 5d: 74 10                         je      0x6f <_JIT_ENTRY+0x6f>
// 5f: 41 89 04 24                   movl    %eax, (%r12)
// 63: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000065:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 6d: ff d0                         callq   *%rax
// 6f: 4d 89 26                      movq    %r12, (%r14)
// 72: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000074:  R_X86_64_64  _JIT_OPARG
// 7c: a8 01                         testb   $0x1, %al
// 7e: 74 08                         je      0x88 <_JIT_ENTRY+0x88>
// 80: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// 88: 83 e0 01                      andl    $0x1, %eax
// 8b: ff c0                         incl    %eax
// 8d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _JIT_CONTINUE
// 9b: 48 89 df                      movq    %rbx, %rdi
// 9e: 4c 89 fa                      movq    %r15, %rdx
// a1: 48 83 c4 08                   addq    $0x8, %rsp
// a5: 5b                            popq    %rbx
// a6: 41 5c                         popq    %r12
// a8: 41 5e                         popq    %r14
// aa: 41 5f                         popq    %r15
// ac: ff e0                         jmpq    *%rax
// ae: 49 29 de                      subq    %rbx, %r14
// b1: 49 83 c6 b8                   addq    $-0x48, %r14
// b5: 49 c1 ee 03                   shrq    $0x3, %r14
// b9: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// bd: 48 8b 03                      movq    (%rbx), %rax
// c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c2:  R_X86_64_64  _JIT_TARGET
// ca: 89 c9                         movl    %ecx, %ecx
// cc: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d6: 48 83 c4 08                   addq    $0x8, %rsp
// da: 5b                            popq    %rbx
// db: 41 5c                         popq    %r12
// dd: 41 5e                         popq    %r14
// df: 41 5f                         popq    %r15
// e1: c3                            retq
// e2: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_GLOBAL_MODULE_code_body[227] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x43, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x10, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x57, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_GLOBAL_MODULE_code_holes[7] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x74, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_GLOBAL_MODULE_data_body[1];
static const Hole _CHECK_VALIDITYplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_LOCALS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_LOCALS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 4b                         je      0x69 <_JIT_ENTRY+0x69>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 4d 8b 66 28                   movq    0x28(%r14), %r12
// 25: 4d 85 e4                      testq   %r12, %r12
// 28: 74 69                         je      0x93 <_JIT_ENTRY+0x93>
// 2a: 41 8b 04 24                   movl    (%r12), %eax
// 2e: ff c0                         incl    %eax
// 30: 74 10                         je      0x42 <_JIT_ENTRY+0x42>
// 32: 41 89 04 24                   movl    %eax, (%r12)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 40: ff d0                         callq   *%rax
// 42: 4c 89 23                      movq    %r12, (%rbx)
// 45: 48 83 c3 08                   addq    $0x8, %rbx
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_CONTINUE
// 53: 4c 89 f7                      movq    %r14, %rdi
// 56: 48 89 de                      movq    %rbx, %rsi
// 59: 4c 89 fa                      movq    %r15, %rdx
// 5c: 48 83 c4 08                   addq    $0x8, %rsp
// 60: 5b                            popq    %rbx
// 61: 41 5c                         popq    %r12
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: ff e0                         jmpq    *%rax
// 69: 4c 29 f3                      subq    %r14, %rbx
// 6c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 70: 48 c1 eb 03                   shrq    $0x3, %rbx
// 74: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 78: 49 8b 06                      movq    (%r14), %rax
// 7b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007d:  R_X86_64_64  _JIT_TARGET
// 85: 89 c9                         movl    %ecx, %ecx
// 87: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 8b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 91: eb 37                         jmp     0xca <_JIT_ENTRY+0xca>
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  PyExc_SystemError
// 9d: 48 8b 30                      movq    (%rax), %rsi
// a0: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000a2:  R_X86_64_64  .rodata.str1.1
// aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ac:  R_X86_64_64  _PyErr_SetString
// b4: 4c 89 ff                      movq    %r15, %rdi
// b7: ff d0                         callq   *%rax
// b9: 4c 29 f3                      subq    %r14, %rbx
// bc: 48 83 c3 b8                   addq    $-0x48, %rbx
// c0: 48 c1 eb 03                   shrq    $0x3, %rbx
// c4: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// c8: 31 c0                         xorl    %eax, %eax
// ca: 48 83 c4 08                   addq    $0x8, %rsp
// ce: 5b                            popq    %rbx
// cf: 41 5c                         popq    %r12
// d1: 41 5e                         popq    %r14
// d3: 41 5f                         popq    %r15
// d5: c3                            retq
// d6: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_LOCALS_code_body[215] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x4b, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x69, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_LOAD_LOCALS_code_holes[8] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: 'no locals found\x00'
// 10: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_LOCALS_data_body[17] = {0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_LOCALS_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_NAME
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_NAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 48 89 f3                      movq    %rsi, %rbx
// 10: 49 89 fe                      movq    %rdi, %r14
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_EXECUTOR
// 1d: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 21: 74 7d                         je      0xa0 <_JIT_ENTRY+0xa0>
// 23: 49 89 d7                      movq    %rdx, %r15
// 26: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 2a: 48 85 ff                      testq   %rdi, %rdi
// 2d: 0f 84 97 00 00 00             je      0xca <_JIT_ENTRY+0xca>
// 33: 49 8b 06                      movq    (%r14), %rax
// 36: 48 8b 40 20                   movq    0x20(%rax), %rax
// 3a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000003c:  R_X86_64_64  _JIT_OPARG
// 44: 0f b7 c9                      movzwl  %cx, %ecx
// 47: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 4c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000004e:  R_X86_64_64  PyMapping_GetOptionalItem
// 56: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: 41 ff d5                      callq   *%r13
// 61: 85 c0                         testl   %eax, %eax
// 63: 0f 88 87 00 00 00             js      0xf0 <_JIT_ENTRY+0xf0>
// 69: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 6e: 48 85 c0                      testq   %rax, %rax
// 71: 0f 84 98 00 00 00             je      0x10f <_JIT_ENTRY+0x10f>
// 77: 48 89 03                      movq    %rax, (%rbx)
// 7a: 48 83 c3 08                   addq    $0x8, %rbx
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _JIT_CONTINUE
// 88: 4c 89 f7                      movq    %r14, %rdi
// 8b: 48 89 de                      movq    %rbx, %rsi
// 8e: 4c 89 fa                      movq    %r15, %rdx
// 91: 48 83 c4 10                   addq    $0x10, %rsp
// 95: 5b                            popq    %rbx
// 96: 41 5c                         popq    %r12
// 98: 41 5d                         popq    %r13
// 9a: 41 5e                         popq    %r14
// 9c: 41 5f                         popq    %r15
// 9e: ff e0                         jmpq    *%rax
// a0: 4c 29 f3                      subq    %r14, %rbx
// a3: 48 83 c3 b8                   addq    $-0x48, %rbx
// a7: 48 c1 eb 03                   shrq    $0x3, %rbx
// ab: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// af: 49 8b 06                      movq    (%r14), %rax
// b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b4:  R_X86_64_64  _JIT_TARGET
// bc: 89 c9                         movl    %ecx, %ecx
// be: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// c2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// c8: eb 37                         jmp     0x101 <_JIT_ENTRY+0x101>
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  PyExc_SystemError
// d4: 48 8b 30                      movq    (%rax), %rsi
// d7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000d9:  R_X86_64_64  .rodata.str1.1+0x1d
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _PyErr_SetString
// eb: 4c 89 ff                      movq    %r15, %rdi
// ee: ff d0                         callq   *%rax
// f0: 4c 29 f3                      subq    %r14, %rbx
// f3: 48 83 c3 b8                   addq    $-0x48, %rbx
// f7: 48 c1 eb 03                   shrq    $0x3, %rbx
// fb: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// ff: 31 c0                         xorl    %eax, %eax
// 101: 48 83 c4 10                   addq    $0x10, %rsp
// 105: 5b                            popq    %rbx
// 106: 41 5c                         popq    %r12
// 108: 41 5d                         popq    %r13
// 10a: 41 5e                         popq    %r14
// 10c: 41 5f                         popq    %r15
// 10e: c3                            retq
// 10f: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  PyDict_GetItemRef
// 11d: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 122: 4c 89 e6                      movq    %r12, %rsi
// 125: ff d0                         callq   *%rax
// 127: 85 c0                         testl   %eax, %eax
// 129: 78 c5                         js      0xf0 <_JIT_ENTRY+0xf0>
// 12b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 0f 85 3e ff ff ff             jne     0x77 <_JIT_ENTRY+0x77>
// 139: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 13d: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 142: 4c 89 e6                      movq    %r12, %rsi
// 145: 41 ff d5                      callq   *%r13
// 148: 85 c0                         testl   %eax, %eax
// 14a: 78 a4                         js      0xf0 <_JIT_ENTRY+0xf0>
// 14c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 151: 48 85 c0                      testq   %rax, %rax
// 154: 0f 85 1d ff ff ff             jne     0x77 <_JIT_ENTRY+0x77>
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  PyExc_NameError
// 164: 48 8b 30                      movq    (%rax), %rsi
// 167: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000169:  R_X86_64_64  .rodata.str1.1
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 17b: 4c 89 ff                      movq    %r15, %rdi
// 17e: 4c 89 e1                      movq    %r12, %rcx
// 181: ff d0                         callq   *%rax
// 183: e9 68 ff ff ff                jmp     0xf0 <_JIT_ENTRY+0xf0>
// 188: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_NAME_code_body[393] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x7d, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0x87, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xc5, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x3e, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0xa4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x1d, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x68, 0xff, 0xff, 0xff};
static const Hole _CHECK_VALIDITYplus_LOAD_NAME_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "name '%.200s' is not defined\x00no locals found\x00"
// 2d: 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_NAME_data_body[49] = {0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_NAME_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_SUPER_ATTR_ATTR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 21                         je      0x42 <_JIT_ENTRY+0x42>
// 21: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000023:  R_X86_64_64  PySuper_Type
// 2b: 4d 39 6e e8                   cmpq    %r13, -0x18(%r14)
// 2f: 75 11                         jne     0x42 <_JIT_ENTRY+0x42>
// 31: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 35: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 39: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 40: 75 37                         jne     0x79 <_JIT_ENTRY+0x79>
// 42: 49 29 de                      subq    %rbx, %r14
// 45: 49 83 c6 b8                   addq    $-0x48, %r14
// 49: 49 c1 ee 03                   shrq    $0x3, %r14
// 4d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 51: 48 8b 03                      movq    (%rbx), %rax
// 54: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000056:  R_X86_64_64  _JIT_TARGET
// 5e: 89 c9                         movl    %ecx, %ecx
// 60: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 64: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6a: 48 83 c4 08                   addq    $0x8, %rsp
// 6e: 5b                            popq    %rbx
// 6f: 41 5c                         popq    %r12
// 71: 41 5d                         popq    %r13
// 73: 41 5e                         popq    %r14
// 75: 41 5f                         popq    %r15
// 77: 5d                            popq    %rbp
// 78: c3                            retq
// 79: 49 89 d7                      movq    %rdx, %r15
// 7c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 80: 48 8b 03                      movq    (%rbx), %rax
// 83: 48 8b 40 20                   movq    0x20(%rax), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_OPARG
// 91: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 97: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _PySuper_Lookup
// a6: 48 89 ef                      movq    %rbp, %rdi
// a9: 4c 89 e6                      movq    %r12, %rsi
// ac: 31 c9                         xorl    %ecx, %ecx
// ae: ff d0                         callq   *%rax
// b0: 48 89 04 24                   movq    %rax, (%rsp)
// b4: 49 8b 45 00                   movq    (%r13), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 7f 22                         jg      0xdf <_JIT_ENTRY+0xdf>
// bd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000bf:  R_X86_64_64  .rodata.str1.1
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _Py_NegativeRefcount
// d1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// d6: 4c 89 ea                      movq    %r13, %rdx
// d9: ff d0                         callq   *%rax
// db: 49 8b 45 00                   movq    (%r13), %rax
// df: 85 c0                         testl   %eax, %eax
// e1: 78 28                         js      0x10b <_JIT_ENTRY+0x10b>
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ed: ff d0                         callq   *%rax
// ef: 49 ff 4d 00                   decq    (%r13)
// f3: 75 16                         jne     0x10b <_JIT_ENTRY+0x10b>
// f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f7:  R_X86_64_64  PySuper_Type
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_Dealloc
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 48 85 c0                      testq   %rax, %rax
// 112: 7f 22                         jg      0x136 <_JIT_ENTRY+0x136>
// 114: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000116:  R_X86_64_64  .rodata.str1.1
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_NegativeRefcount
// 128: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 12d: 48 89 ea                      movq    %rbp, %rdx
// 130: ff d0                         callq   *%rax
// 132: 48 8b 45 00                   movq    (%rbp), %rax
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 21                         js      0x15b <_JIT_ENTRY+0x15b>
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 144: ff d0                         callq   *%rax
// 146: 48 ff 4d 00                   decq    (%rbp)
// 14a: 75 0f                         jne     0x15b <_JIT_ENTRY+0x15b>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_Dealloc
// 156: 48 89 ef                      movq    %rbp, %rdi
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 48 85 c0                      testq   %rax, %rax
// 162: 7f 22                         jg      0x186 <_JIT_ENTRY+0x186>
// 164: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000166:  R_X86_64_64  .rodata.str1.1
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_NegativeRefcount
// 178: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 17d: 4c 89 e2                      movq    %r12, %rdx
// 180: ff d0                         callq   *%rax
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 85 c0                         testl   %eax, %eax
// 188: 78 21                         js      0x1ab <_JIT_ENTRY+0x1ab>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 194: ff d0                         callq   *%rax
// 196: 49 ff 0c 24                   decq    (%r12)
// 19a: 75 0f                         jne     0x1ab <_JIT_ENTRY+0x1ab>
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _Py_Dealloc
// 1a6: 4c 89 e7                      movq    %r12, %rdi
// 1a9: ff d0                         callq   *%rax
// 1ab: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1af: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1b3: 48 85 c9                      testq   %rcx, %rcx
// 1b6: 74 2a                         je      0x1e2 <_JIT_ENTRY+0x1e2>
// 1b8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1bc: 48 89 08                      movq    %rcx, (%rax)
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _JIT_CONTINUE
// 1c9: 48 89 df                      movq    %rbx, %rdi
// 1cc: 4c 89 f6                      movq    %r14, %rsi
// 1cf: 4c 89 fa                      movq    %r15, %rdx
// 1d2: 48 83 c4 08                   addq    $0x8, %rsp
// 1d6: 5b                            popq    %rbx
// 1d7: 41 5c                         popq    %r12
// 1d9: 41 5d                         popq    %r13
// 1db: 41 5e                         popq    %r14
// 1dd: 41 5f                         popq    %r15
// 1df: 5d                            popq    %rbp
// 1e0: ff e0                         jmpq    *%rax
// 1e2: 48 29 d8                      subq    %rbx, %rax
// 1e5: 48 83 c0 b8                   addq    $-0x48, %rax
// 1e9: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ed: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1f0: 31 c0                         xorl    %eax, %eax
// 1f2: e9 73 fe ff ff                jmp     0x6a <_JIT_ENTRY+0x6a>
// 1f7: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_SUPER_ATTR_ATTR_code_body[504] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x21, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x73, 0xfe, 0xff, 0xff};
static const Hole _CHECK_VALIDITYplus_LOAD_SUPER_ATTR_ATTR_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_SUPER_ATTR_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _CHECK_VALIDITYplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_LOAD_SUPER_ATTR_METHOD.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 74 21                         je      0x45 <_JIT_ENTRY+0x45>
// 24: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000026:  R_X86_64_64  PySuper_Type
// 2e: 4d 39 6e e8                   cmpq    %r13, -0x18(%r14)
// 32: 75 11                         jne     0x45 <_JIT_ENTRY+0x45>
// 34: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 38: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 3c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 43: 75 37                         jne     0x7c <_JIT_ENTRY+0x7c>
// 45: 49 29 de                      subq    %rbx, %r14
// 48: 49 83 c6 b8                   addq    $-0x48, %r14
// 4c: 49 c1 ee 03                   shrq    $0x3, %r14
// 50: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 54: 48 8b 03                      movq    (%rbx), %rax
// 57: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000059:  R_X86_64_64  _JIT_TARGET
// 61: 89 c9                         movl    %ecx, %ecx
// 63: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 67: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6d: 48 83 c4 18                   addq    $0x18, %rsp
// 71: 5b                            popq    %rbx
// 72: 41 5c                         popq    %r12
// 74: 41 5d                         popq    %r13
// 76: 41 5e                         popq    %r14
// 78: 41 5f                         popq    %r15
// 7a: 5d                            popq    %rbp
// 7b: c3                            retq
// 7c: 49 89 d4                      movq    %rdx, %r12
// 7f: 4d 8b 7e f8                   movq    -0x8(%r14), %r15
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 8b 40 20                   movq    0x20(%rax), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_OPARG
// 94: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 9a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 9f: c7 44 24 0c 00 00 00 00       movl    $0x0, 0xc(%rsp)
// a7: 49 8b 47 08                   movq    0x8(%r15), %rax
// ab: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ad:  R_X86_64_64  PyObject_GenericGetAttr
// b5: 31 f6                         xorl    %esi, %esi
// b7: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// be: 48 8d 4c 24 0c                leaq    0xc(%rsp), %rcx
// c3: 48 0f 45 ce                   cmovneq %rsi, %rcx
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _PySuper_Lookup
// d1: 48 89 ef                      movq    %rbp, %rdi
// d4: 4c 89 fe                      movq    %r15, %rsi
// d7: ff d0                         callq   *%rax
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 49 8b 45 00                   movq    (%r13), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 100: 4c 89 ea                      movq    %r13, %rdx
// 103: ff d0                         callq   *%rax
// 105: 49 8b 45 00                   movq    (%r13), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 28                         js      0x135 <_JIT_ENTRY+0x135>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 49 ff 4d 00                   decq    (%r13)
// 11d: 75 16                         jne     0x135 <_JIT_ENTRY+0x135>
// 11f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000121:  R_X86_64_64  PySuper_Type
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: 48 8b 45 00                   movq    (%rbp), %rax
// 139: 48 85 c0                      testq   %rax, %rax
// 13c: 7f 22                         jg      0x160 <_JIT_ENTRY+0x160>
// 13e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000140:  R_X86_64_64  .rodata.str1.1
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_NegativeRefcount
// 152: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 157: 48 89 ea                      movq    %rbp, %rdx
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 45 00                   movq    (%rbp), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 21                         js      0x185 <_JIT_ENTRY+0x185>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 48 ff 4d 00                   decq    (%rbp)
// 174: 75 0f                         jne     0x185 <_JIT_ENTRY+0x185>
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _Py_Dealloc
// 180: 48 89 ef                      movq    %rbp, %rdi
// 183: ff d0                         callq   *%rax
// 185: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 18a: 48 85 ed                      testq   %rbp, %rbp
// 18d: 0f 84 86 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 193: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 197: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 19c: 75 50                         jne     0x1ee <_JIT_ENTRY+0x1ee>
// 19e: 49 8b 07                      movq    (%r15), %rax
// 1a1: 48 85 c0                      testq   %rax, %rax
// 1a4: 7f 21                         jg      0x1c7 <_JIT_ENTRY+0x1c7>
// 1a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a8:  R_X86_64_64  .rodata.str1.1
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_NegativeRefcount
// 1ba: be 21 06 00 00                movl    $0x621, %esi            # imm = 0x621
// 1bf: 4c 89 fa                      movq    %r15, %rdx
// 1c2: ff d0                         callq   *%rax
// 1c4: 49 8b 07                      movq    (%r15), %rax
// 1c7: 85 c0                         testl   %eax, %eax
// 1c9: 78 20                         js      0x1eb <_JIT_ENTRY+0x1eb>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d5: ff d0                         callq   *%rax
// 1d7: 49 ff 0f                      decq    (%r15)
// 1da: 75 0f                         jne     0x1eb <_JIT_ENTRY+0x1eb>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_Dealloc
// 1e6: 4c 89 ff                      movq    %r15, %rdi
// 1e9: ff d0                         callq   *%rax
// 1eb: 45 31 ff                      xorl    %r15d, %r15d
// 1ee: 49 89 6e e8                   movq    %rbp, -0x18(%r14)
// 1f2: 4d 89 7e f0                   movq    %r15, -0x10(%r14)
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _JIT_CONTINUE
// 200: 48 89 df                      movq    %rbx, %rdi
// 203: 4c 89 ee                      movq    %r13, %rsi
// 206: 4c 89 e2                      movq    %r12, %rdx
// 209: 48 83 c4 18                   addq    $0x18, %rsp
// 20d: 5b                            popq    %rbx
// 20e: 41 5c                         popq    %r12
// 210: 41 5d                         popq    %r13
// 212: 41 5e                         popq    %r14
// 214: 41 5f                         popq    %r15
// 216: 5d                            popq    %rbp
// 217: ff e0                         jmpq    *%rax
// 219: 49 8b 07                      movq    (%r15), %rax
// 21c: 48 85 c0                      testq   %rax, %rax
// 21f: 7f 21                         jg      0x242 <_JIT_ENTRY+0x242>
// 221: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000223:  R_X86_64_64  .rodata.str1.1
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_NegativeRefcount
// 235: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 23a: 4c 89 fa                      movq    %r15, %rdx
// 23d: ff d0                         callq   *%rax
// 23f: 49 8b 07                      movq    (%r15), %rax
// 242: 49 83 c6 e8                   addq    $-0x18, %r14
// 246: 85 c0                         testl   %eax, %eax
// 248: 78 20                         js      0x26a <_JIT_ENTRY+0x26a>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 254: ff d0                         callq   *%rax
// 256: 49 ff 0f                      decq    (%r15)
// 259: 75 0f                         jne     0x26a <_JIT_ENTRY+0x26a>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: 4c 89 ff                      movq    %r15, %rdi
// 268: ff d0                         callq   *%rax
// 26a: 49 29 de                      subq    %rbx, %r14
// 26d: 49 83 c6 b8                   addq    $-0x48, %r14
// 271: 49 c1 ee 03                   shrq    $0x3, %r14
// 275: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 279: 31 c0                         xorl    %eax, %eax
// 27b: e9 ed fd ff ff                jmp     0x6d <_JIT_ENTRY+0x6d>
// 280: 
static const unsigned char _CHECK_VALIDITYplus_LOAD_SUPER_ATTR_METHOD_code_body[641] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x21, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd4, 0x4d, 0x8b, 0x7e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x0c, 0x48, 0x0f, 0x45, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf8, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x75, 0x50, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x21, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x45, 0x31, 0xff, 0x49, 0x89, 0x6e, 0xe8, 0x4d, 0x89, 0x7e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x49, 0x83, 0xc6, 0xe8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xed, 0xfd, 0xff, 0xff};
static const Hole _CHECK_VALIDITYplus_LOAD_SUPER_ATTR_METHOD_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x26, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_LOAD_SUPER_ATTR_METHOD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _CHECK_VALIDITYplus_MAKE_CELL
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_MAKE_CELL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 0f 84 b6 00 00 00             je      0xd8 <_JIT_ENTRY+0xd8>
// 22: 49 89 d7                      movq    %rdx, %r15
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  _JIT_OPARG
// 2f: 0f b7 c0                      movzwl  %ax, %eax
// 32: 49 8b 7c c6 48                movq    0x48(%r14,%rax,8), %rdi
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  PyCell_New
// 41: ff d0                         callq   *%rax
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 0f 84 b6 00 00 00             je      0x102 <_JIT_ENTRY+0x102>
// 4c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 c9                      movzwl  %cx, %ecx
// 59: 4d 8b 64 ce 48                movq    0x48(%r14,%rcx,8), %r12
// 5e: 49 89 44 ce 48                movq    %rax, 0x48(%r14,%rcx,8)
// 63: 4d 85 e4                      testq   %r12, %r12
// 66: 74 50                         je      0xb8 <_JIT_ENTRY+0xb8>
// 68: 49 8b 04 24                   movq    (%r12), %rax
// 6c: 48 85 c0                      testq   %rax, %rax
// 6f: 7f 22                         jg      0x93 <_JIT_ENTRY+0x93>
// 71: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000073:  R_X86_64_64  .rodata.str1.1
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _Py_NegativeRefcount
// 85: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 8a: 4c 89 e2                      movq    %r12, %rdx
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 85 c0                         testl   %eax, %eax
// 95: 78 21                         js      0xb8 <_JIT_ENTRY+0xb8>
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a1: ff d0                         callq   *%rax
// a3: 49 ff 0c 24                   decq    (%r12)
// a7: 75 0f                         jne     0xb8 <_JIT_ENTRY+0xb8>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_Dealloc
// b3: 4c 89 e7                      movq    %r12, %rdi
// b6: ff d0                         callq   *%rax
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _JIT_CONTINUE
// c2: 4c 89 f7                      movq    %r14, %rdi
// c5: 48 89 de                      movq    %rbx, %rsi
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: 48 83 c4 08                   addq    $0x8, %rsp
// cf: 5b                            popq    %rbx
// d0: 41 5c                         popq    %r12
// d2: 41 5e                         popq    %r14
// d4: 41 5f                         popq    %r15
// d6: ff e0                         jmpq    *%rax
// d8: 4c 29 f3                      subq    %r14, %rbx
// db: 48 83 c3 b8                   addq    $-0x48, %rbx
// df: 48 c1 eb 03                   shrq    $0x3, %rbx
// e3: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// e7: 49 8b 06                      movq    (%r14), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: eb 11                         jmp     0x113 <_JIT_ENTRY+0x113>
// 102: 4c 29 f3                      subq    %r14, %rbx
// 105: 48 83 c3 b8                   addq    $-0x48, %rbx
// 109: 48 c1 eb 03                   shrq    $0x3, %rbx
// 10d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 111: 31 c0                         xorl    %eax, %eax
// 113: 48 83 c4 08                   addq    $0x8, %rsp
// 117: 5b                            popq    %rbx
// 118: 41 5c                         popq    %r12
// 11a: 41 5e                         popq    %r14
// 11c: 41 5f                         popq    %r15
// 11e: c3                            retq
// 11f: 
static const unsigned char _CHECK_VALIDITYplus_MAKE_CELL_code_body[288] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x7c, 0xc6, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x64, 0xce, 0x48, 0x49, 0x89, 0x44, 0xce, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_MAKE_CELL_code_holes[11] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x27, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Include/object.h\x00'
// 30: 
static const unsigned char _CHECK_VALIDITYplus_MAKE_CELL_data_body[49] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00};
static const Hole _CHECK_VALIDITYplus_MAKE_CELL_data_holes[1];

// _CHECK_VALIDITYplus_MAKE_FUNCTION
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_MAKE_FUNCTION.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 2c                         je      0x4b <_JIT_ENTRY+0x4b>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 26: 49 8b 76 18                   movq    0x18(%r14), %rsi
// 2a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002c:  R_X86_64_64  PyFunction_New
// 34: 4c 89 e7                      movq    %r12, %rdi
// 37: ff d0                         callq   *%rax
// 39: 49 89 c5                      movq    %rax, %r13
// 3c: 49 8b 04 24                   movq    (%r12), %rax
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 7e 33                         jle     0x78 <_JIT_ENTRY+0x78>
// 45: 85 c0                         testl   %eax, %eax
// 47: 79 55                         jns     0x9e <_JIT_ENTRY+0x9e>
// 49: eb 65                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 4b: 4c 29 f3                      subq    %r14, %rbx
// 4e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 52: 48 c1 eb 03                   shrq    $0x3, %rbx
// 56: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 5a: 49 8b 06                      movq    (%r14), %rax
// 5d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005f:  R_X86_64_64  _JIT_TARGET
// 67: 89 c9                         movl    %ecx, %ecx
// 69: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 73: e9 98 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 3b                         je      0xeb <_JIT_ENTRY+0xeb>
// b0: 4d 85 ed                      testq   %r13, %r13
// b3: 74 4a                         je      0xff <_JIT_ENTRY+0xff>
// b5: 41 8b 74 24 5c                movl    0x5c(%r12), %esi
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _PyFunction_SetVersion
// c4: 4c 89 ef                      movq    %r13, %rdi
// c7: ff d0                         callq   *%rax
// c9: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_CONTINUE
// d7: 4c 89 f7                      movq    %r14, %rdi
// da: 48 89 de                      movq    %rbx, %rsi
// dd: 4c 89 fa                      movq    %r15, %rdx
// e0: 5b                            popq    %rbx
// e1: 41 5c                         popq    %r12
// e3: 41 5d                         popq    %r13
// e5: 41 5e                         popq    %r14
// e7: 41 5f                         popq    %r15
// e9: ff e0                         jmpq    *%rax
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _Py_Dealloc
// f5: 4c 89 e7                      movq    %r12, %rdi
// f8: ff d0                         callq   *%rax
// fa: 4d 85 ed                      testq   %r13, %r13
// fd: 75 b6                         jne     0xb5 <_JIT_ENTRY+0xb5>
// ff: 4c 29 f3                      subq    %r14, %rbx
// 102: 48 83 c3 b8                   addq    $-0x48, %rbx
// 106: 48 c1 eb 03                   shrq    $0x3, %rbx
// 10a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 10e: 31 c0                         xorl    %eax, %eax
// 110: 5b                            popq    %rbx
// 111: 41 5c                         popq    %r12
// 113: 41 5d                         popq    %r13
// 115: 41 5e                         popq    %r14
// 117: 41 5f                         popq    %r15
// 119: c3                            retq
// 11a: 
static const unsigned char _CHECK_VALIDITYplus_MAKE_FUNCTION_code_body[283] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x2c, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x76, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x98, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3b, 0x4d, 0x85, 0xed, 0x74, 0x4a, 0x41, 0x8b, 0x74, 0x24, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xb6, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_MAKE_FUNCTION_code_holes[10] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_MAKE_FUNCTION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_MAKE_FUNCTION_data_holes[1];

// _CHECK_VALIDITYplus_MAP_ADD
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_MAP_ADD.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 f6                      movq    %rsi, %r14
// b: 48 89 fb                      movq    %rdi, %rbx
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 51                         je      0x6f <_JIT_ENTRY+0x6f>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 49 8b 76 f0                   movq    -0x10(%r14), %rsi
// 25: 49 8b 56 f8                   movq    -0x8(%r14), %rdx
// 29: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  _JIT_OPARG
// 37: 0f b7 c0                      movzwl  %ax, %eax
// 3a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 3f: 29 c1                         subl    %eax, %ecx
// 41: 48 63 c1                      movslq  %ecx, %rax
// 44: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 48: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004a:  R_X86_64_64  _PyDict_SetItem_Take2
// 52: ff d0                         callq   *%rax
// 54: 85 c0                         testl   %eax, %eax
// 56: 4d 0f 45 e6                   cmovneq %r14, %r12
// 5a: 74 47                         je      0xa3 <_JIT_ENTRY+0xa3>
// 5c: 49 29 dc                      subq    %rbx, %r12
// 5f: 49 83 c4 a8                   addq    $-0x58, %r12
// 63: 49 c1 ec 03                   shrq    $0x3, %r12
// 67: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 6b: 31 c0                         xorl    %eax, %eax
// 6d: eb 28                         jmp     0x97 <_JIT_ENTRY+0x97>
// 6f: 49 29 de                      subq    %rbx, %r14
// 72: 49 83 c6 b8                   addq    $-0x48, %r14
// 76: 49 c1 ee 03                   shrq    $0x3, %r14
// 7a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 7e: 48 8b 03                      movq    (%rbx), %rax
// 81: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000083:  R_X86_64_64  _JIT_TARGET
// 8b: 89 c9                         movl    %ecx, %ecx
// 8d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 91: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 97: 48 83 c4 08                   addq    $0x8, %rsp
// 9b: 5b                            popq    %rbx
// 9c: 41 5c                         popq    %r12
// 9e: 41 5e                         popq    %r14
// a0: 41 5f                         popq    %r15
// a2: c3                            retq
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _JIT_CONTINUE
// ad: 48 89 df                      movq    %rbx, %rdi
// b0: 4c 89 e6                      movq    %r12, %rsi
// b3: 4c 89 fa                      movq    %r15, %rdx
// b6: 48 83 c4 08                   addq    $0x8, %rsp
// ba: 5b                            popq    %rbx
// bb: 41 5c                         popq    %r12
// bd: 41 5e                         popq    %r14
// bf: 41 5f                         popq    %r15
// c1: ff e0                         jmpq    *%rax
// c3: 
static const unsigned char _CHECK_VALIDITYplus_MAP_ADD_code_body[196] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x51, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x76, 0xf0, 0x49, 0x8b, 0x56, 0xf8, 0x4d, 0x8d, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x4d, 0x0f, 0x45, 0xe6, 0x74, 0x47, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0x28, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_MAP_ADD_code_holes[6] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_MAP_ADD_data_body[1];
static const Hole _CHECK_VALIDITYplus_MAP_ADD_data_holes[1];

// _CHECK_VALIDITYplus_MATCH_CLASS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_MATCH_CLASS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 47                         je      0x68 <_JIT_ENTRY+0x68>
// 21: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 25: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 29: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  _JIT_OPARG
// 37: 0f b7 c8                      movzwl  %ax, %ecx
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _PyEval_MatchClass
// 44: 48 89 14 24                   movq    %rdx, (%rsp)
// 48: 48 89 d7                      movq    %rdx, %rdi
// 4b: 4c 89 e6                      movq    %r12, %rsi
// 4e: 48 89 ea                      movq    %rbp, %rdx
// 51: 4d 89 e8                      movq    %r13, %r8
// 54: ff d0                         callq   *%rax
// 56: 49 89 c7                      movq    %rax, %r15
// 59: 49 8b 04 24                   movq    (%r12), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7e 33                         jle     0x95 <_JIT_ENTRY+0x95>
// 62: 85 c0                         testl   %eax, %eax
// 64: 79 55                         jns     0xbb <_JIT_ENTRY+0xbb>
// 66: eb 65                         jmp     0xcd <_JIT_ENTRY+0xcd>
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 48 8b 03                      movq    (%rbx), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_TARGET
// 84: 89 c9                         movl    %ecx, %ecx
// 86: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 8a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 90: e9 70 01 00 00                jmp     0x205 <_JIT_ENTRY+0x205>
// 95: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000097:  R_X86_64_64  .rodata.str1.1
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_NegativeRefcount
// a9: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// ae: 4c 89 e2                      movq    %r12, %rdx
// b1: ff d0                         callq   *%rax
// b3: 49 8b 04 24                   movq    (%r12), %rax
// b7: 85 c0                         testl   %eax, %eax
// b9: 78 12                         js      0xcd <_JIT_ENTRY+0xcd>
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c5: ff d0                         callq   *%rax
// c7: 49 ff 0c 24                   decq    (%r12)
// cb: 74 0f                         je      0xdc <_JIT_ENTRY+0xdc>
// cd: 48 8b 45 00                   movq    (%rbp), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 7e 1e                         jle     0xf4 <_JIT_ENTRY+0xf4>
// d6: 85 c0                         testl   %eax, %eax
// d8: 79 40                         jns     0x11a <_JIT_ENTRY+0x11a>
// da: eb 50                         jmp     0x12c <_JIT_ENTRY+0x12c>
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_Dealloc
// e6: 4c 89 e7                      movq    %r12, %rdi
// e9: ff d0                         callq   *%rax
// eb: 48 8b 45 00                   movq    (%rbp), %rax
// ef: 48 85 c0                      testq   %rax, %rax
// f2: 7f e2                         jg      0xd6 <_JIT_ENTRY+0xd6>
// f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f6:  R_X86_64_64  .rodata.str1.1
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_NegativeRefcount
// 108: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 10d: 48 89 ea                      movq    %rbp, %rdx
// 110: ff d0                         callq   *%rax
// 112: 48 8b 45 00                   movq    (%rbp), %rax
// 116: 85 c0                         testl   %eax, %eax
// 118: 78 12                         js      0x12c <_JIT_ENTRY+0x12c>
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 124: ff d0                         callq   *%rax
// 126: 48 ff 4d 00                   decq    (%rbp)
// 12a: 74 0f                         je      0x13b <_JIT_ENTRY+0x13b>
// 12c: 49 8b 45 00                   movq    (%r13), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 1e                         jle     0x153 <_JIT_ENTRY+0x153>
// 135: 85 c0                         testl   %eax, %eax
// 137: 79 40                         jns     0x179 <_JIT_ENTRY+0x179>
// 139: eb 50                         jmp     0x18b <_JIT_ENTRY+0x18b>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_Dealloc
// 145: 48 89 ef                      movq    %rbp, %rdi
// 148: ff d0                         callq   *%rax
// 14a: 49 8b 45 00                   movq    (%r13), %rax
// 14e: 48 85 c0                      testq   %rax, %rax
// 151: 7f e2                         jg      0x135 <_JIT_ENTRY+0x135>
// 153: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000155:  R_X86_64_64  .rodata.str1.1
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_NegativeRefcount
// 167: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 16c: 4c 89 ea                      movq    %r13, %rdx
// 16f: ff d0                         callq   *%rax
// 171: 49 8b 45 00                   movq    (%r13), %rax
// 175: 85 c0                         testl   %eax, %eax
// 177: 78 12                         js      0x18b <_JIT_ENTRY+0x18b>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 183: ff d0                         callq   *%rax
// 185: 49 ff 4d 00                   decq    (%r13)
// 189: 74 34                         je      0x1bf <_JIT_ENTRY+0x1bf>
// 18b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 18f: 4d 85 ff                      testq   %r15, %r15
// 192: 48 8b 14 24                   movq    (%rsp), %rdx
// 196: 74 43                         je      0x1db <_JIT_ENTRY+0x1db>
// 198: 49 83 c6 f0                   addq    $-0x10, %r14
// 19c: 4c 89 38                      movq    %r15, (%rax)
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _JIT_CONTINUE
// 1a9: 48 89 df                      movq    %rbx, %rdi
// 1ac: 4c 89 f6                      movq    %r14, %rsi
// 1af: 48 83 c4 08                   addq    $0x8, %rsp
// 1b3: 5b                            popq    %rbx
// 1b4: 41 5c                         popq    %r12
// 1b6: 41 5d                         popq    %r13
// 1b8: 41 5e                         popq    %r14
// 1ba: 41 5f                         popq    %r15
// 1bc: 5d                            popq    %rbp
// 1bd: ff e0                         jmpq    *%rax
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_Dealloc
// 1c9: 4c 89 ef                      movq    %r13, %rdi
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1d2: 4d 85 ff                      testq   %r15, %r15
// 1d5: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d9: 75 bd                         jne     0x198 <_JIT_ENTRY+0x198>
// 1db: 48 8b 4a 68                   movq    0x68(%rdx), %rcx
// 1df: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001e1:  R_X86_64_64  _Py_NoneStruct
// 1e9: 48 85 c9                      testq   %rcx, %rcx
// 1ec: 74 aa                         je      0x198 <_JIT_ENTRY+0x198>
// 1ee: 48 83 79 08 00                cmpq    $0x0, 0x8(%rcx)
// 1f3: 74 a3                         je      0x198 <_JIT_ENTRY+0x198>
// 1f5: 48 29 d8                      subq    %rbx, %rax
// 1f8: 48 83 c0 b8                   addq    $-0x48, %rax
// 1fc: 48 c1 e8 03                   shrq    $0x3, %rax
// 200: 89 43 40                      movl    %eax, 0x40(%rbx)
// 203: 31 c0                         xorl    %eax, %eax
// 205: 48 83 c4 08                   addq    $0x8, %rsp
// 209: 5b                            popq    %rbx
// 20a: 41 5c                         popq    %r12
// 20c: 41 5d                         popq    %r13
// 20e: 41 5e                         popq    %r14
// 210: 41 5f                         popq    %r15
// 212: 5d                            popq    %rbp
// 213: c3                            retq
// 214: 
static const unsigned char _CHECK_VALIDITYplus_MATCH_CLASS_code_body[533] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x47, 0x4d, 0x8b, 0x6e, 0xf8, 0x4d, 0x8b, 0x66, 0xe8, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x4d, 0x89, 0xe8, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x70, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x34, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xff, 0x48, 0x8b, 0x14, 0x24, 0x74, 0x43, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xff, 0x48, 0x8b, 0x14, 0x24, 0x75, 0xbd, 0x48, 0x8b, 0x4a, 0x68, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x74, 0xaa, 0x48, 0x83, 0x79, 0x08, 0x00, 0x74, 0xa3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_MATCH_CLASS_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_MATCH_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_MATCH_CLASS_data_holes[1];

// _CHECK_VALIDITYplus_MATCH_KEYS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_MATCH_KEYS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 89 f3                      movq    %rsi, %rbx
// 8: 49 89 fe                      movq    %rdi, %r14
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_EXECUTOR
// 15: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 19: 74 40                         je      0x5b <_JIT_ENTRY+0x5b>
// 1b: 49 89 d7                      movq    %rdx, %r15
// 1e: 48 8b 73 f0                   movq    -0x10(%rbx), %rsi
// 22: 48 8b 53 f8                   movq    -0x8(%rbx), %rdx
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  _PyEval_MatchKeys
// 30: 4c 89 ff                      movq    %r15, %rdi
// 33: ff d0                         callq   *%rax
// 35: 48 85 c0                      testq   %rax, %rax
// 38: 74 4d                         je      0x87 <_JIT_ENTRY+0x87>
// 3a: 48 89 03                      movq    %rax, (%rbx)
// 3d: 48 83 c3 08                   addq    $0x8, %rbx
// 41: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000043:  R_X86_64_64  _JIT_CONTINUE
// 4b: 4c 89 f7                      movq    %r14, %rdi
// 4e: 48 89 de                      movq    %rbx, %rsi
// 51: 4c 89 fa                      movq    %r15, %rdx
// 54: 5b                            popq    %rbx
// 55: 41 5e                         popq    %r14
// 57: 41 5f                         popq    %r15
// 59: ff e0                         jmpq    *%rax
// 5b: 4c 29 f3                      subq    %r14, %rbx
// 5e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 62: 48 c1 eb 03                   shrq    $0x3, %rbx
// 66: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 6a: 49 8b 06                      movq    (%r14), %rax
// 6d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006f:  R_X86_64_64  _JIT_TARGET
// 77: 89 c9                         movl    %ecx, %ecx
// 79: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 81: 5b                            popq    %rbx
// 82: 41 5e                         popq    %r14
// 84: 41 5f                         popq    %r15
// 86: c3                            retq
// 87: 4c 29 f3                      subq    %r14, %rbx
// 8a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 8e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 92: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 96: 31 c0                         xorl    %eax, %eax
// 98: 5b                            popq    %rbx
// 99: 41 5e                         popq    %r14
// 9b: 41 5f                         popq    %r15
// 9d: c3                            retq
// 9e: 
static const unsigned char _CHECK_VALIDITYplus_MATCH_KEYS_code_body[159] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x40, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x73, 0xf0, 0x48, 0x8b, 0x53, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4d, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_MATCH_KEYS_code_holes[5] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_MATCH_KEYS_data_body[1];
static const Hole _CHECK_VALIDITYplus_MATCH_KEYS_data_holes[1];

// _CHECK_VALIDITYplus_MATCH_MAPPING
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_MATCH_MAPPING.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 3a                         je      0x4a <_JIT_ENTRY+0x4a>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 8b 40 08                   movq    0x8(%rax), %rax
// 18: f6 80 a8 00 00 00 40          testb   $0x40, 0xa8(%rax)
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _Py_FalseStruct
// 29: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002b:  R_X86_64_64  _Py_TrueStruct
// 33: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 37: 48 89 0e                      movq    %rcx, (%rsi)
// 3a: 48 83 c6 08                   addq    $0x8, %rsi
// 3e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000040:  R_X86_64_64  _JIT_CONTINUE
// 48: ff e0                         jmpq    *%rax
// 4a: 48 29 fe                      subq    %rdi, %rsi
// 4d: 48 83 c6 b8                   addq    $-0x48, %rsi
// 51: 48 c1 ee 03                   shrq    $0x3, %rsi
// 55: 89 77 40                      movl    %esi, 0x40(%rdi)
// 58: 48 8b 07                      movq    (%rdi), %rax
// 5b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005d:  R_X86_64_64  _JIT_TARGET
// 65: 89 c9                         movl    %ecx, %ecx
// 67: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 71: c3                            retq
// 72: 
static const unsigned char _CHECK_VALIDITYplus_MATCH_MAPPING_code_body[115] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3a, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x0e, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_MATCH_MAPPING_code_holes[6] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_MATCH_MAPPING_data_body[1];
static const Hole _CHECK_VALIDITYplus_MATCH_MAPPING_data_holes[1];

// _CHECK_VALIDITYplus_MATCH_SEQUENCE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_MATCH_SEQUENCE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 3a                         je      0x4a <_JIT_ENTRY+0x4a>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 8b 40 08                   movq    0x8(%rax), %rax
// 18: f6 80 a8 00 00 00 20          testb   $0x20, 0xa8(%rax)
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _Py_FalseStruct
// 29: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002b:  R_X86_64_64  _Py_TrueStruct
// 33: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 37: 48 89 0e                      movq    %rcx, (%rsi)
// 3a: 48 83 c6 08                   addq    $0x8, %rsi
// 3e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000040:  R_X86_64_64  _JIT_CONTINUE
// 48: ff e0                         jmpq    *%rax
// 4a: 48 29 fe                      subq    %rdi, %rsi
// 4d: 48 83 c6 b8                   addq    $-0x48, %rsi
// 51: 48 c1 ee 03                   shrq    $0x3, %rsi
// 55: 89 77 40                      movl    %esi, 0x40(%rdi)
// 58: 48 8b 07                      movq    (%rdi), %rax
// 5b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005d:  R_X86_64_64  _JIT_TARGET
// 65: 89 c9                         movl    %ecx, %ecx
// 67: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 71: c3                            retq
// 72: 
static const unsigned char _CHECK_VALIDITYplus_MATCH_SEQUENCE_code_body[115] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3a, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x0e, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_MATCH_SEQUENCE_code_holes[6] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_MATCH_SEQUENCE_data_body[1];
static const Hole _CHECK_VALIDITYplus_MATCH_SEQUENCE_data_holes[1];

// _CHECK_VALIDITYplus_NOP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_NOP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 0c                         je      0x1c <_JIT_ENTRY+0x1c>
// 10: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000012:  R_X86_64_64  _JIT_CONTINUE
// 1a: ff e0                         jmpq    *%rax
// 1c: 48 29 fe                      subq    %rdi, %rsi
// 1f: 48 83 c6 b8                   addq    $-0x48, %rsi
// 23: 48 c1 ee 03                   shrq    $0x3, %rsi
// 27: 89 77 40                      movl    %esi, 0x40(%rdi)
// 2a: 48 8b 07                      movq    (%rdi), %rax
// 2d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002f:  R_X86_64_64  _JIT_TARGET
// 37: 89 c9                         movl    %ecx, %ecx
// 39: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 3d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 43: c3                            retq
// 44: 
static const unsigned char _CHECK_VALIDITYplus_NOP_code_body[69] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_NOP_code_holes[4] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x12, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_NOP_data_body[1];
static const Hole _CHECK_VALIDITYplus_NOP_data_holes[1];

// _CHECK_VALIDITYplus_POP_EXCEPT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_POP_EXCEPT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 40                         je      0x5e <_JIT_ENTRY+0x5e>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 25: 48 83 c3 f8                   addq    $-0x8, %rbx
// 29: 48 8b 4a 70                   movq    0x70(%rdx), %rcx
// 2d: 4c 8b 21                      movq    (%rcx), %r12
// 30: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000032:  R_X86_64_64  _Py_NoneStruct
// 3a: 31 f6                         xorl    %esi, %esi
// 3c: 48 39 d0                      cmpq    %rdx, %rax
// 3f: 48 0f 45 f0                   cmovneq %rax, %rsi
// 43: 48 89 31                      movq    %rsi, (%rcx)
// 46: 4d 85 e4                      testq   %r12, %r12
// 49: 0f 84 8a 00 00 00             je      0xd9 <_JIT_ENTRY+0xd9>
// 4f: 49 8b 04 24                   movq    (%r12), %rax
// 53: 48 85 c0                      testq   %rax, %rax
// 56: 7e 3a                         jle     0x92 <_JIT_ENTRY+0x92>
// 58: 85 c0                         testl   %eax, %eax
// 5a: 79 5c                         jns     0xb8 <_JIT_ENTRY+0xb8>
// 5c: eb 7b                         jmp     0xd9 <_JIT_ENTRY+0xd9>
// 5e: 4c 29 f3                      subq    %r14, %rbx
// 61: 48 83 c3 b8                   addq    $-0x48, %rbx
// 65: 48 c1 eb 03                   shrq    $0x3, %rbx
// 69: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 6d: 49 8b 06                      movq    (%r14), %rax
// 70: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000072:  R_X86_64_64  _JIT_TARGET
// 7a: 89 c9                         movl    %ecx, %ecx
// 7c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 80: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 86: 48 83 c4 08                   addq    $0x8, %rsp
// 8a: 5b                            popq    %rbx
// 8b: 41 5c                         popq    %r12
// 8d: 41 5e                         popq    %r14
// 8f: 41 5f                         popq    %r15
// 91: c3                            retq
// 92: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000094:  R_X86_64_64  .rodata.str1.1
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_NegativeRefcount
// a6: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// ab: 4c 89 e2                      movq    %r12, %rdx
// ae: ff d0                         callq   *%rax
// b0: 49 8b 04 24                   movq    (%r12), %rax
// b4: 85 c0                         testl   %eax, %eax
// b6: 78 21                         js      0xd9 <_JIT_ENTRY+0xd9>
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c2: ff d0                         callq   *%rax
// c4: 49 ff 0c 24                   decq    (%r12)
// c8: 75 0f                         jne     0xd9 <_JIT_ENTRY+0xd9>
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_Dealloc
// d4: 4c 89 e7                      movq    %r12, %rdi
// d7: ff d0                         callq   *%rax
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _JIT_CONTINUE
// e3: 4c 89 f7                      movq    %r14, %rdi
// e6: 48 89 de                      movq    %rbx, %rsi
// e9: 4c 89 fa                      movq    %r15, %rdx
// ec: 48 83 c4 08                   addq    $0x8, %rsp
// f0: 5b                            popq    %rbx
// f1: 41 5c                         popq    %r12
// f3: 41 5e                         popq    %r14
// f5: 41 5f                         popq    %r15
// f7: ff e0                         jmpq    *%rax
// f9: 
static const unsigned char _CHECK_VALIDITYplus_POP_EXCEPT_code_body[250] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x40, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0x8b, 0x4a, 0x70, 0x4c, 0x8b, 0x21, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0xd0, 0x48, 0x0f, 0x45, 0xf0, 0x48, 0x89, 0x31, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3a, 0x85, 0xc0, 0x79, 0x5c, 0xeb, 0x7b, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_POP_EXCEPT_code_holes[9] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Include/object.h\x00'
// 30: 
static const unsigned char _CHECK_VALIDITYplus_POP_EXCEPT_data_body[49] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00};
static const Hole _CHECK_VALIDITYplus_POP_EXCEPT_data_holes[1];

// _CHECK_VALIDITYplus_POP_FRAME
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_POP_FRAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 89 f8                      movq    %rdi, %rax
// 8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000000a:  R_X86_64_64  _JIT_EXECUTOR
// 12: 80 79 22 00                   cmpb    $0x0, 0x22(%rcx)
// 16: 74 66                         je      0x7e <_JIT_ENTRY+0x7e>
// 18: 48 89 d3                      movq    %rdx, %rbx
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 83 c6 f8                   addq    $-0x8, %rsi
// 23: 48 29 c6                      subq    %rax, %rsi
// 26: 48 83 c6 b8                   addq    $-0x48, %rsi
// 2a: 48 c1 ee 03                   shrq    $0x3, %rsi
// 2e: 89 70 40                      movl    %esi, 0x40(%rax)
// 31: ff 42 24                      incl    0x24(%rdx)
// 34: 4c 8b 70 08                   movq    0x8(%rax), %r14
// 38: 4c 89 72 40                   movq    %r14, 0x40(%rdx)
// 3c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000003e:  R_X86_64_64  _PyEval_FrameClearAndPop
// 46: 48 89 d7                      movq    %rdx, %rdi
// 49: 48 89 c6                      movq    %rax, %rsi
// 4c: ff d1                         callq   *%rcx
// 4e: 49 63 46 40                   movslq  0x40(%r14), %rax
// 52: 4d 89 7c c6 48                movq    %r15, 0x48(%r14,%rax,8)
// 57: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 5b: 48 83 c6 50                   addq    $0x50, %rsi
// 5f: 41 c7 46 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r14) # imm = 0xFFFFFFFF
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  _JIT_CONTINUE
// 71: 4c 89 f7                      movq    %r14, %rdi
// 74: 48 89 da                      movq    %rbx, %rdx
// 77: 5b                            popq    %rbx
// 78: 41 5e                         popq    %r14
// 7a: 41 5f                         popq    %r15
// 7c: ff e0                         jmpq    *%rax
// 7e: 48 29 c6                      subq    %rax, %rsi
// 81: 48 83 c6 b8                   addq    $-0x48, %rsi
// 85: 48 c1 ee 03                   shrq    $0x3, %rsi
// 89: 89 70 40                      movl    %esi, 0x40(%rax)
// 8c: 48 8b 00                      movq    (%rax), %rax
// 8f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000091:  R_X86_64_64  _JIT_TARGET
// 99: 89 c9                         movl    %ecx, %ecx
// 9b: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// a3: 5b                            popq    %rbx
// a4: 41 5e                         popq    %r14
// a6: 41 5f                         popq    %r15
// a8: c3                            retq
// a9: 
static const unsigned char _CHECK_VALIDITYplus_POP_FRAME_code_body[170] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x79, 0x22, 0x00, 0x74, 0x66, 0x48, 0x89, 0xd3, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0xff, 0x42, 0x24, 0x4c, 0x8b, 0x70, 0x08, 0x4c, 0x89, 0x72, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x48, 0x89, 0xc6, 0xff, 0xd1, 0x49, 0x63, 0x46, 0x40, 0x4d, 0x89, 0x7c, 0xc6, 0x48, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x50, 0x41, 0xc7, 0x46, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xda, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_POP_FRAME_code_holes[5] = {
    {0xa, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_POP_FRAME_data_body[1];
static const Hole _CHECK_VALIDITYplus_POP_FRAME_data_holes[1];

// _CHECK_VALIDITYplus_POP_TOP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_POP_TOP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 1a                         je      0x38 <_JIT_ENTRY+0x38>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 25: 49 8b 04 24                   movq    (%r12), %rax
// 29: 48 85 c0                      testq   %rax, %rax
// 2c: 7e 3e                         jle     0x6c <_JIT_ENTRY+0x6c>
// 2e: 48 83 c3 f8                   addq    $-0x8, %rbx
// 32: 85 c0                         testl   %eax, %eax
// 34: 79 60                         jns     0x96 <_JIT_ENTRY+0x96>
// 36: eb 7f                         jmp     0xb7 <_JIT_ENTRY+0xb7>
// 38: 4c 29 f3                      subq    %r14, %rbx
// 3b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 3f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 43: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 47: 49 8b 06                      movq    (%r14), %rax
// 4a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004c:  R_X86_64_64  _JIT_TARGET
// 54: 89 c9                         movl    %ecx, %ecx
// 56: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 5a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 60: 48 83 c4 08                   addq    $0x8, %rsp
// 64: 5b                            popq    %rbx
// 65: 41 5c                         popq    %r12
// 67: 41 5e                         popq    %r14
// 69: 41 5f                         popq    %r15
// 6b: c3                            retq
// 6c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006e:  R_X86_64_64  .rodata.str1.1
// 76: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000078:  R_X86_64_64  _Py_NegativeRefcount
// 80: be 54 00 00 00                movl    $0x54, %esi
// 85: 4c 89 e2                      movq    %r12, %rdx
// 88: ff d0                         callq   *%rax
// 8a: 49 8b 04 24                   movq    (%r12), %rax
// 8e: 48 83 c3 f8                   addq    $-0x8, %rbx
// 92: 85 c0                         testl   %eax, %eax
// 94: 78 21                         js      0xb7 <_JIT_ENTRY+0xb7>
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: ff d0                         callq   *%rax
// a2: 49 ff 0c 24                   decq    (%r12)
// a6: 75 0f                         jne     0xb7 <_JIT_ENTRY+0xb7>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_Dealloc
// b2: 4c 89 e7                      movq    %r12, %rdi
// b5: ff d0                         callq   *%rax
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _JIT_CONTINUE
// c1: 4c 89 f7                      movq    %r14, %rdi
// c4: 48 89 de                      movq    %rbx, %rsi
// c7: 4c 89 fa                      movq    %r15, %rdx
// ca: 48 83 c4 08                   addq    $0x8, %rsp
// ce: 5b                            popq    %rbx
// cf: 41 5c                         popq    %r12
// d1: 41 5e                         popq    %r14
// d3: 41 5f                         popq    %r15
// d5: ff e0                         jmpq    *%rax
// d7: 
static const unsigned char _CHECK_VALIDITYplus_POP_TOP_code_body[216] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x1a, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3e, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x79, 0x60, 0xeb, 0x7f, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_POP_TOP_code_holes[8] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_POP_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_POP_TOP_data_holes[1];

// _CHECK_VALIDITYplus_PUSH_EXC_INFO
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_PUSH_EXC_INFO.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 6a                         je      0x8b <_JIT_ENTRY+0x8b>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 28: 4c 8b 6a 70                   movq    0x70(%rdx), %r13
// 2c: 49 8b 6d 00                   movq    (%r13), %rbp
// 30: 41 8b 04 24                   movl    (%r12), %eax
// 34: ff c0                         incl    %eax
// 36: 74 10                         je      0x48 <_JIT_ENTRY+0x48>
// 38: 41 89 04 24                   movl    %eax, (%r12)
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 46: ff d0                         callq   *%rax
// 48: 48 85 ed                      testq   %rbp, %rbp
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_NoneStruct
// 55: 48 0f 45 c5                   cmovneq %rbp, %rax
// 59: 4d 89 65 00                   movq    %r12, (%r13)
// 5d: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 61: 4c 89 23                      movq    %r12, (%rbx)
// 64: 48 83 c3 08                   addq    $0x8, %rbx
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_CONTINUE
// 72: 4c 89 f7                      movq    %r14, %rdi
// 75: 48 89 de                      movq    %rbx, %rsi
// 78: 4c 89 fa                      movq    %r15, %rdx
// 7b: 48 83 c4 08                   addq    $0x8, %rsp
// 7f: 5b                            popq    %rbx
// 80: 41 5c                         popq    %r12
// 82: 41 5d                         popq    %r13
// 84: 41 5e                         popq    %r14
// 86: 41 5f                         popq    %r15
// 88: 5d                            popq    %rbp
// 89: ff e0                         jmpq    *%rax
// 8b: 4c 29 f3                      subq    %r14, %rbx
// 8e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 92: 48 c1 eb 03                   shrq    $0x3, %rbx
// 96: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 9a: 49 8b 06                      movq    (%r14), %rax
// 9d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009f:  R_X86_64_64  _JIT_TARGET
// a7: 89 c9                         movl    %ecx, %ecx
// a9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ad: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b3: 48 83 c4 08                   addq    $0x8, %rsp
// b7: 5b                            popq    %rbx
// b8: 41 5c                         popq    %r12
// ba: 41 5d                         popq    %r13
// bc: 41 5e                         popq    %r14
// be: 41 5f                         popq    %r15
// c0: 5d                            popq    %rbp
// c1: c3                            retq
// c2: 
static const unsigned char _CHECK_VALIDITYplus_PUSH_EXC_INFO_code_body[195] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x6a, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x4c, 0x8b, 0x6a, 0x70, 0x49, 0x8b, 0x6d, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xc5, 0x4d, 0x89, 0x65, 0x00, 0x48, 0x89, 0x43, 0xf8, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_PUSH_EXC_INFO_code_holes[6] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_PUSH_EXC_INFO_data_body[1];
static const Hole _CHECK_VALIDITYplus_PUSH_EXC_INFO_data_holes[1];

// _CHECK_VALIDITYplus_PUSH_FRAME
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_PUSH_FRAME.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 43                         je      0x53 <_JIT_ENTRY+0x53>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 83 c6 f8                   addq    $-0x8, %rsi
// 18: 48 29 fe                      subq    %rdi, %rsi
// 1b: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1f: 48 c1 ee 03                   shrq    $0x3, %rsi
// 23: 89 77 40                      movl    %esi, 0x40(%rdi)
// 26: 48 89 78 08                   movq    %rdi, 0x8(%rax)
// 2a: 48 89 42 40                   movq    %rax, 0x40(%rdx)
// 2e: ff 4a 24                      decl    0x24(%rdx)
// 31: 48 63 48 40                   movslq  0x40(%rax), %rcx
// 35: 48 8d 34 c8                   leaq    (%rax,%rcx,8), %rsi
// 39: 48 83 c6 48                   addq    $0x48, %rsi
// 3d: c7 40 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rax) # imm = 0xFFFFFFFF
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_CONTINUE
// 4e: 48 89 c7                      movq    %rax, %rdi
// 51: ff e1                         jmpq    *%rcx
// 53: 48 29 fe                      subq    %rdi, %rsi
// 56: 48 83 c6 b8                   addq    $-0x48, %rsi
// 5a: 48 c1 ee 03                   shrq    $0x3, %rsi
// 5e: 89 77 40                      movl    %esi, 0x40(%rdi)
// 61: 48 8b 07                      movq    (%rdi), %rax
// 64: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000066:  R_X86_64_64  _JIT_TARGET
// 6e: 89 c9                         movl    %ecx, %ecx
// 70: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 74: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7a: c3                            retq
// 7b: 
static const unsigned char _CHECK_VALIDITYplus_PUSH_FRAME_code_body[124] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x43, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x89, 0x78, 0x08, 0x48, 0x89, 0x42, 0x40, 0xff, 0x4a, 0x24, 0x48, 0x63, 0x48, 0x40, 0x48, 0x8d, 0x34, 0xc8, 0x48, 0x83, 0xc6, 0x48, 0xc7, 0x40, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xe1, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_PUSH_FRAME_code_holes[4] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_PUSH_FRAME_data_body[1];
static const Hole _CHECK_VALIDITYplus_PUSH_FRAME_data_holes[1];

// _CHECK_VALIDITYplus_PUSH_NULL
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_PUSH_NULL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 17                         je      0x27 <_JIT_ENTRY+0x27>
// 10: 48 c7 06 00 00 00 00          movq    $0x0, (%rsi)
// 17: 48 83 c6 08                   addq    $0x8, %rsi
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  _JIT_CONTINUE
// 25: ff e0                         jmpq    *%rax
// 27: 48 29 fe                      subq    %rdi, %rsi
// 2a: 48 83 c6 b8                   addq    $-0x48, %rsi
// 2e: 48 c1 ee 03                   shrq    $0x3, %rsi
// 32: 89 77 40                      movl    %esi, 0x40(%rdi)
// 35: 48 8b 07                      movq    (%rdi), %rax
// 38: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000003a:  R_X86_64_64  _JIT_TARGET
// 42: 89 c9                         movl    %ecx, %ecx
// 44: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 48: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 4e: c3                            retq
// 4f: 
static const unsigned char _CHECK_VALIDITYplus_PUSH_NULL_code_body[80] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x17, 0x48, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_PUSH_NULL_code_holes[4] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x1d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_PUSH_NULL_data_body[1];
static const Hole _CHECK_VALIDITYplus_PUSH_NULL_data_holes[1];

// _CHECK_VALIDITYplus_RESUME_CHECK
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_RESUME_CHECK.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 1f                         je      0x2f <_JIT_ENTRY+0x2f>
// 10: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 14: 48 8b 08                      movq    (%rax), %rcx
// 17: 48 8b 07                      movq    (%rdi), %rax
// 1a: 48 3b 88 a8 00 00 00          cmpq    0xa8(%rax), %rcx
// 21: 75 0f                         jne     0x32 <_JIT_ENTRY+0x32>
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _JIT_CONTINUE
// 2d: ff e0                         jmpq    *%rax
// 2f: 48 8b 07                      movq    (%rdi), %rax
// 32: 48 29 fe                      subq    %rdi, %rsi
// 35: 48 83 c6 b8                   addq    $-0x48, %rsi
// 39: 48 c1 ee 03                   shrq    $0x3, %rsi
// 3d: 89 77 40                      movl    %esi, 0x40(%rdi)
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _JIT_TARGET
// 4a: 89 c9                         movl    %ecx, %ecx
// 4c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 50: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 56: c3                            retq
// 57: 
static const unsigned char _CHECK_VALIDITYplus_RESUME_CHECK_code_body[88] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x1f, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x08, 0x48, 0x8b, 0x07, 0x48, 0x3b, 0x88, 0xa8, 0x00, 0x00, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x8b, 0x07, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_RESUME_CHECK_code_holes[4] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x25, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_RESUME_CHECK_data_body[1];
static const Hole _CHECK_VALIDITYplus_RESUME_CHECK_data_holes[1];

// _CHECK_VALIDITYplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_SAVE_RETURN_OFFSET.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 1a                         je      0x2a <_JIT_ENTRY+0x2a>
// 10: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000012:  R_X86_64_64  _JIT_OPARG
// 1a: 66 89 47 44                   movw    %ax, 0x44(%rdi)
// 1e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000020:  R_X86_64_64  _JIT_CONTINUE
// 28: ff e0                         jmpq    *%rax
// 2a: 48 29 fe                      subq    %rdi, %rsi
// 2d: 48 83 c6 b8                   addq    $-0x48, %rsi
// 31: 48 c1 ee 03                   shrq    $0x3, %rsi
// 35: 89 77 40                      movl    %esi, 0x40(%rdi)
// 38: 48 8b 07                      movq    (%rdi), %rax
// 3b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000003d:  R_X86_64_64  _JIT_TARGET
// 45: 89 c9                         movl    %ecx, %ecx
// 47: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 4b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 51: c3                            retq
// 52: 
static const unsigned char _CHECK_VALIDITYplus_SAVE_RETURN_OFFSET_code_body[83] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x1a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x89, 0x47, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_SAVE_RETURN_OFFSET_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x12, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_SAVE_RETURN_OFFSET_data_body[1];
static const Hole _CHECK_VALIDITYplus_SAVE_RETURN_OFFSET_data_holes[1];

// _CHECK_VALIDITYplus_SETUP_ANNOTATIONS
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_SETUP_ANNOTATIONS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 0f 84 a5 00 00 00             je      0xca <_JIT_ENTRY+0xca>
// 25: 49 89 d7                      movq    %rdx, %r15
// 28: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 2c: 48 85 ff                      testq   %rdi, %rdi
// 2f: 0f 84 bf 00 00 00             je      0xf4 <_JIT_ENTRY+0xf4>
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  PyMapping_GetOptionalItem
// 3f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000041:  R_X86_64_64  _PyRuntime
// 49: 49 81 c5 a8 a7 00 00          addq    $0xa7a8, %r13           # imm = 0xA7A8
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 4c 89 ee                      movq    %r13, %rsi
// 56: ff d0                         callq   *%rax
// 58: 85 c0                         testl   %eax, %eax
// 5a: 0f 88 bc 00 00 00             js      0x11c <_JIT_ENTRY+0x11c>
// 60: 4c 8b 24 24                   movq    (%rsp), %r12
// 64: 4d 85 e4                      testq   %r12, %r12
// 67: 0f 84 cf 00 00 00             je      0x13c <_JIT_ENTRY+0x13c>
// 6d: 49 8b 04 24                   movq    (%r12), %rax
// 71: 48 85 c0                      testq   %rax, %rax
// 74: 7f 22                         jg      0x98 <_JIT_ENTRY+0x98>
// 76: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000078:  R_X86_64_64  .rodata.str1.1
// 80: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000082:  R_X86_64_64  _Py_NegativeRefcount
// 8a: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 8f: 4c 89 e2                      movq    %r12, %rdx
// 92: ff d0                         callq   *%rax
// 94: 49 8b 04 24                   movq    (%r12), %rax
// 98: 85 c0                         testl   %eax, %eax
// 9a: 0f 88 25 01 00 00             js      0x1c5 <_JIT_ENTRY+0x1c5>
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// aa: ff d0                         callq   *%rax
// ac: 49 ff 0c 24                   decq    (%r12)
// b0: 0f 85 0f 01 00 00             jne     0x1c5 <_JIT_ENTRY+0x1c5>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_Dealloc
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: e9 fb 00 00 00                jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// ca: 4c 29 f3                      subq    %r14, %rbx
// cd: 48 83 c3 b8                   addq    $-0x48, %rbx
// d1: 48 c1 eb 03                   shrq    $0x3, %rbx
// d5: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// d9: 49 8b 06                      movq    (%r14), %rax
// dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000de:  R_X86_64_64  _JIT_TARGET
// e6: 89 c9                         movl    %ecx, %ecx
// e8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ec: 48 05 c8 00 00 00             addq    $0xc8, %rax
// f2: eb 39                         jmp     0x12d <_JIT_ENTRY+0x12d>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  PyExc_SystemError
// fe: 48 8b 30                      movq    (%rax), %rsi
// 101: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000103:  R_X86_64_64  .rodata.str1.1+0x39
// 10b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010d:  R_X86_64_64  _PyErr_Format
// 115: 4c 89 ff                      movq    %r15, %rdi
// 118: 31 c0                         xorl    %eax, %eax
// 11a: ff d1                         callq   *%rcx
// 11c: 4c 29 f3                      subq    %r14, %rbx
// 11f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 123: 48 c1 eb 03                   shrq    $0x3, %rbx
// 127: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 12b: 31 c0                         xorl    %eax, %eax
// 12d: 48 83 c4 08                   addq    $0x8, %rsp
// 131: 5b                            popq    %rbx
// 132: 41 5c                         popq    %r12
// 134: 41 5d                         popq    %r13
// 136: 41 5e                         popq    %r14
// 138: 41 5f                         popq    %r15
// 13a: 5d                            popq    %rbp
// 13b: c3                            retq
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  PyDict_New
// 146: ff d0                         callq   *%rax
// 148: 48 89 04 24                   movq    %rax, (%rsp)
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 74 cb                         je      0x11c <_JIT_ENTRY+0x11c>
// 151: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 155: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000157:  R_X86_64_64  PyObject_SetItem
// 15f: 4c 89 ee                      movq    %r13, %rsi
// 162: 48 89 c2                      movq    %rax, %rdx
// 165: ff d1                         callq   *%rcx
// 167: 89 c5                         movl    %eax, %ebp
// 169: 4c 8b 24 24                   movq    (%rsp), %r12
// 16d: 49 8b 04 24                   movq    (%r12), %rax
// 171: 48 85 c0                      testq   %rax, %rax
// 174: 7f 22                         jg      0x198 <_JIT_ENTRY+0x198>
// 176: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000178:  R_X86_64_64  .rodata.str1.1
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_NegativeRefcount
// 18a: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 18f: 4c 89 e2                      movq    %r12, %rdx
// 192: ff d0                         callq   *%rax
// 194: 49 8b 04 24                   movq    (%r12), %rax
// 198: 85 c0                         testl   %eax, %eax
// 19a: 78 21                         js      0x1bd <_JIT_ENTRY+0x1bd>
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a6: ff d0                         callq   *%rax
// 1a8: 49 ff 0c 24                   decq    (%r12)
// 1ac: 75 0f                         jne     0x1bd <_JIT_ENTRY+0x1bd>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_Dealloc
// 1b8: 4c 89 e7                      movq    %r12, %rdi
// 1bb: ff d0                         callq   *%rax
// 1bd: 85 ed                         testl   %ebp, %ebp
// 1bf: 0f 85 57 ff ff ff             jne     0x11c <_JIT_ENTRY+0x11c>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_CONTINUE
// 1cf: 4c 89 f7                      movq    %r14, %rdi
// 1d2: 48 89 de                      movq    %rbx, %rsi
// 1d5: 4c 89 fa                      movq    %r15, %rdx
// 1d8: 48 83 c4 08                   addq    $0x8, %rsp
// 1dc: 5b                            popq    %rbx
// 1dd: 41 5c                         popq    %r12
// 1df: 41 5d                         popq    %r13
// 1e1: 41 5e                         popq    %r14
// 1e3: 41 5f                         popq    %r15
// 1e5: 5d                            popq    %rbp
// 1e6: ff e0                         jmpq    *%rax
// 1e8: 
static const unsigned char _CHECK_VALIDITYplus_SETUP_ANNOTATIONS_code_body[489] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xbc, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x24, 0x24, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x25, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x0f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xfb, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x39, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0xff, 0xd1, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0xcb, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc5, 0x4c, 0x8b, 0x24, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x57, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_SETUP_ANNOTATIONS_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00'
// 65: 00 00 00
static const unsigned char _CHECK_VALIDITYplus_SETUP_ANNOTATIONS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_SETUP_ANNOTATIONS_data_holes[1];

// _CHECK_VALIDITYplus_SET_ADD
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_SET_ADD.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 42                         je      0x63 <_JIT_ENTRY+0x63>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 28: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002a:  R_X86_64_64  _JIT_OPARG
// 32: f7 d0                         notl    %eax
// 34: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 39: 48 98                         cltq
// 3b: 48 8b 3c c3                   movq    (%rbx,%rax,8), %rdi
// 3f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000041:  R_X86_64_64  PySet_Add
// 49: 4c 89 e6                      movq    %r12, %rsi
// 4c: ff d0                         callq   *%rax
// 4e: 89 c5                         movl    %eax, %ebp
// 50: 49 8b 04 24                   movq    (%r12), %rax
// 54: 48 85 c0                      testq   %rax, %rax
// 57: 7e 34                         jle     0x8d <_JIT_ENTRY+0x8d>
// 59: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// 5d: 85 c0                         testl   %eax, %eax
// 5f: 79 56                         jns     0xb7 <_JIT_ENTRY+0xb7>
// 61: eb 66                         jmp     0xc9 <_JIT_ENTRY+0xc9>
// 63: 4c 29 f3                      subq    %r14, %rbx
// 66: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 72: 49 8b 06                      movq    (%r14), %rax
// 75: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000077:  R_X86_64_64  _JIT_TARGET
// 7f: 89 c9                         movl    %ecx, %ecx
// 81: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 85: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 8b: eb 55                         jmp     0xe2 <_JIT_ENTRY+0xe2>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// b3: 85 c0                         testl   %eax, %eax
// b5: 78 12                         js      0xc9 <_JIT_ENTRY+0xc9>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c1: ff d0                         callq   *%rax
// c3: 49 ff 0c 24                   decq    (%r12)
// c7: 74 28                         je      0xf1 <_JIT_ENTRY+0xf1>
// c9: 85 ed                         testl   %ebp, %ebp
// cb: 49 0f 44 dd                   cmoveq  %r13, %rbx
// cf: 74 37                         je      0x108 <_JIT_ENTRY+0x108>
// d1: 4c 29 f3                      subq    %r14, %rbx
// d4: 48 83 c3 b0                   addq    $-0x50, %rbx
// d8: 48 c1 eb 03                   shrq    $0x3, %rbx
// dc: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// e0: 31 c0                         xorl    %eax, %eax
// e2: 48 83 c4 08                   addq    $0x8, %rsp
// e6: 5b                            popq    %rbx
// e7: 41 5c                         popq    %r12
// e9: 41 5d                         popq    %r13
// eb: 41 5e                         popq    %r14
// ed: 41 5f                         popq    %r15
// ef: 5d                            popq    %rbp
// f0: c3                            retq
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_Dealloc
// fb: 4c 89 e7                      movq    %r12, %rdi
// fe: ff d0                         callq   *%rax
// 100: 85 ed                         testl   %ebp, %ebp
// 102: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 106: 75 c9                         jne     0xd1 <_JIT_ENTRY+0xd1>
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  _JIT_CONTINUE
// 112: 4c 89 f7                      movq    %r14, %rdi
// 115: 48 89 de                      movq    %rbx, %rsi
// 118: 4c 89 fa                      movq    %r15, %rdx
// 11b: 48 83 c4 08                   addq    $0x8, %rsp
// 11f: 5b                            popq    %rbx
// 120: 41 5c                         popq    %r12
// 122: 41 5d                         popq    %r13
// 124: 41 5e                         popq    %r14
// 126: 41 5f                         popq    %r15
// 128: 5d                            popq    %rbp
// 129: ff e0                         jmpq    *%rax
// 12b: 
static const unsigned char _CHECK_VALIDITYplus_SET_ADD_code_body[300] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x42, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8b, 0x3c, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x66, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x55, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_SET_ADD_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_SET_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_SET_ADD_data_holes[1];

// _CHECK_VALIDITYplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_SET_FUNCTION_ATTRIBUTE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000003:  R_X86_64_64  _JIT_EXECUTOR
// b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// f: 74 2e                         je      0x3f <_JIT_ENTRY+0x3f>
// 11: 48 8b 4e f0                   movq    -0x10(%rsi), %rcx
// 15: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 19: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000001b:  R_X86_64_64  _JIT_OPARG
// 23: 45 0f b7 c0                   movzwl  %r8w, %r8d
// 27: 41 83 f8 03                   cmpl    $0x3, %r8d
// 2b: 7f 3b                         jg      0x68 <_JIT_ENTRY+0x68>
// 2d: 41 83 f8 01                   cmpl    $0x1, %r8d
// 31: 74 47                         je      0x7a <_JIT_ENTRY+0x7a>
// 33: 41 83 f8 02                   cmpl    $0x2, %r8d
// 37: 75 63                         jne     0x9c <_JIT_ENTRY+0x9c>
// 39: 4c 8d 40 40                   leaq    0x40(%rax), %r8
// 3d: eb 45                         jmp     0x84 <_JIT_ENTRY+0x84>
// 3f: 48 29 fe                      subq    %rdi, %rsi
// 42: 48 83 c6 b8                   addq    $-0x48, %rsi
// 46: 48 c1 ee 03                   shrq    $0x3, %rsi
// 4a: 89 77 40                      movl    %esi, 0x40(%rdi)
// 4d: 48 8b 07                      movq    (%rdi), %rax
// 50: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000052:  R_X86_64_64  _JIT_TARGET
// 5a: 89 c9                         movl    %ecx, %ecx
// 5c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 60: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 66: 59                            popq    %rcx
// 67: c3                            retq
// 68: 41 83 f8 04                   cmpl    $0x4, %r8d
// 6c: 74 12                         je      0x80 <_JIT_ENTRY+0x80>
// 6e: 41 83 f8 08                   cmpl    $0x8, %r8d
// 72: 75 28                         jne     0x9c <_JIT_ENTRY+0x9c>
// 74: 4c 8d 40 48                   leaq    0x48(%rax), %r8
// 78: eb 0a                         jmp     0x84 <_JIT_ENTRY+0x84>
// 7a: 4c 8d 40 38                   leaq    0x38(%rax), %r8
// 7e: eb 04                         jmp     0x84 <_JIT_ENTRY+0x84>
// 80: 4c 8d 40 70                   leaq    0x70(%rax), %r8
// 84: 49 89 08                      movq    %rcx, (%r8)
// 87: 48 89 46 f0                   movq    %rax, -0x10(%rsi)
// 8b: 48 83 c6 f8                   addq    $-0x8, %rsi
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _JIT_CONTINUE
// 99: 59                            popq    %rcx
// 9a: ff e0                         jmpq    *%rax
// 9c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009e:  R_X86_64_64  .rodata.str1.1
// a6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000a8:  R_X86_64_64  .rodata.str1.1+0xb
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_FatalErrorFunc
// ba: ff d0                         callq   *%rax
// bc: 
static const unsigned char _CHECK_VALIDITYplus_SET_FUNCTION_ATTRIBUTE_code_body[189] = {0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x2e, 0x48, 0x8b, 0x4e, 0xf0, 0x48, 0x8b, 0x46, 0xf8, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc0, 0x41, 0x83, 0xf8, 0x03, 0x7f, 0x3b, 0x41, 0x83, 0xf8, 0x01, 0x74, 0x47, 0x41, 0x83, 0xf8, 0x02, 0x75, 0x63, 0x4c, 0x8d, 0x40, 0x40, 0xeb, 0x45, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x41, 0x83, 0xf8, 0x04, 0x74, 0x12, 0x41, 0x83, 0xf8, 0x08, 0x75, 0x28, 0x4c, 0x8d, 0x40, 0x48, 0xeb, 0x0a, 0x4c, 0x8d, 0x40, 0x38, 0xeb, 0x04, 0x4c, 0x8d, 0x40, 0x70, 0x49, 0x89, 0x08, 0x48, 0x89, 0x46, 0xf0, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_VALIDITYplus_SET_FUNCTION_ATTRIBUTE_code_holes[8] = {
    {0x3, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x1b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// 97: 00
static const unsigned char _CHECK_VALIDITYplus_SET_FUNCTION_ATTRIBUTE_data_body[153] = {0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _CHECK_VALIDITYplus_SET_IP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_SET_IP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 2a                         je      0x3a <_JIT_ENTRY+0x3a>
// 10: 48 8b 07                      movq    (%rdi), %rax
// 13: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000015:  R_X86_64_64  _JIT_OPARG
// 1d: 0f b7 c9                      movzwl  %cx, %ecx
// 20: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 24: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2a: 48 89 47 38                   movq    %rax, 0x38(%rdi)
// 2e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000030:  R_X86_64_64  _JIT_CONTINUE
// 38: ff e0                         jmpq    *%rax
// 3a: 48 29 fe                      subq    %rdi, %rsi
// 3d: 48 83 c6 b8                   addq    $-0x48, %rsi
// 41: 48 c1 ee 03                   shrq    $0x3, %rsi
// 45: 89 77 40                      movl    %esi, 0x40(%rdi)
// 48: 48 8b 07                      movq    (%rdi), %rax
// 4b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004d:  R_X86_64_64  _JIT_TARGET
// 55: 89 c9                         movl    %ecx, %ecx
// 57: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 5b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 61: c3                            retq
// 62: 
static const unsigned char _CHECK_VALIDITYplus_SET_IP_code_body[99] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x2a, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x47, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_SET_IP_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x30, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_SET_IP_data_body[1];
static const Hole _CHECK_VALIDITYplus_SET_IP_data_holes[1];

// _CHECK_VALIDITYplus_SET_UPDATE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_SET_UPDATE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 42                         je      0x63 <_JIT_ENTRY+0x63>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 28: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002a:  R_X86_64_64  _JIT_OPARG
// 32: f7 d0                         notl    %eax
// 34: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 39: 48 98                         cltq
// 3b: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 3f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000041:  R_X86_64_64  _PySet_Update
// 49: 4c 89 e6                      movq    %r12, %rsi
// 4c: ff d0                         callq   *%rax
// 4e: 89 c5                         movl    %eax, %ebp
// 50: 49 8b 04 24                   movq    (%r12), %rax
// 54: 48 85 c0                      testq   %rax, %rax
// 57: 7e 37                         jle     0x90 <_JIT_ENTRY+0x90>
// 59: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 5d: 85 c0                         testl   %eax, %eax
// 5f: 79 59                         jns     0xba <_JIT_ENTRY+0xba>
// 61: eb 69                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 63: 49 29 de                      subq    %rbx, %r14
// 66: 49 83 c6 b8                   addq    $-0x48, %r14
// 6a: 49 c1 ee 03                   shrq    $0x3, %r14
// 6e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 72: 48 8b 03                      movq    (%rbx), %rax
// 75: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000077:  R_X86_64_64  _JIT_TARGET
// 7f: 89 c9                         movl    %ecx, %ecx
// 81: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 85: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 8b: e9 8f 00 00 00                jmp     0x11f <_JIT_ENTRY+0x11f>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// a9: 4c 89 e2                      movq    %r12, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 04 24                   movq    (%r12), %rax
// b2: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// b6: 85 c0                         testl   %eax, %eax
// b8: 78 12                         js      0xcc <_JIT_ENTRY+0xcc>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c4: ff d0                         callq   *%rax
// c6: 49 ff 0c 24                   decq    (%r12)
// ca: 74 2b                         je      0xf7 <_JIT_ENTRY+0xf7>
// cc: 85 ed                         testl   %ebp, %ebp
// ce: 4d 0f 48 ee                   cmovsq  %r14, %r13
// d2: 78 3a                         js      0x10e <_JIT_ENTRY+0x10e>
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _JIT_CONTINUE
// de: 48 89 df                      movq    %rbx, %rdi
// e1: 4c 89 ee                      movq    %r13, %rsi
// e4: 4c 89 fa                      movq    %r15, %rdx
// e7: 48 83 c4 08                   addq    $0x8, %rsp
// eb: 5b                            popq    %rbx
// ec: 41 5c                         popq    %r12
// ee: 41 5d                         popq    %r13
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: 5d                            popq    %rbp
// f5: ff e0                         jmpq    *%rax
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_Dealloc
// 101: 4c 89 e7                      movq    %r12, %rdi
// 104: ff d0                         callq   *%rax
// 106: 85 ed                         testl   %ebp, %ebp
// 108: 4d 0f 48 ee                   cmovsq  %r14, %r13
// 10c: 79 c6                         jns     0xd4 <_JIT_ENTRY+0xd4>
// 10e: 49 29 dd                      subq    %rbx, %r13
// 111: 49 83 c5 b0                   addq    $-0x50, %r13
// 115: 49 c1 ed 03                   shrq    $0x3, %r13
// 119: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 11d: 31 c0                         xorl    %eax, %eax
// 11f: 48 83 c4 08                   addq    $0x8, %rsp
// 123: 5b                            popq    %rbx
// 124: 41 5c                         popq    %r12
// 126: 41 5d                         popq    %r13
// 128: 41 5e                         popq    %r14
// 12a: 41 5f                         popq    %r15
// 12c: 5d                            popq    %rbp
// 12d: c3                            retq
// 12e: 
static const unsigned char _CHECK_VALIDITYplus_SET_UPDATE_code_body[303] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x42, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x37, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x79, 0x59, 0xeb, 0x69, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8f, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2b, 0x85, 0xed, 0x4d, 0x0f, 0x48, 0xee, 0x78, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x48, 0xee, 0x79, 0xc6, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb0, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_SET_UPDATE_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_SET_UPDATE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_SET_UPDATE_data_holes[1];

// _CHECK_VALIDITYplus_STORE_ATTR
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_STORE_ATTR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 47                         je      0x68 <_JIT_ENTRY+0x68>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// 28: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 2c: 49 8b 06                      movq    (%r14), %rax
// 2f: 48 8b 40 20                   movq    0x20(%rax), %rax
// 33: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000035:  R_X86_64_64  _JIT_OPARG
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 45: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000047:  R_X86_64_64  PyObject_SetAttr
// 4f: 4c 89 e7                      movq    %r12, %rdi
// 52: 4c 89 ea                      movq    %r13, %rdx
// 55: ff d0                         callq   *%rax
// 57: 89 c5                         movl    %eax, %ebp
// 59: 49 8b 45 00                   movq    (%r13), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7e 33                         jle     0x95 <_JIT_ENTRY+0x95>
// 62: 85 c0                         testl   %eax, %eax
// 64: 79 55                         jns     0xbb <_JIT_ENTRY+0xbb>
// 66: eb 65                         jmp     0xcd <_JIT_ENTRY+0xcd>
// 68: 4c 29 f3                      subq    %r14, %rbx
// 6b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 73: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 77: 49 8b 06                      movq    (%r14), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_TARGET
// 84: 89 c9                         movl    %ecx, %ecx
// 86: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 8a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 90: e9 b8 00 00 00                jmp     0x14d <_JIT_ENTRY+0x14d>
// 95: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000097:  R_X86_64_64  .rodata.str1.1
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_NegativeRefcount
// a9: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// ae: 4c 89 ea                      movq    %r13, %rdx
// b1: ff d0                         callq   *%rax
// b3: 49 8b 45 00                   movq    (%r13), %rax
// b7: 85 c0                         testl   %eax, %eax
// b9: 78 12                         js      0xcd <_JIT_ENTRY+0xcd>
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c5: ff d0                         callq   *%rax
// c7: 49 ff 4d 00                   decq    (%r13)
// cb: 74 13                         je      0xe0 <_JIT_ENTRY+0xe0>
// cd: 49 8b 04 24                   movq    (%r12), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 7e 22                         jle     0xf8 <_JIT_ENTRY+0xf8>
// d6: 4c 8d 6b f0                   leaq    -0x10(%rbx), %r13
// da: 85 c0                         testl   %eax, %eax
// dc: 79 44                         jns     0x122 <_JIT_ENTRY+0x122>
// de: eb 54                         jmp     0x134 <_JIT_ENTRY+0x134>
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: 4c 89 ef                      movq    %r13, %rdi
// ed: ff d0                         callq   *%rax
// ef: 49 8b 04 24                   movq    (%r12), %rax
// f3: 48 85 c0                      testq   %rax, %rax
// f6: 7f de                         jg      0xd6 <_JIT_ENTRY+0xd6>
// f8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fa:  R_X86_64_64  .rodata.str1.1
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 111: 4c 89 e2                      movq    %r12, %rdx
// 114: ff d0                         callq   *%rax
// 116: 49 8b 04 24                   movq    (%r12), %rax
// 11a: 4c 8d 6b f0                   leaq    -0x10(%rbx), %r13
// 11e: 85 c0                         testl   %eax, %eax
// 120: 78 12                         js      0x134 <_JIT_ENTRY+0x134>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 12c: ff d0                         callq   *%rax
// 12e: 49 ff 0c 24                   decq    (%r12)
// 132: 74 28                         je      0x15c <_JIT_ENTRY+0x15c>
// 134: 85 ed                         testl   %ebp, %ebp
// 136: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 13a: 74 37                         je      0x173 <_JIT_ENTRY+0x173>
// 13c: 4c 29 f3                      subq    %r14, %rbx
// 13f: 48 83 c3 a8                   addq    $-0x58, %rbx
// 143: 48 c1 eb 03                   shrq    $0x3, %rbx
// 147: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 14b: 31 c0                         xorl    %eax, %eax
// 14d: 48 83 c4 08                   addq    $0x8, %rsp
// 151: 5b                            popq    %rbx
// 152: 41 5c                         popq    %r12
// 154: 41 5d                         popq    %r13
// 156: 41 5e                         popq    %r14
// 158: 41 5f                         popq    %r15
// 15a: 5d                            popq    %rbp
// 15b: c3                            retq
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _Py_Dealloc
// 166: 4c 89 e7                      movq    %r12, %rdi
// 169: ff d0                         callq   *%rax
// 16b: 85 ed                         testl   %ebp, %ebp
// 16d: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 171: 75 c9                         jne     0x13c <_JIT_ENTRY+0x13c>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _JIT_CONTINUE
// 17d: 4c 89 f7                      movq    %r14, %rdi
// 180: 48 89 de                      movq    %rbx, %rsi
// 183: 4c 89 fa                      movq    %r15, %rdx
// 186: 48 83 c4 08                   addq    $0x8, %rsp
// 18a: 5b                            popq    %rbx
// 18b: 41 5c                         popq    %r12
// 18d: 41 5d                         popq    %r13
// 18f: 41 5e                         popq    %r14
// 191: 41 5f                         popq    %r15
// 193: 5d                            popq    %rbp
// 194: ff e0                         jmpq    *%rax
// 196: 
static const unsigned char _CHECK_VALIDITYplus_STORE_ATTR_code_body[407] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x47, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x6b, 0xf0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_STORE_ATTR_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x35, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_STORE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_STORE_ATTR_data_holes[1];

// _CHECK_VALIDITYplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_STORE_ATTR_INSTANCE_VALUE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 42                         je      0x61 <_JIT_ENTRY+0x61>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// 26: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 2a: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 2f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000031:  R_X86_64_64  _JIT_OPERAND
// 39: 0f b7 d2                      movzwl  %dx, %edx
// 3c: 4c 8b 6c d0 01                movq    0x1(%rax,%rdx,8), %r13
// 41: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 46: 4d 85 ed                      testq   %r13, %r13
// 49: 74 46                         je      0x91 <_JIT_ENTRY+0x91>
// 4b: 49 8b 45 00                   movq    (%r13), %rax
// 4f: 48 85 c0                      testq   %rax, %rax
// 52: 7e 64                         jle     0xb8 <_JIT_ENTRY+0xb8>
// 54: 85 c0                         testl   %eax, %eax
// 56: 0f 89 82 00 00 00             jns     0xde <_JIT_ENTRY+0xde>
// 5c: e9 8f 00 00 00                jmp     0xf0 <_JIT_ENTRY+0xf0>
// 61: 4c 29 f3                      subq    %r14, %rbx
// 64: 48 83 c3 b8                   addq    $-0x48, %rbx
// 68: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 70: 49 8b 06                      movq    (%r14), %rax
// 73: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000075:  R_X86_64_64  _JIT_TARGET
// 7d: 89 c9                         movl    %ecx, %ecx
// 7f: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 87: 5b                            popq    %rbx
// 88: 41 5c                         popq    %r12
// 8a: 41 5d                         popq    %r13
// 8c: 41 5e                         popq    %r14
// 8e: 41 5f                         popq    %r15
// 90: c3                            retq
// 91: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 95: 8d 51 01                      leal    0x1(%rcx), %edx
// 98: 48 f7 d1                      notq    %rcx
// 9b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000009d:  R_X86_64_64  _JIT_OPERAND
// a5: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// aa: 88 50 ff                      movb    %dl, -0x1(%rax)
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 48 85 c0                      testq   %rax, %rax
// b4: 7f 43                         jg      0xf9 <_JIT_ENTRY+0xf9>
// b6: eb 63                         jmp     0x11b <_JIT_ENTRY+0x11b>
// b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ba:  R_X86_64_64  .rodata.str1.1
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  _Py_NegativeRefcount
// cc: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// d1: 4c 89 ea                      movq    %r13, %rdx
// d4: ff d0                         callq   *%rax
// d6: 49 8b 45 00                   movq    (%r13), %rax
// da: 85 c0                         testl   %eax, %eax
// dc: 78 12                         js      0xf0 <_JIT_ENTRY+0xf0>
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e8: ff d0                         callq   *%rax
// ea: 49 ff 4d 00                   decq    (%r13)
// ee: 74 13                         je      0x103 <_JIT_ENTRY+0x103>
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 48 85 c0                      testq   %rax, %rax
// f7: 7e 22                         jle     0x11b <_JIT_ENTRY+0x11b>
// f9: 48 83 c3 f0                   addq    $-0x10, %rbx
// fd: 85 c0                         testl   %eax, %eax
// ff: 79 44                         jns     0x145 <_JIT_ENTRY+0x145>
// 101: eb 63                         jmp     0x166 <_JIT_ENTRY+0x166>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_Dealloc
// 10d: 4c 89 ef                      movq    %r13, %rdi
// 110: ff d0                         callq   *%rax
// 112: 49 8b 04 24                   movq    (%r12), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f de                         jg      0xf9 <_JIT_ENTRY+0xf9>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 134: 4c 89 e2                      movq    %r12, %rdx
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 83 c3 f0                   addq    $-0x10, %rbx
// 141: 85 c0                         testl   %eax, %eax
// 143: 78 21                         js      0x166 <_JIT_ENTRY+0x166>
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: ff d0                         callq   *%rax
// 151: 49 ff 0c 24                   decq    (%r12)
// 155: 75 0f                         jne     0x166 <_JIT_ENTRY+0x166>
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _Py_Dealloc
// 161: 4c 89 e7                      movq    %r12, %rdi
// 164: ff d0                         callq   *%rax
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _JIT_CONTINUE
// 170: 4c 89 f7                      movq    %r14, %rdi
// 173: 48 89 de                      movq    %rbx, %rsi
// 176: 4c 89 fa                      movq    %r15, %rdx
// 179: 5b                            popq    %rbx
// 17a: 41 5c                         popq    %r12
// 17c: 41 5d                         popq    %r13
// 17e: 41 5e                         popq    %r14
// 180: 41 5f                         popq    %r15
// 182: ff e0                         jmpq    *%rax
// 184: 
static const unsigned char _CHECK_VALIDITYplus_STORE_ATTR_INSTANCE_VALUE_code_body[389] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x42, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x4b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x6c, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x46, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x64, 0x85, 0xc0, 0x0f, 0x89, 0x82, 0x00, 0x00, 0x00, 0xe9, 0x8f, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x43, 0xeb, 0x63, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_STORE_ATTR_INSTANCE_VALUE_code_holes[14] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_STORE_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _CHECK_VALIDITYplus_STORE_ATTR_SLOT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_STORE_ATTR_SLOT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 34                         je      0x53 <_JIT_ENTRY+0x53>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 48 8b 43 f0                   movq    -0x10(%rbx), %rax
// 26: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 2a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002c:  R_X86_64_64  _JIT_OPERAND
// 34: 0f b7 c9                      movzwl  %cx, %ecx
// 37: 4d 8b 2c 0c                   movq    (%r12,%rcx), %r13
// 3b: 49 89 04 0c                   movq    %rax, (%r12,%rcx)
// 3f: 4d 85 ed                      testq   %r13, %r13
// 42: 74 77                         je      0xbb <_JIT_ENTRY+0xbb>
// 44: 49 8b 45 00                   movq    (%r13), %rax
// 48: 48 85 c0                      testq   %rax, %rax
// 4b: 7e 36                         jle     0x83 <_JIT_ENTRY+0x83>
// 4d: 85 c0                         testl   %eax, %eax
// 4f: 79 58                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 51: eb 68                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 53: 4c 29 f3                      subq    %r14, %rbx
// 56: 48 83 c3 b8                   addq    $-0x48, %rbx
// 5a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 5e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 62: 49 8b 06                      movq    (%r14), %rax
// 65: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000067:  R_X86_64_64  _JIT_TARGET
// 6f: 89 c9                         movl    %ecx, %ecx
// 71: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 79: 5b                            popq    %rbx
// 7a: 41 5c                         popq    %r12
// 7c: 41 5d                         popq    %r13
// 7e: 41 5e                         popq    %r14
// 80: 41 5f                         popq    %r15
// 82: c3                            retq
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1+0x39
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 13                         je      0xce <_JIT_ENTRY+0xce>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 22                         jle     0xe6 <_JIT_ENTRY+0xe6>
// c4: 48 83 c3 f0                   addq    $-0x10, %rbx
// c8: 85 c0                         testl   %eax, %eax
// ca: 79 44                         jns     0x110 <_JIT_ENTRY+0x110>
// cc: eb 63                         jmp     0x131 <_JIT_ENTRY+0x131>
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_Dealloc
// d8: 4c 89 ef                      movq    %r13, %rdi
// db: ff d0                         callq   *%rax
// dd: 49 8b 04 24                   movq    (%r12), %rax
// e1: 48 85 c0                      testq   %rax, %rax
// e4: 7f de                         jg      0xc4 <_JIT_ENTRY+0xc4>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// ff: 4c 89 e2                      movq    %r12, %rdx
// 102: ff d0                         callq   *%rax
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 83 c3 f0                   addq    $-0x10, %rbx
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 78 21                         js      0x131 <_JIT_ENTRY+0x131>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11a: ff d0                         callq   *%rax
// 11c: 49 ff 0c 24                   decq    (%r12)
// 120: 75 0f                         jne     0x131 <_JIT_ENTRY+0x131>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 4c 89 e7                      movq    %r12, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _JIT_CONTINUE
// 13b: 4c 89 f7                      movq    %r14, %rdi
// 13e: 48 89 de                      movq    %rbx, %rsi
// 141: 4c 89 fa                      movq    %r15, %rdx
// 144: 5b                            popq    %rbx
// 145: 41 5c                         popq    %r12
// 147: 41 5d                         popq    %r13
// 149: 41 5e                         popq    %r14
// 14b: 41 5f                         popq    %r15
// 14d: ff e0                         jmpq    *%rax
// 14f: 
static const unsigned char _CHECK_VALIDITYplus_STORE_ATTR_SLOT_code_body[336] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x34, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x43, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x2c, 0x0c, 0x49, 0x89, 0x04, 0x0c, 0x4d, 0x85, 0xed, 0x74, 0x77, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x36, 0x85, 0xc0, 0x79, 0x58, 0xeb, 0x68, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_STORE_ATTR_SLOT_code_holes[13] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_STORE_ATTR_SLOT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_STORE_ATTR_SLOT_data_holes[1];

// _CHECK_VALIDITYplus_STORE_DEREF
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_STORE_DEREF.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 3d                         je      0x5b <_JIT_ENTRY+0x5b>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 25: 48 83 c3 f8                   addq    $-0x8, %rbx
// 29: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002b:  R_X86_64_64  _JIT_OPARG
// 33: 0f b7 c9                      movzwl  %cx, %ecx
// 36: 49 8b 4c ce 48                movq    0x48(%r14,%rcx,8), %rcx
// 3b: 4c 8b 61 10                   movq    0x10(%rcx), %r12
// 3f: 48 89 41 10                   movq    %rax, 0x10(%rcx)
// 43: 4d 85 e4                      testq   %r12, %r12
// 46: 0f 84 8a 00 00 00             je      0xd6 <_JIT_ENTRY+0xd6>
// 4c: 49 8b 04 24                   movq    (%r12), %rax
// 50: 48 85 c0                      testq   %rax, %rax
// 53: 7e 3a                         jle     0x8f <_JIT_ENTRY+0x8f>
// 55: 85 c0                         testl   %eax, %eax
// 57: 79 5c                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 59: eb 7b                         jmp     0xd6 <_JIT_ENTRY+0xd6>
// 5b: 4c 29 f3                      subq    %r14, %rbx
// 5e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 62: 48 c1 eb 03                   shrq    $0x3, %rbx
// 66: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 6a: 49 8b 06                      movq    (%r14), %rax
// 6d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006f:  R_X86_64_64  _JIT_TARGET
// 77: 89 c9                         movl    %ecx, %ecx
// 79: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 7d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 83: 48 83 c4 08                   addq    $0x8, %rsp
// 87: 5b                            popq    %rbx
// 88: 41 5c                         popq    %r12
// 8a: 41 5e                         popq    %r14
// 8c: 41 5f                         popq    %r15
// 8e: c3                            retq
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 21                         js      0xd6 <_JIT_ENTRY+0xd6>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 75 0f                         jne     0xd6 <_JIT_ENTRY+0xd6>
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _Py_Dealloc
// d1: 4c 89 e7                      movq    %r12, %rdi
// d4: ff d0                         callq   *%rax
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _JIT_CONTINUE
// e0: 4c 89 f7                      movq    %r14, %rdi
// e3: 48 89 de                      movq    %rbx, %rsi
// e6: 4c 89 fa                      movq    %r15, %rdx
// e9: 48 83 c4 08                   addq    $0x8, %rsp
// ed: 5b                            popq    %rbx
// ee: 41 5c                         popq    %r12
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: ff e0                         jmpq    *%rax
// f6: 
static const unsigned char _CHECK_VALIDITYplus_STORE_DEREF_code_body[247] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3d, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0x48, 0x4c, 0x8b, 0x61, 0x10, 0x48, 0x89, 0x41, 0x10, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3a, 0x85, 0xc0, 0x79, 0x5c, 0xeb, 0x7b, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_STORE_DEREF_code_holes[9] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Include/object.h\x00'
// 30: 
static const unsigned char _CHECK_VALIDITYplus_STORE_DEREF_data_body[49] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00};
static const Hole _CHECK_VALIDITYplus_STORE_DEREF_data_holes[1];

// _CHECK_VALIDITYplus_STORE_FAST
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_STORE_FAST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 3a                         je      0x58 <_JIT_ENTRY+0x58>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 25: 48 83 c3 f8                   addq    $-0x8, %rbx
// 29: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002b:  R_X86_64_64  _JIT_OPARG
// 33: 0f b7 c9                      movzwl  %cx, %ecx
// 36: 4d 8b 64 ce 48                movq    0x48(%r14,%rcx,8), %r12
// 3b: 49 89 44 ce 48                movq    %rax, 0x48(%r14,%rcx,8)
// 40: 4d 85 e4                      testq   %r12, %r12
// 43: 0f 84 8a 00 00 00             je      0xd3 <_JIT_ENTRY+0xd3>
// 49: 49 8b 04 24                   movq    (%r12), %rax
// 4d: 48 85 c0                      testq   %rax, %rax
// 50: 7e 3a                         jle     0x8c <_JIT_ENTRY+0x8c>
// 52: 85 c0                         testl   %eax, %eax
// 54: 79 5c                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 56: eb 7b                         jmp     0xd3 <_JIT_ENTRY+0xd3>
// 58: 4c 29 f3                      subq    %r14, %rbx
// 5b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 5f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 63: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 67: 49 8b 06                      movq    (%r14), %rax
// 6a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006c:  R_X86_64_64  _JIT_TARGET
// 74: 89 c9                         movl    %ecx, %ecx
// 76: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 7a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 80: 48 83 c4 08                   addq    $0x8, %rsp
// 84: 5b                            popq    %rbx
// 85: 41 5c                         popq    %r12
// 87: 41 5e                         popq    %r14
// 89: 41 5f                         popq    %r15
// 8b: c3                            retq
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 21                         js      0xd3 <_JIT_ENTRY+0xd3>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 75 0f                         jne     0xd3 <_JIT_ENTRY+0xd3>
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _Py_Dealloc
// ce: 4c 89 e7                      movq    %r12, %rdi
// d1: ff d0                         callq   *%rax
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _JIT_CONTINUE
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 89 de                      movq    %rbx, %rsi
// e3: 4c 89 fa                      movq    %r15, %rdx
// e6: 48 83 c4 08                   addq    $0x8, %rsp
// ea: 5b                            popq    %rbx
// eb: 41 5c                         popq    %r12
// ed: 41 5e                         popq    %r14
// ef: 41 5f                         popq    %r15
// f1: ff e0                         jmpq    *%rax
// f3: 
static const unsigned char _CHECK_VALIDITYplus_STORE_FAST_code_body[244] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3a, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x64, 0xce, 0x48, 0x49, 0x89, 0x44, 0xce, 0x48, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3a, 0x85, 0xc0, 0x79, 0x5c, 0xeb, 0x7b, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_STORE_FAST_code_holes[9] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Include/object.h\x00'
// 30: 
static const unsigned char _CHECK_VALIDITYplus_STORE_FAST_data_body[49] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00};
static const Hole _CHECK_VALIDITYplus_STORE_FAST_data_holes[1];

// _CHECK_VALIDITYplus_STORE_GLOBAL
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_STORE_GLOBAL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 48                         je      0x69 <_JIT_ENTRY+0x69>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 28: 49 8b 06                      movq    (%r14), %rax
// 2b: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 2f: 48 8b 40 20                   movq    0x20(%rax), %rax
// 33: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000035:  R_X86_64_64  _JIT_OPARG
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 45: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000047:  R_X86_64_64  PyDict_SetItem
// 4f: 4c 89 e2                      movq    %r12, %rdx
// 52: ff d0                         callq   *%rax
// 54: 89 c5                         movl    %eax, %ebp
// 56: 49 8b 04 24                   movq    (%r12), %rax
// 5a: 48 85 c0                      testq   %rax, %rax
// 5d: 7e 34                         jle     0x93 <_JIT_ENTRY+0x93>
// 5f: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// 63: 85 c0                         testl   %eax, %eax
// 65: 79 56                         jns     0xbd <_JIT_ENTRY+0xbd>
// 67: eb 66                         jmp     0xcf <_JIT_ENTRY+0xcf>
// 69: 4c 29 f3                      subq    %r14, %rbx
// 6c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 70: 48 c1 eb 03                   shrq    $0x3, %rbx
// 74: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 78: 49 8b 06                      movq    (%r14), %rax
// 7b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007d:  R_X86_64_64  _JIT_TARGET
// 85: 89 c9                         movl    %ecx, %ecx
// 87: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 8b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 91: eb 55                         jmp     0xe8 <_JIT_ENTRY+0xe8>
// 93: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000095:  R_X86_64_64  .rodata.str1.1
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  _Py_NegativeRefcount
// a7: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// ac: 4c 89 e2                      movq    %r12, %rdx
// af: ff d0                         callq   *%rax
// b1: 49 8b 04 24                   movq    (%r12), %rax
// b5: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 12                         js      0xcf <_JIT_ENTRY+0xcf>
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c7: ff d0                         callq   *%rax
// c9: 49 ff 0c 24                   decq    (%r12)
// cd: 74 28                         je      0xf7 <_JIT_ENTRY+0xf7>
// cf: 85 ed                         testl   %ebp, %ebp
// d1: 49 0f 44 dd                   cmoveq  %r13, %rbx
// d5: 74 37                         je      0x10e <_JIT_ENTRY+0x10e>
// d7: 4c 29 f3                      subq    %r14, %rbx
// da: 48 83 c3 b0                   addq    $-0x50, %rbx
// de: 48 c1 eb 03                   shrq    $0x3, %rbx
// e2: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// e6: 31 c0                         xorl    %eax, %eax
// e8: 48 83 c4 08                   addq    $0x8, %rsp
// ec: 5b                            popq    %rbx
// ed: 41 5c                         popq    %r12
// ef: 41 5d                         popq    %r13
// f1: 41 5e                         popq    %r14
// f3: 41 5f                         popq    %r15
// f5: 5d                            popq    %rbp
// f6: c3                            retq
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_Dealloc
// 101: 4c 89 e7                      movq    %r12, %rdi
// 104: ff d0                         callq   *%rax
// 106: 85 ed                         testl   %ebp, %ebp
// 108: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 10c: 75 c9                         jne     0xd7 <_JIT_ENTRY+0xd7>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _JIT_CONTINUE
// 118: 4c 89 f7                      movq    %r14, %rdi
// 11b: 48 89 de                      movq    %rbx, %rsi
// 11e: 4c 89 fa                      movq    %r15, %rdx
// 121: 48 83 c4 08                   addq    $0x8, %rsp
// 125: 5b                            popq    %rbx
// 126: 41 5c                         popq    %r12
// 128: 41 5d                         popq    %r13
// 12a: 41 5e                         popq    %r14
// 12c: 41 5f                         popq    %r15
// 12e: 5d                            popq    %rbp
// 12f: ff e0                         jmpq    *%rax
// 131: 
static const unsigned char _CHECK_VALIDITYplus_STORE_GLOBAL_code_body[306] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x48, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x66, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x55, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_STORE_GLOBAL_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x35, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_STORE_GLOBAL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_STORE_GLOBAL_data_holes[1];

// _CHECK_VALIDITYplus_STORE_NAME
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_STORE_NAME.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 54                         pushq   %r12
// 7: 53                            pushq   %rbx
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 49                         je      0x67 <_JIT_ENTRY+0x67>
// 1e: 49 89 d4                      movq    %rdx, %r12
// 21: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 25: 48 83 c3 f8                   addq    $-0x8, %rbx
// 29: 49 8b 06                      movq    (%r14), %rax
// 2c: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 30: 48 8b 40 20                   movq    0x20(%rax), %rax
// 34: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000036:  R_X86_64_64  _JIT_OPARG
// 3e: 0f b7 c9                      movzwl  %cx, %ecx
// 41: 48 8b 4c c8 18                movq    0x18(%rax,%rcx,8), %rcx
// 46: 48 85 ff                      testq   %rdi, %rdi
// 49: 74 49                         je      0x94 <_JIT_ENTRY+0x94>
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  PyDict_Type
// 55: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 59: 74 7b                         je      0xd6 <_JIT_ENTRY+0xd6>
// 5b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005d:  R_X86_64_64  PyObject_SetItem
// 65: eb 79                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 67: 4c 29 f3                      subq    %r14, %rbx
// 6a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 72: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 76: 49 8b 06                      movq    (%r14), %rax
// 79: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007b:  R_X86_64_64  _JIT_TARGET
// 83: 89 c9                         movl    %ecx, %ecx
// 85: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 89: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 8f: e9 26 01 00 00                jmp     0x1ba <_JIT_ENTRY+0x1ba>
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  PyExc_SystemError
// 9e: 48 8b 30                      movq    (%rax), %rsi
// a1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000a3:  R_X86_64_64  .rodata.str1.1+0x39
// ab: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000ad:  R_X86_64_64  _PyErr_Format
// b5: 4c 89 e7                      movq    %r12, %rdi
// b8: 31 c0                         xorl    %eax, %eax
// ba: 41 ff d0                      callq   *%r8
// bd: 49 8b 07                      movq    (%r15), %rax
// c0: 48 85 c0                      testq   %rax, %rax
// c3: 0f 8e 86 00 00 00             jle     0x14f <_JIT_ENTRY+0x14f>
// c9: 85 c0                         testl   %eax, %eax
// cb: 0f 89 a3 00 00 00             jns     0x174 <_JIT_ENTRY+0x174>
// d1: e9 d3 00 00 00                jmp     0x1a9 <_JIT_ENTRY+0x1a9>
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  PyDict_SetItem
// e0: 48 89 ce                      movq    %rcx, %rsi
// e3: 4c 89 fa                      movq    %r15, %rdx
// e6: ff d0                         callq   *%rax
// e8: 89 c5                         movl    %eax, %ebp
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 48 85 c0                      testq   %rax, %rax
// f0: 7e 06                         jle     0xf8 <_JIT_ENTRY+0xf8>
// f2: 85 c0                         testl   %eax, %eax
// f4: 79 27                         jns     0x11d <_JIT_ENTRY+0x11d>
// f6: eb 36                         jmp     0x12e <_JIT_ENTRY+0x12e>
// f8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fa:  R_X86_64_64  .rodata.str1.1
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 111: 4c 89 fa                      movq    %r15, %rdx
// 114: ff d0                         callq   *%rax
// 116: 49 8b 07                      movq    (%r15), %rax
// 119: 85 c0                         testl   %eax, %eax
// 11b: 78 11                         js      0x12e <_JIT_ENTRY+0x12e>
// 11d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 127: ff d0                         callq   *%rax
// 129: 49 ff 0f                      decq    (%r15)
// 12c: 74 68                         je      0x196 <_JIT_ENTRY+0x196>
// 12e: 85 ed                         testl   %ebp, %ebp
// 130: 75 77                         jne     0x1a9 <_JIT_ENTRY+0x1a9>
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _JIT_CONTINUE
// 13c: 4c 89 f7                      movq    %r14, %rdi
// 13f: 48 89 de                      movq    %rbx, %rsi
// 142: 4c 89 e2                      movq    %r12, %rdx
// 145: 5b                            popq    %rbx
// 146: 41 5c                         popq    %r12
// 148: 41 5e                         popq    %r14
// 14a: 41 5f                         popq    %r15
// 14c: 5d                            popq    %rbp
// 14d: ff e0                         jmpq    *%rax
// 14f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000151:  R_X86_64_64  .rodata.str1.1
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_NegativeRefcount
// 163: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 168: 4c 89 fa                      movq    %r15, %rdx
// 16b: ff d0                         callq   *%rax
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 35                         js      0x1a9 <_JIT_ENTRY+0x1a9>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 49 ff 0f                      decq    (%r15)
// 183: 75 24                         jne     0x1a9 <_JIT_ENTRY+0x1a9>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_Dealloc
// 18f: 4c 89 ff                      movq    %r15, %rdi
// 192: ff d0                         callq   *%rax
// 194: eb 13                         jmp     0x1a9 <_JIT_ENTRY+0x1a9>
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _Py_Dealloc
// 1a0: 4c 89 ff                      movq    %r15, %rdi
// 1a3: ff d0                         callq   *%rax
// 1a5: 85 ed                         testl   %ebp, %ebp
// 1a7: 74 89                         je      0x132 <_JIT_ENTRY+0x132>
// 1a9: 4c 29 f3                      subq    %r14, %rbx
// 1ac: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b0: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b4: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1b8: 31 c0                         xorl    %eax, %eax
// 1ba: 5b                            popq    %rbx
// 1bb: 41 5c                         popq    %r12
// 1bd: 41 5e                         popq    %r14
// 1bf: 41 5f                         popq    %r15
// 1c1: 5d                            popq    %rbp
// 1c2: c3                            retq
// 1c3: 
static const unsigned char _CHECK_VALIDITYplus_STORE_NAME_code_body[452] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x49, 0x49, 0x89, 0xd4, 0x4c, 0x8b, 0x7b, 0xf8, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x4c, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x49, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x74, 0x7b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x79, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x26, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x86, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xa3, 0x00, 0x00, 0x00, 0xe9, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x68, 0x85, 0xed, 0x75, 0x77, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x89, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_STORE_NAME_code_holes[19] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x36, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_STORE_NAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_STORE_NAME_data_holes[1];

// _CHECK_VALIDITYplus_STORE_SLICE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_STORE_SLICE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 52                         je      0x73 <_JIT_ENTRY+0x73>
// 21: 48 89 14 24                   movq    %rdx, (%rsp)
// 25: 48 8b 73 f8                   movq    -0x8(%rbx), %rsi
// 29: 48 8b 7b f0                   movq    -0x10(%rbx), %rdi
// 2d: 4c 8b 6b e0                   movq    -0x20(%rbx), %r13
// 31: 4c 8b 63 e8                   movq    -0x18(%rbx), %r12
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 3f: ff d0                         callq   *%rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 74 5a                         je      0xa0 <_JIT_ENTRY+0xa0>
// 46: 48 89 c5                      movq    %rax, %rbp
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  PyObject_SetItem
// 53: 4c 89 e7                      movq    %r12, %rdi
// 56: 48 89 ee                      movq    %rbp, %rsi
// 59: 4c 89 ea                      movq    %r13, %rdx
// 5c: ff d0                         callq   *%rax
// 5e: 41 89 c7                      movl    %eax, %r15d
// 61: 48 8b 45 00                   movq    (%rbp), %rax
// 65: 48 85 c0                      testq   %rax, %rax
// 68: 7e 43                         jle     0xad <_JIT_ENTRY+0xad>
// 6a: 85 c0                         testl   %eax, %eax
// 6c: 79 65                         jns     0xd3 <_JIT_ENTRY+0xd3>
// 6e: e9 81 00 00 00                jmp     0xf4 <_JIT_ENTRY+0xf4>
// 73: 4c 29 f3                      subq    %r14, %rbx
// 76: 48 83 c3 b8                   addq    $-0x48, %rbx
// 7a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 7e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 82: 49 8b 06                      movq    (%r14), %rax
// 85: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000087:  R_X86_64_64  _JIT_TARGET
// 8f: 89 c9                         movl    %ecx, %ecx
// 91: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 95: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9b: e9 59 01 00 00                jmp     0x1f9 <_JIT_ENTRY+0x1f9>
// a0: 31 ed                         xorl    %ebp, %ebp
// a2: 49 8b 45 00                   movq    (%r13), %rax
// a6: 48 85 c0                      testq   %rax, %rax
// a9: 7f 7b                         jg      0x126 <_JIT_ENTRY+0x126>
// ab: eb 57                         jmp     0x104 <_JIT_ENTRY+0x104>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// c6: 48 89 ea                      movq    %rbp, %rdx
// c9: ff d0                         callq   *%rax
// cb: 48 8b 45 00                   movq    (%rbp), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 21                         js      0xf4 <_JIT_ENTRY+0xf4>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 48 ff 4d 00                   decq    (%rbp)
// e3: 75 0f                         jne     0xf4 <_JIT_ENTRY+0xf4>
// e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e7:  R_X86_64_64  _Py_Dealloc
// ef: 48 89 ef                      movq    %rbp, %rdi
// f2: ff d0                         callq   *%rax
// f4: 45 85 ff                      testl   %r15d, %r15d
// f7: 40 0f 94 c5                   sete    %bpl
// fb: 49 8b 45 00                   movq    (%r13), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 11d: 4c 89 ea                      movq    %r13, %rdx
// 120: ff d0                         callq   *%rax
// 122: 49 8b 45 00                   movq    (%r13), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 12                         js      0x13c <_JIT_ENTRY+0x13c>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 49 ff 4d 00                   decq    (%r13)
// 13a: 74 13                         je      0x14f <_JIT_ENTRY+0x14f>
// 13c: 49 8b 04 24                   movq    (%r12), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7e 22                         jle     0x167 <_JIT_ENTRY+0x167>
// 145: 4c 8d 7b e0                   leaq    -0x20(%rbx), %r15
// 149: 85 c0                         testl   %eax, %eax
// 14b: 79 44                         jns     0x191 <_JIT_ENTRY+0x191>
// 14d: eb 54                         jmp     0x1a3 <_JIT_ENTRY+0x1a3>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 ef                      movq    %r13, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 04 24                   movq    (%r12), %rax
// 162: 48 85 c0                      testq   %rax, %rax
// 165: 7f de                         jg      0x145 <_JIT_ENTRY+0x145>
// 167: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000169:  R_X86_64_64  .rodata.str1.1
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_NegativeRefcount
// 17b: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 180: 4c 89 e2                      movq    %r12, %rdx
// 183: ff d0                         callq   *%rax
// 185: 49 8b 04 24                   movq    (%r12), %rax
// 189: 4c 8d 7b e0                   leaq    -0x20(%rbx), %r15
// 18d: 85 c0                         testl   %eax, %eax
// 18f: 78 12                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 19b: ff d0                         callq   *%rax
// 19d: 49 ff 0c 24                   decq    (%r12)
// 1a1: 74 2d                         je      0x1d0 <_JIT_ENTRY+0x1d0>
// 1a3: 40 84 ed                      testb   %bpl, %bpl
// 1a6: 49 0f 45 df                   cmovneq %r15, %rbx
// 1aa: 74 3c                         je      0x1e8 <_JIT_ENTRY+0x1e8>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_CONTINUE
// 1b6: 4c 89 f7                      movq    %r14, %rdi
// 1b9: 48 89 de                      movq    %rbx, %rsi
// 1bc: 48 8b 14 24                   movq    (%rsp), %rdx
// 1c0: 48 83 c4 08                   addq    $0x8, %rsp
// 1c4: 5b                            popq    %rbx
// 1c5: 41 5c                         popq    %r12
// 1c7: 41 5d                         popq    %r13
// 1c9: 41 5e                         popq    %r14
// 1cb: 41 5f                         popq    %r15
// 1cd: 5d                            popq    %rbp
// 1ce: ff e0                         jmpq    *%rax
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _Py_Dealloc
// 1da: 4c 89 e7                      movq    %r12, %rdi
// 1dd: ff d0                         callq   *%rax
// 1df: 40 84 ed                      testb   %bpl, %bpl
// 1e2: 49 0f 45 df                   cmovneq %r15, %rbx
// 1e6: 75 c4                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 1e8: 4c 29 f3                      subq    %r14, %rbx
// 1eb: 48 83 c3 98                   addq    $-0x68, %rbx
// 1ef: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1f3: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1f7: 31 c0                         xorl    %eax, %eax
// 1f9: 48 83 c4 08                   addq    $0x8, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: c3                            retq
// 208: 
static const unsigned char _CHECK_VALIDITYplus_STORE_SLICE_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x52, 0x48, 0x89, 0x14, 0x24, 0x48, 0x8b, 0x73, 0xf8, 0x48, 0x8b, 0x7b, 0xf0, 0x4c, 0x8b, 0x6b, 0xe0, 0x4c, 0x8b, 0x63, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x5a, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x43, 0x85, 0xc0, 0x79, 0x65, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x59, 0x01, 0x00, 0x00, 0x31, 0xed, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x7b, 0xeb, 0x57, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xff, 0x40, 0x0f, 0x94, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2d, 0x40, 0x84, 0xed, 0x49, 0x0f, 0x45, 0xdf, 0x74, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x40, 0x84, 0xed, 0x49, 0x0f, 0x45, 0xdf, 0x75, 0xc4, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0x98, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_STORE_SLICE_code_holes[18] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_STORE_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_STORE_SLICE_data_holes[1];

// _CHECK_VALIDITYplus_STORE_SUBSCR
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_STORE_SUBSCR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 35                         je      0x56 <_JIT_ENTRY+0x56>
// 21: 48 89 14 24                   movq    %rdx, (%rsp)
// 25: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 29: 4c 8b 7b e8                   movq    -0x18(%rbx), %r15
// 2d: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  PyObject_SetItem
// 3b: 4c 89 ef                      movq    %r13, %rdi
// 3e: 4c 89 e6                      movq    %r12, %rsi
// 41: 4c 89 fa                      movq    %r15, %rdx
// 44: ff d0                         callq   *%rax
// 46: 89 c5                         movl    %eax, %ebp
// 48: 49 8b 07                      movq    (%r15), %rax
// 4b: 48 85 c0                      testq   %rax, %rax
// 4e: 7e 33                         jle     0x83 <_JIT_ENTRY+0x83>
// 50: 85 c0                         testl   %eax, %eax
// 52: 79 54                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 54: eb 63                         jmp     0xb9 <_JIT_ENTRY+0xb9>
// 56: 4c 29 f3                      subq    %r14, %rbx
// 59: 48 83 c3 b8                   addq    $-0x48, %rbx
// 5d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 61: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 65: 49 8b 06                      movq    (%r14), %rax
// 68: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006a:  R_X86_64_64  _JIT_TARGET
// 72: 89 c9                         movl    %ecx, %ecx
// 74: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 78: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7e: e9 15 01 00 00                jmp     0x198 <_JIT_ENTRY+0x198>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 9c: 4c 89 fa                      movq    %r15, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 07                      movq    (%r15), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 11                         js      0xb9 <_JIT_ENTRY+0xb9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0f                      decq    (%r15)
// b7: 74 0f                         je      0xc8 <_JIT_ENTRY+0xc8>
// b9: 49 8b 45 00                   movq    (%r13), %rax
// bd: 48 85 c0                      testq   %rax, %rax
// c0: 7e 1e                         jle     0xe0 <_JIT_ENTRY+0xe0>
// c2: 85 c0                         testl   %eax, %eax
// c4: 79 40                         jns     0x106 <_JIT_ENTRY+0x106>
// c6: eb 50                         jmp     0x118 <_JIT_ENTRY+0x118>
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  _Py_Dealloc
// d2: 4c 89 ff                      movq    %r15, %rdi
// d5: ff d0                         callq   *%rax
// d7: 49 8b 45 00                   movq    (%r13), %rax
// db: 48 85 c0                      testq   %rax, %rax
// de: 7f e2                         jg      0xc2 <_JIT_ENTRY+0xc2>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 12                         js      0x118 <_JIT_ENTRY+0x118>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 74 13                         je      0x12b <_JIT_ENTRY+0x12b>
// 118: 49 8b 04 24                   movq    (%r12), %rax
// 11c: 48 85 c0                      testq   %rax, %rax
// 11f: 7e 22                         jle     0x143 <_JIT_ENTRY+0x143>
// 121: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 125: 85 c0                         testl   %eax, %eax
// 127: 79 44                         jns     0x16d <_JIT_ENTRY+0x16d>
// 129: eb 54                         jmp     0x17f <_JIT_ENTRY+0x17f>
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: 4c 89 ef                      movq    %r13, %rdi
// 138: ff d0                         callq   *%rax
// 13a: 49 8b 04 24                   movq    (%r12), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7f de                         jg      0x121 <_JIT_ENTRY+0x121>
// 143: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 15c: 4c 89 e2                      movq    %r12, %rdx
// 15f: ff d0                         callq   *%rax
// 161: 49 8b 04 24                   movq    (%r12), %rax
// 165: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 169: 85 c0                         testl   %eax, %eax
// 16b: 78 12                         js      0x17f <_JIT_ENTRY+0x17f>
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 177: ff d0                         callq   *%rax
// 179: 49 ff 0c 24                   decq    (%r12)
// 17d: 74 28                         je      0x1a7 <_JIT_ENTRY+0x1a7>
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 49 0f 44 df                   cmoveq  %r15, %rbx
// 185: 74 37                         je      0x1be <_JIT_ENTRY+0x1be>
// 187: 4c 29 f3                      subq    %r14, %rbx
// 18a: 48 83 c3 a0                   addq    $-0x60, %rbx
// 18e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 192: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 196: 31 c0                         xorl    %eax, %eax
// 198: 48 83 c4 08                   addq    $0x8, %rsp
// 19c: 5b                            popq    %rbx
// 19d: 41 5c                         popq    %r12
// 19f: 41 5d                         popq    %r13
// 1a1: 41 5e                         popq    %r14
// 1a3: 41 5f                         popq    %r15
// 1a5: 5d                            popq    %rbp
// 1a6: c3                            retq
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _Py_Dealloc
// 1b1: 4c 89 e7                      movq    %r12, %rdi
// 1b4: ff d0                         callq   *%rax
// 1b6: 85 ed                         testl   %ebp, %ebp
// 1b8: 49 0f 44 df                   cmoveq  %r15, %rbx
// 1bc: 75 c9                         jne     0x187 <_JIT_ENTRY+0x187>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _JIT_CONTINUE
// 1c8: 4c 89 f7                      movq    %r14, %rdi
// 1cb: 48 89 de                      movq    %rbx, %rsi
// 1ce: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d2: 48 83 c4 08                   addq    $0x8, %rsp
// 1d6: 5b                            popq    %rbx
// 1d7: 41 5c                         popq    %r12
// 1d9: 41 5d                         popq    %r13
// 1db: 41 5e                         popq    %r14
// 1dd: 41 5f                         popq    %r15
// 1df: 5d                            popq    %rbp
// 1e0: ff e0                         jmpq    *%rax
// 1e2: 
static const unsigned char _CHECK_VALIDITYplus_STORE_SUBSCR_code_body[483] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x35, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x8b, 0x63, 0xf8, 0x4c, 0x8b, 0x7b, 0xe8, 0x4c, 0x8b, 0x6b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x54, 0xeb, 0x63, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x15, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_STORE_SUBSCR_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_STORE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_STORE_SUBSCR_data_holes[1];

// _CHECK_VALIDITYplus_STORE_SUBSCR_DICT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_STORE_SUBSCR_DICT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 15                         je      0x36 <_JIT_ENTRY+0x36>
// 21: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyDict_Type
// 2f: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 34: 74 37                         je      0x6d <_JIT_ENTRY+0x6d>
// 36: 4c 29 f3                      subq    %r14, %rbx
// 39: 48 83 c3 b8                   addq    $-0x48, %rbx
// 3d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 41: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 45: 49 8b 06                      movq    (%r14), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_TARGET
// 52: 89 c9                         movl    %ecx, %ecx
// 54: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 58: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5e: 48 83 c4 08                   addq    $0x8, %rsp
// 62: 5b                            popq    %rbx
// 63: 41 5c                         popq    %r12
// 65: 41 5d                         popq    %r13
// 67: 41 5e                         popq    %r14
// 69: 41 5f                         popq    %r15
// 6b: 5d                            popq    %rbp
// 6c: c3                            retq
// 6d: 49 89 d7                      movq    %rdx, %r15
// 70: 48 8b 53 e8                   movq    -0x18(%rbx), %rdx
// 74: 48 8b 73 f8                   movq    -0x8(%rbx), %rsi
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_SetItem_Take2
// 82: 4c 89 e7                      movq    %r12, %rdi
// 85: ff d0                         callq   *%rax
// 87: 89 c5                         movl    %eax, %ebp
// 89: 49 8b 04 24                   movq    (%r12), %rax
// 8d: 48 85 c0                      testq   %rax, %rax
// 90: 7e 0a                         jle     0x9c <_JIT_ENTRY+0x9c>
// 92: 4c 8d 6b e8                   leaq    -0x18(%rbx), %r13
// 96: 85 c0                         testl   %eax, %eax
// 98: 79 2c                         jns     0xc6 <_JIT_ENTRY+0xc6>
// 9a: eb 3c                         jmp     0xd8 <_JIT_ENTRY+0xd8>
// 9c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009e:  R_X86_64_64  .rodata.str1.1
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _Py_NegativeRefcount
// b0: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// b5: 4c 89 e2                      movq    %r12, %rdx
// b8: ff d0                         callq   *%rax
// ba: 49 8b 04 24                   movq    (%r12), %rax
// be: 4c 8d 6b e8                   leaq    -0x18(%rbx), %r13
// c2: 85 c0                         testl   %eax, %eax
// c4: 78 12                         js      0xd8 <_JIT_ENTRY+0xd8>
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d0: ff d0                         callq   *%rax
// d2: 49 ff 0c 24                   decq    (%r12)
// d6: 74 1e                         je      0xf6 <_JIT_ENTRY+0xf6>
// d8: 85 ed                         testl   %ebp, %ebp
// da: 49 0f 44 dd                   cmoveq  %r13, %rbx
// de: 74 2d                         je      0x10d <_JIT_ENTRY+0x10d>
// e0: 4c 29 f3                      subq    %r14, %rbx
// e3: 48 83 c3 a0                   addq    $-0x60, %rbx
// e7: 48 c1 eb 03                   shrq    $0x3, %rbx
// eb: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// ef: 31 c0                         xorl    %eax, %eax
// f1: e9 68 ff ff ff                jmp     0x5e <_JIT_ENTRY+0x5e>
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  _Py_Dealloc
// 100: 4c 89 e7                      movq    %r12, %rdi
// 103: ff d0                         callq   *%rax
// 105: 85 ed                         testl   %ebp, %ebp
// 107: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 10b: 75 d3                         jne     0xe0 <_JIT_ENTRY+0xe0>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _JIT_CONTINUE
// 117: 4c 89 f7                      movq    %r14, %rdi
// 11a: 48 89 de                      movq    %rbx, %rsi
// 11d: 4c 89 fa                      movq    %r15, %rdx
// 120: 48 83 c4 08                   addq    $0x8, %rsp
// 124: 5b                            popq    %rbx
// 125: 41 5c                         popq    %r12
// 127: 41 5d                         popq    %r13
// 129: 41 5e                         popq    %r14
// 12b: 41 5f                         popq    %r15
// 12d: 5d                            popq    %rbp
// 12e: ff e0                         jmpq    *%rax
// 130: 
static const unsigned char _CHECK_VALIDITYplus_STORE_SUBSCR_DICT_code_body[305] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x15, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x53, 0xe8, 0x48, 0x8b, 0x73, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4c, 0x8d, 0x6b, 0xe8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x2d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x68, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_STORE_SUBSCR_DICT_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_STORE_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_STORE_SUBSCR_DICT_data_holes[1];

// _CHECK_VALIDITYplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_STORE_SUBSCR_LIST_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 0f 84 55 01 00 00             je      0x17a <_JIT_ENTRY+0x17a>
// 25: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 29: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002b:  R_X86_64_64  PyLong_Type
// 33: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 37: 0f 85 3d 01 00 00             jne     0x17a <_JIT_ENTRY+0x17a>
// 3d: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 41: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000043:  R_X86_64_64  PyList_Type
// 4b: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 50: 0f 85 24 01 00 00             jne     0x17a <_JIT_ENTRY+0x17a>
// 56: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 5b: 0f 87 19 01 00 00             ja      0x17a <_JIT_ENTRY+0x17a>
// 61: 41 8b 45 18                   movl    0x18(%r13), %eax
// 65: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 6a: 0f 8e 0a 01 00 00             jle     0x17a <_JIT_ENTRY+0x17a>
// 70: 49 89 d7                      movq    %rdx, %r15
// 73: 48 8b 4b e8                   movq    -0x18(%rbx), %rcx
// 77: 49 8b 54 24 18                movq    0x18(%r12), %rdx
// 7c: 48 8b 2c c2                   movq    (%rdx,%rax,8), %rbp
// 80: 48 89 0c c2                   movq    %rcx, (%rdx,%rax,8)
// 84: 48 8b 45 00                   movq    (%rbp), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f 22                         jg      0xaf <_JIT_ENTRY+0xaf>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// a6: 48 89 ea                      movq    %rbp, %rdx
// a9: ff d0                         callq   *%rax
// ab: 48 8b 45 00                   movq    (%rbp), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 21                         js      0xd4 <_JIT_ENTRY+0xd4>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 48 ff 4d 00                   decq    (%rbp)
// c3: 75 0f                         jne     0xd4 <_JIT_ENTRY+0xd4>
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_Dealloc
// cf: 48 89 ef                      movq    %rbp, %rdi
// d2: ff d0                         callq   *%rax
// d4: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// d9: 75 28                         jne     0x103 <_JIT_ENTRY+0x103>
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  PyInterpreterState_Get
// e5: ff d0                         callq   *%rax
// e7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// ee: 49 ff 4d 00                   decq    (%r13)
// f2: 75 0f                         jne     0x103 <_JIT_ENTRY+0x103>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  PyObject_Free
// fe: 4c 89 ef                      movq    %r13, %rdi
// 101: ff d0                         callq   *%rax
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 83 c3 e8                   addq    $-0x18, %rbx
// 132: 85 c0                         testl   %eax, %eax
// 134: 78 21                         js      0x157 <_JIT_ENTRY+0x157>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 49 ff 0c 24                   decq    (%r12)
// 146: 75 0f                         jne     0x157 <_JIT_ENTRY+0x157>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_Dealloc
// 152: 4c 89 e7                      movq    %r12, %rdi
// 155: ff d0                         callq   *%rax
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _JIT_CONTINUE
// 161: 4c 89 f7                      movq    %r14, %rdi
// 164: 48 89 de                      movq    %rbx, %rsi
// 167: 4c 89 fa                      movq    %r15, %rdx
// 16a: 48 83 c4 08                   addq    $0x8, %rsp
// 16e: 5b                            popq    %rbx
// 16f: 41 5c                         popq    %r12
// 171: 41 5d                         popq    %r13
// 173: 41 5e                         popq    %r14
// 175: 41 5f                         popq    %r15
// 177: 5d                            popq    %rbp
// 178: ff e0                         jmpq    *%rax
// 17a: 4c 29 f3                      subq    %r14, %rbx
// 17d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 181: 48 c1 eb 03                   shrq    $0x3, %rbx
// 185: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 189: 49 8b 06                      movq    (%r14), %rax
// 18c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018e:  R_X86_64_64  _JIT_TARGET
// 196: 89 c9                         movl    %ecx, %ecx
// 198: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 19c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a2: 48 83 c4 08                   addq    $0x8, %rsp
// 1a6: 5b                            popq    %rbx
// 1a7: 41 5c                         popq    %r12
// 1a9: 41 5d                         popq    %r13
// 1ab: 41 5e                         popq    %r14
// 1ad: 41 5f                         popq    %r15
// 1af: 5d                            popq    %rbp
// 1b0: c3                            retq
// 1b1: 
static const unsigned char _CHECK_VALIDITYplus_STORE_SUBSCR_LIST_INT_code_body[434] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x55, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x3d, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x24, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x19, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x0a, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x4b, 0xe8, 0x49, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xc2, 0x48, 0x89, 0x0c, 0xc2, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_STORE_SUBSCR_LIST_INT_code_holes[16] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_STORE_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _CHECK_VALIDITYplus_SWAP
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_SWAP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 35                         je      0x45 <_JIT_ENTRY+0x45>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c9                      movzwl  %cx, %ecx
// 21: 48 c1 e1 03                   shlq    $0x3, %rcx
// 25: 49 89 f0                      movq    %rsi, %r8
// 28: 49 29 c8                      subq    %rcx, %r8
// 2b: 48 f7 d9                      negq    %rcx
// 2e: 4d 8b 00                      movq    (%r8), %r8
// 31: 48 89 04 0e                   movq    %rax, (%rsi,%rcx)
// 35: 4c 89 46 f8                   movq    %r8, -0x8(%rsi)
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _JIT_CONTINUE
// 43: ff e0                         jmpq    *%rax
// 45: 48 29 fe                      subq    %rdi, %rsi
// 48: 48 83 c6 b8                   addq    $-0x48, %rsi
// 4c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 50: 89 77 40                      movl    %esi, 0x40(%rdi)
// 53: 48 8b 07                      movq    (%rdi), %rax
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  _JIT_TARGET
// 60: 89 c9                         movl    %ecx, %ecx
// 62: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 66: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6c: c3                            retq
// 6d: 
static const unsigned char _CHECK_VALIDITYplus_SWAP_code_body[110] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x35, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x89, 0xf0, 0x49, 0x29, 0xc8, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x00, 0x48, 0x89, 0x04, 0x0e, 0x4c, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_SWAP_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_SWAP_data_body[1];
static const Hole _CHECK_VALIDITYplus_SWAP_data_holes[1];

// _CHECK_VALIDITYplus_TO_BOOL
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_TO_BOOL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 54                         pushq   %r12
// 7: 53                            pushq   %rbx
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 27                         je      0x45 <_JIT_ENTRY+0x45>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_IsTrue
// 2f: 4c 89 e7                      movq    %r12, %rdi
// 32: ff d0                         callq   *%rax
// 34: 89 c5                         movl    %eax, %ebp
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 33                         jle     0x72 <_JIT_ENTRY+0x72>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 55                         jns     0x98 <_JIT_ENTRY+0x98>
// 43: eb 65                         jmp     0xaa <_JIT_ENTRY+0xaa>
// 45: 4c 29 f3                      subq    %r14, %rbx
// 48: 48 83 c3 b8                   addq    $-0x48, %rbx
// 4c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 50: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 54: 49 8b 06                      movq    (%r14), %rax
// 57: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000059:  R_X86_64_64  _JIT_TARGET
// 61: 89 c9                         movl    %ecx, %ecx
// 63: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 67: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6d: e9 9d 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 72: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000074:  R_X86_64_64  .rodata.str1.1
// 7c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007e:  R_X86_64_64  _Py_NegativeRefcount
// 86: be 86 00 00 00                movl    $0x86, %esi
// 8b: 4c 89 e2                      movq    %r12, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 49 8b 04 24                   movq    (%r12), %rax
// 94: 85 c0                         testl   %eax, %eax
// 96: 78 12                         js      0xaa <_JIT_ENTRY+0xaa>
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a2: ff d0                         callq   *%rax
// a4: 49 ff 0c 24                   decq    (%r12)
// a8: 74 3d                         je      0xe7 <_JIT_ENTRY+0xe7>
// aa: 85 ed                         testl   %ebp, %ebp
// ac: 78 4c                         js      0xfa <_JIT_ENTRY+0xfa>
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _Py_FalseStruct
// b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ba:  R_X86_64_64  _Py_TrueStruct
// c2: 48 0f 44 c8                   cmoveq  %rax, %rcx
// c6: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _JIT_CONTINUE
// d4: 4c 89 f7                      movq    %r14, %rdi
// d7: 48 89 de                      movq    %rbx, %rsi
// da: 4c 89 fa                      movq    %r15, %rdx
// dd: 5b                            popq    %rbx
// de: 41 5c                         popq    %r12
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: ff e0                         jmpq    *%rax
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_Dealloc
// f1: 4c 89 e7                      movq    %r12, %rdi
// f4: ff d0                         callq   *%rax
// f6: 85 ed                         testl   %ebp, %ebp
// f8: 79 b4                         jns     0xae <_JIT_ENTRY+0xae>
// fa: 48 83 c3 f8                   addq    $-0x8, %rbx
// fe: 4c 29 f3                      subq    %r14, %rbx
// 101: 48 83 c3 b8                   addq    $-0x48, %rbx
// 105: 48 c1 eb 03                   shrq    $0x3, %rbx
// 109: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 10d: 31 c0                         xorl    %eax, %eax
// 10f: 5b                            popq    %rbx
// 110: 41 5c                         popq    %r12
// 112: 41 5e                         popq    %r14
// 114: 41 5f                         popq    %r15
// 116: 5d                            popq    %rbp
// 117: c3                            retq
// 118: 
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_code_body[281] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x27, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3d, 0x85, 0xed, 0x78, 0x4c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x79, 0xb4, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_TO_BOOL_code_holes[11] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x74, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_TO_BOOL_data_holes[1];

// _CHECK_VALIDITYplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_TO_BOOL_ALWAYS_TRUE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 2d                         je      0x4b <_JIT_ENTRY+0x4b>
// 1e: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 22: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 27: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000029:  R_X86_64_64  _JIT_OPERAND
// 31: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 37: 75 12                         jne     0x4b <_JIT_ENTRY+0x4b>
// 39: 49 89 d7                      movq    %rdx, %r15
// 3c: 49 8b 04 24                   movq    (%r12), %rax
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 7e 3a                         jle     0x7f <_JIT_ENTRY+0x7f>
// 45: 85 c0                         testl   %eax, %eax
// 47: 79 5c                         jns     0xa5 <_JIT_ENTRY+0xa5>
// 49: eb 7b                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 4b: 4c 29 f3                      subq    %r14, %rbx
// 4e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 52: 48 c1 eb 03                   shrq    $0x3, %rbx
// 56: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 5a: 49 8b 06                      movq    (%r14), %rax
// 5d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005f:  R_X86_64_64  _JIT_TARGET
// 67: 89 c9                         movl    %ecx, %ecx
// 69: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 73: 48 83 c4 08                   addq    $0x8, %rsp
// 77: 5b                            popq    %rbx
// 78: 41 5c                         popq    %r12
// 7a: 41 5e                         popq    %r14
// 7c: 41 5f                         popq    %r15
// 7e: c3                            retq
// 7f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000081:  R_X86_64_64  .rodata.str1.1
// 89: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008b:  R_X86_64_64  _Py_NegativeRefcount
// 93: be db 00 00 00                movl    $0xdb, %esi
// 98: 4c 89 e2                      movq    %r12, %rdx
// 9b: ff d0                         callq   *%rax
// 9d: 49 8b 04 24                   movq    (%r12), %rax
// a1: 85 c0                         testl   %eax, %eax
// a3: 78 21                         js      0xc6 <_JIT_ENTRY+0xc6>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// af: ff d0                         callq   *%rax
// b1: 49 ff 0c 24                   decq    (%r12)
// b5: 75 0f                         jne     0xc6 <_JIT_ENTRY+0xc6>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_Dealloc
// c1: 4c 89 e7                      movq    %r12, %rdi
// c4: ff d0                         callq   *%rax
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _Py_TrueStruct
// d0: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _JIT_CONTINUE
// de: 4c 89 f7                      movq    %r14, %rdi
// e1: 48 89 de                      movq    %rbx, %rsi
// e4: 4c 89 fa                      movq    %r15, %rdx
// e7: 48 83 c4 08                   addq    $0x8, %rsp
// eb: 5b                            popq    %rbx
// ec: 41 5c                         popq    %r12
// ee: 41 5e                         popq    %r14
// f0: 41 5f                         popq    %r15
// f2: ff e0                         jmpq    *%rax
// f4: 
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_ALWAYS_TRUE_code_body[245] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x2d, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x12, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3a, 0x85, 0xc0, 0x79, 0x5c, 0xeb, 0x7b, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_TO_BOOL_ALWAYS_TRUE_code_holes[10] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x29, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_ALWAYS_TRUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _CHECK_VALIDITYplus_TO_BOOL_BOOL
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_TO_BOOL_BOOL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 14                         je      0x24 <_JIT_ENTRY+0x24>
// 10: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  PyBool_Type
// 1e: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 22: 74 28                         je      0x4c <_JIT_ENTRY+0x4c>
// 24: 48 29 fe                      subq    %rdi, %rsi
// 27: 48 83 c6 b8                   addq    $-0x48, %rsi
// 2b: 48 c1 ee 03                   shrq    $0x3, %rsi
// 2f: 89 77 40                      movl    %esi, 0x40(%rdi)
// 32: 48 8b 07                      movq    (%rdi), %rax
// 35: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000037:  R_X86_64_64  _JIT_TARGET
// 3f: 89 c9                         movl    %ecx, %ecx
// 41: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 45: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 4b: c3                            retq
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_CONTINUE
// 56: ff e0                         jmpq    *%rax
// 58: 
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_BOOL_code_body[89] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x14, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_TO_BOOL_BOOL_code_holes[5] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_BOOL_data_body[1];
static const Hole _CHECK_VALIDITYplus_TO_BOOL_BOOL_data_holes[1];

// _CHECK_VALIDITYplus_TO_BOOL_INT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_TO_BOOL_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 15                         je      0x34 <_JIT_ENTRY+0x34>
// 1f: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  PyLong_Type
// 2d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 32: 74 30                         je      0x64 <_JIT_ENTRY+0x64>
// 34: 4c 29 f3                      subq    %r14, %rbx
// 37: 48 83 c3 b8                   addq    $-0x48, %rbx
// 3b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 43: 49 8b 06                      movq    (%r14), %rax
// 46: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000048:  R_X86_64_64  _JIT_TARGET
// 50: 89 c9                         movl    %ecx, %ecx
// 52: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 5a: 5b                            popq    %rbx
// 5b: 41 5c                         popq    %r12
// 5d: 41 5d                         popq    %r13
// 5f: 41 5e                         popq    %r14
// 61: 41 5f                         popq    %r15
// 63: c3                            retq
// 64: 49 89 d7                      movq    %rdx, %r15
// 67: 41 8b 44 24 10                movl    0x10(%r12), %eax
// 6c: 83 e0 03                      andl    $0x3, %eax
// 6f: 83 f8 01                      cmpl    $0x1, %eax
// 72: 75 0c                         jne     0x80 <_JIT_ENTRY+0x80>
// 74: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000076:  R_X86_64_64  _Py_FalseStruct
// 7e: eb 5a                         jmp     0xda <_JIT_ENTRY+0xda>
// 80: 49 8b 04 24                   movq    (%r12), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7f 22                         jg      0xab <_JIT_ENTRY+0xab>
// 89: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008b:  R_X86_64_64  .rodata.str1.1
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _Py_NegativeRefcount
// 9d: be a0 00 00 00                movl    $0xa0, %esi
// a2: 4c 89 e2                      movq    %r12, %rdx
// a5: ff d0                         callq   *%rax
// a7: 49 8b 04 24                   movq    (%r12), %rax
// ab: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000ad:  R_X86_64_64  _Py_TrueStruct
// b5: 85 c0                         testl   %eax, %eax
// b7: 78 21                         js      0xda <_JIT_ENTRY+0xda>
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c3: ff d0                         callq   *%rax
// c5: 49 ff 0c 24                   decq    (%r12)
// c9: 75 0f                         jne     0xda <_JIT_ENTRY+0xda>
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _Py_Dealloc
// d5: 4c 89 e7                      movq    %r12, %rdi
// d8: ff d0                         callq   *%rax
// da: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _JIT_CONTINUE
// e8: 4c 89 f7                      movq    %r14, %rdi
// eb: 48 89 de                      movq    %rbx, %rsi
// ee: 4c 89 fa                      movq    %r15, %rdx
// f1: 5b                            popq    %rbx
// f2: 41 5c                         popq    %r12
// f4: 41 5d                         popq    %r13
// f6: 41 5e                         popq    %r14
// f8: 41 5f                         popq    %r15
// fa: ff e0                         jmpq    *%rax
// fc: 
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_INT_code_body[253] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x15, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x30, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x44, 0x24, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x75, 0x0c, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x5a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_TO_BOOL_INT_code_holes[11] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_TO_BOOL_INT_data_holes[1];

// _CHECK_VALIDITYplus_TO_BOOL_LIST
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_TO_BOOL_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 15                         je      0x34 <_JIT_ENTRY+0x34>
// 1f: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  PyList_Type
// 2d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 32: 74 30                         je      0x64 <_JIT_ENTRY+0x64>
// 34: 4c 29 f3                      subq    %r14, %rbx
// 37: 48 83 c3 b8                   addq    $-0x48, %rbx
// 3b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 43: 49 8b 06                      movq    (%r14), %rax
// 46: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000048:  R_X86_64_64  _JIT_TARGET
// 50: 89 c9                         movl    %ecx, %ecx
// 52: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 5a: 5b                            popq    %rbx
// 5b: 41 5c                         popq    %r12
// 5d: 41 5d                         popq    %r13
// 5f: 41 5e                         popq    %r14
// 61: 41 5f                         popq    %r15
// 63: c3                            retq
// 64: 49 89 d7                      movq    %rdx, %r15
// 67: 49 8b 04 24                   movq    (%r12), %rax
// 6b: 4d 8b 6c 24 10                movq    0x10(%r12), %r13
// 70: 48 85 c0                      testq   %rax, %rax
// 73: 7e 06                         jle     0x7b <_JIT_ENTRY+0x7b>
// 75: 85 c0                         testl   %eax, %eax
// 77: 79 28                         jns     0xa1 <_JIT_ENTRY+0xa1>
// 79: eb 47                         jmp     0xc2 <_JIT_ENTRY+0xc2>
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be ae 00 00 00                movl    $0xae, %esi
// 94: 4c 89 e2                      movq    %r12, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 21                         js      0xc2 <_JIT_ENTRY+0xc2>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ab: ff d0                         callq   *%rax
// ad: 49 ff 0c 24                   decq    (%r12)
// b1: 75 0f                         jne     0xc2 <_JIT_ENTRY+0xc2>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_Dealloc
// bd: 4c 89 e7                      movq    %r12, %rdi
// c0: ff d0                         callq   *%rax
// c2: 4d 85 ed                      testq   %r13, %r13
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_FalseStruct
// cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d1:  R_X86_64_64  _Py_TrueStruct
// d9: 48 0f 44 c8                   cmoveq  %rax, %rcx
// dd: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _JIT_CONTINUE
// eb: 4c 89 f7                      movq    %r14, %rdi
// ee: 48 89 de                      movq    %rbx, %rsi
// f1: 4c 89 fa                      movq    %r15, %rdx
// f4: 5b                            popq    %rbx
// f5: 41 5c                         popq    %r12
// f7: 41 5d                         popq    %r13
// f9: 41 5e                         popq    %r14
// fb: 41 5f                         popq    %r15
// fd: ff e0                         jmpq    *%rax
// ff: 
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_LIST_code_body[256] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x15, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x30, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_TO_BOOL_LIST_code_holes[11] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_TO_BOOL_LIST_data_holes[1];

// _CHECK_VALIDITYplus_TO_BOOL_NONE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_TO_BOOL_NONE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 10                         je      0x20 <_JIT_ENTRY+0x20>
// 10: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000012:  R_X86_64_64  _Py_NoneStruct
// 1a: 48 39 46 f8                   cmpq    %rax, -0x8(%rsi)
// 1e: 74 28                         je      0x48 <_JIT_ENTRY+0x48>
// 20: 48 29 fe                      subq    %rdi, %rsi
// 23: 48 83 c6 b8                   addq    $-0x48, %rsi
// 27: 48 c1 ee 03                   shrq    $0x3, %rsi
// 2b: 89 77 40                      movl    %esi, 0x40(%rdi)
// 2e: 48 8b 07                      movq    (%rdi), %rax
// 31: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000033:  R_X86_64_64  _JIT_TARGET
// 3b: 89 c9                         movl    %ecx, %ecx
// 3d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 41: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 47: c3                            retq
// 48: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004a:  R_X86_64_64  _Py_FalseStruct
// 52: 48 89 46 f8                   movq    %rax, -0x8(%rsi)
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _JIT_CONTINUE
// 60: ff e0                         jmpq    *%rax
// 62: 
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_NONE_code_body[99] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x46, 0xf8, 0x74, 0x28, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_TO_BOOL_NONE_code_holes[6] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x12, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_NONE_data_body[1];
static const Hole _CHECK_VALIDITYplus_TO_BOOL_NONE_data_holes[1];

// _CHECK_VALIDITYplus_TO_BOOL_STR
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_TO_BOOL_STR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 15                         je      0x34 <_JIT_ENTRY+0x34>
// 1f: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  PyUnicode_Type
// 2d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 32: 74 30                         je      0x64 <_JIT_ENTRY+0x64>
// 34: 4c 29 f3                      subq    %r14, %rbx
// 37: 48 83 c3 b8                   addq    $-0x48, %rbx
// 3b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 43: 49 8b 06                      movq    (%r14), %rax
// 46: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000048:  R_X86_64_64  _JIT_TARGET
// 50: 89 c9                         movl    %ecx, %ecx
// 52: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 5a: 5b                            popq    %rbx
// 5b: 41 5c                         popq    %r12
// 5d: 41 5d                         popq    %r13
// 5f: 41 5e                         popq    %r14
// 61: 41 5f                         popq    %r15
// 63: c3                            retq
// 64: 49 89 d7                      movq    %rdx, %r15
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  _PyRuntime
// 71: 48 05 00 a1 00 00             addq    $0xa100, %rax           # imm = 0xA100
// 77: 49 39 c4                      cmpq    %rax, %r12
// 7a: 74 5c                         je      0xd8 <_JIT_ENTRY+0xd8>
// 7c: 49 8b 04 24                   movq    (%r12), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7f 22                         jg      0xa7 <_JIT_ENTRY+0xa7>
// 85: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000087:  R_X86_64_64  .rodata.str1.1
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_NegativeRefcount
// 99: be cb 00 00 00                movl    $0xcb, %esi
// 9e: 4c 89 e2                      movq    %r12, %rdx
// a1: ff d0                         callq   *%rax
// a3: 49 8b 04 24                   movq    (%r12), %rax
// a7: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000a9:  R_X86_64_64  _Py_TrueStruct
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 2d                         js      0xe2 <_JIT_ENTRY+0xe2>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 75 1b                         jne     0xe2 <_JIT_ENTRY+0xe2>
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _Py_Dealloc
// d1: 4c 89 e7                      movq    %r12, %rdi
// d4: ff d0                         callq   *%rax
// d6: eb 0a                         jmp     0xe2 <_JIT_ENTRY+0xe2>
// d8: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000da:  R_X86_64_64  _Py_FalseStruct
// e2: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _JIT_CONTINUE
// f0: 4c 89 f7                      movq    %r14, %rdi
// f3: 48 89 de                      movq    %rbx, %rsi
// f6: 4c 89 fa                      movq    %r15, %rdx
// f9: 5b                            popq    %rbx
// fa: 41 5c                         popq    %r12
// fc: 41 5d                         popq    %r13
// fe: 41 5e                         popq    %r14
// 100: 41 5f                         popq    %r15
// 102: ff e0                         jmpq    *%rax
// 104: 
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_STR_code_body[261] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x15, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x30, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x05, 0x00, 0xa1, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x74, 0x5c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x0a, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_TO_BOOL_STR_code_holes[12] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_TO_BOOL_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_TO_BOOL_STR_data_holes[1];

// _CHECK_VALIDITYplus_UNARY_INVERT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_UNARY_INVERT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 28                         je      0x47 <_JIT_ENTRY+0x47>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  PyNumber_Invert
// 30: 4c 89 ef                      movq    %r13, %rdi
// 33: ff d0                         callq   *%rax
// 35: 49 89 c4                      movq    %rax, %r12
// 38: 49 8b 45 00                   movq    (%r13), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 33                         jle     0x74 <_JIT_ENTRY+0x74>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 55                         jns     0x9a <_JIT_ENTRY+0x9a>
// 45: eb 65                         jmp     0xac <_JIT_ENTRY+0xac>
// 47: 4c 29 f3                      subq    %r14, %rbx
// 4a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 4e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 52: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 56: 49 8b 06                      movq    (%r14), %rax
// 59: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005b:  R_X86_64_64  _JIT_TARGET
// 63: 89 c9                         movl    %ecx, %ecx
// 65: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 69: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6f: e9 88 00 00 00                jmp     0xfc <_JIT_ENTRY+0xfc>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be e6 00 00 00                movl    $0xe6, %esi
// 8d: 4c 89 ea                      movq    %r13, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 45 00                   movq    (%r13), %rax
// 96: 85 c0                         testl   %eax, %eax
// 98: 78 12                         js      0xac <_JIT_ENTRY+0xac>
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a4: ff d0                         callq   *%rax
// a6: 49 ff 4d 00                   decq    (%r13)
// aa: 74 27                         je      0xd3 <_JIT_ENTRY+0xd3>
// ac: 4d 85 e4                      testq   %r12, %r12
// af: 74 36                         je      0xe7 <_JIT_ENTRY+0xe7>
// b1: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _JIT_CONTINUE
// bf: 4c 89 f7                      movq    %r14, %rdi
// c2: 48 89 de                      movq    %rbx, %rsi
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: 5b                            popq    %rbx
// c9: 41 5c                         popq    %r12
// cb: 41 5d                         popq    %r13
// cd: 41 5e                         popq    %r14
// cf: 41 5f                         popq    %r15
// d1: ff e0                         jmpq    *%rax
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_Dealloc
// dd: 4c 89 ef                      movq    %r13, %rdi
// e0: ff d0                         callq   *%rax
// e2: 4d 85 e4                      testq   %r12, %r12
// e5: 75 ca                         jne     0xb1 <_JIT_ENTRY+0xb1>
// e7: 48 83 c3 f8                   addq    $-0x8, %rbx
// eb: 4c 29 f3                      subq    %r14, %rbx
// ee: 48 83 c3 b8                   addq    $-0x48, %rbx
// f2: 48 c1 eb 03                   shrq    $0x3, %rbx
// f6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// fa: 31 c0                         xorl    %eax, %eax
// fc: 5b                            popq    %rbx
// fd: 41 5c                         popq    %r12
// ff: 41 5d                         popq    %r13
// 101: 41 5e                         popq    %r14
// 103: 41 5f                         popq    %r15
// 105: c3                            retq
// 106: 
static const unsigned char _CHECK_VALIDITYplus_UNARY_INVERT_code_body[263] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x28, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x88, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x27, 0x4d, 0x85, 0xe4, 0x74, 0x36, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xca, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_UNARY_INVERT_code_holes[9] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_UNARY_INVERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_UNARY_INVERT_data_holes[1];

// _CHECK_VALIDITYplus_UNARY_NEGATIVE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_UNARY_NEGATIVE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _JIT_EXECUTOR
// 19: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d: 74 28                         je      0x47 <_JIT_ENTRY+0x47>
// 1f: 49 89 d7                      movq    %rdx, %r15
// 22: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  PyNumber_Negative
// 30: 4c 89 ef                      movq    %r13, %rdi
// 33: ff d0                         callq   *%rax
// 35: 49 89 c4                      movq    %rax, %r12
// 38: 49 8b 45 00                   movq    (%r13), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 33                         jle     0x74 <_JIT_ENTRY+0x74>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 55                         jns     0x9a <_JIT_ENTRY+0x9a>
// 45: eb 65                         jmp     0xac <_JIT_ENTRY+0xac>
// 47: 4c 29 f3                      subq    %r14, %rbx
// 4a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 4e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 52: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 56: 49 8b 06                      movq    (%r14), %rax
// 59: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005b:  R_X86_64_64  _JIT_TARGET
// 63: 89 c9                         movl    %ecx, %ecx
// 65: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 69: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6f: e9 88 00 00 00                jmp     0xfc <_JIT_ENTRY+0xfc>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be 71 00 00 00                movl    $0x71, %esi
// 8d: 4c 89 ea                      movq    %r13, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 45 00                   movq    (%r13), %rax
// 96: 85 c0                         testl   %eax, %eax
// 98: 78 12                         js      0xac <_JIT_ENTRY+0xac>
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a4: ff d0                         callq   *%rax
// a6: 49 ff 4d 00                   decq    (%r13)
// aa: 74 27                         je      0xd3 <_JIT_ENTRY+0xd3>
// ac: 4d 85 e4                      testq   %r12, %r12
// af: 74 36                         je      0xe7 <_JIT_ENTRY+0xe7>
// b1: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _JIT_CONTINUE
// bf: 4c 89 f7                      movq    %r14, %rdi
// c2: 48 89 de                      movq    %rbx, %rsi
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: 5b                            popq    %rbx
// c9: 41 5c                         popq    %r12
// cb: 41 5d                         popq    %r13
// cd: 41 5e                         popq    %r14
// cf: 41 5f                         popq    %r15
// d1: ff e0                         jmpq    *%rax
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_Dealloc
// dd: 4c 89 ef                      movq    %r13, %rdi
// e0: ff d0                         callq   *%rax
// e2: 4d 85 e4                      testq   %r12, %r12
// e5: 75 ca                         jne     0xb1 <_JIT_ENTRY+0xb1>
// e7: 48 83 c3 f8                   addq    $-0x8, %rbx
// eb: 4c 29 f3                      subq    %r14, %rbx
// ee: 48 83 c3 b8                   addq    $-0x48, %rbx
// f2: 48 c1 eb 03                   shrq    $0x3, %rbx
// f6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// fa: 31 c0                         xorl    %eax, %eax
// fc: 5b                            popq    %rbx
// fd: 41 5c                         popq    %r12
// ff: 41 5d                         popq    %r13
// 101: 41 5e                         popq    %r14
// 103: 41 5f                         popq    %r15
// 105: c3                            retq
// 106: 
static const unsigned char _CHECK_VALIDITYplus_UNARY_NEGATIVE_code_body[263] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x28, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x88, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x27, 0x4d, 0x85, 0xe4, 0x74, 0x36, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xca, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _CHECK_VALIDITYplus_UNARY_NEGATIVE_code_holes[9] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_UNARY_NEGATIVE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_UNARY_NEGATIVE_data_holes[1];

// _CHECK_VALIDITYplus_UNARY_NOT
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_UNARY_NOT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_EXECUTOR
// a: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// e: 74 2c                         je      0x3c <_JIT_ENTRY+0x3c>
// 10: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000012:  R_X86_64_64  _Py_FalseStruct
// 1a: 48 39 46 f8                   cmpq    %rax, -0x8(%rsi)
// 1e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000020:  R_X86_64_64  _Py_TrueStruct
// 28: 48 0f 45 c8                   cmovneq %rax, %rcx
// 2c: 48 89 4e f8                   movq    %rcx, -0x8(%rsi)
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_CONTINUE
// 3a: ff e0                         jmpq    *%rax
// 3c: 48 29 fe                      subq    %rdi, %rsi
// 3f: 48 83 c6 b8                   addq    $-0x48, %rsi
// 43: 48 c1 ee 03                   shrq    $0x3, %rsi
// 47: 89 77 40                      movl    %esi, 0x40(%rdi)
// 4a: 48 8b 07                      movq    (%rdi), %rax
// 4d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004f:  R_X86_64_64  _JIT_TARGET
// 57: 89 c9                         movl    %ecx, %ecx
// 59: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 5d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 63: c3                            retq
// 64: 
static const unsigned char _CHECK_VALIDITYplus_UNARY_NOT_code_body[101] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xc8, 0x48, 0x89, 0x4e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xc3};
static const Hole _CHECK_VALIDITYplus_UNARY_NOT_code_holes[6] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x12, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x20, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: 
static const unsigned char _CHECK_VALIDITYplus_UNARY_NOT_data_body[1];
static const Hole _CHECK_VALIDITYplus_UNARY_NOT_data_holes[1];

// _CHECK_VALIDITYplus_UNPACK_EX
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_UNPACK_EX.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 54                         pushq   %r12
// 7: 53                            pushq   %rbx
// 8: 49 89 f6                      movq    %rsi, %r14
// b: 48 89 fb                      movq    %rdi, %rbx
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 43                         je      0x61 <_JIT_ENTRY+0x61>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  _JIT_OPARG
// 2f: 0f b6 cc                      movzbl  %ah, %ecx
// 32: 0f b6 d0                      movzbl  %al, %edx
// 35: 8d 44 0a 01                   leal    0x1(%rdx,%rcx), %eax
// 39: 4d 8d 44 c6 f8                leaq    -0x8(%r14,%rax,8), %r8
// 3e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000040:  R_X86_64_64  _PyEval_UnpackIterable
// 48: 4c 89 ff                      movq    %r15, %rdi
// 4b: 4c 89 e6                      movq    %r12, %rsi
// 4e: ff d0                         callq   *%rax
// 50: 89 c5                         movl    %eax, %ebp
// 52: 49 8b 04 24                   movq    (%r12), %rax
// 56: 48 85 c0                      testq   %rax, %rax
// 59: 7e 33                         jle     0x8e <_JIT_ENTRY+0x8e>
// 5b: 85 c0                         testl   %eax, %eax
// 5d: 79 55                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 5f: eb 74                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// 61: 49 29 de                      subq    %rbx, %r14
// 64: 49 83 c6 b8                   addq    $-0x48, %r14
// 68: 49 c1 ee 03                   shrq    $0x3, %r14
// 6c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000075:  R_X86_64_64  _JIT_TARGET
// 7d: 89 c9                         movl    %ecx, %ecx
// 7f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 83: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 89: e9 91 00 00 00                jmp     0x11f <_JIT_ENTRY+0x11f>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// a7: 4c 89 e2                      movq    %r12, %rdx
// aa: ff d0                         callq   *%rax
// ac: 49 8b 04 24                   movq    (%r12), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 21                         js      0xd5 <_JIT_ENTRY+0xd5>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0c 24                   decq    (%r12)
// c4: 75 0f                         jne     0xd5 <_JIT_ENTRY+0xd5>
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _Py_Dealloc
// d0: 4c 89 e7                      movq    %r12, %rdi
// d3: ff d0                         callq   *%rax
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _JIT_OPARG
// df: 0f b6 c8                      movzbl  %al, %ecx
// e2: 0f b6 c4                      movzbl  %ah, %eax
// e5: 01 c8                         addl    %ecx, %eax
// e7: 31 c9                         xorl    %ecx, %ecx
// e9: 85 ed                         testl   %ebp, %ebp
// eb: 48 0f 45 c8                   cmovneq %rax, %rcx
// ef: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// f3: 74 1a                         je      0x10f <_JIT_ENTRY+0x10f>
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _JIT_CONTINUE
// ff: 48 89 df                      movq    %rbx, %rdi
// 102: 4c 89 fa                      movq    %r15, %rdx
// 105: 5b                            popq    %rbx
// 106: 41 5c                         popq    %r12
// 108: 41 5e                         popq    %r14
// 10a: 41 5f                         popq    %r15
// 10c: 5d                            popq    %rbp
// 10d: ff e0                         jmpq    *%rax
// 10f: 48 29 de                      subq    %rbx, %rsi
// 112: 48 83 c6 b0                   addq    $-0x50, %rsi
// 116: 48 c1 ee 03                   shrq    $0x3, %rsi
// 11a: 89 73 40                      movl    %esi, 0x40(%rbx)
// 11d: 31 c0                         xorl    %eax, %eax
// 11f: 5b                            popq    %rbx
// 120: 41 5c                         popq    %r12
// 122: 41 5e                         popq    %r14
// 124: 41 5f                         popq    %r15
// 126: 5d                            popq    %rbp
// 127: c3                            retq
// 128: 
static const unsigned char _CHECK_VALIDITYplus_UNPACK_EX_code_body[297] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x43, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xcc, 0x0f, 0xb6, 0xd0, 0x8d, 0x44, 0x0a, 0x01, 0x4d, 0x8d, 0x44, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x74, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xc8, 0x0f, 0xb6, 0xc4, 0x01, 0xc8, 0x31, 0xc9, 0x85, 0xed, 0x48, 0x0f, 0x45, 0xc8, 0x49, 0x8d, 0x34, 0xce, 0x74, 0x1a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb0, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_UNPACK_EX_code_holes[11] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x27, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_UNPACK_EX_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_UNPACK_EX_data_holes[1];

// _CHECK_VALIDITYplus_UNPACK_SEQUENCE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_UNPACK_SEQUENCE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 54                         pushq   %r12
// 7: 53                            pushq   %rbx
// 8: 49 89 f6                      movq    %rsi, %r14
// b: 48 89 fb                      movq    %rdi, %rbx
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_EXECUTOR
// 18: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c: 74 47                         je      0x65 <_JIT_ENTRY+0x65>
// 1e: 49 89 d7                      movq    %rdx, %r15
// 21: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  _JIT_OPARG
// 2f: 0f b7 c8                      movzwl  %ax, %ecx
// 32: 4d 8d 04 ce                   leaq    (%r14,%rcx,8), %r8
// 36: 49 83 c0 f8                   addq    $-0x8, %r8
// 3a: 0f b7 d0                      movzwl  %ax, %edx
// 3d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003f:  R_X86_64_64  _PyEval_UnpackIterable
// 47: 4c 89 ff                      movq    %r15, %rdi
// 4a: 4c 89 e6                      movq    %r12, %rsi
// 4d: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 52: ff d0                         callq   *%rax
// 54: 89 c5                         movl    %eax, %ebp
// 56: 49 8b 04 24                   movq    (%r12), %rax
// 5a: 48 85 c0                      testq   %rax, %rax
// 5d: 7e 33                         jle     0x92 <_JIT_ENTRY+0x92>
// 5f: 85 c0                         testl   %eax, %eax
// 61: 79 55                         jns     0xb8 <_JIT_ENTRY+0xb8>
// 63: eb 74                         jmp     0xd9 <_JIT_ENTRY+0xd9>
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 48 8b 03                      movq    (%rbx), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_TARGET
// 81: 89 c9                         movl    %ecx, %ecx
// 83: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 87: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 8d: e9 8f 00 00 00                jmp     0x121 <_JIT_ENTRY+0x121>
// 92: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000094:  R_X86_64_64  .rodata.str1.1
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_NegativeRefcount
// a6: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// ab: 4c 89 e2                      movq    %r12, %rdx
// ae: ff d0                         callq   *%rax
// b0: 49 8b 04 24                   movq    (%r12), %rax
// b4: 85 c0                         testl   %eax, %eax
// b6: 78 21                         js      0xd9 <_JIT_ENTRY+0xd9>
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c2: ff d0                         callq   *%rax
// c4: 49 ff 0c 24                   decq    (%r12)
// c8: 75 0f                         jne     0xd9 <_JIT_ENTRY+0xd9>
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_Dealloc
// d4: 4c 89 e7                      movq    %r12, %rdi
// d7: ff d0                         callq   *%rax
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _JIT_OPARG
// e3: 0f b7 c0                      movzwl  %ax, %eax
// e6: 48 ff c8                      decq    %rax
// e9: 31 c9                         xorl    %ecx, %ecx
// eb: 85 ed                         testl   %ebp, %ebp
// ed: 48 0f 45 c8                   cmovneq %rax, %rcx
// f1: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// f5: 74 1a                         je      0x111 <_JIT_ENTRY+0x111>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _JIT_CONTINUE
// 101: 48 89 df                      movq    %rbx, %rdi
// 104: 4c 89 fa                      movq    %r15, %rdx
// 107: 5b                            popq    %rbx
// 108: 41 5c                         popq    %r12
// 10a: 41 5e                         popq    %r14
// 10c: 41 5f                         popq    %r15
// 10e: 5d                            popq    %rbp
// 10f: ff e0                         jmpq    *%rax
// 111: 48 29 de                      subq    %rbx, %rsi
// 114: 48 83 c6 b0                   addq    $-0x50, %rsi
// 118: 48 c1 ee 03                   shrq    $0x3, %rsi
// 11c: 89 73 40                      movl    %esi, 0x40(%rbx)
// 11f: 31 c0                         xorl    %eax, %eax
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5e                         popq    %r14
// 126: 41 5f                         popq    %r15
// 128: 5d                            popq    %rbp
// 129: c3                            retq
// 12a: 
static const unsigned char _CHECK_VALIDITYplus_UNPACK_SEQUENCE_code_body[299] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x47, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x4d, 0x8d, 0x04, 0xce, 0x49, 0x83, 0xc0, 0xf8, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x74, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8f, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xff, 0xc8, 0x31, 0xc9, 0x85, 0xed, 0x48, 0x0f, 0x45, 0xc8, 0x49, 0x8d, 0x34, 0xce, 0x74, 0x1a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb0, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_UNPACK_SEQUENCE_code_holes[11] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x27, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_UNPACK_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_UNPACK_SEQUENCE_data_holes[1];

// _CHECK_VALIDITYplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_UNPACK_SEQUENCE_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 0f 84 ac 00 00 00             je      0xd4 <_JIT_ENTRY+0xd4>
// 28: 49 8b 4e f8                   movq    -0x8(%r14), %rcx
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  PyList_Type
// 36: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 3a: 0f 85 94 00 00 00             jne     0xd4 <_JIT_ENTRY+0xd4>
// 40: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000042:  R_X86_64_64  _JIT_OPARG
// 4a: 0f b7 c0                      movzwl  %ax, %eax
// 4d: 48 39 41 10                   cmpq    %rax, 0x10(%rcx)
// 51: 0f 85 7d 00 00 00             jne     0xd4 <_JIT_ENTRY+0xd4>
// 57: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 5c: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 61: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000063:  R_X86_64_64  _JIT_OPARG
// 6b: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 70: 0f 8e 95 00 00 00             jle     0x10b <_JIT_ENTRY+0x10b>
// 76: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 7a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 7f: 48 8b 68 18                   movq    0x18(%rax), %rbp
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _JIT_OPARG
// 8d: 44 0f b7 f8                   movzwl  %ax, %r15d
// 91: 49 ff c7                      incq    %r15
// 94: eb 1b                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 96: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// a0: 4d 89 65 00                   movq    %r12, (%r13)
// a4: 49 83 c5 08                   addq    $0x8, %r13
// a8: 49 ff cf                      decq    %r15
// ab: 49 83 ff 01                   cmpq    $0x1, %r15
// af: 7e 5a                         jle     0x10b <_JIT_ENTRY+0x10b>
// b1: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// b5: 4c 8b 64 c5 00                movq    (%rbp,%rax,8), %r12
// ba: 41 8b 04 24                   movl    (%r12), %eax
// be: ff c0                         incl    %eax
// c0: 74 de                         je      0xa0 <_JIT_ENTRY+0xa0>
// c2: 41 89 04 24                   movl    %eax, (%r12)
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// d0: ff d0                         callq   *%rax
// d2: eb cc                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// d4: 49 29 de                      subq    %rbx, %r14
// d7: 49 83 c6 b8                   addq    $-0x48, %r14
// db: 49 c1 ee 03                   shrq    $0x3, %r14
// df: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// e3: 48 8b 03                      movq    (%rbx), %rax
// e6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e8:  R_X86_64_64  _JIT_TARGET
// f0: 89 c9                         movl    %ecx, %ecx
// f2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// f6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// fc: 48 83 c4 18                   addq    $0x18, %rsp
// 100: 5b                            popq    %rbx
// 101: 41 5c                         popq    %r12
// 103: 41 5d                         popq    %r13
// 105: 41 5e                         popq    %r14
// 107: 41 5f                         popq    %r15
// 109: 5d                            popq    %rbp
// 10a: c3                            retq
// 10b: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 7f 22                         jg      0x13b <_JIT_ENTRY+0x13b>
// 119: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011b:  R_X86_64_64  .rodata.str1.1
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_NegativeRefcount
// 12d: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 132: 4c 89 e2                      movq    %r12, %rdx
// 135: ff d0                         callq   *%rax
// 137: 49 8b 04 24                   movq    (%r12), %rax
// 13b: 85 c0                         testl   %eax, %eax
// 13d: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 142: 78 21                         js      0x165 <_JIT_ENTRY+0x165>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14e: ff d0                         callq   *%rax
// 150: 49 ff 0c 24                   decq    (%r12)
// 154: 75 0f                         jne     0x165 <_JIT_ENTRY+0x165>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_Dealloc
// 160: 4c 89 e7                      movq    %r12, %rdi
// 163: ff d0                         callq   *%rax
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _JIT_OPARG
// 16f: 0f b7 c0                      movzwl  %ax, %eax
// 172: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 176: 48 83 c6 f8                   addq    $-0x8, %rsi
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _JIT_CONTINUE
// 184: 48 89 df                      movq    %rbx, %rdi
// 187: 4c 89 fa                      movq    %r15, %rdx
// 18a: 48 83 c4 18                   addq    $0x18, %rsp
// 18e: 5b                            popq    %rbx
// 18f: 41 5c                         popq    %r12
// 191: 41 5d                         popq    %r13
// 193: 41 5e                         popq    %r14
// 195: 41 5f                         popq    %r15
// 197: 5d                            popq    %rbp
// 198: ff e0                         jmpq    *%rax
// 19a: 
static const unsigned char _CHECK_VALIDITYplus_UNPACK_SEQUENCE_LIST_code_body[411] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x0f, 0x85, 0x94, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x39, 0x41, 0x10, 0x0f, 0x85, 0x7d, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x95, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x68, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x1b, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x5a, 0x41, 0x8d, 0x47, 0xfe, 0x4c, 0x8b, 0x64, 0xc5, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0xde, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xcc, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_UNPACK_SEQUENCE_LIST_code_holes[14] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_UNPACK_SEQUENCE_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _CHECK_VALIDITYplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_UNPACK_SEQUENCE_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 0f 84 7c 00 00 00             je      0xa1 <_JIT_ENTRY+0xa1>
// 25: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 29: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002b:  R_X86_64_64  PyTuple_Type
// 33: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 38: 75 67                         jne     0xa1 <_JIT_ENTRY+0xa1>
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _JIT_OPARG
// 44: 0f b7 c0                      movzwl  %ax, %eax
// 47: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 4c: 75 53                         jne     0xa1 <_JIT_ENTRY+0xa1>
// 4e: 48 89 14 24                   movq    %rdx, (%rsp)
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _JIT_OPARG
// 5c: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 61: 7e 75                         jle     0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 67: 0f b7 e8                      movzwl  %ax, %ebp
// 6a: 48 ff c5                      incq    %rbp
// 6d: eb 12                         jmp     0x81 <_JIT_ENTRY+0x81>
// 6f: 90                            nop
// 70: 4d 89 7d 00                   movq    %r15, (%r13)
// 74: 49 83 c5 08                   addq    $0x8, %r13
// 78: 48 ff cd                      decq    %rbp
// 7b: 48 83 fd 01                   cmpq    $0x1, %rbp
// 7f: 7e 57                         jle     0xd8 <_JIT_ENTRY+0xd8>
// 81: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 84: 4d 8b 7c c4 18                movq    0x18(%r12,%rax,8), %r15
// 89: 41 8b 07                      movl    (%r15), %eax
// 8c: ff c0                         incl    %eax
// 8e: 74 e0                         je      0x70 <_JIT_ENTRY+0x70>
// 90: 41 89 07                      movl    %eax, (%r15)
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 9d: ff d0                         callq   *%rax
// 9f: eb cf                         jmp     0x70 <_JIT_ENTRY+0x70>
// a1: 49 29 de                      subq    %rbx, %r14
// a4: 49 83 c6 b8                   addq    $-0x48, %r14
// a8: 49 c1 ee 03                   shrq    $0x3, %r14
// ac: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b0: 48 8b 03                      movq    (%rbx), %rax
// b3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b5:  R_X86_64_64  _JIT_TARGET
// bd: 89 c9                         movl    %ecx, %ecx
// bf: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// c3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// c9: 48 83 c4 08                   addq    $0x8, %rsp
// cd: 5b                            popq    %rbx
// ce: 41 5c                         popq    %r12
// d0: 41 5d                         popq    %r13
// d2: 41 5e                         popq    %r14
// d4: 41 5f                         popq    %r15
// d6: 5d                            popq    %rbp
// d7: c3                            retq
// d8: 49 8b 04 24                   movq    (%r12), %rax
// dc: 48 85 c0                      testq   %rax, %rax
// df: 7f 22                         jg      0x103 <_JIT_ENTRY+0x103>
// e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e3:  R_X86_64_64  .rodata.str1.1
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _Py_NegativeRefcount
// f5: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// fa: 4c 89 e2                      movq    %r12, %rdx
// fd: ff d0                         callq   *%rax
// ff: 49 8b 04 24                   movq    (%r12), %rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 4c 8b 3c 24                   movq    (%rsp), %r15
// 109: 78 21                         js      0x12c <_JIT_ENTRY+0x12c>
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 115: ff d0                         callq   *%rax
// 117: 49 ff 0c 24                   decq    (%r12)
// 11b: 75 0f                         jne     0x12c <_JIT_ENTRY+0x12c>
// 11d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011f:  R_X86_64_64  _Py_Dealloc
// 127: 4c 89 e7                      movq    %r12, %rdi
// 12a: ff d0                         callq   *%rax
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _JIT_OPARG
// 136: 0f b7 c0                      movzwl  %ax, %eax
// 139: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 13d: 48 83 c6 f8                   addq    $-0x8, %rsi
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _JIT_CONTINUE
// 14b: 48 89 df                      movq    %rbx, %rdi
// 14e: 4c 89 fa                      movq    %r15, %rdx
// 151: 48 83 c4 08                   addq    $0x8, %rsp
// 155: 5b                            popq    %rbx
// 156: 41 5c                         popq    %r12
// 158: 41 5d                         popq    %r13
// 15a: 41 5e                         popq    %r14
// 15c: 41 5f                         popq    %r15
// 15e: 5d                            popq    %rbp
// 15f: ff e0                         jmpq    *%rax
// 161: 
static const unsigned char _CHECK_VALIDITYplus_UNPACK_SEQUENCE_TUPLE_code_body[354] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x7c, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x75, 0x53, 0x48, 0x89, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x75, 0x4d, 0x8d, 0x6e, 0xf8, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x12, 0x90, 0x4d, 0x89, 0x7d, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x7e, 0x57, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc4, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0xe0, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xcf, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_UNPACK_SEQUENCE_TUPLE_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_UNPACK_SEQUENCE_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _CHECK_VALIDITYplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_UNPACK_SEQUENCE_TWO_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_EXECUTOR
// 1b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1f: 74 61                         je      0x82 <_JIT_ENTRY+0x82>
// 21: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyTuple_Type
// 2f: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 34: 75 4c                         jne     0x82 <_JIT_ENTRY+0x82>
// 36: 49 83 7c 24 10 02             cmpq    $0x2, 0x10(%r12)
// 3c: 75 44                         jne     0x82 <_JIT_ENTRY+0x82>
// 3e: 49 89 d7                      movq    %rdx, %r15
// 41: 49 8b 6c 24 20                movq    0x20(%r12), %rbp
// 46: 8b 45 00                      movl    (%rbp), %eax
// 49: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000004b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 53: ff c0                         incl    %eax
// 55: 74 06                         je      0x5d <_JIT_ENTRY+0x5d>
// 57: 89 45 00                      movl    %eax, (%rbp)
// 5a: 41 ff d5                      callq   *%r13
// 5d: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 61: 49 8b 6c 24 18                movq    0x18(%r12), %rbp
// 66: 8b 45 00                      movl    (%rbp), %eax
// 69: ff c0                         incl    %eax
// 6b: 75 4c                         jne     0xb9 <_JIT_ENTRY+0xb9>
// 6d: 49 89 2e                      movq    %rbp, (%r14)
// 70: 49 8b 04 24                   movq    (%r12), %rax
// 74: 48 85 c0                      testq   %rax, %rax
// 77: 7e 52                         jle     0xcb <_JIT_ENTRY+0xcb>
// 79: 85 c0                         testl   %eax, %eax
// 7b: 79 74                         jns     0xf1 <_JIT_ENTRY+0xf1>
// 7d: e9 90 00 00 00                jmp     0x112 <_JIT_ENTRY+0x112>
// 82: 49 29 de                      subq    %rbx, %r14
// 85: 49 83 c6 b8                   addq    $-0x48, %r14
// 89: 49 c1 ee 03                   shrq    $0x3, %r14
// 8d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 91: 48 8b 03                      movq    (%rbx), %rax
// 94: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000096:  R_X86_64_64  _JIT_TARGET
// 9e: 89 c9                         movl    %ecx, %ecx
// a0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// aa: 48 83 c4 08                   addq    $0x8, %rsp
// ae: 5b                            popq    %rbx
// af: 41 5c                         popq    %r12
// b1: 41 5d                         popq    %r13
// b3: 41 5e                         popq    %r14
// b5: 41 5f                         popq    %r15
// b7: 5d                            popq    %rbp
// b8: c3                            retq
// b9: 89 45 00                      movl    %eax, (%rbp)
// bc: 41 ff d5                      callq   *%r13
// bf: 49 89 2e                      movq    %rbp, (%r14)
// c2: 49 8b 04 24                   movq    (%r12), %rax
// c6: 48 85 c0                      testq   %rax, %rax
// c9: 7f ae                         jg      0x79 <_JIT_ENTRY+0x79>
// cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cd:  R_X86_64_64  .rodata.str1.1
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_NegativeRefcount
// df: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// e4: 4c 89 e2                      movq    %r12, %rdx
// e7: ff d0                         callq   *%rax
// e9: 49 8b 04 24                   movq    (%r12), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 21                         js      0x112 <_JIT_ENTRY+0x112>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0c 24                   decq    (%r12)
// 101: 75 0f                         jne     0x112 <_JIT_ENTRY+0x112>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_Dealloc
// 10d: 4c 89 e7                      movq    %r12, %rdi
// 110: ff d0                         callq   *%rax
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _JIT_OPARG
// 11c: 0f b7 c0                      movzwl  %ax, %eax
// 11f: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 123: 48 83 c6 f8                   addq    $-0x8, %rsi
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _JIT_CONTINUE
// 131: 48 89 df                      movq    %rbx, %rdi
// 134: 4c 89 fa                      movq    %r15, %rdx
// 137: 48 83 c4 08                   addq    $0x8, %rsp
// 13b: 5b                            popq    %rbx
// 13c: 41 5c                         popq    %r12
// 13e: 41 5d                         popq    %r13
// 140: 41 5e                         popq    %r14
// 142: 41 5f                         popq    %r15
// 144: 5d                            popq    %rbp
// 145: ff e0                         jmpq    *%rax
// 147: 
static const unsigned char _CHECK_VALIDITYplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[328] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x61, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x4c, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x02, 0x75, 0x44, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x6c, 0x24, 0x20, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x89, 0x6e, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x4c, 0x49, 0x89, 0x2e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x90, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x89, 0x2e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_VALIDITYplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _CHECK_VALIDITYplus_WITH_EXCEPT_START
// 
// /tmp/tmppb55bc0l/_CHECK_VALIDITYplus_WITH_EXCEPT_START.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_EXECUTOR
// 1e: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 22: 74 39                         je      0x5d <_JIT_ENTRY+0x5d>
// 24: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 29: 4c 8b 63 e0                   movq    -0x20(%rbx), %r12
// 2d: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 31: 4d 8b 7d 08                   movq    0x8(%r13), %r15
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  PyException_GetTraceback
// 3f: 4c 89 ef                      movq    %r13, %rdi
// 42: ff d0                         callq   *%rax
// 44: 48 85 c0                      testq   %rax, %rax
// 47: 74 41                         je      0x8a <_JIT_ENTRY+0x8a>
// 49: 48 89 c5                      movq    %rax, %rbp
// 4c: 48 8b 00                      movq    (%rax), %rax
// 4f: 48 85 c0                      testq   %rax, %rax
// 52: 7e 42                         jle     0x96 <_JIT_ENTRY+0x96>
// 54: 85 c0                         testl   %eax, %eax
// 56: 79 64                         jns     0xbc <_JIT_ENTRY+0xbc>
// 58: e9 80 00 00 00                jmp     0xdd <_JIT_ENTRY+0xdd>
// 5d: 4c 29 f3                      subq    %r14, %rbx
// 60: 48 83 c3 b8                   addq    $-0x48, %rbx
// 64: 48 c1 eb 03                   shrq    $0x3, %rbx
// 68: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 6c: 49 8b 06                      movq    (%r14), %rax
// 6f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000071:  R_X86_64_64  _JIT_TARGET
// 79: 89 c9                         movl    %ecx, %ecx
// 7b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 7f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 85: e9 cd 00 00 00                jmp     0x157 <_JIT_ENTRY+0x157>
// 8a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000008c:  R_X86_64_64  _Py_NoneStruct
// 94: eb 47                         jmp     0xdd <_JIT_ENTRY+0xdd>
// 96: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000098:  R_X86_64_64  .rodata.str1.1
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _Py_NegativeRefcount
// aa: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// af: 48 89 ea                      movq    %rbp, %rdx
// b2: ff d0                         callq   *%rax
// b4: 48 8b 45 00                   movq    (%rbp), %rax
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 21                         js      0xdd <_JIT_ENTRY+0xdd>
// bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000be:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c6: ff d0                         callq   *%rax
// c8: 48 ff 4d 00                   decq    (%rbp)
// cc: 75 0f                         jne     0xdd <_JIT_ENTRY+0xdd>
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_Dealloc
// d8: 48 89 ef                      movq    %rbp, %rdi
// db: ff d0                         callq   *%rax
// dd: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// e6: 48 8d 74 24 18                leaq    0x18(%rsp), %rsi
// eb: 4c 89 7c 24 18                movq    %r15, 0x18(%rsp)
// f0: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// f5: 48 89 6c 24 28                movq    %rbp, 0x28(%rsp)
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  PyObject_Vectorcall
// 104: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 10e: 4c 89 e7                      movq    %r12, %rdi
// 111: 31 c9                         xorl    %ecx, %ecx
// 113: ff d0                         callq   *%rax
// 115: 48 85 c0                      testq   %rax, %rax
// 118: 74 2c                         je      0x146 <_JIT_ENTRY+0x146>
// 11a: 48 89 03                      movq    %rax, (%rbx)
// 11d: 48 83 c3 08                   addq    $0x8, %rbx
// 121: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000123:  R_X86_64_64  _JIT_CONTINUE
// 12b: 4c 89 f7                      movq    %r14, %rdi
// 12e: 48 89 de                      movq    %rbx, %rsi
// 131: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 136: 48 83 c4 38                   addq    $0x38, %rsp
// 13a: 5b                            popq    %rbx
// 13b: 41 5c                         popq    %r12
// 13d: 41 5d                         popq    %r13
// 13f: 41 5e                         popq    %r14
// 141: 41 5f                         popq    %r15
// 143: 5d                            popq    %rbp
// 144: ff e0                         jmpq    *%rax
// 146: 4c 29 f3                      subq    %r14, %rbx
// 149: 48 83 c3 b8                   addq    $-0x48, %rbx
// 14d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 151: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 155: 31 c0                         xorl    %eax, %eax
// 157: 48 83 c4 38                   addq    $0x38, %rsp
// 15b: 5b                            popq    %rbx
// 15c: 41 5c                         popq    %r12
// 15e: 41 5d                         popq    %r13
// 160: 41 5e                         popq    %r14
// 162: 41 5f                         popq    %r15
// 164: 5d                            popq    %rbp
// 165: c3                            retq
// 166: 
static const unsigned char _CHECK_VALIDITYplus_WITH_EXCEPT_START_code_body[359] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x39, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x8b, 0x63, 0xe0, 0x4c, 0x8b, 0x6b, 0xf8, 0x4d, 0x8b, 0x7d, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x41, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x42, 0x85, 0xc0, 0x79, 0x64, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xcd, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x89, 0x6c, 0x24, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x4c, 0x89, 0xe7, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x2c, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_VALIDITYplus_WITH_EXCEPT_START_code_holes[11] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_VALIDITYplus_WITH_EXCEPT_START_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITYplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_CHECK_VALIDITYplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BEFORE_ASYNC_WITH),
    [_CHECK_VALIDITYplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BEFORE_WITH),
    [_CHECK_VALIDITYplus_BINARY_OP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_OP),
    [_CHECK_VALIDITYplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_OP_ADD_FLOAT),
    [_CHECK_VALIDITYplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_OP_ADD_INT),
    [_CHECK_VALIDITYplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_OP_ADD_UNICODE),
    [_CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_FLOAT),
    [_CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_OP_MULTIPLY_INT),
    [_CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_FLOAT),
    [_CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_OP_SUBTRACT_INT),
    [_CHECK_VALIDITYplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_SLICE),
    [_CHECK_VALIDITYplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_SUBSCR),
    [_CHECK_VALIDITYplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_SUBSCR_DICT),
    [_CHECK_VALIDITYplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_SUBSCR_LIST_INT),
    [_CHECK_VALIDITYplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_SUBSCR_STR_INT),
    [_CHECK_VALIDITYplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BINARY_SUBSCR_TUPLE_INT),
    [_CHECK_VALIDITYplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BUILD_CONST_KEY_MAP),
    [_CHECK_VALIDITYplus_BUILD_LIST] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BUILD_LIST),
    [_CHECK_VALIDITYplus_BUILD_MAP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BUILD_MAP),
    [_CHECK_VALIDITYplus_BUILD_SET] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BUILD_SET),
    [_CHECK_VALIDITYplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BUILD_SLICE),
    [_CHECK_VALIDITYplus_BUILD_STRING] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BUILD_STRING),
    [_CHECK_VALIDITYplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_BUILD_TUPLE),
    [_CHECK_VALIDITYplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_BUILTIN_CLASS),
    [_CHECK_VALIDITYplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_BUILTIN_FAST),
    [_CHECK_VALIDITYplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_CHECK_VALIDITYplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_BUILTIN_O),
    [_CHECK_VALIDITYplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_INTRINSIC_1),
    [_CHECK_VALIDITYplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_INTRINSIC_2),
    [_CHECK_VALIDITYplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_ISINSTANCE),
    [_CHECK_VALIDITYplus_CALL_LEN] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_LEN),
    [_CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_METHOD_DESCRIPTOR_O),
    [_CHECK_VALIDITYplus_CALL_STR_1] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_STR_1),
    [_CHECK_VALIDITYplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_TUPLE_1),
    [_CHECK_VALIDITYplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CALL_TYPE_1),
    [_CHECK_VALIDITYplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CHECK_ATTR_CLASS),
    [_CHECK_VALIDITYplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_CHECK_VALIDITYplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CHECK_ATTR_MODULE),
    [_CHECK_VALIDITYplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CHECK_ATTR_WITH_HINT),
    [_CHECK_VALIDITYplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_CHECK_VALIDITYplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CHECK_EG_MATCH),
    [_CHECK_VALIDITYplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CHECK_EXC_MATCH),
    [_CHECK_VALIDITYplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CHECK_FUNCTION_EXACT_ARGS),
    [_CHECK_VALIDITYplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_CHECK_VALIDITYplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CHECK_PEP_523),
    [_CHECK_VALIDITYplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CHECK_STACK_SPACE),
    [_CHECK_VALIDITYplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CHECK_VALIDITY),
    [_CHECK_VALIDITYplus_COMPARE_OP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_COMPARE_OP),
    [_CHECK_VALIDITYplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_COMPARE_OP_FLOAT),
    [_CHECK_VALIDITYplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_COMPARE_OP_INT),
    [_CHECK_VALIDITYplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_COMPARE_OP_STR),
    [_CHECK_VALIDITYplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CONTAINS_OP),
    [_CHECK_VALIDITYplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_CONVERT_VALUE),
    [_CHECK_VALIDITYplus_COPY] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_COPY),
    [_CHECK_VALIDITYplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_COPY_FREE_VARS),
    [_CHECK_VALIDITYplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_DELETE_ATTR),
    [_CHECK_VALIDITYplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_DELETE_DEREF),
    [_CHECK_VALIDITYplus_DELETE_FAST] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_DELETE_FAST),
    [_CHECK_VALIDITYplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_DELETE_GLOBAL),
    [_CHECK_VALIDITYplus_DELETE_NAME] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_DELETE_NAME),
    [_CHECK_VALIDITYplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_DELETE_SUBSCR),
    [_CHECK_VALIDITYplus_DICT_MERGE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_DICT_MERGE),
    [_CHECK_VALIDITYplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_DICT_UPDATE),
    [_CHECK_VALIDITYplus_END_SEND] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_END_SEND),
    [_CHECK_VALIDITYplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_EXIT_INIT_CHECK),
    [_CHECK_VALIDITYplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_EXIT_TRACE),
    [_CHECK_VALIDITYplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_FORMAT_SIMPLE),
    [_CHECK_VALIDITYplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_FORMAT_WITH_SPEC),
    [_CHECK_VALIDITYplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_FOR_ITER_TIER_TWO),
    [_CHECK_VALIDITYplus_GET_AITER] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GET_AITER),
    [_CHECK_VALIDITYplus_GET_ANEXT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GET_ANEXT),
    [_CHECK_VALIDITYplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GET_AWAITABLE),
    [_CHECK_VALIDITYplus_GET_ITER] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GET_ITER),
    [_CHECK_VALIDITYplus_GET_LEN] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GET_LEN),
    [_CHECK_VALIDITYplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GET_YIELD_FROM_ITER),
    [_CHECK_VALIDITYplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_BOTH_FLOAT),
    [_CHECK_VALIDITYplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_BOTH_INT),
    [_CHECK_VALIDITYplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_BOTH_UNICODE),
    [_CHECK_VALIDITYplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_BUILTINS_VERSION),
    [_CHECK_VALIDITYplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_DORV_VALUES),
    [_CHECK_VALIDITYplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_CHECK_VALIDITYplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_GLOBALS_VERSION),
    [_CHECK_VALIDITYplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_IS_FALSE_POP),
    [_CHECK_VALIDITYplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_IS_NONE_POP),
    [_CHECK_VALIDITYplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_IS_NOT_NONE_POP),
    [_CHECK_VALIDITYplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_IS_TRUE_POP),
    [_CHECK_VALIDITYplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_KEYS_VERSION),
    [_CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_LIST),
    [_CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_CHECK_VALIDITYplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_GUARD_TYPE_VERSION),
    [_CHECK_VALIDITYplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_CHECK_VALIDITYplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_INIT_CALL_PY_EXACT_ARGS),
    [_CHECK_VALIDITYplus_INSERT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_INSERT),
    [_CHECK_VALIDITYplus_IS_NONE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_IS_NONE),
    [_CHECK_VALIDITYplus_IS_OP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_IS_OP),
    [_CHECK_VALIDITYplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_ITER_CHECK_LIST),
    [_CHECK_VALIDITYplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_ITER_CHECK_RANGE),
    [_CHECK_VALIDITYplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_ITER_CHECK_TUPLE),
    [_CHECK_VALIDITYplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_ITER_NEXT_LIST),
    [_CHECK_VALIDITYplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_ITER_NEXT_RANGE),
    [_CHECK_VALIDITYplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_ITER_NEXT_TUPLE),
    [_CHECK_VALIDITYplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_JUMP_TO_TOP),
    [_CHECK_VALIDITYplus_LIST_APPEND] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LIST_APPEND),
    [_CHECK_VALIDITYplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LIST_EXTEND),
    [_CHECK_VALIDITYplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_ASSERTION_ERROR),
    [_CHECK_VALIDITYplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_ATTR),
    [_CHECK_VALIDITYplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_ATTR_CLASS),
    [_CHECK_VALIDITYplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_ATTR_INSTANCE_VALUE),
    [_CHECK_VALIDITYplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_CHECK_VALIDITYplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_ATTR_METHOD_NO_DICT),
    [_CHECK_VALIDITYplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_CHECK_VALIDITYplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_ATTR_MODULE),
    [_CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_CHECK_VALIDITYplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_ATTR_SLOT),
    [_CHECK_VALIDITYplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_ATTR_WITH_HINT),
    [_CHECK_VALIDITYplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_BUILD_CLASS),
    [_CHECK_VALIDITYplus_LOAD_CONST] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_CONST),
    [_CHECK_VALIDITYplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_DEREF),
    [_CHECK_VALIDITYplus_LOAD_FAST] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_FAST),
    [_CHECK_VALIDITYplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_FAST_AND_CLEAR),
    [_CHECK_VALIDITYplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_FAST_CHECK),
    [_CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_DEREF),
    [_CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_CHECK_VALIDITYplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_GLOBAL),
    [_CHECK_VALIDITYplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_GLOBAL_BUILTINS),
    [_CHECK_VALIDITYplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_GLOBAL_MODULE),
    [_CHECK_VALIDITYplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_LOCALS),
    [_CHECK_VALIDITYplus_LOAD_NAME] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_NAME),
    [_CHECK_VALIDITYplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_SUPER_ATTR_ATTR),
    [_CHECK_VALIDITYplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_LOAD_SUPER_ATTR_METHOD),
    [_CHECK_VALIDITYplus_MAKE_CELL] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_MAKE_CELL),
    [_CHECK_VALIDITYplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_MAKE_FUNCTION),
    [_CHECK_VALIDITYplus_MAP_ADD] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_MAP_ADD),
    [_CHECK_VALIDITYplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_MATCH_CLASS),
    [_CHECK_VALIDITYplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_MATCH_KEYS),
    [_CHECK_VALIDITYplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_MATCH_MAPPING),
    [_CHECK_VALIDITYplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_MATCH_SEQUENCE),
    [_CHECK_VALIDITYplus_NOP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_NOP),
    [_CHECK_VALIDITYplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_POP_EXCEPT),
    [_CHECK_VALIDITYplus_POP_FRAME] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_POP_FRAME),
    [_CHECK_VALIDITYplus_POP_TOP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_POP_TOP),
    [_CHECK_VALIDITYplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_PUSH_EXC_INFO),
    [_CHECK_VALIDITYplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_PUSH_FRAME),
    [_CHECK_VALIDITYplus_PUSH_NULL] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_PUSH_NULL),
    [_CHECK_VALIDITYplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_RESUME_CHECK),
    [_CHECK_VALIDITYplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_SAVE_RETURN_OFFSET),
    [_CHECK_VALIDITYplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_SETUP_ANNOTATIONS),
    [_CHECK_VALIDITYplus_SET_ADD] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_SET_ADD),
    [_CHECK_VALIDITYplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_SET_FUNCTION_ATTRIBUTE),
    [_CHECK_VALIDITYplus_SET_IP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_SET_IP),
    [_CHECK_VALIDITYplus_SET_UPDATE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_SET_UPDATE),
    [_CHECK_VALIDITYplus_STORE_ATTR] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_STORE_ATTR),
    [_CHECK_VALIDITYplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_STORE_ATTR_INSTANCE_VALUE),
    [_CHECK_VALIDITYplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_STORE_ATTR_SLOT),
    [_CHECK_VALIDITYplus_STORE_DEREF] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_STORE_DEREF),
    [_CHECK_VALIDITYplus_STORE_FAST] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_STORE_FAST),
    [_CHECK_VALIDITYplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_STORE_GLOBAL),
    [_CHECK_VALIDITYplus_STORE_NAME] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_STORE_NAME),
    [_CHECK_VALIDITYplus_STORE_SLICE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_STORE_SLICE),
    [_CHECK_VALIDITYplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_STORE_SUBSCR),
    [_CHECK_VALIDITYplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_STORE_SUBSCR_DICT),
    [_CHECK_VALIDITYplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_STORE_SUBSCR_LIST_INT),
    [_CHECK_VALIDITYplus_SWAP] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_SWAP),
    [_CHECK_VALIDITYplus_TO_BOOL] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_TO_BOOL),
    [_CHECK_VALIDITYplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_TO_BOOL_ALWAYS_TRUE),
    [_CHECK_VALIDITYplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_TO_BOOL_BOOL),
    [_CHECK_VALIDITYplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_TO_BOOL_INT),
    [_CHECK_VALIDITYplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_TO_BOOL_LIST),
    [_CHECK_VALIDITYplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_TO_BOOL_NONE),
    [_CHECK_VALIDITYplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_TO_BOOL_STR),
    [_CHECK_VALIDITYplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_UNARY_INVERT),
    [_CHECK_VALIDITYplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_UNARY_NEGATIVE),
    [_CHECK_VALIDITYplus_UNARY_NOT] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_UNARY_NOT),
    [_CHECK_VALIDITYplus_UNPACK_EX] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_UNPACK_EX),
    [_CHECK_VALIDITYplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_UNPACK_SEQUENCE),
    [_CHECK_VALIDITYplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_UNPACK_SEQUENCE_LIST),
    [_CHECK_VALIDITYplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_UNPACK_SEQUENCE_TUPLE),
    [_CHECK_VALIDITYplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_CHECK_VALIDITYplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_CHECK_VALIDITYplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
