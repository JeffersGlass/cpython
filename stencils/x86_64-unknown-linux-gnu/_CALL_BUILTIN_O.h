// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _CALL_BUILTIN_Oplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BEFORE_ASYNC_WITH.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 50                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f1                      movslq  %ecx, %r14
// 63: 4f 8b 24 f7                   movq    (%r15,%r14,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 31                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 26                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 14 24                   movq    %rdx, (%rsp)
// 96: 7e 48                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 98: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 9c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a0: 75 7c                         jne     0x11e <_JIT_ENTRY+0x11e>
// a2: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a7: eb 77                         jmp     0x120 <_JIT_ENTRY+0x120>
// a9: 49 29 df                      subq    %rbx, %r15
// ac: 49 83 c7 b8                   addq    $-0x48, %r15
// b0: 49 c1 ef 03                   shrq    $0x3, %r15
// b4: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// b8: 48 8b 03                      movq    (%rbx), %rax
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _JIT_TARGET
// c5: 89 c9                         movl    %ecx, %ecx
// c7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d1: 48 83 c4 18                   addq    $0x18, %rsp
// d5: 5b                            popq    %rbx
// d6: 41 5c                         popq    %r12
// d8: 41 5d                         popq    %r13
// da: 41 5e                         popq    %r14
// dc: 41 5f                         popq    %r15
// de: 5d                            popq    %rbp
// df: c3                            retq
// e0: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// e5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e7:  R_X86_64_64  .rodata.str1.1+0xe9
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_CheckRecursiveCall
// f9: 48 89 d7                      movq    %rdx, %rdi
// fc: ff d0                         callq   *%rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 74 08                         je      0x10a <_JIT_ENTRY+0x10a>
// 102: 4d 89 fc                      movq    %r15, %r12
// 105: e9 20 02 00 00                jmp     0x32a <_JIT_ENTRY+0x32a>
// 10a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10f: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 114: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 118: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11c: 74 84                         je      0xa2 <_JIT_ENTRY+0xa2>
// 11e: 31 ff                         xorl    %edi, %edi
// 120: 48 89 ee                      movq    %rbp, %rsi
// 123: 41 ff d0                      callq   *%r8
// 126: 48 8b 3c 24                   movq    (%rsp), %rdi
// 12a: ff 47 2c                      incl    0x2c(%rdi)
// 12d: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 132: 48 8b 45 00                   movq    (%rbp), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 26                         jg      0x161 <_JIT_ENTRY+0x161>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 154: 48 89 ea                      movq    %rbp, %rdx
// 157: ff d0                         callq   *%rax
// 159: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15d: 48 8b 45 00                   movq    (%rbp), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 29                         js      0x18e <_JIT_ENTRY+0x18e>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 48 8b 3c 24                   movq    (%rsp), %rdi
// 175: 48 ff 4d 00                   decq    (%rbp)
// 179: 75 13                         jne     0x18e <_JIT_ENTRY+0x18e>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: 48 89 ef                      movq    %rbp, %rdi
// 188: ff d0                         callq   *%rax
// 18a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18e: 49 8b 04 24                   movq    (%r12), %rax
// 192: 48 85 c0                      testq   %rax, %rax
// 195: 7f 26                         jg      0x1bd <_JIT_ENTRY+0x1bd>
// 197: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000199:  R_X86_64_64  .rodata.str1.1
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NegativeRefcount
// 1ab: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b0: 4c 89 e2                      movq    %r12, %rdx
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b9: 49 8b 04 24                   movq    (%r12), %rax
// 1bd: 85 c0                         testl   %eax, %eax
// 1bf: 78 29                         js      0x1ea <_JIT_ENTRY+0x1ea>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cb: ff d0                         callq   *%rax
// 1cd: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d1: 49 ff 0c 24                   decq    (%r12)
// 1d5: 75 13                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_Dealloc
// 1e1: 4c 89 e7                      movq    %r12, %rdi
// 1e4: ff d0                         callq   *%rax
// 1e6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ea: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 1ee: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1f3: 48 85 c9                      testq   %rcx, %rcx
// 1f6: 0f 84 2b 01 00 00             je      0x327 <_JIT_ENTRY+0x327>
// 1fc: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 200: 48 89 08                      movq    %rcx, (%rax)
// 203: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 207: 48 8b 00                      movq    (%rax), %rax
// 20a: 84 c0                         testb   %al, %al
// 20c: 74 14                         je      0x222 <_JIT_ENTRY+0x222>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_HandlePending
// 218: ff d0                         callq   *%rax
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 0f 85 08 01 00 00             jne     0x32a <_JIT_ENTRY+0x32a>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _JIT_OPARG
// 22c: f7 d0                         notl    %eax
// 22e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 233: 48 98                         cltq
// 235: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 23a: 49 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %rbp
// 23f: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000241:  R_X86_64_64  _PyObject_LookupSpecial
// 249: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000024b:  R_X86_64_64  _PyRuntime
// 253: 49 8d b5 68 a6 00 00          leaq    0xa668(%r13), %rsi
// 25a: 48 89 ef                      movq    %rbp, %rdi
// 25d: 41 ff d6                      callq   *%r14
// 260: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 265: 48 85 c0                      testq   %rax, %rax
// 268: 0f 84 d2 00 00 00             je      0x340 <_JIT_ENTRY+0x340>
// 26e: 49 81 c5 a0 a6 00 00          addq    $0xa6a0, %r13           # imm = 0xA6A0
// 275: 48 89 ef                      movq    %rbp, %rdi
// 278: 4c 89 ee                      movq    %r13, %rsi
// 27b: 41 ff d6                      callq   *%r14
// 27e: 48 85 c0                      testq   %rax, %rax
// 281: 0f 84 bd 01 00 00             je      0x444 <_JIT_ENTRY+0x444>
// 287: 49 89 c5                      movq    %rax, %r13
// 28a: 48 8b 45 00                   movq    (%rbp), %rax
// 28e: 48 85 c0                      testq   %rax, %rax
// 291: 7f 22                         jg      0x2b5 <_JIT_ENTRY+0x2b5>
// 293: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000295:  R_X86_64_64  .rodata.str1.1
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_NegativeRefcount
// 2a7: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 2ac: 48 89 ea                      movq    %rbp, %rdx
// 2af: ff d0                         callq   *%rax
// 2b1: 48 8b 45 00                   movq    (%rbp), %rax
// 2b5: 85 c0                         testl   %eax, %eax
// 2b7: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 2bc: 78 21                         js      0x2df <_JIT_ENTRY+0x2df>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c8: ff d0                         callq   *%rax
// 2ca: 48 ff 4d 00                   decq    (%rbp)
// 2ce: 75 0f                         jne     0x2df <_JIT_ENTRY+0x2df>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_Dealloc
// 2da: 48 89 ef                      movq    %rbp, %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: 49 8b 46 08                   movq    0x8(%r14), %rax
// 2e3: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 2ea: 0f 84 94 00 00 00             je      0x384 <_JIT_ENTRY+0x384>
// 2f0: 48 8b 40 38                   movq    0x38(%rax), %rax
// 2f4: 49 8b 04 06                   movq    (%r14,%rax), %rax
// 2f8: 48 85 c0                      testq   %rax, %rax
// 2fb: 0f 84 83 00 00 00             je      0x384 <_JIT_ENTRY+0x384>
// 301: 4c 89 f7                      movq    %r14, %rdi
// 304: 31 f6                         xorl    %esi, %esi
// 306: 31 d2                         xorl    %edx, %edx
// 308: 31 c9                         xorl    %ecx, %ecx
// 30a: ff d0                         callq   *%rax
// 30c: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000030e:  R_X86_64_64  _Py_CheckFunctionResult
// 316: 48 8b 3c 24                   movq    (%rsp), %rdi
// 31a: 4c 89 f6                      movq    %r14, %rsi
// 31d: 48 89 c2                      movq    %rax, %rdx
// 320: 31 c9                         xorl    %ecx, %ecx
// 322: 41 ff d0                      callq   *%r8
// 325: eb 77                         jmp     0x39e <_JIT_ENTRY+0x39e>
// 327: 49 89 c4                      movq    %rax, %r12
// 32a: 49 29 dc                      subq    %rbx, %r12
// 32d: 49 83 c4 b8                   addq    $-0x48, %r12
// 331: 49 c1 ec 03                   shrq    $0x3, %r12
// 335: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 339: 31 c0                         xorl    %eax, %eax
// 33b: e9 91 fd ff ff                jmp     0xd1 <_JIT_ENTRY+0xd1>
// 340: 48 8b 3c 24                   movq    (%rsp), %rdi
// 344: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 348: 48 85 c0                      testq   %rax, %rax
// 34b: 74 07                         je      0x354 <_JIT_ENTRY+0x354>
// 34d: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 352: 75 d6                         jne     0x32a <_JIT_ENTRY+0x32a>
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  PyExc_TypeError
// 35e: 48 8b 30                      movq    (%rax), %rsi
// 361: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 365: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 369: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000036b:  R_X86_64_64  .rodata.str1.1+0x39
// 373: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000375:  R_X86_64_64  _PyErr_Format
// 37d: 31 c0                         xorl    %eax, %eax
// 37f: 41 ff d0                      callq   *%r8
// 382: eb a6                         jmp     0x32a <_JIT_ENTRY+0x32a>
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  _PyObject_MakeTpCall
// 38e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 392: 4c 89 f6                      movq    %r14, %rsi
// 395: 31 d2                         xorl    %edx, %edx
// 397: 31 c9                         xorl    %ecx, %ecx
// 399: 45 31 c0                      xorl    %r8d, %r8d
// 39c: ff d0                         callq   *%rax
// 39e: 48 89 c5                      movq    %rax, %rbp
// 3a1: 49 8b 06                      movq    (%r14), %rax
// 3a4: 48 85 c0                      testq   %rax, %rax
// 3a7: 48 8b 14 24                   movq    (%rsp), %rdx
// 3ab: 7f 25                         jg      0x3d2 <_JIT_ENTRY+0x3d2>
// 3ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003af:  R_X86_64_64  .rodata.str1.1
// 3b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b9:  R_X86_64_64  _Py_NegativeRefcount
// 3c1: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 3c6: 4c 89 f2                      movq    %r14, %rdx
// 3c9: ff d0                         callq   *%rax
// 3cb: 48 8b 14 24                   movq    (%rsp), %rdx
// 3cf: 49 8b 06                      movq    (%r14), %rax
// 3d2: 85 c0                         testl   %eax, %eax
// 3d4: 78 28                         js      0x3fe <_JIT_ENTRY+0x3fe>
// 3d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3e0: ff d0                         callq   *%rax
// 3e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 3e6: 49 ff 0e                      decq    (%r14)
// 3e9: 75 13                         jne     0x3fe <_JIT_ENTRY+0x3fe>
// 3eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ed:  R_X86_64_64  _Py_Dealloc
// 3f5: 4c 89 f7                      movq    %r14, %rdi
// 3f8: ff d0                         callq   *%rax
// 3fa: 48 8b 14 24                   movq    (%rsp), %rdx
// 3fe: 48 85 ed                      testq   %rbp, %rbp
// 401: 74 7b                         je      0x47e <_JIT_ENTRY+0x47e>
// 403: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000405:  R_X86_64_64  _JIT_OPARG
// 40d: f7 d0                         notl    %eax
// 40f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 414: 48 98                         cltq
// 416: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 41b: 49 89 2c c7                   movq    %rbp, (%r15,%rax,8)
// 41f: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 423: 48 83 c6 08                   addq    $0x8, %rsi
// 427: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000429:  R_X86_64_64  _JIT_CONTINUE
// 431: 48 89 df                      movq    %rbx, %rdi
// 434: 48 83 c4 18                   addq    $0x18, %rsp
// 438: 5b                            popq    %rbx
// 439: 41 5c                         popq    %r12
// 43b: 41 5d                         popq    %r13
// 43d: 41 5e                         popq    %r14
// 43f: 41 5f                         popq    %r15
// 441: 5d                            popq    %rbp
// 442: ff e0                         jmpq    *%rax
// 444: 48 8b 3c 24                   movq    (%rsp), %rdi
// 448: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 44c: 48 85 c0                      testq   %rax, %rax
// 44f: 0f 84 91 00 00 00             je      0x4e6 <_JIT_ENTRY+0x4e6>
// 455: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 45a: 0f 84 86 00 00 00             je      0x4e6 <_JIT_ENTRY+0x4e6>
// 460: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 465: 49 8b 06                      movq    (%r14), %rax
// 468: 48 85 c0                      testq   %rax, %rax
// 46b: 0f 8e b4 00 00 00             jle     0x525 <_JIT_ENTRY+0x525>
// 471: 85 c0                         testl   %eax, %eax
// 473: 0f 88 b1 fe ff ff             js      0x32a <_JIT_ENTRY+0x32a>
// 479: e9 d0 00 00 00                jmp     0x54e <_JIT_ENTRY+0x54e>
// 47e: 49 8b 45 00                   movq    (%r13), %rax
// 482: 48 85 c0                      testq   %rax, %rax
// 485: 7f 22                         jg      0x4a9 <_JIT_ENTRY+0x4a9>
// 487: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000489:  R_X86_64_64  .rodata.str1.1
// 491: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000493:  R_X86_64_64  _Py_NegativeRefcount
// 49b: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 4a0: 4c 89 ea                      movq    %r13, %rdx
// 4a3: ff d0                         callq   *%rax
// 4a5: 49 8b 45 00                   movq    (%r13), %rax
// 4a9: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 4ae: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 4b2: 49 83 c4 f8                   addq    $-0x8, %r12
// 4b6: 85 c0                         testl   %eax, %eax
// 4b8: 0f 88 6c fe ff ff             js      0x32a <_JIT_ENTRY+0x32a>
// 4be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4c8: ff d0                         callq   *%rax
// 4ca: 49 ff 4d 00                   decq    (%r13)
// 4ce: 0f 85 56 fe ff ff             jne     0x32a <_JIT_ENTRY+0x32a>
// 4d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004d6:  R_X86_64_64  _Py_Dealloc
// 4de: 4c 89 ef                      movq    %r13, %rdi
// 4e1: e9 8a 00 00 00                jmp     0x570 <_JIT_ENTRY+0x570>
// 4e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004e8:  R_X86_64_64  PyExc_TypeError
// 4f0: 48 8b 30                      movq    (%rax), %rsi
// 4f3: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 4f7: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 4fb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000004fd:  R_X86_64_64  .rodata.str1.1+0x84
// 505: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000507:  R_X86_64_64  _PyErr_Format
// 50f: 31 c0                         xorl    %eax, %eax
// 511: 41 ff d0                      callq   *%r8
// 514: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 519: 49 8b 06                      movq    (%r14), %rax
// 51c: 48 85 c0                      testq   %rax, %rax
// 51f: 0f 8f 4c ff ff ff             jg      0x471 <_JIT_ENTRY+0x471>
// 525: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000527:  R_X86_64_64  .rodata.str1.1
// 52f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000531:  R_X86_64_64  _Py_NegativeRefcount
// 539: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 53e: 4c 89 f2                      movq    %r14, %rdx
// 541: ff d0                         callq   *%rax
// 543: 49 8b 06                      movq    (%r14), %rax
// 546: 85 c0                         testl   %eax, %eax
// 548: 0f 88 dc fd ff ff             js      0x32a <_JIT_ENTRY+0x32a>
// 54e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000550:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 558: ff d0                         callq   *%rax
// 55a: 49 ff 0e                      decq    (%r14)
// 55d: 0f 85 c7 fd ff ff             jne     0x32a <_JIT_ENTRY+0x32a>
// 563: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000565:  R_X86_64_64  _Py_Dealloc
// 56d: 4c 89 f7                      movq    %r14, %rdi
// 570: ff d0                         callq   *%rax
// 572: e9 b3 fd ff ff                jmp     0x32a <_JIT_ENTRY+0x32a>
// 577: 
static const unsigned char _CALL_BUILTIN_Oplus_BEFORE_ASYNC_WITH_code_body[1400] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x50, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf1, 0x4f, 0x8b, 0x24, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x31, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x26, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7c, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x77, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfc, 0xe9, 0x20, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x84, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x2b, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x6c, 0xc7, 0xf8, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x68, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x41, 0xff, 0xd6, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa0, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xbd, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x46, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xeb, 0x77, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x91, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xeb, 0xa6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x14, 0x24, 0x7f, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0e, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xed, 0x74, 0x7b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x49, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x91, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xb4, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xb1, 0xfe, 0xff, 0xff, 0xe9, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xcf, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x0f, 0x88, 0x6c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x56, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x4c, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x0f, 0x88, 0xdc, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0xc7, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0xb3, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BEFORE_ASYNC_WITH_code_holes[44] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe9},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x36b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x375, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x3af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x405, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x429, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x489, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x493, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x4c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x4e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x4fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x84},
    {0x507, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x527, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x531, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x550, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x565, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00 while calling a Python object\x00"
// 108: 
static const unsigned char _CALL_BUILTIN_Oplus_BEFORE_ASYNC_WITH_data_body[265] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BEFORE_ASYNC_WITH_data_holes[1];

// _CALL_BUILTIN_Oplus_BEFORE_WITH
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BEFORE_WITH.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 50                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f1                      movslq  %ecx, %r14
// 63: 4f 8b 24 f7                   movq    (%r15,%r14,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 31                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 26                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 14 24                   movq    %rdx, (%rsp)
// 96: 7e 48                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 98: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 9c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a0: 75 7c                         jne     0x11e <_JIT_ENTRY+0x11e>
// a2: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a7: eb 77                         jmp     0x120 <_JIT_ENTRY+0x120>
// a9: 49 29 df                      subq    %rbx, %r15
// ac: 49 83 c7 b8                   addq    $-0x48, %r15
// b0: 49 c1 ef 03                   shrq    $0x3, %r15
// b4: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// b8: 48 8b 03                      movq    (%rbx), %rax
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _JIT_TARGET
// c5: 89 c9                         movl    %ecx, %ecx
// c7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d1: 48 83 c4 18                   addq    $0x18, %rsp
// d5: 5b                            popq    %rbx
// d6: 41 5c                         popq    %r12
// d8: 41 5d                         popq    %r13
// da: 41 5e                         popq    %r14
// dc: 41 5f                         popq    %r15
// de: 5d                            popq    %rbp
// df: c3                            retq
// e0: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// e5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e7:  R_X86_64_64  .rodata.str1.1+0xce
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_CheckRecursiveCall
// f9: 48 89 d7                      movq    %rdx, %rdi
// fc: ff d0                         callq   *%rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 74 08                         je      0x10a <_JIT_ENTRY+0x10a>
// 102: 4d 89 fc                      movq    %r15, %r12
// 105: e9 20 02 00 00                jmp     0x32a <_JIT_ENTRY+0x32a>
// 10a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10f: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 114: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 118: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11c: 74 84                         je      0xa2 <_JIT_ENTRY+0xa2>
// 11e: 31 ff                         xorl    %edi, %edi
// 120: 48 89 ee                      movq    %rbp, %rsi
// 123: 41 ff d0                      callq   *%r8
// 126: 48 8b 3c 24                   movq    (%rsp), %rdi
// 12a: ff 47 2c                      incl    0x2c(%rdi)
// 12d: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 132: 48 8b 45 00                   movq    (%rbp), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 26                         jg      0x161 <_JIT_ENTRY+0x161>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 154: 48 89 ea                      movq    %rbp, %rdx
// 157: ff d0                         callq   *%rax
// 159: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15d: 48 8b 45 00                   movq    (%rbp), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 29                         js      0x18e <_JIT_ENTRY+0x18e>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 48 8b 3c 24                   movq    (%rsp), %rdi
// 175: 48 ff 4d 00                   decq    (%rbp)
// 179: 75 13                         jne     0x18e <_JIT_ENTRY+0x18e>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: 48 89 ef                      movq    %rbp, %rdi
// 188: ff d0                         callq   *%rax
// 18a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18e: 49 8b 04 24                   movq    (%r12), %rax
// 192: 48 85 c0                      testq   %rax, %rax
// 195: 7f 26                         jg      0x1bd <_JIT_ENTRY+0x1bd>
// 197: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000199:  R_X86_64_64  .rodata.str1.1
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NegativeRefcount
// 1ab: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b0: 4c 89 e2                      movq    %r12, %rdx
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b9: 49 8b 04 24                   movq    (%r12), %rax
// 1bd: 85 c0                         testl   %eax, %eax
// 1bf: 78 29                         js      0x1ea <_JIT_ENTRY+0x1ea>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cb: ff d0                         callq   *%rax
// 1cd: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d1: 49 ff 0c 24                   decq    (%r12)
// 1d5: 75 13                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_Dealloc
// 1e1: 4c 89 e7                      movq    %r12, %rdi
// 1e4: ff d0                         callq   *%rax
// 1e6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ea: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 1ee: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1f3: 48 85 c9                      testq   %rcx, %rcx
// 1f6: 0f 84 2b 01 00 00             je      0x327 <_JIT_ENTRY+0x327>
// 1fc: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 200: 48 89 08                      movq    %rcx, (%rax)
// 203: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 207: 48 8b 00                      movq    (%rax), %rax
// 20a: 84 c0                         testb   %al, %al
// 20c: 74 14                         je      0x222 <_JIT_ENTRY+0x222>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_HandlePending
// 218: ff d0                         callq   *%rax
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 0f 85 08 01 00 00             jne     0x32a <_JIT_ENTRY+0x32a>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _JIT_OPARG
// 22c: f7 d0                         notl    %eax
// 22e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 233: 48 98                         cltq
// 235: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 23a: 49 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %rbp
// 23f: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000241:  R_X86_64_64  _PyObject_LookupSpecial
// 249: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000024b:  R_X86_64_64  _PyRuntime
// 253: 49 8d b5 50 ae 00 00          leaq    0xae50(%r13), %rsi
// 25a: 48 89 ef                      movq    %rbp, %rdi
// 25d: 41 ff d6                      callq   *%r14
// 260: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 265: 48 85 c0                      testq   %rax, %rax
// 268: 0f 84 d2 00 00 00             je      0x340 <_JIT_ENTRY+0x340>
// 26e: 49 81 c5 b8 ae 00 00          addq    $0xaeb8, %r13           # imm = 0xAEB8
// 275: 48 89 ef                      movq    %rbp, %rdi
// 278: 4c 89 ee                      movq    %r13, %rsi
// 27b: 41 ff d6                      callq   *%r14
// 27e: 48 85 c0                      testq   %rax, %rax
// 281: 0f 84 bd 01 00 00             je      0x444 <_JIT_ENTRY+0x444>
// 287: 49 89 c5                      movq    %rax, %r13
// 28a: 48 8b 45 00                   movq    (%rbp), %rax
// 28e: 48 85 c0                      testq   %rax, %rax
// 291: 7f 22                         jg      0x2b5 <_JIT_ENTRY+0x2b5>
// 293: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000295:  R_X86_64_64  .rodata.str1.1
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_NegativeRefcount
// 2a7: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 2ac: 48 89 ea                      movq    %rbp, %rdx
// 2af: ff d0                         callq   *%rax
// 2b1: 48 8b 45 00                   movq    (%rbp), %rax
// 2b5: 85 c0                         testl   %eax, %eax
// 2b7: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 2bc: 78 21                         js      0x2df <_JIT_ENTRY+0x2df>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c8: ff d0                         callq   *%rax
// 2ca: 48 ff 4d 00                   decq    (%rbp)
// 2ce: 75 0f                         jne     0x2df <_JIT_ENTRY+0x2df>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_Dealloc
// 2da: 48 89 ef                      movq    %rbp, %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: 49 8b 46 08                   movq    0x8(%r14), %rax
// 2e3: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 2ea: 0f 84 94 00 00 00             je      0x384 <_JIT_ENTRY+0x384>
// 2f0: 48 8b 40 38                   movq    0x38(%rax), %rax
// 2f4: 49 8b 04 06                   movq    (%r14,%rax), %rax
// 2f8: 48 85 c0                      testq   %rax, %rax
// 2fb: 0f 84 83 00 00 00             je      0x384 <_JIT_ENTRY+0x384>
// 301: 4c 89 f7                      movq    %r14, %rdi
// 304: 31 f6                         xorl    %esi, %esi
// 306: 31 d2                         xorl    %edx, %edx
// 308: 31 c9                         xorl    %ecx, %ecx
// 30a: ff d0                         callq   *%rax
// 30c: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000030e:  R_X86_64_64  _Py_CheckFunctionResult
// 316: 48 8b 3c 24                   movq    (%rsp), %rdi
// 31a: 4c 89 f6                      movq    %r14, %rsi
// 31d: 48 89 c2                      movq    %rax, %rdx
// 320: 31 c9                         xorl    %ecx, %ecx
// 322: 41 ff d0                      callq   *%r8
// 325: eb 77                         jmp     0x39e <_JIT_ENTRY+0x39e>
// 327: 49 89 c4                      movq    %rax, %r12
// 32a: 49 29 dc                      subq    %rbx, %r12
// 32d: 49 83 c4 b8                   addq    $-0x48, %r12
// 331: 49 c1 ec 03                   shrq    $0x3, %r12
// 335: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 339: 31 c0                         xorl    %eax, %eax
// 33b: e9 91 fd ff ff                jmp     0xd1 <_JIT_ENTRY+0xd1>
// 340: 48 8b 3c 24                   movq    (%rsp), %rdi
// 344: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 348: 48 85 c0                      testq   %rax, %rax
// 34b: 74 07                         je      0x354 <_JIT_ENTRY+0x354>
// 34d: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 352: 75 d6                         jne     0x32a <_JIT_ENTRY+0x32a>
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  PyExc_TypeError
// 35e: 48 8b 30                      movq    (%rax), %rsi
// 361: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 365: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 369: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000036b:  R_X86_64_64  .rodata.str1.1+0x39
// 373: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000375:  R_X86_64_64  _PyErr_Format
// 37d: 31 c0                         xorl    %eax, %eax
// 37f: 41 ff d0                      callq   *%r8
// 382: eb a6                         jmp     0x32a <_JIT_ENTRY+0x32a>
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  _PyObject_MakeTpCall
// 38e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 392: 4c 89 f6                      movq    %r14, %rsi
// 395: 31 d2                         xorl    %edx, %edx
// 397: 31 c9                         xorl    %ecx, %ecx
// 399: 45 31 c0                      xorl    %r8d, %r8d
// 39c: ff d0                         callq   *%rax
// 39e: 48 89 c5                      movq    %rax, %rbp
// 3a1: 49 8b 06                      movq    (%r14), %rax
// 3a4: 48 85 c0                      testq   %rax, %rax
// 3a7: 48 8b 14 24                   movq    (%rsp), %rdx
// 3ab: 7f 25                         jg      0x3d2 <_JIT_ENTRY+0x3d2>
// 3ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003af:  R_X86_64_64  .rodata.str1.1
// 3b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b9:  R_X86_64_64  _Py_NegativeRefcount
// 3c1: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 3c6: 4c 89 f2                      movq    %r14, %rdx
// 3c9: ff d0                         callq   *%rax
// 3cb: 48 8b 14 24                   movq    (%rsp), %rdx
// 3cf: 49 8b 06                      movq    (%r14), %rax
// 3d2: 85 c0                         testl   %eax, %eax
// 3d4: 78 28                         js      0x3fe <_JIT_ENTRY+0x3fe>
// 3d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3e0: ff d0                         callq   *%rax
// 3e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 3e6: 49 ff 0e                      decq    (%r14)
// 3e9: 75 13                         jne     0x3fe <_JIT_ENTRY+0x3fe>
// 3eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ed:  R_X86_64_64  _Py_Dealloc
// 3f5: 4c 89 f7                      movq    %r14, %rdi
// 3f8: ff d0                         callq   *%rax
// 3fa: 48 8b 14 24                   movq    (%rsp), %rdx
// 3fe: 48 85 ed                      testq   %rbp, %rbp
// 401: 74 7b                         je      0x47e <_JIT_ENTRY+0x47e>
// 403: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000405:  R_X86_64_64  _JIT_OPARG
// 40d: f7 d0                         notl    %eax
// 40f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 414: 48 98                         cltq
// 416: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 41b: 49 89 2c c7                   movq    %rbp, (%r15,%rax,8)
// 41f: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 423: 48 83 c6 08                   addq    $0x8, %rsi
// 427: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000429:  R_X86_64_64  _JIT_CONTINUE
// 431: 48 89 df                      movq    %rbx, %rdi
// 434: 48 83 c4 18                   addq    $0x18, %rsp
// 438: 5b                            popq    %rbx
// 439: 41 5c                         popq    %r12
// 43b: 41 5d                         popq    %r13
// 43d: 41 5e                         popq    %r14
// 43f: 41 5f                         popq    %r15
// 441: 5d                            popq    %rbp
// 442: ff e0                         jmpq    *%rax
// 444: 48 8b 3c 24                   movq    (%rsp), %rdi
// 448: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 44c: 48 85 c0                      testq   %rax, %rax
// 44f: 0f 84 91 00 00 00             je      0x4e6 <_JIT_ENTRY+0x4e6>
// 455: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 45a: 0f 84 86 00 00 00             je      0x4e6 <_JIT_ENTRY+0x4e6>
// 460: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 465: 49 8b 06                      movq    (%r14), %rax
// 468: 48 85 c0                      testq   %rax, %rax
// 46b: 0f 8e b4 00 00 00             jle     0x525 <_JIT_ENTRY+0x525>
// 471: 85 c0                         testl   %eax, %eax
// 473: 0f 88 b1 fe ff ff             js      0x32a <_JIT_ENTRY+0x32a>
// 479: e9 d0 00 00 00                jmp     0x54e <_JIT_ENTRY+0x54e>
// 47e: 49 8b 45 00                   movq    (%r13), %rax
// 482: 48 85 c0                      testq   %rax, %rax
// 485: 7f 22                         jg      0x4a9 <_JIT_ENTRY+0x4a9>
// 487: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000489:  R_X86_64_64  .rodata.str1.1
// 491: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000493:  R_X86_64_64  _Py_NegativeRefcount
// 49b: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 4a0: 4c 89 ea                      movq    %r13, %rdx
// 4a3: ff d0                         callq   *%rax
// 4a5: 49 8b 45 00                   movq    (%r13), %rax
// 4a9: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 4ae: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 4b2: 49 83 c4 f8                   addq    $-0x8, %r12
// 4b6: 85 c0                         testl   %eax, %eax
// 4b8: 0f 88 6c fe ff ff             js      0x32a <_JIT_ENTRY+0x32a>
// 4be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4c8: ff d0                         callq   *%rax
// 4ca: 49 ff 4d 00                   decq    (%r13)
// 4ce: 0f 85 56 fe ff ff             jne     0x32a <_JIT_ENTRY+0x32a>
// 4d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004d6:  R_X86_64_64  _Py_Dealloc
// 4de: 4c 89 ef                      movq    %r13, %rdi
// 4e1: e9 8a 00 00 00                jmp     0x570 <_JIT_ENTRY+0x570>
// 4e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004e8:  R_X86_64_64  PyExc_TypeError
// 4f0: 48 8b 30                      movq    (%rax), %rsi
// 4f3: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 4f7: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 4fb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000004fd:  R_X86_64_64  .rodata.str1.1+0x77
// 505: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000507:  R_X86_64_64  _PyErr_Format
// 50f: 31 c0                         xorl    %eax, %eax
// 511: 41 ff d0                      callq   *%r8
// 514: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 519: 49 8b 06                      movq    (%r14), %rax
// 51c: 48 85 c0                      testq   %rax, %rax
// 51f: 0f 8f 4c ff ff ff             jg      0x471 <_JIT_ENTRY+0x471>
// 525: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000527:  R_X86_64_64  .rodata.str1.1
// 52f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000531:  R_X86_64_64  _Py_NegativeRefcount
// 539: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 53e: 4c 89 f2                      movq    %r14, %rdx
// 541: ff d0                         callq   *%rax
// 543: 49 8b 06                      movq    (%r14), %rax
// 546: 85 c0                         testl   %eax, %eax
// 548: 0f 88 dc fd ff ff             js      0x32a <_JIT_ENTRY+0x32a>
// 54e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000550:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 558: ff d0                         callq   *%rax
// 55a: 49 ff 0e                      decq    (%r14)
// 55d: 0f 85 c7 fd ff ff             jne     0x32a <_JIT_ENTRY+0x32a>
// 563: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000565:  R_X86_64_64  _Py_Dealloc
// 56d: 4c 89 f7                      movq    %r14, %rdi
// 570: ff d0                         callq   *%rax
// 572: e9 b3 fd ff ff                jmp     0x32a <_JIT_ENTRY+0x32a>
// 577: 
static const unsigned char _CALL_BUILTIN_Oplus_BEFORE_WITH_code_body[1400] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x50, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf1, 0x4f, 0x8b, 0x24, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x31, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x26, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7c, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x77, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfc, 0xe9, 0x20, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x84, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x2b, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x6c, 0xc7, 0xf8, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x50, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x41, 0xff, 0xd6, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xb8, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xbd, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x46, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xeb, 0x77, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x91, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xeb, 0xa6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x14, 0x24, 0x7f, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0e, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xed, 0x74, 0x7b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x49, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x91, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xb4, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xb1, 0xfe, 0xff, 0xff, 0xe9, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xcf, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x0f, 0x88, 0x6c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x56, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x4c, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x0f, 0x88, 0xdc, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0xc7, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0xb3, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BEFORE_WITH_code_holes[44] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x36b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x375, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x3af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x405, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x429, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x489, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x493, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x4c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x4e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x4fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x77},
    {0x507, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x527, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x531, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x550, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x565, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00 while calling a Python object\x00"
// ed: 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_BEFORE_WITH_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BEFORE_WITH_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_OP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_OP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4c                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 0c 24                   movq    %rcx, (%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7a                         jne     0x122 <_JIT_ENTRY+0x122>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 75                         jmp     0x124 <_JIT_ENTRY+0x124>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 04 24                   movq    %r8, (%rsp)
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_CheckRecursiveCall
// fe: 48 89 d7                      movq    %rdx, %rdi
// 101: ff d0                         callq   *%rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 0f 85 3e 02 00 00             jne     0x349 <_JIT_ENTRY+0x349>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 04 24                   movq    (%rsp), %r8
// 114: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 118: 48 89 0c 24                   movq    %rcx, (%rsp)
// 11c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 120: 74 86                         je      0xa8 <_JIT_ENTRY+0xa8>
// 122: 31 ff                         xorl    %edi, %edi
// 124: 4c 8b 3c 24                   movq    (%rsp), %r15
// 128: 4c 89 fe                      movq    %r15, %rsi
// 12b: 41 ff d0                      callq   *%r8
// 12e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 133: ff 47 2c                      incl    0x2c(%rdi)
// 136: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13b: 49 8b 07                      movq    (%r15), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7f 2a                         jg      0x16d <_JIT_ENTRY+0x16d>
// 143: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 160: 4c 89 fa                      movq    %r15, %rdx
// 163: ff d0                         callq   *%rax
// 165: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16a: 49 8b 07                      movq    (%r15), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 2f                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 8b 04 24                   movq    (%rsp), %rax
// 186: 48 ff 08                      decq    (%rax)
// 189: 75 15                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 48 8b 3c 24                   movq    (%rsp), %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 27                         jg      0x1d0 <_JIT_ENTRY+0x1d0>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 2b                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 14                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 208: 4d 85 ff                      testq   %r15, %r15
// 20b: 0f 84 35 01 00 00             je      0x346 <_JIT_ENTRY+0x346>
// 211: 4c 89 38                      movq    %r15, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 19                         je      0x238 <_JIT_ENTRY+0x238>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 74 09                         je      0x238 <_JIT_ENTRY+0x238>
// 22f: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 233: e9 11 01 00 00                jmp     0x349 <_JIT_ENTRY+0x349>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_OPARG
// 242: 0f b7 c8                      movzwl  %ax, %ecx
// 245: f7 d0                         notl    %eax
// 247: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24c: 4c 63 e0                      movslq  %eax, %r12
// 24f: 4b 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %rbp
// 254: 4f 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %r13
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _PyEval_BinaryOps
// 263: 48 89 ef                      movq    %rbp, %rdi
// 266: 4c 89 ee                      movq    %r13, %rsi
// 269: ff 14 c8                      callq   *(%rax,%rcx,8)
// 26c: 48 89 04 24                   movq    %rax, (%rsp)
// 270: 48 8b 45 00                   movq    (%rbp), %rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 7f 22                         jg      0x29b <_JIT_ENTRY+0x29b>
// 279: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027b:  R_X86_64_64  .rodata.str1.1
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_NegativeRefcount
// 28d: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 292: 48 89 ea                      movq    %rbp, %rdx
// 295: ff d0                         callq   *%rax
// 297: 48 8b 45 00                   movq    (%rbp), %rax
// 29b: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000029d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a5: 85 c0                         testl   %eax, %eax
// 2a7: 78 18                         js      0x2c1 <_JIT_ENTRY+0x2c1>
// 2a9: 41 ff d7                      callq   *%r15
// 2ac: 48 ff 4d 00                   decq    (%rbp)
// 2b0: 75 0f                         jne     0x2c1 <_JIT_ENTRY+0x2c1>
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_Dealloc
// 2bc: 48 89 ef                      movq    %rbp, %rdi
// 2bf: ff d0                         callq   *%rax
// 2c1: 49 8b 45 00                   movq    (%r13), %rax
// 2c5: 48 85 c0                      testq   %rax, %rax
// 2c8: 7f 22                         jg      0x2ec <_JIT_ENTRY+0x2ec>
// 2ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cc:  R_X86_64_64  .rodata.str1.1
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _Py_NegativeRefcount
// 2de: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 2e3: 4c 89 ea                      movq    %r13, %rdx
// 2e6: ff d0                         callq   *%rax
// 2e8: 49 8b 45 00                   movq    (%r13), %rax
// 2ec: 85 c0                         testl   %eax, %eax
// 2ee: 78 18                         js      0x308 <_JIT_ENTRY+0x308>
// 2f0: 41 ff d7                      callq   *%r15
// 2f3: 49 ff 4d 00                   decq    (%r13)
// 2f7: 75 0f                         jne     0x308 <_JIT_ENTRY+0x308>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_Dealloc
// 303: 4c 89 ef                      movq    %r13, %rdi
// 306: ff d0                         callq   *%rax
// 308: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 30c: 48 83 c0 f0                   addq    $-0x10, %rax
// 310: 48 8b 0c 24                   movq    (%rsp), %rcx
// 314: 48 85 c9                      testq   %rcx, %rcx
// 317: 74 2d                         je      0x346 <_JIT_ENTRY+0x346>
// 319: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 31d: 48 83 c6 f8                   addq    $-0x8, %rsi
// 321: 48 89 08                      movq    %rcx, (%rax)
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _JIT_CONTINUE
// 32e: 48 89 df                      movq    %rbx, %rdi
// 331: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 336: 48 83 c4 18                   addq    $0x18, %rsp
// 33a: 5b                            popq    %rbx
// 33b: 41 5c                         popq    %r12
// 33d: 41 5d                         popq    %r13
// 33f: 41 5e                         popq    %r14
// 341: 41 5f                         popq    %r15
// 343: 5d                            popq    %rbp
// 344: ff e0                         jmpq    *%rax
// 346: 49 89 c6                      movq    %rax, %r14
// 349: 49 29 de                      subq    %rbx, %r14
// 34c: 49 83 c6 b8                   addq    $-0x48, %r14
// 350: 49 c1 ee 03                   shrq    $0x3, %r14
// 354: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 358: 31 c0                         xorl    %eax, %eax
// 35a: e9 78 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 35f: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_code_body[864] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4c, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x3e, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xee, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x35, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x11, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf0, 0x4f, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0x14, 0xc8, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x78, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_OP_ADD_FLOAT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 48                         jle     0xe1 <_JIT_ENTRY+0xe1>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 7c                         jne     0x11f <_JIT_ENTRY+0x11f>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 77                         jmp     0x121 <_JIT_ENTRY+0x121>
// aa: 49 29 de                      subq    %rbx, %r14
// ad: 49 83 c6 b8                   addq    $-0x48, %r14
// b1: 49 c1 ee 03                   shrq    $0x3, %r14
// b5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b9: 48 8b 03                      movq    (%rbx), %rax
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_TARGET
// c6: 89 c9                         movl    %ecx, %ecx
// c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d2: 48 83 c4 18                   addq    $0x18, %rsp
// d6: 5b                            popq    %rbx
// d7: 41 5c                         popq    %r12
// d9: 41 5d                         popq    %r13
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: 5d                            popq    %rbp
// e0: c3                            retq
// e1: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1+0x39
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_CheckRecursiveCall
// fa: 48 89 d7                      movq    %rdx, %rdi
// fd: ff d0                         callq   *%rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 74 08                         je      0x10b <_JIT_ENTRY+0x10b>
// 103: 4d 89 f5                      movq    %r14, %r13
// 106: e9 98 01 00 00                jmp     0x2a3 <_JIT_ENTRY+0x2a3>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 115: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 119: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11d: 74 84                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11f: 31 ff                         xorl    %edi, %edi
// 121: 48 89 ee                      movq    %rbp, %rsi
// 124: 41 ff d0                      callq   *%r8
// 127: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 12c: ff 42 2c                      incl    0x2c(%rdx)
// 12f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 134: 48 8b 45 00                   movq    (%rbp), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 27                         jg      0x164 <_JIT_ENTRY+0x164>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 156: 48 89 ea                      movq    %rbp, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 160: 48 8b 45 00                   movq    (%rbp), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 2b                         js      0x193 <_JIT_ENTRY+0x193>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 179: 48 ff 4d 00                   decq    (%rbp)
// 17d: 75 14                         jne     0x193 <_JIT_ENTRY+0x193>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 48 89 ef                      movq    %rbp, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 48 85 c0                      testq   %rax, %rax
// 19a: 7f 27                         jg      0x1c3 <_JIT_ENTRY+0x1c3>
// 19c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019e:  R_X86_64_64  .rodata.str1.1
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _Py_NegativeRefcount
// 1b0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b5: 4c 89 e2                      movq    %r12, %rdx
// 1b8: ff d0                         callq   *%rax
// 1ba: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1bf: 49 8b 04 24                   movq    (%r12), %rax
// 1c3: 85 c0                         testl   %eax, %eax
// 1c5: 78 2b                         js      0x1f2 <_JIT_ENTRY+0x1f2>
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d1: ff d0                         callq   *%rax
// 1d3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1d8: 49 ff 0c 24                   decq    (%r12)
// 1dc: 75 14                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_Dealloc
// 1e8: 4c 89 e7                      movq    %r12, %rdi
// 1eb: ff d0                         callq   *%rax
// 1ed: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1f2: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f6: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1fb: 48 85 c9                      testq   %rcx, %rcx
// 1fe: 0f 84 9c 00 00 00             je      0x2a0 <_JIT_ENTRY+0x2a0>
// 204: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 208: 48 89 08                      movq    %rcx, (%rax)
// 20b: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 20f: 48 8b 00                      movq    (%rax), %rax
// 212: 84 c0                         testb   %al, %al
// 214: 74 18                         je      0x22e <_JIT_ENTRY+0x22e>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_HandlePending
// 220: 48 89 d7                      movq    %rdx, %rdi
// 223: ff d0                         callq   *%rax
// 225: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 75 75                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_OPARG
// 238: f7 d0                         notl    %eax
// 23a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23f: 4c 63 f8                      movslq  %eax, %r15
// 242: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 247: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 24c: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 251: f2 41 0f 58 44 24 10          addsd   0x10(%r12), %xmm0
// 258: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 25d: 75 5a                         jne     0x2b9 <_JIT_ENTRY+0x2b9>
// 25f: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 264: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 26a: 0f 85 94 00 00 00             jne     0x304 <_JIT_ENTRY+0x304>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  PyInterpreterState_Get
// 27a: ff d0                         callq   *%rax
// 27c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 283: 49 ff 0c 24                   decq    (%r12)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _PyFloat_ExactDealloc
// 293: 4c 89 e7                      movq    %r12, %rdi
// 296: ff d0                         callq   *%rax
// 298: 49 89 ec                      movq    %rbp, %r12
// 29b: e9 09 01 00 00                jmp     0x3a9 <_JIT_ENTRY+0x3a9>
// 2a0: 49 89 c5                      movq    %rax, %r13
// 2a3: 49 29 dd                      subq    %rbx, %r13
// 2a6: 49 83 c5 b8                   addq    $-0x48, %r13
// 2aa: 49 c1 ed 03                   shrq    $0x3, %r13
// 2ae: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2b2: 31 c0                         xorl    %eax, %eax
// 2b4: e9 19 fe ff ff                jmp     0xd2 <_JIT_ENTRY+0xd2>
// 2b9: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 2be: 75 4c                         jne     0x30c <_JIT_ENTRY+0x30c>
// 2c0: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 2c7: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 2cb: 0f 85 dd 00 00 00             jne     0x3ae <_JIT_ENTRY+0x3ae>
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  PyInterpreterState_Get
// 2db: ff d0                         callq   *%rax
// 2dd: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2e2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e9: 48 8b 45 00                   movq    (%rbp), %rax
// 2ed: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2f1: 48 89 4d 00                   movq    %rcx, (%rbp)
// 2f5: 48 83 f8 01                   cmpq    $0x1, %rax
// 2f9: 0f 8f af 00 00 00             jg      0x3ae <_JIT_ENTRY+0x3ae>
// 2ff: e9 82 00 00 00                jmp     0x386 <_JIT_ENTRY+0x386>
// 304: 49 89 ec                      movq    %rbp, %r12
// 307: e9 a2 00 00 00                jmp     0x3ae <_JIT_ENTRY+0x3ae>
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  PyFloat_FromDouble
// 316: ff d0                         callq   *%rax
// 318: 48 85 c0                      testq   %rax, %rax
// 31b: 74 86                         je      0x2a3 <_JIT_ENTRY+0x2a3>
// 31d: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 321: 75 2b                         jne     0x34e <_JIT_ENTRY+0x34e>
// 323: 49 89 c5                      movq    %rax, %r13
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  PyInterpreterState_Get
// 330: ff d0                         callq   *%rax
// 332: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 339: 48 8b 45 00                   movq    (%rbp), %rax
// 33d: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 341: 48 89 4d 00                   movq    %rcx, (%rbp)
// 345: 48 83 f8 01                   cmpq    $0x1, %rax
// 349: 4c 89 e8                      movq    %r13, %rax
// 34c: 7e 38                         jle     0x386 <_JIT_ENTRY+0x386>
// 34e: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 354: 75 50                         jne     0x3a6 <_JIT_ENTRY+0x3a6>
// 356: 49 89 c5                      movq    %rax, %r13
// 359: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035b:  R_X86_64_64  PyInterpreterState_Get
// 363: ff d0                         callq   *%rax
// 365: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 36c: 49 8b 04 24                   movq    (%r12), %rax
// 370: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 374: 49 89 0c 24                   movq    %rcx, (%r12)
// 378: 4d 89 ec                      movq    %r13, %r12
// 37b: 48 83 f8 01                   cmpq    $0x1, %rax
// 37f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 384: 7f 28                         jg      0x3ae <_JIT_ENTRY+0x3ae>
// 386: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000388:  R_X86_64_64  .rodata.str1.1+0x58
// 390: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000392:  R_X86_64_64  .rodata.str1.1+0x6e
// 39a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039c:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 3a4: ff d0                         callq   *%rax
// 3a6: 49 89 c4                      movq    %rax, %r12
// 3a9: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3ae: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 3b2: 48 83 c6 f8                   addq    $-0x8, %rsi
// 3b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b8:  R_X86_64_64  _JIT_OPARG
// 3c0: f7 d0                         notl    %eax
// 3c2: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3c7: 48 98                         cltq
// 3c9: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 3ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d0:  R_X86_64_64  _JIT_CONTINUE
// 3d8: 48 89 df                      movq    %rbx, %rdi
// 3db: 48 83 c4 18                   addq    $0x18, %rsp
// 3df: 5b                            popq    %rbx
// 3e0: 41 5c                         popq    %r12
// 3e2: 41 5d                         popq    %r13
// 3e4: 41 5e                         popq    %r14
// 3e6: 41 5f                         popq    %r15
// 3e8: 5d                            popq    %rbp
// 3e9: ff e0                         jmpq    *%rax
// 3eb: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_ADD_FLOAT_code_body[1004] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7c, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x77, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf5, 0xe9, 0x98, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x84, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x75, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x5a, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x0f, 0x85, 0x94, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0x09, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x19, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x4c, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xdd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xaf, 0x00, 0x00, 0x00, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x89, 0xec, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x86, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x2b, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x89, 0xe8, 0x7e, 0x38, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x50, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_ADD_FLOAT_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x58},
    {0x392, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x6e},
    {0x39c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x3b8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 95: 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_ADD_FLOAT_data_body[153] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_OP_ADD_INT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_OP_ADD_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 04 02 00 00             jne     0x310 <_JIT_ENTRY+0x310>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000172:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 26                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 17e: 41 ff d7                      callq   *%r15
// 181: 48 8b 3c 24                   movq    (%rsp), %rdi
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 20                         js      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d7: 41 ff d7                      callq   *%r15
// 1da: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1de: 49 ff 0c 24                   decq    (%r12)
// 1e2: 75 13                         jne     0x1f7 <_JIT_ENTRY+0x1f7>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_Dealloc
// 1ee: 4c 89 e7                      movq    %r12, %rdi
// 1f1: ff d0                         callq   *%rax
// 1f3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f7: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1fb: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 200: 4d 85 ff                      testq   %r15, %r15
// 203: 0f 84 04 01 00 00             je      0x30d <_JIT_ENTRY+0x30d>
// 209: 4c 89 38                      movq    %r15, (%rax)
// 20c: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 210: 48 8b 00                      movq    (%rax), %rax
// 213: 84 c0                         testb   %al, %al
// 215: 74 19                         je      0x230 <_JIT_ENTRY+0x230>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_HandlePending
// 221: ff d0                         callq   *%rax
// 223: 85 c0                         testl   %eax, %eax
// 225: 74 09                         je      0x230 <_JIT_ENTRY+0x230>
// 227: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 22b: e9 e0 00 00 00                jmp     0x310 <_JIT_ENTRY+0x310>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _JIT_OPARG
// 23a: f7 d0                         notl    %eax
// 23c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 241: 4c 63 f8                      movslq  %eax, %r15
// 244: 4f 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %r13
// 249: 4b 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %rbp
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _PyLong_Add
// 258: 4c 89 ef                      movq    %r13, %rdi
// 25b: 48 89 ee                      movq    %rbp, %rsi
// 25e: ff d0                         callq   *%rax
// 260: 49 89 c4                      movq    %rax, %r12
// 263: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 267: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000269:  R_X86_64_64  PyInterpreterState_Get
// 271: 75 3c                         jne     0x2af <_JIT_ENTRY+0x2af>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  PyInterpreterState_Get
// 27d: ff d0                         callq   *%rax
// 27f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 286: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000288:  R_X86_64_64  PyInterpreterState_Get
// 290: 48 ff 4d 00                   decq    (%rbp)
// 294: 75 19                         jne     0x2af <_JIT_ENTRY+0x2af>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  PyObject_Free
// 2a0: 48 89 ef                      movq    %rbp, %rdi
// 2a3: ff d0                         callq   *%rax
// 2a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a7:  R_X86_64_64  PyInterpreterState_Get
// 2af: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2b4: 75 1e                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 2b6: ff d1                         callq   *%rcx
// 2b8: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2bf: 49 ff 4d 00                   decq    (%r13)
// 2c3: 75 0f                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  PyObject_Free
// 2cf: 4c 89 ef                      movq    %r13, %rdi
// 2d2: ff d0                         callq   *%rax
// 2d4: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 2d8: 48 83 c0 f0                   addq    $-0x10, %rax
// 2dc: 4d 85 e4                      testq   %r12, %r12
// 2df: 74 2c                         je      0x30d <_JIT_ENTRY+0x30d>
// 2e1: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 2e5: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2e9: 4c 89 20                      movq    %r12, (%rax)
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _JIT_CONTINUE
// 2f6: 48 89 df                      movq    %rbx, %rdi
// 2f9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fd: 48 83 c4 18                   addq    $0x18, %rsp
// 301: 5b                            popq    %rbx
// 302: 41 5c                         popq    %r12
// 304: 41 5d                         popq    %r13
// 306: 41 5e                         popq    %r14
// 308: 41 5f                         popq    %r15
// 30a: 5d                            popq    %rbp
// 30b: ff e0                         jmpq    *%rax
// 30d: 49 89 c6                      movq    %rax, %r14
// 310: 49 29 de                      subq    %rbx, %r14
// 313: 49 83 c6 b8                   addq    $-0x48, %r14
// 317: 49 c1 ee 03                   shrq    $0x3, %r14
// 31b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 31f: 31 c0                         xorl    %eax, %eax
// 321: e9 b1 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 326: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_ADD_INT_code_body[807] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x04, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x04, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x6c, 0xfe, 0xf0, 0x4b, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2c, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb1, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_ADD_INT_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_ADD_INT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_ADD_INT_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_OP_ADD_UNICODE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 04 02 00 00             jne     0x310 <_JIT_ENTRY+0x310>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000172:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 26                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 17e: 41 ff d7                      callq   *%r15
// 181: 48 8b 3c 24                   movq    (%rsp), %rdi
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 20                         js      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d7: 41 ff d7                      callq   *%r15
// 1da: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1de: 49 ff 0c 24                   decq    (%r12)
// 1e2: 75 13                         jne     0x1f7 <_JIT_ENTRY+0x1f7>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_Dealloc
// 1ee: 4c 89 e7                      movq    %r12, %rdi
// 1f1: ff d0                         callq   *%rax
// 1f3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f7: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1fb: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 200: 4d 85 ff                      testq   %r15, %r15
// 203: 0f 84 04 01 00 00             je      0x30d <_JIT_ENTRY+0x30d>
// 209: 4c 89 38                      movq    %r15, (%rax)
// 20c: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 210: 48 8b 00                      movq    (%rax), %rax
// 213: 84 c0                         testb   %al, %al
// 215: 74 19                         je      0x230 <_JIT_ENTRY+0x230>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_HandlePending
// 221: ff d0                         callq   *%rax
// 223: 85 c0                         testl   %eax, %eax
// 225: 74 09                         je      0x230 <_JIT_ENTRY+0x230>
// 227: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 22b: e9 e0 00 00 00                jmp     0x310 <_JIT_ENTRY+0x310>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _JIT_OPARG
// 23a: f7 d0                         notl    %eax
// 23c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 241: 4c 63 f8                      movslq  %eax, %r15
// 244: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 249: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  PyUnicode_Concat
// 258: 48 89 ef                      movq    %rbp, %rdi
// 25b: 4c 89 ee                      movq    %r13, %rsi
// 25e: ff d0                         callq   *%rax
// 260: 49 89 c4                      movq    %rax, %r12
// 263: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 267: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000269:  R_X86_64_64  PyInterpreterState_Get
// 271: 75 3c                         jne     0x2af <_JIT_ENTRY+0x2af>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  PyInterpreterState_Get
// 27d: ff d0                         callq   *%rax
// 27f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 286: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000288:  R_X86_64_64  PyInterpreterState_Get
// 290: 48 ff 4d 00                   decq    (%rbp)
// 294: 75 19                         jne     0x2af <_JIT_ENTRY+0x2af>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _PyUnicode_ExactDealloc
// 2a0: 48 89 ef                      movq    %rbp, %rdi
// 2a3: ff d0                         callq   *%rax
// 2a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a7:  R_X86_64_64  PyInterpreterState_Get
// 2af: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2b4: 75 1e                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 2b6: ff d1                         callq   *%rcx
// 2b8: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2bf: 49 ff 4d 00                   decq    (%r13)
// 2c3: 75 0f                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _PyUnicode_ExactDealloc
// 2cf: 4c 89 ef                      movq    %r13, %rdi
// 2d2: ff d0                         callq   *%rax
// 2d4: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 2d8: 48 83 c0 f0                   addq    $-0x10, %rax
// 2dc: 4d 85 e4                      testq   %r12, %r12
// 2df: 74 2c                         je      0x30d <_JIT_ENTRY+0x30d>
// 2e1: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 2e5: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2e9: 4c 89 20                      movq    %r12, (%rax)
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _JIT_CONTINUE
// 2f6: 48 89 df                      movq    %rbx, %rdi
// 2f9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fd: 48 83 c4 18                   addq    $0x18, %rsp
// 301: 5b                            popq    %rbx
// 302: 41 5c                         popq    %r12
// 304: 41 5d                         popq    %r13
// 306: 41 5e                         popq    %r14
// 308: 41 5f                         popq    %r15
// 30a: 5d                            popq    %rbp
// 30b: ff e0                         jmpq    *%rax
// 30d: 49 89 c6                      movq    %rax, %r14
// 310: 49 29 de                      subq    %rbx, %r14
// 313: 49 83 c6 b8                   addq    $-0x48, %r14
// 317: 49 c1 ee 03                   shrq    $0x3, %r14
// 31b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 31f: 31 c0                         xorl    %eax, %eax
// 321: e9 b1 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 326: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_ADD_UNICODE_code_body[807] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x04, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x04, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2c, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb1, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_ADD_UNICODE_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_ADD_UNICODE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 48                         jle     0xe1 <_JIT_ENTRY+0xe1>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 7c                         jne     0x11f <_JIT_ENTRY+0x11f>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 77                         jmp     0x121 <_JIT_ENTRY+0x121>
// aa: 49 29 de                      subq    %rbx, %r14
// ad: 49 83 c6 b8                   addq    $-0x48, %r14
// b1: 49 c1 ee 03                   shrq    $0x3, %r14
// b5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b9: 48 8b 03                      movq    (%rbx), %rax
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_TARGET
// c6: 89 c9                         movl    %ecx, %ecx
// c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d2: 48 83 c4 18                   addq    $0x18, %rsp
// d6: 5b                            popq    %rbx
// d7: 41 5c                         popq    %r12
// d9: 41 5d                         popq    %r13
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: 5d                            popq    %rbp
// e0: c3                            retq
// e1: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1+0x39
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_CheckRecursiveCall
// fa: 48 89 d7                      movq    %rdx, %rdi
// fd: ff d0                         callq   *%rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 74 08                         je      0x10b <_JIT_ENTRY+0x10b>
// 103: 4d 89 f5                      movq    %r14, %r13
// 106: e9 98 01 00 00                jmp     0x2a3 <_JIT_ENTRY+0x2a3>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 115: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 119: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11d: 74 84                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11f: 31 ff                         xorl    %edi, %edi
// 121: 48 89 ee                      movq    %rbp, %rsi
// 124: 41 ff d0                      callq   *%r8
// 127: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 12c: ff 42 2c                      incl    0x2c(%rdx)
// 12f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 134: 48 8b 45 00                   movq    (%rbp), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 27                         jg      0x164 <_JIT_ENTRY+0x164>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 156: 48 89 ea                      movq    %rbp, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 160: 48 8b 45 00                   movq    (%rbp), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 2b                         js      0x193 <_JIT_ENTRY+0x193>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 179: 48 ff 4d 00                   decq    (%rbp)
// 17d: 75 14                         jne     0x193 <_JIT_ENTRY+0x193>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 48 89 ef                      movq    %rbp, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 48 85 c0                      testq   %rax, %rax
// 19a: 7f 27                         jg      0x1c3 <_JIT_ENTRY+0x1c3>
// 19c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019e:  R_X86_64_64  .rodata.str1.1
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _Py_NegativeRefcount
// 1b0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b5: 4c 89 e2                      movq    %r12, %rdx
// 1b8: ff d0                         callq   *%rax
// 1ba: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1bf: 49 8b 04 24                   movq    (%r12), %rax
// 1c3: 85 c0                         testl   %eax, %eax
// 1c5: 78 2b                         js      0x1f2 <_JIT_ENTRY+0x1f2>
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d1: ff d0                         callq   *%rax
// 1d3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1d8: 49 ff 0c 24                   decq    (%r12)
// 1dc: 75 14                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_Dealloc
// 1e8: 4c 89 e7                      movq    %r12, %rdi
// 1eb: ff d0                         callq   *%rax
// 1ed: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1f2: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f6: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1fb: 48 85 c9                      testq   %rcx, %rcx
// 1fe: 0f 84 9c 00 00 00             je      0x2a0 <_JIT_ENTRY+0x2a0>
// 204: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 208: 48 89 08                      movq    %rcx, (%rax)
// 20b: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 20f: 48 8b 00                      movq    (%rax), %rax
// 212: 84 c0                         testb   %al, %al
// 214: 74 18                         je      0x22e <_JIT_ENTRY+0x22e>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_HandlePending
// 220: 48 89 d7                      movq    %rdx, %rdi
// 223: ff d0                         callq   *%rax
// 225: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 75 75                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_OPARG
// 238: f7 d0                         notl    %eax
// 23a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23f: 4c 63 f8                      movslq  %eax, %r15
// 242: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 247: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 24c: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 251: f2 41 0f 59 44 24 10          mulsd   0x10(%r12), %xmm0
// 258: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 25d: 75 5a                         jne     0x2b9 <_JIT_ENTRY+0x2b9>
// 25f: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 264: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 26a: 0f 85 94 00 00 00             jne     0x304 <_JIT_ENTRY+0x304>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  PyInterpreterState_Get
// 27a: ff d0                         callq   *%rax
// 27c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 283: 49 ff 0c 24                   decq    (%r12)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _PyFloat_ExactDealloc
// 293: 4c 89 e7                      movq    %r12, %rdi
// 296: ff d0                         callq   *%rax
// 298: 49 89 ec                      movq    %rbp, %r12
// 29b: e9 09 01 00 00                jmp     0x3a9 <_JIT_ENTRY+0x3a9>
// 2a0: 49 89 c5                      movq    %rax, %r13
// 2a3: 49 29 dd                      subq    %rbx, %r13
// 2a6: 49 83 c5 b8                   addq    $-0x48, %r13
// 2aa: 49 c1 ed 03                   shrq    $0x3, %r13
// 2ae: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2b2: 31 c0                         xorl    %eax, %eax
// 2b4: e9 19 fe ff ff                jmp     0xd2 <_JIT_ENTRY+0xd2>
// 2b9: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 2be: 75 4c                         jne     0x30c <_JIT_ENTRY+0x30c>
// 2c0: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 2c7: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 2cb: 0f 85 dd 00 00 00             jne     0x3ae <_JIT_ENTRY+0x3ae>
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  PyInterpreterState_Get
// 2db: ff d0                         callq   *%rax
// 2dd: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2e2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e9: 48 8b 45 00                   movq    (%rbp), %rax
// 2ed: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2f1: 48 89 4d 00                   movq    %rcx, (%rbp)
// 2f5: 48 83 f8 01                   cmpq    $0x1, %rax
// 2f9: 0f 8f af 00 00 00             jg      0x3ae <_JIT_ENTRY+0x3ae>
// 2ff: e9 82 00 00 00                jmp     0x386 <_JIT_ENTRY+0x386>
// 304: 49 89 ec                      movq    %rbp, %r12
// 307: e9 a2 00 00 00                jmp     0x3ae <_JIT_ENTRY+0x3ae>
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  PyFloat_FromDouble
// 316: ff d0                         callq   *%rax
// 318: 48 85 c0                      testq   %rax, %rax
// 31b: 74 86                         je      0x2a3 <_JIT_ENTRY+0x2a3>
// 31d: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 321: 75 2b                         jne     0x34e <_JIT_ENTRY+0x34e>
// 323: 49 89 c5                      movq    %rax, %r13
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  PyInterpreterState_Get
// 330: ff d0                         callq   *%rax
// 332: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 339: 48 8b 45 00                   movq    (%rbp), %rax
// 33d: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 341: 48 89 4d 00                   movq    %rcx, (%rbp)
// 345: 48 83 f8 01                   cmpq    $0x1, %rax
// 349: 4c 89 e8                      movq    %r13, %rax
// 34c: 7e 38                         jle     0x386 <_JIT_ENTRY+0x386>
// 34e: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 354: 75 50                         jne     0x3a6 <_JIT_ENTRY+0x3a6>
// 356: 49 89 c5                      movq    %rax, %r13
// 359: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035b:  R_X86_64_64  PyInterpreterState_Get
// 363: ff d0                         callq   *%rax
// 365: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 36c: 49 8b 04 24                   movq    (%r12), %rax
// 370: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 374: 49 89 0c 24                   movq    %rcx, (%r12)
// 378: 4d 89 ec                      movq    %r13, %r12
// 37b: 48 83 f8 01                   cmpq    $0x1, %rax
// 37f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 384: 7f 28                         jg      0x3ae <_JIT_ENTRY+0x3ae>
// 386: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000388:  R_X86_64_64  .rodata.str1.1+0x58
// 390: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000392:  R_X86_64_64  .rodata.str1.1+0x6e
// 39a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039c:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 3a4: ff d0                         callq   *%rax
// 3a6: 49 89 c4                      movq    %rax, %r12
// 3a9: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3ae: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 3b2: 48 83 c6 f8                   addq    $-0x8, %rsi
// 3b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b8:  R_X86_64_64  _JIT_OPARG
// 3c0: f7 d0                         notl    %eax
// 3c2: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3c7: 48 98                         cltq
// 3c9: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 3ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d0:  R_X86_64_64  _JIT_CONTINUE
// 3d8: 48 89 df                      movq    %rbx, %rdi
// 3db: 48 83 c4 18                   addq    $0x18, %rsp
// 3df: 5b                            popq    %rbx
// 3e0: 41 5c                         popq    %r12
// 3e2: 41 5d                         popq    %r13
// 3e4: 41 5e                         popq    %r14
// 3e6: 41 5f                         popq    %r15
// 3e8: 5d                            popq    %rbp
// 3e9: ff e0                         jmpq    *%rax
// 3eb: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_FLOAT_code_body[1004] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7c, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x77, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf5, 0xe9, 0x98, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x84, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x75, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x5a, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x0f, 0x85, 0x94, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0x09, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x19, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x4c, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xdd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xaf, 0x00, 0x00, 0x00, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x89, 0xec, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x86, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x2b, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x89, 0xe8, 0x7e, 0x38, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x50, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x58},
    {0x392, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x6e},
    {0x39c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x3b8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 95: 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_FLOAT_data_body[153] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 04 02 00 00             jne     0x310 <_JIT_ENTRY+0x310>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000172:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 26                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 17e: 41 ff d7                      callq   *%r15
// 181: 48 8b 3c 24                   movq    (%rsp), %rdi
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 20                         js      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d7: 41 ff d7                      callq   *%r15
// 1da: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1de: 49 ff 0c 24                   decq    (%r12)
// 1e2: 75 13                         jne     0x1f7 <_JIT_ENTRY+0x1f7>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_Dealloc
// 1ee: 4c 89 e7                      movq    %r12, %rdi
// 1f1: ff d0                         callq   *%rax
// 1f3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f7: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1fb: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 200: 4d 85 ff                      testq   %r15, %r15
// 203: 0f 84 04 01 00 00             je      0x30d <_JIT_ENTRY+0x30d>
// 209: 4c 89 38                      movq    %r15, (%rax)
// 20c: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 210: 48 8b 00                      movq    (%rax), %rax
// 213: 84 c0                         testb   %al, %al
// 215: 74 19                         je      0x230 <_JIT_ENTRY+0x230>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_HandlePending
// 221: ff d0                         callq   *%rax
// 223: 85 c0                         testl   %eax, %eax
// 225: 74 09                         je      0x230 <_JIT_ENTRY+0x230>
// 227: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 22b: e9 e0 00 00 00                jmp     0x310 <_JIT_ENTRY+0x310>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _JIT_OPARG
// 23a: f7 d0                         notl    %eax
// 23c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 241: 4c 63 f8                      movslq  %eax, %r15
// 244: 4f 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %r13
// 249: 4b 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %rbp
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _PyLong_Multiply
// 258: 4c 89 ef                      movq    %r13, %rdi
// 25b: 48 89 ee                      movq    %rbp, %rsi
// 25e: ff d0                         callq   *%rax
// 260: 49 89 c4                      movq    %rax, %r12
// 263: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 267: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000269:  R_X86_64_64  PyInterpreterState_Get
// 271: 75 3c                         jne     0x2af <_JIT_ENTRY+0x2af>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  PyInterpreterState_Get
// 27d: ff d0                         callq   *%rax
// 27f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 286: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000288:  R_X86_64_64  PyInterpreterState_Get
// 290: 48 ff 4d 00                   decq    (%rbp)
// 294: 75 19                         jne     0x2af <_JIT_ENTRY+0x2af>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  PyObject_Free
// 2a0: 48 89 ef                      movq    %rbp, %rdi
// 2a3: ff d0                         callq   *%rax
// 2a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a7:  R_X86_64_64  PyInterpreterState_Get
// 2af: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2b4: 75 1e                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 2b6: ff d1                         callq   *%rcx
// 2b8: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2bf: 49 ff 4d 00                   decq    (%r13)
// 2c3: 75 0f                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  PyObject_Free
// 2cf: 4c 89 ef                      movq    %r13, %rdi
// 2d2: ff d0                         callq   *%rax
// 2d4: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 2d8: 48 83 c0 f0                   addq    $-0x10, %rax
// 2dc: 4d 85 e4                      testq   %r12, %r12
// 2df: 74 2c                         je      0x30d <_JIT_ENTRY+0x30d>
// 2e1: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 2e5: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2e9: 4c 89 20                      movq    %r12, (%rax)
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _JIT_CONTINUE
// 2f6: 48 89 df                      movq    %rbx, %rdi
// 2f9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fd: 48 83 c4 18                   addq    $0x18, %rsp
// 301: 5b                            popq    %rbx
// 302: 41 5c                         popq    %r12
// 304: 41 5d                         popq    %r13
// 306: 41 5e                         popq    %r14
// 308: 41 5f                         popq    %r15
// 30a: 5d                            popq    %rbp
// 30b: ff e0                         jmpq    *%rax
// 30d: 49 89 c6                      movq    %rax, %r14
// 310: 49 29 de                      subq    %rbx, %r14
// 313: 49 83 c6 b8                   addq    $-0x48, %r14
// 317: 49 c1 ee 03                   shrq    $0x3, %r14
// 31b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 31f: 31 c0                         xorl    %eax, %eax
// 321: e9 b1 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 326: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_INT_code_body[807] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x04, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x04, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x6c, 0xfe, 0xf0, 0x4b, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2c, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb1, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_INT_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_INT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 48                         jle     0xe1 <_JIT_ENTRY+0xe1>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 7c                         jne     0x11f <_JIT_ENTRY+0x11f>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 77                         jmp     0x121 <_JIT_ENTRY+0x121>
// aa: 49 29 de                      subq    %rbx, %r14
// ad: 49 83 c6 b8                   addq    $-0x48, %r14
// b1: 49 c1 ee 03                   shrq    $0x3, %r14
// b5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b9: 48 8b 03                      movq    (%rbx), %rax
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_TARGET
// c6: 89 c9                         movl    %ecx, %ecx
// c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d2: 48 83 c4 18                   addq    $0x18, %rsp
// d6: 5b                            popq    %rbx
// d7: 41 5c                         popq    %r12
// d9: 41 5d                         popq    %r13
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: 5d                            popq    %rbp
// e0: c3                            retq
// e1: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1+0x39
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_CheckRecursiveCall
// fa: 48 89 d7                      movq    %rdx, %rdi
// fd: ff d0                         callq   *%rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 74 08                         je      0x10b <_JIT_ENTRY+0x10b>
// 103: 4d 89 f5                      movq    %r14, %r13
// 106: e9 98 01 00 00                jmp     0x2a3 <_JIT_ENTRY+0x2a3>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 115: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 119: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11d: 74 84                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11f: 31 ff                         xorl    %edi, %edi
// 121: 48 89 ee                      movq    %rbp, %rsi
// 124: 41 ff d0                      callq   *%r8
// 127: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 12c: ff 42 2c                      incl    0x2c(%rdx)
// 12f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 134: 48 8b 45 00                   movq    (%rbp), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 27                         jg      0x164 <_JIT_ENTRY+0x164>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 156: 48 89 ea                      movq    %rbp, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 160: 48 8b 45 00                   movq    (%rbp), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 2b                         js      0x193 <_JIT_ENTRY+0x193>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 179: 48 ff 4d 00                   decq    (%rbp)
// 17d: 75 14                         jne     0x193 <_JIT_ENTRY+0x193>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 48 89 ef                      movq    %rbp, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 48 85 c0                      testq   %rax, %rax
// 19a: 7f 27                         jg      0x1c3 <_JIT_ENTRY+0x1c3>
// 19c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019e:  R_X86_64_64  .rodata.str1.1
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _Py_NegativeRefcount
// 1b0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b5: 4c 89 e2                      movq    %r12, %rdx
// 1b8: ff d0                         callq   *%rax
// 1ba: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1bf: 49 8b 04 24                   movq    (%r12), %rax
// 1c3: 85 c0                         testl   %eax, %eax
// 1c5: 78 2b                         js      0x1f2 <_JIT_ENTRY+0x1f2>
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d1: ff d0                         callq   *%rax
// 1d3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1d8: 49 ff 0c 24                   decq    (%r12)
// 1dc: 75 14                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_Dealloc
// 1e8: 4c 89 e7                      movq    %r12, %rdi
// 1eb: ff d0                         callq   *%rax
// 1ed: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1f2: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f6: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1fb: 48 85 c9                      testq   %rcx, %rcx
// 1fe: 0f 84 9c 00 00 00             je      0x2a0 <_JIT_ENTRY+0x2a0>
// 204: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 208: 48 89 08                      movq    %rcx, (%rax)
// 20b: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 20f: 48 8b 00                      movq    (%rax), %rax
// 212: 84 c0                         testb   %al, %al
// 214: 74 18                         je      0x22e <_JIT_ENTRY+0x22e>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_HandlePending
// 220: 48 89 d7                      movq    %rdx, %rdi
// 223: ff d0                         callq   *%rax
// 225: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 75 75                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_OPARG
// 238: f7 d0                         notl    %eax
// 23a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23f: 4c 63 f8                      movslq  %eax, %r15
// 242: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 247: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 24c: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 251: f2 41 0f 5c 44 24 10          subsd   0x10(%r12), %xmm0
// 258: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 25d: 75 5a                         jne     0x2b9 <_JIT_ENTRY+0x2b9>
// 25f: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 264: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 26a: 0f 85 94 00 00 00             jne     0x304 <_JIT_ENTRY+0x304>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  PyInterpreterState_Get
// 27a: ff d0                         callq   *%rax
// 27c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 283: 49 ff 0c 24                   decq    (%r12)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _PyFloat_ExactDealloc
// 293: 4c 89 e7                      movq    %r12, %rdi
// 296: ff d0                         callq   *%rax
// 298: 49 89 ec                      movq    %rbp, %r12
// 29b: e9 09 01 00 00                jmp     0x3a9 <_JIT_ENTRY+0x3a9>
// 2a0: 49 89 c5                      movq    %rax, %r13
// 2a3: 49 29 dd                      subq    %rbx, %r13
// 2a6: 49 83 c5 b8                   addq    $-0x48, %r13
// 2aa: 49 c1 ed 03                   shrq    $0x3, %r13
// 2ae: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2b2: 31 c0                         xorl    %eax, %eax
// 2b4: e9 19 fe ff ff                jmp     0xd2 <_JIT_ENTRY+0xd2>
// 2b9: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 2be: 75 4c                         jne     0x30c <_JIT_ENTRY+0x30c>
// 2c0: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 2c7: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 2cb: 0f 85 dd 00 00 00             jne     0x3ae <_JIT_ENTRY+0x3ae>
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  PyInterpreterState_Get
// 2db: ff d0                         callq   *%rax
// 2dd: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2e2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e9: 48 8b 45 00                   movq    (%rbp), %rax
// 2ed: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2f1: 48 89 4d 00                   movq    %rcx, (%rbp)
// 2f5: 48 83 f8 01                   cmpq    $0x1, %rax
// 2f9: 0f 8f af 00 00 00             jg      0x3ae <_JIT_ENTRY+0x3ae>
// 2ff: e9 82 00 00 00                jmp     0x386 <_JIT_ENTRY+0x386>
// 304: 49 89 ec                      movq    %rbp, %r12
// 307: e9 a2 00 00 00                jmp     0x3ae <_JIT_ENTRY+0x3ae>
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  PyFloat_FromDouble
// 316: ff d0                         callq   *%rax
// 318: 48 85 c0                      testq   %rax, %rax
// 31b: 74 86                         je      0x2a3 <_JIT_ENTRY+0x2a3>
// 31d: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 321: 75 2b                         jne     0x34e <_JIT_ENTRY+0x34e>
// 323: 49 89 c5                      movq    %rax, %r13
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  PyInterpreterState_Get
// 330: ff d0                         callq   *%rax
// 332: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 339: 48 8b 45 00                   movq    (%rbp), %rax
// 33d: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 341: 48 89 4d 00                   movq    %rcx, (%rbp)
// 345: 48 83 f8 01                   cmpq    $0x1, %rax
// 349: 4c 89 e8                      movq    %r13, %rax
// 34c: 7e 38                         jle     0x386 <_JIT_ENTRY+0x386>
// 34e: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 354: 75 50                         jne     0x3a6 <_JIT_ENTRY+0x3a6>
// 356: 49 89 c5                      movq    %rax, %r13
// 359: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035b:  R_X86_64_64  PyInterpreterState_Get
// 363: ff d0                         callq   *%rax
// 365: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 36c: 49 8b 04 24                   movq    (%r12), %rax
// 370: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 374: 49 89 0c 24                   movq    %rcx, (%r12)
// 378: 4d 89 ec                      movq    %r13, %r12
// 37b: 48 83 f8 01                   cmpq    $0x1, %rax
// 37f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 384: 7f 28                         jg      0x3ae <_JIT_ENTRY+0x3ae>
// 386: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000388:  R_X86_64_64  .rodata.str1.1+0x58
// 390: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000392:  R_X86_64_64  .rodata.str1.1+0x6e
// 39a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039c:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 3a4: ff d0                         callq   *%rax
// 3a6: 49 89 c4                      movq    %rax, %r12
// 3a9: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3ae: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 3b2: 48 83 c6 f8                   addq    $-0x8, %rsi
// 3b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b8:  R_X86_64_64  _JIT_OPARG
// 3c0: f7 d0                         notl    %eax
// 3c2: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3c7: 48 98                         cltq
// 3c9: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 3ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d0:  R_X86_64_64  _JIT_CONTINUE
// 3d8: 48 89 df                      movq    %rbx, %rdi
// 3db: 48 83 c4 18                   addq    $0x18, %rsp
// 3df: 5b                            popq    %rbx
// 3e0: 41 5c                         popq    %r12
// 3e2: 41 5d                         popq    %r13
// 3e4: 41 5e                         popq    %r14
// 3e6: 41 5f                         popq    %r15
// 3e8: 5d                            popq    %rbp
// 3e9: ff e0                         jmpq    *%rax
// 3eb: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_FLOAT_code_body[1004] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7c, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x77, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf5, 0xe9, 0x98, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x84, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x75, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x5a, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x0f, 0x85, 0x94, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0x09, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x19, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x4c, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xdd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xaf, 0x00, 0x00, 0x00, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x89, 0xec, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x86, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x2b, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x89, 0xe8, 0x7e, 0x38, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x50, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x58},
    {0x392, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x6e},
    {0x39c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x3b8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 95: 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_FLOAT_data_body[153] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 04 02 00 00             jne     0x310 <_JIT_ENTRY+0x310>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000172:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 26                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 17e: 41 ff d7                      callq   *%r15
// 181: 48 8b 3c 24                   movq    (%rsp), %rdi
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 20                         js      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d7: 41 ff d7                      callq   *%r15
// 1da: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1de: 49 ff 0c 24                   decq    (%r12)
// 1e2: 75 13                         jne     0x1f7 <_JIT_ENTRY+0x1f7>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_Dealloc
// 1ee: 4c 89 e7                      movq    %r12, %rdi
// 1f1: ff d0                         callq   *%rax
// 1f3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f7: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1fb: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 200: 4d 85 ff                      testq   %r15, %r15
// 203: 0f 84 04 01 00 00             je      0x30d <_JIT_ENTRY+0x30d>
// 209: 4c 89 38                      movq    %r15, (%rax)
// 20c: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 210: 48 8b 00                      movq    (%rax), %rax
// 213: 84 c0                         testb   %al, %al
// 215: 74 19                         je      0x230 <_JIT_ENTRY+0x230>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_HandlePending
// 221: ff d0                         callq   *%rax
// 223: 85 c0                         testl   %eax, %eax
// 225: 74 09                         je      0x230 <_JIT_ENTRY+0x230>
// 227: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 22b: e9 e0 00 00 00                jmp     0x310 <_JIT_ENTRY+0x310>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _JIT_OPARG
// 23a: f7 d0                         notl    %eax
// 23c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 241: 4c 63 f8                      movslq  %eax, %r15
// 244: 4f 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %r13
// 249: 4b 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %rbp
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _PyLong_Subtract
// 258: 4c 89 ef                      movq    %r13, %rdi
// 25b: 48 89 ee                      movq    %rbp, %rsi
// 25e: ff d0                         callq   *%rax
// 260: 49 89 c4                      movq    %rax, %r12
// 263: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 267: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000269:  R_X86_64_64  PyInterpreterState_Get
// 271: 75 3c                         jne     0x2af <_JIT_ENTRY+0x2af>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  PyInterpreterState_Get
// 27d: ff d0                         callq   *%rax
// 27f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 286: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000288:  R_X86_64_64  PyInterpreterState_Get
// 290: 48 ff 4d 00                   decq    (%rbp)
// 294: 75 19                         jne     0x2af <_JIT_ENTRY+0x2af>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  PyObject_Free
// 2a0: 48 89 ef                      movq    %rbp, %rdi
// 2a3: ff d0                         callq   *%rax
// 2a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a7:  R_X86_64_64  PyInterpreterState_Get
// 2af: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2b4: 75 1e                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 2b6: ff d1                         callq   *%rcx
// 2b8: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2bf: 49 ff 4d 00                   decq    (%r13)
// 2c3: 75 0f                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  PyObject_Free
// 2cf: 4c 89 ef                      movq    %r13, %rdi
// 2d2: ff d0                         callq   *%rax
// 2d4: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 2d8: 48 83 c0 f0                   addq    $-0x10, %rax
// 2dc: 4d 85 e4                      testq   %r12, %r12
// 2df: 74 2c                         je      0x30d <_JIT_ENTRY+0x30d>
// 2e1: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 2e5: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2e9: 4c 89 20                      movq    %r12, (%rax)
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _JIT_CONTINUE
// 2f6: 48 89 df                      movq    %rbx, %rdi
// 2f9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fd: 48 83 c4 18                   addq    $0x18, %rsp
// 301: 5b                            popq    %rbx
// 302: 41 5c                         popq    %r12
// 304: 41 5d                         popq    %r13
// 306: 41 5e                         popq    %r14
// 308: 41 5f                         popq    %r15
// 30a: 5d                            popq    %rbp
// 30b: ff e0                         jmpq    *%rax
// 30d: 49 89 c6                      movq    %rax, %r14
// 310: 49 29 de                      subq    %rbx, %r14
// 313: 49 83 c6 b8                   addq    $-0x48, %r14
// 317: 49 c1 ee 03                   shrq    $0x3, %r14
// 31b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 31f: 31 c0                         xorl    %eax, %eax
// 321: e9 b1 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 326: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_INT_code_body[807] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x04, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x04, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x6c, 0xfe, 0xf0, 0x4b, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2c, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb1, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_INT_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_INT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_SLICE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_SLICE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 48                         jle     0xe1 <_JIT_ENTRY+0xe1>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 78                         jne     0x11b <_JIT_ENTRY+0x11b>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 73                         jmp     0x11d <_JIT_ENTRY+0x11d>
// aa: 49 29 de                      subq    %rbx, %r14
// ad: 49 83 c6 b8                   addq    $-0x48, %r14
// b1: 49 c1 ee 03                   shrq    $0x3, %r14
// b5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b9: 48 8b 03                      movq    (%rbx), %rax
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_TARGET
// c6: 89 c9                         movl    %ecx, %ecx
// c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d2: 48 83 c4 18                   addq    $0x18, %rsp
// d6: 5b                            popq    %rbx
// d7: 41 5c                         popq    %r12
// d9: 41 5d                         popq    %r13
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: 5d                            popq    %rbp
// e0: c3                            retq
// e1: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1+0x39
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_CheckRecursiveCall
// fa: 48 89 d7                      movq    %rdx, %rdi
// fd: ff d0                         callq   *%rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 0f 85 5d 02 00 00             jne     0x364 <_JIT_ENTRY+0x364>
// 107: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10c: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 111: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 115: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 119: 74 88                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11b: 31 ff                         xorl    %edi, %edi
// 11d: 48 89 ee                      movq    %rbp, %rsi
// 120: 41 ff d0                      callq   *%r8
// 123: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 128: ff 47 2c                      incl    0x2c(%rdi)
// 12b: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 130: 48 8b 45 00                   movq    (%rbp), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 27                         jg      0x160 <_JIT_ENTRY+0x160>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 152: 48 89 ea                      movq    %rbp, %rdx
// 155: ff d0                         callq   *%rax
// 157: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 15c: 48 8b 45 00                   movq    (%rbp), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 2b                         js      0x18f <_JIT_ENTRY+0x18f>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 175: 48 ff 4d 00                   decq    (%rbp)
// 179: 75 14                         jne     0x18f <_JIT_ENTRY+0x18f>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: 48 89 ef                      movq    %rbp, %rdi
// 188: ff d0                         callq   *%rax
// 18a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18f: 49 8b 04 24                   movq    (%r12), %rax
// 193: 48 85 c0                      testq   %rax, %rax
// 196: 7f 27                         jg      0x1bf <_JIT_ENTRY+0x1bf>
// 198: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019a:  R_X86_64_64  .rodata.str1.1
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_NegativeRefcount
// 1ac: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b1: 4c 89 e2                      movq    %r12, %rdx
// 1b4: ff d0                         callq   *%rax
// 1b6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1bb: 49 8b 04 24                   movq    (%r12), %rax
// 1bf: 85 c0                         testl   %eax, %eax
// 1c1: 78 2b                         js      0x1ee <_JIT_ENTRY+0x1ee>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d4: 49 ff 0c 24                   decq    (%r12)
// 1d8: 75 14                         jne     0x1ee <_JIT_ENTRY+0x1ee>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_Dealloc
// 1e4: 4c 89 e7                      movq    %r12, %rdi
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ee: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f2: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f7: 48 85 c9                      testq   %rcx, %rcx
// 1fa: 0f 84 61 01 00 00             je      0x361 <_JIT_ENTRY+0x361>
// 200: 48 89 08                      movq    %rcx, (%rax)
// 203: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 207: 48 8b 00                      movq    (%rax), %rax
// 20a: 84 c0                         testb   %al, %al
// 20c: 74 19                         je      0x227 <_JIT_ENTRY+0x227>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_HandlePending
// 218: ff d0                         callq   *%rax
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 74 09                         je      0x227 <_JIT_ENTRY+0x227>
// 21e: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 222: e9 3d 01 00 00                jmp     0x364 <_JIT_ENTRY+0x364>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_OPARG
// 231: f7 d0                         notl    %eax
// 233: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 238: 4c 63 f8                      movslq  %eax, %r15
// 23b: 4b 8b 74 fe f8                movq    -0x8(%r14,%r15,8), %rsi
// 240: 4f 8b 64 fe e8                movq    -0x18(%r14,%r15,8), %r12
// 245: 4b 8b 7c fe f0                movq    -0x10(%r14,%r15,8), %rdi
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 254: ff d0                         callq   *%rax
// 256: 48 85 c0                      testq   %rax, %rax
// 259: 74 6a                         je      0x2c5 <_JIT_ENTRY+0x2c5>
// 25b: 48 89 c5                      movq    %rax, %rbp
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  PyObject_GetItem
// 268: 4c 89 e7                      movq    %r12, %rdi
// 26b: 48 89 ee                      movq    %rbp, %rsi
// 26e: ff d0                         callq   *%rax
// 270: 49 89 c5                      movq    %rax, %r13
// 273: 48 8b 45 00                   movq    (%rbp), %rax
// 277: 48 85 c0                      testq   %rax, %rax
// 27a: 7f 22                         jg      0x29e <_JIT_ENTRY+0x29e>
// 27c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027e:  R_X86_64_64  .rodata.str1.1
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_NegativeRefcount
// 290: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 295: 48 89 ea                      movq    %rbp, %rdx
// 298: ff d0                         callq   *%rax
// 29a: 48 8b 45 00                   movq    (%rbp), %rax
// 29e: 85 c0                         testl   %eax, %eax
// 2a0: 78 26                         js      0x2c8 <_JIT_ENTRY+0x2c8>
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ac: ff d0                         callq   *%rax
// 2ae: 48 ff 4d 00                   decq    (%rbp)
// 2b2: 75 14                         jne     0x2c8 <_JIT_ENTRY+0x2c8>
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_Dealloc
// 2be: 48 89 ef                      movq    %rbp, %rdi
// 2c1: ff d0                         callq   *%rax
// 2c3: eb 03                         jmp     0x2c8 <_JIT_ENTRY+0x2c8>
// 2c5: 45 31 ed                      xorl    %r13d, %r13d
// 2c8: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2cd: 49 8b 04 24                   movq    (%r12), %rax
// 2d1: 48 85 c0                      testq   %rax, %rax
// 2d4: 7f 27                         jg      0x2fd <_JIT_ENTRY+0x2fd>
// 2d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d8:  R_X86_64_64  .rodata.str1.1
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_NegativeRefcount
// 2ea: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 2ef: 4c 89 e2                      movq    %r12, %rdx
// 2f2: ff d0                         callq   *%rax
// 2f4: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2f9: 49 8b 04 24                   movq    (%r12), %rax
// 2fd: 85 c0                         testl   %eax, %eax
// 2ff: 78 2b                         js      0x32c <_JIT_ENTRY+0x32c>
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30b: ff d0                         callq   *%rax
// 30d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 312: 49 ff 0c 24                   decq    (%r12)
// 316: 75 14                         jne     0x32c <_JIT_ENTRY+0x32c>
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_Dealloc
// 322: 4c 89 e7                      movq    %r12, %rdi
// 325: ff d0                         callq   *%rax
// 327: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 32c: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 330: 48 83 c0 e8                   addq    $-0x18, %rax
// 334: 4d 85 ed                      testq   %r13, %r13
// 337: 74 28                         je      0x361 <_JIT_ENTRY+0x361>
// 339: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 33d: 48 83 c6 f0                   addq    $-0x10, %rsi
// 341: 4c 89 28                      movq    %r13, (%rax)
// 344: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000346:  R_X86_64_64  _JIT_CONTINUE
// 34e: 48 89 df                      movq    %rbx, %rdi
// 351: 48 83 c4 18                   addq    $0x18, %rsp
// 355: 5b                            popq    %rbx
// 356: 41 5c                         popq    %r12
// 358: 41 5d                         popq    %r13
// 35a: 41 5e                         popq    %r14
// 35c: 41 5f                         popq    %r15
// 35e: 5d                            popq    %rbp
// 35f: ff e0                         jmpq    *%rax
// 361: 49 89 c6                      movq    %rax, %r14
// 364: 49 29 de                      subq    %rbx, %r14
// 367: 49 83 c6 b8                   addq    $-0x48, %r14
// 36b: 49 c1 ee 03                   shrq    $0x3, %r14
// 36f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 373: 31 c0                         xorl    %eax, %eax
// 375: e9 58 fd ff ff                jmp     0xd2 <_JIT_ENTRY+0xd2>
// 37a: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_SLICE_code_body[891] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x78, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x73, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x5d, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x88, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x61, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x3d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x74, 0xfe, 0xf8, 0x4f, 0x8b, 0x64, 0xfe, 0xe8, 0x4b, 0x8b, 0x7c, 0xfe, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x6a, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x03, 0x45, 0x31, 0xed, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x28, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x58, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BINARY_SLICE_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_SLICE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_SLICE_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_SUBSCR
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_SUBSCR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4c                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 0c 24                   movq    %rcx, (%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7a                         jne     0x122 <_JIT_ENTRY+0x122>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 75                         jmp     0x124 <_JIT_ENTRY+0x124>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 04 24                   movq    %r8, (%rsp)
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_CheckRecursiveCall
// fe: 48 89 d7                      movq    %rdx, %rdi
// 101: ff d0                         callq   *%rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 0f 85 3a 02 00 00             jne     0x345 <_JIT_ENTRY+0x345>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 04 24                   movq    (%rsp), %r8
// 114: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 118: 48 89 0c 24                   movq    %rcx, (%rsp)
// 11c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 120: 74 86                         je      0xa8 <_JIT_ENTRY+0xa8>
// 122: 31 ff                         xorl    %edi, %edi
// 124: 4c 8b 3c 24                   movq    (%rsp), %r15
// 128: 4c 89 fe                      movq    %r15, %rsi
// 12b: 41 ff d0                      callq   *%r8
// 12e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 133: ff 47 2c                      incl    0x2c(%rdi)
// 136: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13b: 49 8b 07                      movq    (%r15), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7f 2a                         jg      0x16d <_JIT_ENTRY+0x16d>
// 143: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 160: 4c 89 fa                      movq    %r15, %rdx
// 163: ff d0                         callq   *%rax
// 165: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16a: 49 8b 07                      movq    (%r15), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 2f                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 8b 04 24                   movq    (%rsp), %rax
// 186: 48 ff 08                      decq    (%rax)
// 189: 75 15                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 48 8b 3c 24                   movq    (%rsp), %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 27                         jg      0x1d0 <_JIT_ENTRY+0x1d0>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 2b                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 14                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 208: 4d 85 ff                      testq   %r15, %r15
// 20b: 0f 84 31 01 00 00             je      0x342 <_JIT_ENTRY+0x342>
// 211: 4c 89 38                      movq    %r15, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 19                         je      0x238 <_JIT_ENTRY+0x238>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 74 09                         je      0x238 <_JIT_ENTRY+0x238>
// 22f: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 233: e9 0d 01 00 00                jmp     0x345 <_JIT_ENTRY+0x345>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_OPARG
// 242: f7 d0                         notl    %eax
// 244: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 249: 4c 63 e0                      movslq  %eax, %r12
// 24c: 4b 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %rbp
// 251: 4f 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %r13
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  PyObject_GetItem
// 260: 48 89 ef                      movq    %rbp, %rdi
// 263: 4c 89 ee                      movq    %r13, %rsi
// 266: ff d0                         callq   *%rax
// 268: 48 89 04 24                   movq    %rax, (%rsp)
// 26c: 48 8b 45 00                   movq    (%rbp), %rax
// 270: 48 85 c0                      testq   %rax, %rax
// 273: 7f 22                         jg      0x297 <_JIT_ENTRY+0x297>
// 275: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000277:  R_X86_64_64  .rodata.str1.1
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_NegativeRefcount
// 289: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 28e: 48 89 ea                      movq    %rbp, %rdx
// 291: ff d0                         callq   *%rax
// 293: 48 8b 45 00                   movq    (%rbp), %rax
// 297: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000299:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a1: 85 c0                         testl   %eax, %eax
// 2a3: 78 18                         js      0x2bd <_JIT_ENTRY+0x2bd>
// 2a5: 41 ff d7                      callq   *%r15
// 2a8: 48 ff 4d 00                   decq    (%rbp)
// 2ac: 75 0f                         jne     0x2bd <_JIT_ENTRY+0x2bd>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_Dealloc
// 2b8: 48 89 ef                      movq    %rbp, %rdi
// 2bb: ff d0                         callq   *%rax
// 2bd: 49 8b 45 00                   movq    (%r13), %rax
// 2c1: 48 85 c0                      testq   %rax, %rax
// 2c4: 7f 22                         jg      0x2e8 <_JIT_ENTRY+0x2e8>
// 2c6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c8:  R_X86_64_64  .rodata.str1.1
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_NegativeRefcount
// 2da: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// 2df: 4c 89 ea                      movq    %r13, %rdx
// 2e2: ff d0                         callq   *%rax
// 2e4: 49 8b 45 00                   movq    (%r13), %rax
// 2e8: 85 c0                         testl   %eax, %eax
// 2ea: 78 18                         js      0x304 <_JIT_ENTRY+0x304>
// 2ec: 41 ff d7                      callq   *%r15
// 2ef: 49 ff 4d 00                   decq    (%r13)
// 2f3: 75 0f                         jne     0x304 <_JIT_ENTRY+0x304>
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_Dealloc
// 2ff: 4c 89 ef                      movq    %r13, %rdi
// 302: ff d0                         callq   *%rax
// 304: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 308: 48 83 c0 f0                   addq    $-0x10, %rax
// 30c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 310: 48 85 c9                      testq   %rcx, %rcx
// 313: 74 2d                         je      0x342 <_JIT_ENTRY+0x342>
// 315: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 319: 48 83 c6 f8                   addq    $-0x8, %rsi
// 31d: 48 89 08                      movq    %rcx, (%rax)
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _JIT_CONTINUE
// 32a: 48 89 df                      movq    %rbx, %rdi
// 32d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 332: 48 83 c4 18                   addq    $0x18, %rsp
// 336: 5b                            popq    %rbx
// 337: 41 5c                         popq    %r12
// 339: 41 5d                         popq    %r13
// 33b: 41 5e                         popq    %r14
// 33d: 41 5f                         popq    %r15
// 33f: 5d                            popq    %rbp
// 340: ff e0                         jmpq    *%rax
// 342: 49 89 c6                      movq    %rax, %r14
// 345: 49 29 de                      subq    %rbx, %r14
// 348: 49 83 c6 b8                   addq    $-0x48, %r14
// 34c: 49 c1 ee 03                   shrq    $0x3, %r14
// 350: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 354: 31 c0                         xorl    %eax, %eax
// 356: e9 7c fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 35b: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_SUBSCR_code_body[860] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4c, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x3a, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xee, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x31, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf0, 0x4f, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x7c, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BINARY_SUBSCR_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_SUBSCR_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_SUBSCR_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_SUBSCR_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5d                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3e                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 33                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 57                         jle     0xf1 <_JIT_ENTRY+0xf1>
// 9a: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9e: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// a3: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a7: 0f 85 8b 00 00 00             jne     0x138 <_JIT_ENTRY+0x138>
// ad: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b2: e9 83 00 00 00                jmp     0x13a <_JIT_ENTRY+0x13a>
// b7: 4d 89 fe                      movq    %r15, %r14
// ba: 49 29 de                      subq    %rbx, %r14
// bd: 49 83 c6 b8                   addq    $-0x48, %r14
// c1: 49 c1 ee 03                   shrq    $0x3, %r14
// c5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// c9: 48 8b 03                      movq    (%rbx), %rax
// cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ce:  R_X86_64_64  _JIT_TARGET
// d6: 89 c9                         movl    %ecx, %ecx
// d8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// dc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// e2: 48 83 c4 28                   addq    $0x28, %rsp
// e6: 5b                            popq    %rbx
// e7: 41 5c                         popq    %r12
// e9: 41 5d                         popq    %r13
// eb: 41 5e                         popq    %r14
// ed: 41 5f                         popq    %r15
// ef: 5d                            popq    %rbp
// f0: c3                            retq
// f1: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// f6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f8:  R_X86_64_64  .rodata.str1.1+0x39
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_CheckRecursiveCall
// 10a: 48 89 d7                      movq    %rdx, %rdi
// 10d: ff d0                         callq   *%rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 74 08                         je      0x11b <_JIT_ENTRY+0x11b>
// 113: 4c 89 f8                      movq    %r15, %rax
// 116: e9 34 01 00 00                jmp     0x24f <_JIT_ENTRY+0x24f>
// 11b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 120: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 125: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 129: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 12e: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 132: 0f 84 75 ff ff ff             je      0xad <_JIT_ENTRY+0xad>
// 138: 31 ff                         xorl    %edi, %edi
// 13a: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 13f: 4c 89 f6                      movq    %r14, %rsi
// 142: 41 ff d0                      callq   *%r8
// 145: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 14a: ff 47 2c                      incl    0x2c(%rdi)
// 14d: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 152: 49 8b 06                      movq    (%r14), %rax
// 155: 48 85 c0                      testq   %rax, %rax
// 158: 7f 2b                         jg      0x185 <_JIT_ENTRY+0x185>
// 15a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015c:  R_X86_64_64  .rodata.str1.1
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_NegativeRefcount
// 16e: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 173: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 178: 4c 89 f2                      movq    %r14, %rdx
// 17b: ff d0                         callq   *%rax
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 49 8b 06                      movq    (%r14), %rax
// 185: 85 c0                         testl   %eax, %eax
// 187: 78 31                         js      0x1ba <_JIT_ENTRY+0x1ba>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 193: ff d0                         callq   *%rax
// 195: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19a: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 19f: 48 ff 08                      decq    (%rax)
// 1a2: 75 16                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_Dealloc
// 1ae: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ba: 49 8b 04 24                   movq    (%r12), %rax
// 1be: 48 85 c0                      testq   %rax, %rax
// 1c1: 7f 27                         jg      0x1ea <_JIT_ENTRY+0x1ea>
// 1c3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c5:  R_X86_64_64  .rodata.str1.1
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_NegativeRefcount
// 1d7: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1dc: 4c 89 e2                      movq    %r12, %rdx
// 1df: ff d0                         callq   *%rax
// 1e1: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e6: 49 8b 04 24                   movq    (%r12), %rax
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 2b                         js      0x219 <_JIT_ENTRY+0x219>
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ff: 49 ff 0c 24                   decq    (%r12)
// 203: 75 14                         jne     0x219 <_JIT_ENTRY+0x219>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_Dealloc
// 20f: 4c 89 e7                      movq    %r12, %rdi
// 212: ff d0                         callq   *%rax
// 214: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 219: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 21d: 48 83 7c 24 18 00             cmpq    $0x0, 0x18(%rsp)
// 223: 74 2a                         je      0x24f <_JIT_ENTRY+0x24f>
// 225: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 229: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 22e: 48 89 08                      movq    %rcx, (%rax)
// 231: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 235: 48 8b 00                      movq    (%rax), %rax
// 238: 84 c0                         testb   %al, %al
// 23a: 74 28                         je      0x264 <_JIT_ENTRY+0x264>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_HandlePending
// 246: ff d0                         callq   *%rax
// 248: 85 c0                         testl   %eax, %eax
// 24a: 74 18                         je      0x264 <_JIT_ENTRY+0x264>
// 24c: 4c 89 f0                      movq    %r14, %rax
// 24f: 48 29 d8                      subq    %rbx, %rax
// 252: 48 83 c0 b8                   addq    $-0x48, %rax
// 256: 48 c1 e8 03                   shrq    $0x3, %rax
// 25a: 89 43 40                      movl    %eax, 0x40(%rbx)
// 25d: 31 c0                         xorl    %eax, %eax
// 25f: e9 7e fe ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _JIT_OPARG
// 26e: f7 d0                         notl    %eax
// 270: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 275: 48 63 e8                      movslq  %eax, %rbp
// 278: 4d 8b 6c ef f0                movq    -0x10(%r15,%rbp,8), %r13
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  PyDict_Type
// 287: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 28b: 0f 85 29 fe ff ff             jne     0xba <_JIT_ENTRY+0xba>
// 291: 4d 8b 64 ef f8                movq    -0x8(%r15,%rbp,8), %r12
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  PyDict_GetItemRef
// 2a0: 48 8d 54 24 20                leaq    0x20(%rsp), %rdx
// 2a5: 4c 89 ef                      movq    %r13, %rdi
// 2a8: 4c 89 e6                      movq    %r12, %rsi
// 2ab: ff d0                         callq   *%rax
// 2ad: 41 89 c6                      movl    %eax, %r14d
// 2b0: 85 c0                         testl   %eax, %eax
// 2b2: 74 14                         je      0x2c8 <_JIT_ENTRY+0x2c8>
// 2b4: 49 8b 45 00                   movq    (%r13), %rax
// 2b8: 48 85 c0                      testq   %rax, %rax
// 2bb: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2c0: 7e 23                         jle     0x2e5 <_JIT_ENTRY+0x2e5>
// 2c2: 85 c0                         testl   %eax, %eax
// 2c4: 79 4a                         jns     0x310 <_JIT_ENTRY+0x310>
// 2c6: eb 73                         jmp     0x33b <_JIT_ENTRY+0x33b>
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _PyErr_SetKeyError
// 2d2: 4c 89 e7                      movq    %r12, %rdi
// 2d5: ff d0                         callq   *%rax
// 2d7: 49 8b 45 00                   movq    (%r13), %rax
// 2db: 48 85 c0                      testq   %rax, %rax
// 2de: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2e3: 7f dd                         jg      0x2c2 <_JIT_ENTRY+0x2c2>
// 2e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e7:  R_X86_64_64  .rodata.str1.1
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_NegativeRefcount
// 2f9: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// 2fe: 4c 89 ea                      movq    %r13, %rdx
// 301: ff d0                         callq   *%rax
// 303: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 308: 49 8b 45 00                   movq    (%r13), %rax
// 30c: 85 c0                         testl   %eax, %eax
// 30e: 78 2b                         js      0x33b <_JIT_ENTRY+0x33b>
// 310: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000312:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31a: ff d0                         callq   *%rax
// 31c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 321: 49 ff 4d 00                   decq    (%r13)
// 325: 75 14                         jne     0x33b <_JIT_ENTRY+0x33b>
// 327: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000329:  R_X86_64_64  _Py_Dealloc
// 331: 4c 89 ef                      movq    %r13, %rdi
// 334: ff d0                         callq   *%rax
// 336: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 33b: 49 8b 04 24                   movq    (%r12), %rax
// 33f: 48 85 c0                      testq   %rax, %rax
// 342: 7f 27                         jg      0x36b <_JIT_ENTRY+0x36b>
// 344: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000346:  R_X86_64_64  .rodata.str1.1
// 34e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000350:  R_X86_64_64  _Py_NegativeRefcount
// 358: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 35d: 4c 89 e2                      movq    %r12, %rdx
// 360: ff d0                         callq   *%rax
// 362: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 367: 49 8b 04 24                   movq    (%r12), %rax
// 36b: 85 c0                         testl   %eax, %eax
// 36d: 78 2b                         js      0x39a <_JIT_ENTRY+0x39a>
// 36f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000371:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 379: ff d0                         callq   *%rax
// 37b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 380: 49 ff 0c 24                   decq    (%r12)
// 384: 75 14                         jne     0x39a <_JIT_ENTRY+0x39a>
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _Py_Dealloc
// 390: 4c 89 e7                      movq    %r12, %rdi
// 393: ff d0                         callq   *%rax
// 395: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 39a: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 39e: 48 83 c0 f0                   addq    $-0x10, %rax
// 3a2: 45 85 f6                      testl   %r14d, %r14d
// 3a5: 0f 8e a4 fe ff ff             jle     0x24f <_JIT_ENTRY+0x24f>
// 3ab: 49 8d 34 ef                   leaq    (%r15,%rbp,8), %rsi
// 3af: 48 83 c6 f8                   addq    $-0x8, %rsi
// 3b3: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 3b8: 48 89 08                      movq    %rcx, (%rax)
// 3bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bd:  R_X86_64_64  _JIT_CONTINUE
// 3c5: 48 89 df                      movq    %rbx, %rdi
// 3c8: 48 83 c4 28                   addq    $0x28, %rsp
// 3cc: 5b                            popq    %rbx
// 3cd: 41 5c                         popq    %r12
// 3cf: 41 5d                         popq    %r13
// 3d1: 41 5e                         popq    %r14
// 3d3: 41 5f                         popq    %r15
// 3d5: 5d                            popq    %rbp
// 3d6: ff e0                         jmpq    *%rax
// 3d8: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_SUBSCR_DICT_code_body[985] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5d, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3e, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x33, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x57, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x8b, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4c, 0x89, 0xf8, 0xe9, 0x34, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x75, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x18, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0xff, 0x08, 0x75, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x83, 0x7c, 0x24, 0x18, 0x00, 0x74, 0x2a, 0x4f, 0x8d, 0x34, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x18, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x7e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x6c, 0xef, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x29, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x64, 0xef, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x20, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x85, 0xc0, 0x74, 0x14, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x7e, 0x23, 0x85, 0xc0, 0x79, 0x4a, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x7f, 0xdd, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x83, 0xc0, 0xf0, 0x45, 0x85, 0xf6, 0x0f, 0x8e, 0xa4, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xef, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_BINARY_SUBSCR_DICT_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x371, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3bd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_SUBSCR_DICT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_SUBSCR_DICT_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_SUBSCR_LIST_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 59                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3a                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2f                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 80 00 00 00             jne     0x12c <_JIT_ENTRY+0x12c>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: eb 7b                         jmp     0x12e <_JIT_ENTRY+0x12e>
// b3: 4d 89 fe                      movq    %r15, %r14
// b6: 49 29 de                      subq    %rbx, %r14
// b9: 49 83 c6 b8                   addq    $-0x48, %r14
// bd: 49 c1 ee 03                   shrq    $0x3, %r14
// c1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 0f 85 93 02 00 00             jne     0x3a6 <_JIT_ENTRY+0x3a6>
// 113: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 118: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 11d: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 121: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 126: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12a: 74 80                         je      0xac <_JIT_ENTRY+0xac>
// 12c: 31 ff                         xorl    %edi, %edi
// 12e: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 133: 4c 89 f6                      movq    %r14, %rsi
// 136: 41 ff d0                      callq   *%r8
// 139: 48 8b 14 24                   movq    (%rsp), %rdx
// 13d: ff 42 2c                      incl    0x2c(%rdx)
// 140: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 145: 49 8b 06                      movq    (%r14), %rax
// 148: 48 85 c0                      testq   %rax, %rax
// 14b: 7f 2a                         jg      0x177 <_JIT_ENTRY+0x177>
// 14d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014f:  R_X86_64_64  .rodata.str1.1
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _Py_NegativeRefcount
// 161: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 166: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 16b: 4c 89 f2                      movq    %r14, %rdx
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 14 24                   movq    (%rsp), %rdx
// 174: 49 8b 06                      movq    (%r14), %rax
// 177: 85 c0                         testl   %eax, %eax
// 179: 78 2f                         js      0x1aa <_JIT_ENTRY+0x1aa>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 185: ff d0                         callq   *%rax
// 187: 48 8b 14 24                   movq    (%rsp), %rdx
// 18b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 190: 48 ff 08                      decq    (%rax)
// 193: 75 15                         jne     0x1aa <_JIT_ENTRY+0x1aa>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 14 24                   movq    (%rsp), %rdx
// 1aa: 49 8b 04 24                   movq    (%r12), %rax
// 1ae: 48 85 c0                      testq   %rax, %rax
// 1b1: 7f 26                         jg      0x1d9 <_JIT_ENTRY+0x1d9>
// 1b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b5:  R_X86_64_64  .rodata.str1.1
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_NegativeRefcount
// 1c7: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1cc: 4c 89 e2                      movq    %r12, %rdx
// 1cf: ff d0                         callq   *%rax
// 1d1: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d5: 49 8b 04 24                   movq    (%r12), %rax
// 1d9: 85 c0                         testl   %eax, %eax
// 1db: 78 29                         js      0x206 <_JIT_ENTRY+0x206>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ed: 49 ff 0c 24                   decq    (%r12)
// 1f1: 75 13                         jne     0x206 <_JIT_ENTRY+0x206>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_Dealloc
// 1fd: 4c 89 e7                      movq    %r12, %rdi
// 200: ff d0                         callq   *%rax
// 202: 48 8b 14 24                   movq    (%rsp), %rdx
// 206: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 20a: 48 83 7c 24 10 00             cmpq    $0x0, 0x10(%rsp)
// 210: 0f 84 8d 01 00 00             je      0x3a3 <_JIT_ENTRY+0x3a3>
// 216: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 21a: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 21f: 48 89 08                      movq    %rcx, (%rax)
// 222: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 226: 48 8b 00                      movq    (%rax), %rax
// 229: 84 c0                         testb   %al, %al
// 22b: 74 1f                         je      0x24c <_JIT_ENTRY+0x24c>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_HandlePending
// 237: 48 89 d7                      movq    %rdx, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 48 8b 14 24                   movq    (%rsp), %rdx
// 240: 85 c0                         testl   %eax, %eax
// 242: 74 08                         je      0x24c <_JIT_ENTRY+0x24c>
// 244: 4d 89 f7                      movq    %r14, %r15
// 247: e9 5a 01 00 00                jmp     0x3a6 <_JIT_ENTRY+0x3a6>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _JIT_OPARG
// 256: f7 d0                         notl    %eax
// 258: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25d: 48 63 e8                      movslq  %eax, %rbp
// 260: 4d 8b 6c ef f8                movq    -0x8(%r15,%rbp,8), %r13
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  PyLong_Type
// 26f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 273: 0f 85 3d fe ff ff             jne     0xb6 <_JIT_ENTRY+0xb6>
// 279: 4d 8b 64 ef f0                movq    -0x10(%r15,%rbp,8), %r12
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  PyList_Type
// 288: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 28d: 0f 85 23 fe ff ff             jne     0xb6 <_JIT_ENTRY+0xb6>
// 293: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 298: 0f 87 18 fe ff ff             ja      0xb6 <_JIT_ENTRY+0xb6>
// 29e: 41 8b 45 18                   movl    0x18(%r13), %eax
// 2a2: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 2a7: 0f 8e 09 fe ff ff             jle     0xb6 <_JIT_ENTRY+0xb6>
// 2ad: 49 8b 4c 24 18                movq    0x18(%r12), %rcx
// 2b2: 4c 8b 34 c1                   movq    (%rcx,%rax,8), %r14
// 2b6: 41 8b 06                      movl    (%r14), %eax
// 2b9: ff c0                         incl    %eax
// 2bb: 74 13                         je      0x2d0 <_JIT_ENTRY+0x2d0>
// 2bd: 41 89 06                      movl    %eax, (%r14)
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2ca: ff d0                         callq   *%rax
// 2cc: 48 8b 14 24                   movq    (%rsp), %rdx
// 2d0: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2d5: 75 30                         jne     0x307 <_JIT_ENTRY+0x307>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  PyInterpreterState_Get
// 2e1: ff d0                         callq   *%rax
// 2e3: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2ee: 49 ff 4d 00                   decq    (%r13)
// 2f2: 75 13                         jne     0x307 <_JIT_ENTRY+0x307>
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  PyObject_Free
// 2fe: 4c 89 ef                      movq    %r13, %rdi
// 301: ff d0                         callq   *%rax
// 303: 48 8b 14 24                   movq    (%rsp), %rdx
// 307: 49 8b 04 24                   movq    (%r12), %rax
// 30b: 48 85 c0                      testq   %rax, %rax
// 30e: 7f 26                         jg      0x336 <_JIT_ENTRY+0x336>
// 310: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000312:  R_X86_64_64  .rodata.str1.1
// 31a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031c:  R_X86_64_64  _Py_NegativeRefcount
// 324: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 329: 4c 89 e2                      movq    %r12, %rdx
// 32c: ff d0                         callq   *%rax
// 32e: 48 8b 14 24                   movq    (%rsp), %rdx
// 332: 49 8b 04 24                   movq    (%r12), %rax
// 336: 4d 8d 2c ef                   leaq    (%r15,%rbp,8), %r13
// 33a: 49 83 c5 f8                   addq    $-0x8, %r13
// 33e: 85 c0                         testl   %eax, %eax
// 340: 78 29                         js      0x36b <_JIT_ENTRY+0x36b>
// 342: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000344:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34c: ff d0                         callq   *%rax
// 34e: 48 8b 14 24                   movq    (%rsp), %rdx
// 352: 49 ff 0c 24                   decq    (%r12)
// 356: 75 13                         jne     0x36b <_JIT_ENTRY+0x36b>
// 358: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035a:  R_X86_64_64  _Py_Dealloc
// 362: 4c 89 e7                      movq    %r12, %rdi
// 365: ff d0                         callq   *%rax
// 367: 48 8b 14 24                   movq    (%rsp), %rdx
// 36b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036d:  R_X86_64_64  _JIT_OPARG
// 375: f7 d0                         notl    %eax
// 377: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 37c: 48 98                         cltq
// 37e: 4d 89 74 c7 f0                movq    %r14, -0x10(%r15,%rax,8)
// 383: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000385:  R_X86_64_64  _JIT_CONTINUE
// 38d: 48 89 df                      movq    %rbx, %rdi
// 390: 4c 89 ee                      movq    %r13, %rsi
// 393: 48 83 c4 18                   addq    $0x18, %rsp
// 397: 5b                            popq    %rbx
// 398: 41 5c                         popq    %r12
// 39a: 41 5d                         popq    %r13
// 39c: 41 5e                         popq    %r14
// 39e: 41 5f                         popq    %r15
// 3a0: 5d                            popq    %rbp
// 3a1: ff e0                         jmpq    *%rax
// 3a3: 49 89 c7                      movq    %rax, %r15
// 3a6: 49 29 df                      subq    %rbx, %r15
// 3a9: 49 83 c7 b8                   addq    $-0x48, %r15
// 3ad: 49 c1 ef 03                   shrq    $0x3, %r15
// 3b1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 3b5: 31 c0                         xorl    %eax, %eax
// 3b7: e9 22 fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 3bc: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_SUBSCR_LIST_INT_code_body[957] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x59, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3a, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2f, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x80, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x7b, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x93, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x80, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x0f, 0x84, 0x8d, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf7, 0xe9, 0x5a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x6c, 0xef, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x3d, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x64, 0xef, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x23, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x18, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x09, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x4c, 0x24, 0x18, 0x4c, 0x8b, 0x34, 0xc1, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x13, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xef, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x74, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x22, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BINARY_SUBSCR_LIST_INT_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x344, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x36d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x385, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_SUBSCR_LIST_INT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_SUBSCR_STR_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 4b                         jle     0xe4 <_JIT_ENTRY+0xe4>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 7b                         jne     0x11e <_JIT_ENTRY+0x11e>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 76                         jmp     0x120 <_JIT_ENTRY+0x120>
// aa: 4d 89 f5                      movq    %r14, %r13
// ad: 49 29 dd                      subq    %rbx, %r13
// b0: 49 83 c5 b8                   addq    $-0x48, %r13
// b4: 49 c1 ed 03                   shrq    $0x3, %r13
// b8: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// bc: 48 8b 03                      movq    (%rbx), %rax
// bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c1:  R_X86_64_64  _JIT_TARGET
// c9: 89 c9                         movl    %ecx, %ecx
// cb: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cf: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d5: 48 83 c4 18                   addq    $0x18, %rsp
// d9: 5b                            popq    %rbx
// da: 41 5c                         popq    %r12
// dc: 41 5d                         popq    %r13
// de: 41 5e                         popq    %r14
// e0: 41 5f                         popq    %r15
// e2: 5d                            popq    %rbp
// e3: c3                            retq
// e4: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000eb:  R_X86_64_64  .rodata.str1.1+0x39
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_CheckRecursiveCall
// fd: 48 89 d7                      movq    %rdx, %rdi
// 100: ff d0                         callq   *%rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 0f 85 b8 01 00 00             jne     0x2c2 <_JIT_ENTRY+0x2c2>
// 10a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10f: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 114: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 118: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11c: 74 85                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11e: 31 ff                         xorl    %edi, %edi
// 120: 48 89 ee                      movq    %rbp, %rsi
// 123: 41 ff d0                      callq   *%r8
// 126: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 12b: 41 ff 40 2c                   incl    0x2c(%r8)
// 12f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 134: 48 8b 45 00                   movq    (%rbp), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 27                         jg      0x164 <_JIT_ENTRY+0x164>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 156: 48 89 ea                      movq    %rbp, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 160: 48 8b 45 00                   movq    (%rbp), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 2b                         js      0x193 <_JIT_ENTRY+0x193>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 179: 48 ff 4d 00                   decq    (%rbp)
// 17d: 75 14                         jne     0x193 <_JIT_ENTRY+0x193>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 48 89 ef                      movq    %rbp, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 48 85 c0                      testq   %rax, %rax
// 19a: 7f 27                         jg      0x1c3 <_JIT_ENTRY+0x1c3>
// 19c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019e:  R_X86_64_64  .rodata.str1.1
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _Py_NegativeRefcount
// 1b0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b5: 4c 89 e2                      movq    %r12, %rdx
// 1b8: ff d0                         callq   *%rax
// 1ba: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1bf: 49 8b 04 24                   movq    (%r12), %rax
// 1c3: 85 c0                         testl   %eax, %eax
// 1c5: 78 2b                         js      0x1f2 <_JIT_ENTRY+0x1f2>
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d1: ff d0                         callq   *%rax
// 1d3: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1d8: 49 ff 0c 24                   decq    (%r12)
// 1dc: 75 14                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_Dealloc
// 1e8: 4c 89 e7                      movq    %r12, %rdi
// 1eb: ff d0                         callq   *%rax
// 1ed: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1f2: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f6: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1fb: 48 85 c9                      testq   %rcx, %rcx
// 1fe: 0f 84 bb 00 00 00             je      0x2bf <_JIT_ENTRY+0x2bf>
// 204: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 208: 48 89 08                      movq    %rcx, (%rax)
// 20b: 49 8b 40 10                   movq    0x10(%r8), %rax
// 20f: 48 8b 00                      movq    (%rax), %rax
// 212: 84 c0                         testb   %al, %al
// 214: 74 20                         je      0x236 <_JIT_ENTRY+0x236>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_HandlePending
// 220: 4c 89 c7                      movq    %r8, %rdi
// 223: ff d0                         callq   *%rax
// 225: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 74 08                         je      0x236 <_JIT_ENTRY+0x236>
// 22e: 4d 89 ee                      movq    %r13, %r14
// 231: e9 8c 00 00 00                jmp     0x2c2 <_JIT_ENTRY+0x2c2>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _JIT_OPARG
// 240: f7 d0                         notl    %eax
// 242: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 247: 48 98                         cltq
// 249: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 24e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000250:  R_X86_64_64  PyLong_Type
// 258: 48 39 4f 08                   cmpq    %rcx, 0x8(%rdi)
// 25c: 0f 85 4b fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 262: 4d 8b 64 c6 f0                movq    -0x10(%r14,%rax,8), %r12
// 267: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000269:  R_X86_64_64  PyUnicode_Type
// 271: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 276: 0f 85 31 fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 27c: 48 83 7f 10 08                cmpq    $0x8, 0x10(%rdi)
// 281: 0f 87 26 fe ff ff             ja      0xad <_JIT_ENTRY+0xad>
// 287: 8b 4f 18                      movl    0x18(%rdi), %ecx
// 28a: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 28f: 0f 8e 18 fe ff ff             jle     0xad <_JIT_ENTRY+0xad>
// 295: 41 8b 54 24 20                movl    0x20(%r12), %edx
// 29a: 89 d6                         movl    %edx, %esi
// 29c: c1 ee 02                      shrl    $0x2, %esi
// 29f: 83 e6 07                      andl    $0x7, %esi
// 2a2: 83 fe 02                      cmpl    $0x2, %esi
// 2a5: 74 31                         je      0x2d8 <_JIT_ENTRY+0x2d8>
// 2a7: 83 fe 01                      cmpl    $0x1, %esi
// 2aa: 75 3c                         jne     0x2e8 <_JIT_ENTRY+0x2e8>
// 2ac: f6 c2 20                      testb   $0x20, %dl
// 2af: 75 43                         jne     0x2f4 <_JIT_ENTRY+0x2f4>
// 2b1: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 2b6: 0f b6 0c 0a                   movzbl  (%rdx,%rcx), %ecx
// 2ba: e9 83 00 00 00                jmp     0x342 <_JIT_ENTRY+0x342>
// 2bf: 49 89 c6                      movq    %rax, %r14
// 2c2: 49 29 de                      subq    %rbx, %r14
// 2c5: 49 83 c6 b8                   addq    $-0x48, %r14
// 2c9: 49 c1 ee 03                   shrq    $0x3, %r14
// 2cd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2d1: 31 c0                         xorl    %eax, %eax
// 2d3: e9 fd fd ff ff                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 2d8: f6 c2 20                      testb   $0x20, %dl
// 2db: 75 32                         jne     0x30f <_JIT_ENTRY+0x30f>
// 2dd: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 2e2: 0f b7 0c 4a                   movzwl  (%rdx,%rcx,2), %ecx
// 2e6: eb 5a                         jmp     0x342 <_JIT_ENTRY+0x342>
// 2e8: f6 c2 20                      testb   $0x20, %dl
// 2eb: 75 3d                         jne     0x32a <_JIT_ENTRY+0x32a>
// 2ed: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 2f2: eb 4b                         jmp     0x33f <_JIT_ENTRY+0x33f>
// 2f4: 31 f6                         xorl    %esi, %esi
// 2f6: f6 c2 40                      testb   $0x40, %dl
// 2f9: 40 0f 94 c6                   sete    %sil
// 2fd: 48 c1 e6 04                   shlq    $0x4, %rsi
// 301: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 305: 48 83 c2 28                   addq    $0x28, %rdx
// 309: 0f b6 0c 0a                   movzbl  (%rdx,%rcx), %ecx
// 30d: eb 33                         jmp     0x342 <_JIT_ENTRY+0x342>
// 30f: 31 f6                         xorl    %esi, %esi
// 311: f6 c2 40                      testb   $0x40, %dl
// 314: 40 0f 94 c6                   sete    %sil
// 318: 48 c1 e6 04                   shlq    $0x4, %rsi
// 31c: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 320: 48 83 c2 28                   addq    $0x28, %rdx
// 324: 0f b7 0c 4a                   movzwl  (%rdx,%rcx,2), %ecx
// 328: eb 18                         jmp     0x342 <_JIT_ENTRY+0x342>
// 32a: 31 f6                         xorl    %esi, %esi
// 32c: f6 c2 40                      testb   $0x40, %dl
// 32f: 40 0f 94 c6                   sete    %sil
// 333: 48 c1 e6 04                   shlq    $0x4, %rsi
// 337: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 33b: 48 83 c2 28                   addq    $0x28, %rdx
// 33f: 8b 0c 8a                      movl    (%rdx,%rcx,4), %ecx
// 342: 83 f9 7f                      cmpl    $0x7f, %ecx
// 345: 0f 87 62 fd ff ff             ja      0xad <_JIT_ENTRY+0xad>
// 34b: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 34f: 49 83 c5 f8                   addq    $-0x8, %r13
// 353: 89 c8                         movl    %ecx, %eax
// 355: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 359: 48 c1 e0 04                   shlq    $0x4, %rax
// 35d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000035f:  R_X86_64_64  _PyRuntime
// 367: 4c 8d 3c 01                   leaq    (%rcx,%rax), %r15
// 36b: 49 81 c7 a0 32 01 00          addq    $0x132a0, %r15          # imm = 0x132A0
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  .text+0x430
// 37c: 4c 89 c5                      movq    %r8, %rbp
// 37f: ff d0                         callq   *%rax
// 381: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000383:  R_X86_64_64  .text+0x3d0
// 38b: bf e3 01 00 00                movl    $0x1e3, %edi            # imm = 0x1E3
// 390: 4c 89 e6                      movq    %r12, %rsi
// 393: ff d0                         callq   *%rax
// 395: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000397:  R_X86_64_64  _JIT_OPARG
// 39f: f7 d0                         notl    %eax
// 3a1: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3a6: 48 98                         cltq
// 3a8: 4d 89 7c c6 f0                movq    %r15, -0x10(%r14,%rax,8)
// 3ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003af:  R_X86_64_64  _JIT_CONTINUE
// 3b7: 48 89 df                      movq    %rbx, %rdi
// 3ba: 4c 89 ee                      movq    %r13, %rsi
// 3bd: 48 89 ea                      movq    %rbp, %rdx
// 3c0: 48 83 c4 18                   addq    $0x18, %rsp
// 3c4: 5b                            popq    %rbx
// 3c5: 41 5c                         popq    %r12
// 3c7: 41 5d                         popq    %r13
// 3c9: 41 5e                         popq    %r14
// 3cb: 41 5f                         popq    %r15
// 3cd: 5d                            popq    %rbp
// 3ce: ff e0                         jmpq    *%rax
// 
// 00000000000003d0 <Py_DECREF>:
// 3d0: 53                            pushq   %rbx
// 3d1: 48 89 f3                      movq    %rsi, %rbx
// 3d4: 48 8b 06                      movq    (%rsi), %rax
// 3d7: 48 85 c0                      testq   %rax, %rax
// 3da: 7e 06                         jle     0x3e2 <Py_DECREF+0x12>
// 3dc: 85 c0                         testl   %eax, %eax
// 3de: 79 24                         jns     0x404 <Py_DECREF+0x34>
// 3e0: eb 33                         jmp     0x415 <Py_DECREF+0x45>
// 3e2: 89 fe                         movl    %edi, %esi
// 3e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003e6:  R_X86_64_64  .rodata.str1.1
// 3ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f0:  R_X86_64_64  _Py_NegativeRefcount
// 3f8: 48 89 da                      movq    %rbx, %rdx
// 3fb: ff d0                         callq   *%rax
// 3fd: 48 8b 03                      movq    (%rbx), %rax
// 400: 85 c0                         testl   %eax, %eax
// 402: 78 11                         js      0x415 <Py_DECREF+0x45>
// 404: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000406:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 40e: ff d0                         callq   *%rax
// 410: 48 ff 0b                      decq    (%rbx)
// 413: 74 02                         je      0x417 <Py_DECREF+0x47>
// 415: 5b                            popq    %rbx
// 416: c3                            retq
// 417: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000419:  R_X86_64_64  _Py_Dealloc
// 421: 48 89 df                      movq    %rbx, %rdi
// 424: 5b                            popq    %rbx
// 425: ff e0                         jmpq    *%rax
// 427: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 
// 0000000000000430 <_Py_DECREF_SPECIALIZED>:
// 430: 53                            pushq   %rbx
// 431: f6 47 03 80                   testb   $-0x80, 0x3(%rdi)
// 435: 75 1b                         jne     0x452 <_Py_DECREF_SPECIALIZED+0x22>
// 437: 48 89 fb                      movq    %rdi, %rbx
// 43a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000043c:  R_X86_64_64  PyInterpreterState_Get
// 444: ff d0                         callq   *%rax
// 446: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 44d: 48 ff 0b                      decq    (%rbx)
// 450: 74 02                         je      0x454 <_Py_DECREF_SPECIALIZED+0x24>
// 452: 5b                            popq    %rbx
// 453: c3                            retq
// 454: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000456:  R_X86_64_64  PyObject_Free
// 45e: 48 89 df                      movq    %rbx, %rdi
// 461: 5b                            popq    %rbx
// 462: ff e0                         jmpq    *%rax
// 464: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_SUBSCR_STR_INT_code_body[1125] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4b, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7b, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x76, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xb8, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x85, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xee, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4f, 0x08, 0x0f, 0x85, 0x4b, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x64, 0xc6, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x31, 0xfe, 0xff, 0xff, 0x48, 0x83, 0x7f, 0x10, 0x08, 0x0f, 0x87, 0x26, 0xfe, 0xff, 0xff, 0x8b, 0x4f, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0x18, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x54, 0x24, 0x20, 0x89, 0xd6, 0xc1, 0xee, 0x02, 0x83, 0xe6, 0x07, 0x83, 0xfe, 0x02, 0x74, 0x31, 0x83, 0xfe, 0x01, 0x75, 0x3c, 0xf6, 0xc2, 0x20, 0x75, 0x43, 0x49, 0x8b, 0x54, 0x24, 0x38, 0x0f, 0xb6, 0x0c, 0x0a, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfd, 0xff, 0xff, 0xf6, 0xc2, 0x20, 0x75, 0x32, 0x49, 0x8b, 0x54, 0x24, 0x38, 0x0f, 0xb7, 0x0c, 0x4a, 0xeb, 0x5a, 0xf6, 0xc2, 0x20, 0x75, 0x3d, 0x49, 0x8b, 0x54, 0x24, 0x38, 0xeb, 0x4b, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x0f, 0xb6, 0x0c, 0x0a, 0xeb, 0x33, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x0f, 0xb7, 0x0c, 0x4a, 0xeb, 0x18, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x8b, 0x0c, 0x8a, 0x83, 0xf9, 0x7f, 0x0f, 0x87, 0x62, 0xfd, 0xff, 0xff, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x83, 0xc5, 0xf8, 0x89, 0xc8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x3c, 0x01, 0x49, 0x81, 0xc7, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc5, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x7c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0xf6, 0x47, 0x03, 0x80, 0x75, 0x1b, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_BINARY_SUBSCR_STR_INT_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x35f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x430},
    {0x383, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3d0},
    {0x397, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3af, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x406, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x419, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x43c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x456, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_SUBSCR_STR_INT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _CALL_BUILTIN_Oplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BINARY_SUBSCR_TUPLE_INT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 59                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3a                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2f                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 80 00 00 00             jne     0x12c <_JIT_ENTRY+0x12c>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: eb 7b                         jmp     0x12e <_JIT_ENTRY+0x12e>
// b3: 4d 89 fe                      movq    %r15, %r14
// b6: 49 29 de                      subq    %rbx, %r14
// b9: 49 83 c6 b8                   addq    $-0x48, %r14
// bd: 49 c1 ee 03                   shrq    $0x3, %r14
// c1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 0f 85 8f 02 00 00             jne     0x3a2 <_JIT_ENTRY+0x3a2>
// 113: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 118: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 11d: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 121: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 126: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12a: 74 80                         je      0xac <_JIT_ENTRY+0xac>
// 12c: 31 ff                         xorl    %edi, %edi
// 12e: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 133: 4c 89 f6                      movq    %r14, %rsi
// 136: 41 ff d0                      callq   *%r8
// 139: 48 8b 14 24                   movq    (%rsp), %rdx
// 13d: ff 42 2c                      incl    0x2c(%rdx)
// 140: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 145: 49 8b 06                      movq    (%r14), %rax
// 148: 48 85 c0                      testq   %rax, %rax
// 14b: 7f 2a                         jg      0x177 <_JIT_ENTRY+0x177>
// 14d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014f:  R_X86_64_64  .rodata.str1.1
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _Py_NegativeRefcount
// 161: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 166: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 16b: 4c 89 f2                      movq    %r14, %rdx
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 14 24                   movq    (%rsp), %rdx
// 174: 49 8b 06                      movq    (%r14), %rax
// 177: 85 c0                         testl   %eax, %eax
// 179: 78 2f                         js      0x1aa <_JIT_ENTRY+0x1aa>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 185: ff d0                         callq   *%rax
// 187: 48 8b 14 24                   movq    (%rsp), %rdx
// 18b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 190: 48 ff 08                      decq    (%rax)
// 193: 75 15                         jne     0x1aa <_JIT_ENTRY+0x1aa>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 14 24                   movq    (%rsp), %rdx
// 1aa: 49 8b 04 24                   movq    (%r12), %rax
// 1ae: 48 85 c0                      testq   %rax, %rax
// 1b1: 7f 26                         jg      0x1d9 <_JIT_ENTRY+0x1d9>
// 1b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b5:  R_X86_64_64  .rodata.str1.1
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_NegativeRefcount
// 1c7: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1cc: 4c 89 e2                      movq    %r12, %rdx
// 1cf: ff d0                         callq   *%rax
// 1d1: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d5: 49 8b 04 24                   movq    (%r12), %rax
// 1d9: 85 c0                         testl   %eax, %eax
// 1db: 78 29                         js      0x206 <_JIT_ENTRY+0x206>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ed: 49 ff 0c 24                   decq    (%r12)
// 1f1: 75 13                         jne     0x206 <_JIT_ENTRY+0x206>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_Dealloc
// 1fd: 4c 89 e7                      movq    %r12, %rdi
// 200: ff d0                         callq   *%rax
// 202: 48 8b 14 24                   movq    (%rsp), %rdx
// 206: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 20a: 48 83 7c 24 10 00             cmpq    $0x0, 0x10(%rsp)
// 210: 0f 84 89 01 00 00             je      0x39f <_JIT_ENTRY+0x39f>
// 216: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 21a: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 21f: 48 89 08                      movq    %rcx, (%rax)
// 222: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 226: 48 8b 00                      movq    (%rax), %rax
// 229: 84 c0                         testb   %al, %al
// 22b: 74 1f                         je      0x24c <_JIT_ENTRY+0x24c>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_HandlePending
// 237: 48 89 d7                      movq    %rdx, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 48 8b 14 24                   movq    (%rsp), %rdx
// 240: 85 c0                         testl   %eax, %eax
// 242: 74 08                         je      0x24c <_JIT_ENTRY+0x24c>
// 244: 4d 89 f7                      movq    %r14, %r15
// 247: e9 56 01 00 00                jmp     0x3a2 <_JIT_ENTRY+0x3a2>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _JIT_OPARG
// 256: f7 d0                         notl    %eax
// 258: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25d: 48 63 e8                      movslq  %eax, %rbp
// 260: 4d 8b 6c ef f8                movq    -0x8(%r15,%rbp,8), %r13
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  PyLong_Type
// 26f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 273: 0f 85 3d fe ff ff             jne     0xb6 <_JIT_ENTRY+0xb6>
// 279: 4d 8b 64 ef f0                movq    -0x10(%r15,%rbp,8), %r12
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  PyTuple_Type
// 288: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 28d: 0f 85 23 fe ff ff             jne     0xb6 <_JIT_ENTRY+0xb6>
// 293: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 298: 0f 87 18 fe ff ff             ja      0xb6 <_JIT_ENTRY+0xb6>
// 29e: 41 8b 45 18                   movl    0x18(%r13), %eax
// 2a2: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 2a7: 0f 8e 09 fe ff ff             jle     0xb6 <_JIT_ENTRY+0xb6>
// 2ad: 4d 8b 74 c4 18                movq    0x18(%r12,%rax,8), %r14
// 2b2: 41 8b 06                      movl    (%r14), %eax
// 2b5: ff c0                         incl    %eax
// 2b7: 74 13                         je      0x2cc <_JIT_ENTRY+0x2cc>
// 2b9: 41 89 06                      movl    %eax, (%r14)
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2c6: ff d0                         callq   *%rax
// 2c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 2cc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2d1: 75 30                         jne     0x303 <_JIT_ENTRY+0x303>
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  PyInterpreterState_Get
// 2dd: ff d0                         callq   *%rax
// 2df: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e3: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2ea: 49 ff 4d 00                   decq    (%r13)
// 2ee: 75 13                         jne     0x303 <_JIT_ENTRY+0x303>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  PyObject_Free
// 2fa: 4c 89 ef                      movq    %r13, %rdi
// 2fd: ff d0                         callq   *%rax
// 2ff: 48 8b 14 24                   movq    (%rsp), %rdx
// 303: 49 8b 04 24                   movq    (%r12), %rax
// 307: 48 85 c0                      testq   %rax, %rax
// 30a: 7f 26                         jg      0x332 <_JIT_ENTRY+0x332>
// 30c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030e:  R_X86_64_64  .rodata.str1.1
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  _Py_NegativeRefcount
// 320: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 325: 4c 89 e2                      movq    %r12, %rdx
// 328: ff d0                         callq   *%rax
// 32a: 48 8b 14 24                   movq    (%rsp), %rdx
// 32e: 49 8b 04 24                   movq    (%r12), %rax
// 332: 4d 8d 2c ef                   leaq    (%r15,%rbp,8), %r13
// 336: 49 83 c5 f8                   addq    $-0x8, %r13
// 33a: 85 c0                         testl   %eax, %eax
// 33c: 78 29                         js      0x367 <_JIT_ENTRY+0x367>
// 33e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000340:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 348: ff d0                         callq   *%rax
// 34a: 48 8b 14 24                   movq    (%rsp), %rdx
// 34e: 49 ff 0c 24                   decq    (%r12)
// 352: 75 13                         jne     0x367 <_JIT_ENTRY+0x367>
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  _Py_Dealloc
// 35e: 4c 89 e7                      movq    %r12, %rdi
// 361: ff d0                         callq   *%rax
// 363: 48 8b 14 24                   movq    (%rsp), %rdx
// 367: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000369:  R_X86_64_64  _JIT_OPARG
// 371: f7 d0                         notl    %eax
// 373: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 378: 48 98                         cltq
// 37a: 4d 89 74 c7 f0                movq    %r14, -0x10(%r15,%rax,8)
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  _JIT_CONTINUE
// 389: 48 89 df                      movq    %rbx, %rdi
// 38c: 4c 89 ee                      movq    %r13, %rsi
// 38f: 48 83 c4 18                   addq    $0x18, %rsp
// 393: 5b                            popq    %rbx
// 394: 41 5c                         popq    %r12
// 396: 41 5d                         popq    %r13
// 398: 41 5e                         popq    %r14
// 39a: 41 5f                         popq    %r15
// 39c: 5d                            popq    %rbp
// 39d: ff e0                         jmpq    *%rax
// 39f: 49 89 c7                      movq    %rax, %r15
// 3a2: 49 29 df                      subq    %rbx, %r15
// 3a5: 49 83 c7 b8                   addq    $-0x48, %r15
// 3a9: 49 c1 ef 03                   shrq    $0x3, %r15
// 3ad: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 3b1: 31 c0                         xorl    %eax, %eax
// 3b3: e9 26 fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 3b8: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_SUBSCR_TUPLE_INT_code_body[953] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x59, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3a, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2f, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x80, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x7b, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x8f, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x80, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x0f, 0x84, 0x89, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf7, 0xe9, 0x56, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x6c, 0xef, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x3d, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x64, 0xef, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x23, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x18, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x09, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x74, 0xc4, 0x18, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x13, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xef, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x74, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x26, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BINARY_SUBSCR_TUPLE_INT_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x340, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x369, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x381, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BINARY_SUBSCR_TUPLE_INT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _CALL_BUILTIN_Oplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BUILD_CONST_KEY_MAP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f1                      movslq  %ecx, %r14
// 63: 4f 8b 24 f7                   movq    (%r15,%r14,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 48                         jle     0xe1 <_JIT_ENTRY+0xe1>
// 99: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 7c                         jne     0x11f <_JIT_ENTRY+0x11f>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 77                         jmp     0x121 <_JIT_ENTRY+0x121>
// aa: 49 29 df                      subq    %rbx, %r15
// ad: 49 83 c7 b8                   addq    $-0x48, %r15
// b1: 49 c1 ef 03                   shrq    $0x3, %r15
// b5: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// b9: 48 8b 03                      movq    (%rbx), %rax
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_TARGET
// c6: 89 c9                         movl    %ecx, %ecx
// c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d2: 48 83 c4 18                   addq    $0x18, %rsp
// d6: 5b                            popq    %rbx
// d7: 41 5c                         popq    %r12
// d9: 41 5d                         popq    %r13
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: 5d                            popq    %rbp
// e0: c3                            retq
// e1: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1+0x5f
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_CheckRecursiveCall
// fa: 48 89 d7                      movq    %rdx, %rdi
// fd: ff d0                         callq   *%rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 74 08                         je      0x10b <_JIT_ENTRY+0x10b>
// 103: 4d 89 fc                      movq    %r15, %r12
// 106: e9 4d 02 00 00                jmp     0x358 <_JIT_ENTRY+0x358>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 115: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 119: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11d: 74 84                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11f: 31 ff                         xorl    %edi, %edi
// 121: 48 89 ee                      movq    %rbp, %rsi
// 124: 41 ff d0                      callq   *%r8
// 127: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 12c: ff 47 2c                      incl    0x2c(%rdi)
// 12f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 134: 48 8b 45 00                   movq    (%rbp), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 27                         jg      0x164 <_JIT_ENTRY+0x164>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 156: 48 89 ea                      movq    %rbp, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 160: 48 8b 45 00                   movq    (%rbp), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 2b                         js      0x193 <_JIT_ENTRY+0x193>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 179: 48 ff 4d 00                   decq    (%rbp)
// 17d: 75 14                         jne     0x193 <_JIT_ENTRY+0x193>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 48 89 ef                      movq    %rbp, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 48 85 c0                      testq   %rax, %rax
// 19a: 7f 27                         jg      0x1c3 <_JIT_ENTRY+0x1c3>
// 19c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019e:  R_X86_64_64  .rodata.str1.1
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _Py_NegativeRefcount
// 1b0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b5: 4c 89 e2                      movq    %r12, %rdx
// 1b8: ff d0                         callq   *%rax
// 1ba: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1bf: 49 8b 04 24                   movq    (%r12), %rax
// 1c3: 85 c0                         testl   %eax, %eax
// 1c5: 78 2b                         js      0x1f2 <_JIT_ENTRY+0x1f2>
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d1: ff d0                         callq   *%rax
// 1d3: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d8: 49 ff 0c 24                   decq    (%r12)
// 1dc: 75 14                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_Dealloc
// 1e8: 4c 89 e7                      movq    %r12, %rdi
// 1eb: ff d0                         callq   *%rax
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 1f6: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1fb: 48 85 c9                      testq   %rcx, %rcx
// 1fe: 0f 84 2c 01 00 00             je      0x330 <_JIT_ENTRY+0x330>
// 204: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 208: 48 89 08                      movq    %rcx, (%rax)
// 20b: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 20f: 48 8b 00                      movq    (%rax), %rax
// 212: 84 c0                         testb   %al, %al
// 214: 74 19                         je      0x22f <_JIT_ENTRY+0x22f>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_HandlePending
// 220: ff d0                         callq   *%rax
// 222: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 227: 85 c0                         testl   %eax, %eax
// 229: 0f 85 29 01 00 00             jne     0x358 <_JIT_ENTRY+0x358>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _JIT_OPARG
// 239: f7 d0                         notl    %eax
// 23b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 240: 48 98                         cltq
// 242: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 247: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000249:  R_X86_64_64  PyTuple_Type
// 251: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 255: 0f 85 da 00 00 00             jne     0x335 <_JIT_ENTRY+0x335>
// 25b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025d:  R_X86_64_64  _JIT_OPARG
// 265: 0f b7 c9                      movzwl  %cx, %ecx
// 268: 49 39 4d 10                   cmpq    %rcx, 0x10(%r13)
// 26c: 0f 85 c3 00 00 00             jne     0x335 <_JIT_ENTRY+0x335>
// 272: 48 01 c0                      addq    %rax, %rax
// 275: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 279: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 27d: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000027f:  R_X86_64_64  _JIT_OPARG
// 287: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _PyDict_FromItems
// 295: be 01 00 00 00                movl    $0x1, %esi
// 29a: b9 01 00 00 00                movl    $0x1, %ecx
// 29f: 4c 89 e2                      movq    %r12, %rdx
// 2a2: ff d0                         callq   *%rax
// 2a4: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2a9: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 2b0: 0f 8e b8 00 00 00             jle     0x36e <_JIT_ENTRY+0x36e>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _JIT_OPARG
// 2c0: 44 0f b7 f0                   movzwl  %ax, %r14d
// 2c4: 49 ff c6                      incq    %r14
// 2c7: eb 0d                         jmp     0x2d6 <_JIT_ENTRY+0x2d6>
// 2c9: 49 ff ce                      decq    %r14
// 2cc: 49 83 fe 01                   cmpq    $0x1, %r14
// 2d0: 0f 8e 98 00 00 00             jle     0x36e <_JIT_ENTRY+0x36e>
// 2d6: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// 2da: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// 2de: 48 8b 45 00                   movq    (%rbp), %rax
// 2e2: 48 85 c0                      testq   %rax, %rax
// 2e5: 7f 22                         jg      0x309 <_JIT_ENTRY+0x309>
// 2e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e9:  R_X86_64_64  .rodata.str1.1
// 2f1: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 2f6: 48 89 ea                      movq    %rbp, %rdx
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_NegativeRefcount
// 303: ff d0                         callq   *%rax
// 305: 48 8b 45 00                   movq    (%rbp), %rax
// 309: 85 c0                         testl   %eax, %eax
// 30b: 78 bc                         js      0x2c9 <_JIT_ENTRY+0x2c9>
// 30d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 317: ff d0                         callq   *%rax
// 319: 48 ff 4d 00                   decq    (%rbp)
// 31d: 75 aa                         jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 31f: 48 89 ef                      movq    %rbp, %rdi
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _Py_Dealloc
// 32c: ff d0                         callq   *%rax
// 32e: eb 99                         jmp     0x2c9 <_JIT_ENTRY+0x2c9>
// 330: 49 89 c4                      movq    %rax, %r12
// 333: eb 23                         jmp     0x358 <_JIT_ENTRY+0x358>
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  PyExc_SystemError
// 33f: 48 8b 30                      movq    (%rax), %rsi
// 342: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000344:  R_X86_64_64  .rodata.str1.1+0x39
// 34c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034e:  R_X86_64_64  _PyErr_SetString
// 356: ff d0                         callq   *%rax
// 358: 49 29 dc                      subq    %rbx, %r12
// 35b: 49 83 c4 b8                   addq    $-0x48, %r12
// 35f: 49 c1 ec 03                   shrq    $0x3, %r12
// 363: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 367: 31 c0                         xorl    %eax, %eax
// 369: e9 64 fd ff ff                jmp     0xd2 <_JIT_ENTRY+0xd2>
// 36e: 49 8b 45 00                   movq    (%r13), %rax
// 372: 48 85 c0                      testq   %rax, %rax
// 375: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 37a: 7f 27                         jg      0x3a3 <_JIT_ENTRY+0x3a3>
// 37c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000037e:  R_X86_64_64  .rodata.str1.1
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _Py_NegativeRefcount
// 390: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 395: 4c 89 ea                      movq    %r13, %rdx
// 398: ff d0                         callq   *%rax
// 39a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 39f: 49 8b 45 00                   movq    (%r13), %rax
// 3a3: 85 c0                         testl   %eax, %eax
// 3a5: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 3aa: 78 2b                         js      0x3d7 <_JIT_ENTRY+0x3d7>
// 3ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3b6: ff d0                         callq   *%rax
// 3b8: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3bd: 49 ff 4d 00                   decq    (%r13)
// 3c1: 75 14                         jne     0x3d7 <_JIT_ENTRY+0x3d7>
// 3c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c5:  R_X86_64_64  _Py_Dealloc
// 3cd: 4c 89 ef                      movq    %r13, %rdi
// 3d0: ff d0                         callq   *%rax
// 3d2: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3d7: 4d 85 f6                      testq   %r14, %r14
// 3da: 0f 84 78 ff ff ff             je      0x358 <_JIT_ENTRY+0x358>
// 3e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e2:  R_X86_64_64  _JIT_OPARG
// 3ea: 0f b7 c8                      movzwl  %ax, %ecx
// 3ed: f7 d0                         notl    %eax
// 3ef: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3f4: 48 98                         cltq
// 3f6: 48 8d 34 00                   leaq    (%rax,%rax), %rsi
// 3fa: 4d 89 34 f7                   movq    %r14, (%r15,%rsi,8)
// 3fe: 48 29 c8                      subq    %rcx, %rax
// 401: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 405: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000407:  R_X86_64_64  _JIT_CONTINUE
// 40f: 48 89 df                      movq    %rbx, %rdi
// 412: 48 83 c4 18                   addq    $0x18, %rsp
// 416: 5b                            popq    %rbx
// 417: 41 5c                         popq    %r12
// 419: 41 5d                         popq    %r13
// 41b: 41 5e                         popq    %r14
// 41d: 41 5f                         popq    %r15
// 41f: 5d                            popq    %rbp
// 420: ff e0                         jmpq    *%rax
// 422: 
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_CONST_KEY_MAP_code_body[1059] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf1, 0x4f, 0x8b, 0x24, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7c, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x77, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfc, 0xe9, 0x4d, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x84, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x2c, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x85, 0xc0, 0x0f, 0x85, 0x29, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0xda, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4d, 0x10, 0x0f, 0x85, 0xc3, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc0, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x0d, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0x98, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xbc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xaa, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x49, 0x89, 0xc4, 0xeb, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x64, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8d, 0x34, 0x00, 0x4d, 0x89, 0x34, 0xf7, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_BUILD_CONST_KEY_MAP_code_holes[34] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x344, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x34e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3e2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x407, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00 while calling a Python object\x00'
// 7e: 00 00
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_CONST_KEY_MAP_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _CALL_BUILTIN_Oplus_BUILD_LIST
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BUILD_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 de                      subq    %rbx, %r14
// b9: 49 83 c6 b8                   addq    $-0x48, %r14
// bd: 49 c1 ee 03                   shrq    $0x3, %r14
// c1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 f4                      movq    %r14, %r12
// 112: e9 ad 01 00 00                jmp     0x2c4 <_JIT_ENTRY+0x2c4>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 4c 89 fe                      movq    %r15, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 48 8b 3c 24                   movq    (%rsp), %rdi
// 145: ff 47 2c                      incl    0x2c(%rdi)
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 49 8b 07                      movq    (%r15), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 2a                         jg      0x17f <_JIT_ENTRY+0x17f>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16e: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 173: 4c 89 fa                      movq    %r15, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17c: 49 8b 07                      movq    (%r15), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 2f                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 ff 08                      decq    (%rax)
// 19b: 75 15                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 26                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 29                         js      0x20e <_JIT_ENTRY+0x20e>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 13                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 20e: 4d 8d 24 ee                   leaq    (%r14,%rbp,8), %r12
// 212: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 0f 84 a4 00 00 00             je      0x2c4 <_JIT_ENTRY+0x2c4>
// 220: 49 89 04 24                   movq    %rax, (%r12)
// 224: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 228: 48 8b 00                      movq    (%rax), %rax
// 22b: 84 c0                         testb   %al, %al
// 22d: 74 16                         je      0x245 <_JIT_ENTRY+0x245>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_HandlePending
// 239: ff d0                         callq   *%rax
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 74 06                         je      0x245 <_JIT_ENTRY+0x245>
// 23f: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 243: eb 7f                         jmp     0x2c4 <_JIT_ENTRY+0x2c4>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_OPARG
// 24f: 0f b7 f0                      movzwl  %ax, %esi
// 252: f7 d0                         notl    %eax
// 254: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 259: 48 98                         cltq
// 25b: 48 29 f0                      subq    %rsi, %rax
// 25e: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _PyList_FromArraySteal
// 26c: 4c 89 e7                      movq    %r12, %rdi
// 26f: ff d0                         callq   *%rax
// 271: 48 85 c0                      testq   %rax, %rax
// 274: 74 4e                         je      0x2c4 <_JIT_ENTRY+0x2c4>
// 276: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000278:  R_X86_64_64  _JIT_OPARG
// 280: 0f b7 d1                      movzwl  %cx, %edx
// 283: 0f b7 c9                      movzwl  %cx, %ecx
// 286: be 01 00 00 00                movl    $0x1, %esi
// 28b: 29 ce                         subl    %ecx, %esi
// 28d: f7 d1                         notl    %ecx
// 28f: 48 63 c9                      movslq  %ecx, %rcx
// 292: 48 63 f6                      movslq  %esi, %rsi
// 295: 48 01 ce                      addq    %rcx, %rsi
// 298: 48 29 d1                      subq    %rdx, %rcx
// 29b: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 29f: 49 8d 34 f6                   leaq    (%r14,%rsi,8), %rsi
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _JIT_CONTINUE
// 2ad: 48 89 df                      movq    %rbx, %rdi
// 2b0: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b4: 48 83 c4 18                   addq    $0x18, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: ff e0                         jmpq    *%rax
// 2c4: 49 29 dc                      subq    %rbx, %r12
// 2c7: 49 83 c4 b8                   addq    $-0x48, %r12
// 2cb: 49 c1 ec 03                   shrq    $0x3, %r12
// 2cf: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2d3: 31 c0                         xorl    %eax, %eax
// 2d5: e9 04 fe ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 2da: 
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_LIST_code_body[731] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf4, 0xe9, 0xad, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4d, 0x8d, 0x24, 0xee, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x06, 0x4f, 0x8d, 0x24, 0xee, 0xeb, 0x7f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xf0, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xce, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x63, 0xf6, 0x48, 0x01, 0xce, 0x48, 0x29, 0xd1, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x04, 0xfe, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BUILD_LIST_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_LIST_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BUILD_LIST_data_holes[1];

// _CALL_BUILTIN_Oplus_BUILD_MAP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BUILD_MAP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 48                         jle     0xe1 <_JIT_ENTRY+0xe1>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 7c                         jne     0x11f <_JIT_ENTRY+0x11f>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 77                         jmp     0x121 <_JIT_ENTRY+0x121>
// aa: 49 29 de                      subq    %rbx, %r14
// ad: 49 83 c6 b8                   addq    $-0x48, %r14
// b1: 49 c1 ee 03                   shrq    $0x3, %r14
// b5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b9: 48 8b 03                      movq    (%rbx), %rax
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_TARGET
// c6: 89 c9                         movl    %ecx, %ecx
// c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d2: 48 83 c4 18                   addq    $0x18, %rsp
// d6: 5b                            popq    %rbx
// d7: 41 5c                         popq    %r12
// d9: 41 5d                         popq    %r13
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: 5d                            popq    %rbp
// e0: c3                            retq
// e1: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1+0x39
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_CheckRecursiveCall
// fa: 48 89 d7                      movq    %rdx, %rdi
// fd: ff d0                         callq   *%rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 74 08                         je      0x10b <_JIT_ENTRY+0x10b>
// 103: 4d 89 f4                      movq    %r14, %r12
// 106: e9 67 02 00 00                jmp     0x372 <_JIT_ENTRY+0x372>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 115: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 119: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11d: 74 84                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11f: 31 ff                         xorl    %edi, %edi
// 121: 48 89 ee                      movq    %rbp, %rsi
// 124: 41 ff d0                      callq   *%r8
// 127: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 12c: ff 47 2c                      incl    0x2c(%rdi)
// 12f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 134: 48 8b 45 00                   movq    (%rbp), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 27                         jg      0x164 <_JIT_ENTRY+0x164>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 156: 48 89 ea                      movq    %rbp, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 160: 48 8b 45 00                   movq    (%rbp), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 2b                         js      0x193 <_JIT_ENTRY+0x193>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 179: 48 ff 4d 00                   decq    (%rbp)
// 17d: 75 14                         jne     0x193 <_JIT_ENTRY+0x193>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 48 89 ef                      movq    %rbp, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 193: 49 8b 04 24                   movq    (%r12), %rax
// 197: 48 85 c0                      testq   %rax, %rax
// 19a: 7f 27                         jg      0x1c3 <_JIT_ENTRY+0x1c3>
// 19c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019e:  R_X86_64_64  .rodata.str1.1
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _Py_NegativeRefcount
// 1b0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b5: 4c 89 e2                      movq    %r12, %rdx
// 1b8: ff d0                         callq   *%rax
// 1ba: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1bf: 49 8b 04 24                   movq    (%r12), %rax
// 1c3: 85 c0                         testl   %eax, %eax
// 1c5: 78 2b                         js      0x1f2 <_JIT_ENTRY+0x1f2>
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d1: ff d0                         callq   *%rax
// 1d3: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d8: 49 ff 0c 24                   decq    (%r12)
// 1dc: 75 14                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_Dealloc
// 1e8: 4c 89 e7                      movq    %r12, %rdi
// 1eb: ff d0                         callq   *%rax
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 1f6: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1fb: 48 85 c0                      testq   %rax, %rax
// 1fe: 0f 84 6e 01 00 00             je      0x372 <_JIT_ENTRY+0x372>
// 204: 49 89 04 24                   movq    %rax, (%r12)
// 208: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 20c: 48 8b 00                      movq    (%rax), %rax
// 20f: 84 c0                         testb   %al, %al
// 211: 74 19                         je      0x22c <_JIT_ENTRY+0x22c>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_HandlePending
// 21d: ff d0                         callq   *%rax
// 21f: 85 c0                         testl   %eax, %eax
// 221: 74 09                         je      0x22c <_JIT_ENTRY+0x22c>
// 223: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 227: e9 46 01 00 00                jmp     0x372 <_JIT_ENTRY+0x372>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _JIT_OPARG
// 236: 0f b7 e8                      movzwl  %ax, %ebp
// 239: 89 e9                         movl    %ebp, %ecx
// 23b: f7 d1                         notl    %ecx
// 23d: 48 63 c9                      movslq  %ecx, %rcx
// 240: 89 ea                         movl    %ebp, %edx
// 242: f7 da                         negl    %edx
// 244: 01 d2                         addl    %edx, %edx
// 246: 48 63 d2                      movslq  %edx, %rdx
// 249: 48 01 ca                      addq    %rcx, %rdx
// 24c: 4d 8d 24 d6                   leaq    (%r14,%rdx,8), %r12
// 250: 49 8d 14 d6                   leaq    (%r14,%rdx,8), %rdx
// 254: 48 83 c2 08                   addq    $0x8, %rdx
// 258: 44 0f b7 c0                   movzwl  %ax, %r8d
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _PyDict_FromItems
// 266: be 02 00 00 00                movl    $0x2, %esi
// 26b: b9 02 00 00 00                movl    $0x2, %ecx
// 270: 4c 89 e7                      movq    %r12, %rdi
// 273: ff d0                         callq   *%rax
// 275: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 27a: 01 ed                         addl    %ebp, %ebp
// 27c: 85 ed                         testl   %ebp, %ebp
// 27e: 0f 8e 8b 00 00 00             jle     0x30f <_JIT_ENTRY+0x30f>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _JIT_OPARG
// 28e: 0f b7 c0                      movzwl  %ax, %eax
// 291: 4c 8d 3c 00                   leaq    (%rax,%rax), %r15
// 295: 49 ff c7                      incq    %r15
// 298: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: eb 15                         jmp     0x2b9 <_JIT_ENTRY+0x2b9>
// 2a4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 2b0: 49 ff cf                      decq    %r15
// 2b3: 49 83 ff 01                   cmpq    $0x1, %r15
// 2b7: 7e 56                         jle     0x30f <_JIT_ENTRY+0x30f>
// 2b9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 2bd: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 2c1: 49 8b 45 00                   movq    (%r13), %rax
// 2c5: 48 85 c0                      testq   %rax, %rax
// 2c8: 7e 06                         jle     0x2d0 <_JIT_ENTRY+0x2d0>
// 2ca: 85 c0                         testl   %eax, %eax
// 2cc: 78 e2                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 2ce: eb 26                         jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 2d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d2:  R_X86_64_64  .rodata.str1.1
// 2da: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// 2df: 4c 89 ea                      movq    %r13, %rdx
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_NegativeRefcount
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 8b 45 00                   movq    (%r13), %rax
// 2f2: 85 c0                         testl   %eax, %eax
// 2f4: 78 ba                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 2f6: ff d5                         callq   *%rbp
// 2f8: 49 ff 4d 00                   decq    (%r13)
// 2fc: 75 b2                         jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 2fe: 4c 89 ef                      movq    %r13, %rdi
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _Py_Dealloc
// 30b: ff d0                         callq   *%rax
// 30d: eb a1                         jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 30f: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 314: 48 85 ff                      testq   %rdi, %rdi
// 317: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 31c: 74 54                         je      0x372 <_JIT_ENTRY+0x372>
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _JIT_OPARG
// 328: 0f b7 c0                      movzwl  %ax, %eax
// 32b: 89 c1                         movl    %eax, %ecx
// 32d: f7 d1                         notl    %ecx
// 32f: 48 63 c9                      movslq  %ecx, %rcx
// 332: 89 c6                         movl    %eax, %esi
// 334: f7 de                         negl    %esi
// 336: 01 f6                         addl    %esi, %esi
// 338: 48 63 f6                      movslq  %esi, %rsi
// 33b: 48 01 ce                      addq    %rcx, %rsi
// 33e: 49 89 3c f6                   movq    %rdi, (%r14,%rsi,8)
// 342: 01 c0                         addl    %eax, %eax
// 344: be 01 00 00 00                movl    $0x1, %esi
// 349: 29 c6                         subl    %eax, %esi
// 34b: 48 63 c6                      movslq  %esi, %rax
// 34e: 48 01 c8                      addq    %rcx, %rax
// 351: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 355: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000357:  R_X86_64_64  _JIT_CONTINUE
// 35f: 48 89 df                      movq    %rbx, %rdi
// 362: 48 83 c4 18                   addq    $0x18, %rsp
// 366: 5b                            popq    %rbx
// 367: 41 5c                         popq    %r12
// 369: 41 5d                         popq    %r13
// 36b: 41 5e                         popq    %r14
// 36d: 41 5f                         popq    %r15
// 36f: 5d                            popq    %rbp
// 370: ff e0                         jmpq    *%rax
// 372: 49 29 dc                      subq    %rbx, %r12
// 375: 49 83 c4 b8                   addq    $-0x48, %r12
// 379: 49 c1 ec 03                   shrq    $0x3, %r12
// 37d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 381: 31 c0                         xorl    %eax, %eax
// 383: e9 4a fd ff ff                jmp     0xd2 <_JIT_ENTRY+0xd2>
// 388: 
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_MAP_code_body[905] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7c, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x77, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf4, 0xe9, 0x67, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x84, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4f, 0x8d, 0x24, 0xfe, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x6e, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x24, 0xee, 0xe9, 0x46, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x89, 0xe9, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x89, 0xea, 0xf7, 0xda, 0x01, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x4d, 0x8d, 0x24, 0xd6, 0x49, 0x8d, 0x14, 0xd6, 0x48, 0x83, 0xc2, 0x08, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x01, 0xed, 0x85, 0xed, 0x0f, 0x8e, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8d, 0x3c, 0x00, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x15, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x56, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xb2, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa1, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x74, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x89, 0xc6, 0xf7, 0xde, 0x01, 0xf6, 0x48, 0x63, 0xf6, 0x48, 0x01, 0xce, 0x49, 0x89, 0x3c, 0xf6, 0x01, 0xc0, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc6, 0x48, 0x63, 0xc6, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x4a, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BUILD_MAP_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x357, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_MAP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BUILD_MAP_data_holes[1];

// _CALL_BUILTIN_Oplus_BUILD_SET
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BUILD_SET.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 50                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 31                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 26                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 14 24                   movq    %rdx, (%rsp)
// 96: 7e 48                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 98: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a0: 75 7c                         jne     0x11e <_JIT_ENTRY+0x11e>
// a2: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a7: eb 77                         jmp     0x120 <_JIT_ENTRY+0x120>
// a9: 49 29 de                      subq    %rbx, %r14
// ac: 49 83 c6 b8                   addq    $-0x48, %r14
// b0: 49 c1 ee 03                   shrq    $0x3, %r14
// b4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b8: 48 8b 03                      movq    (%rbx), %rax
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _JIT_TARGET
// c5: 89 c9                         movl    %ecx, %ecx
// c7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d1: 48 83 c4 18                   addq    $0x18, %rsp
// d5: 5b                            popq    %rbx
// d6: 41 5c                         popq    %r12
// d8: 41 5d                         popq    %r13
// da: 41 5e                         popq    %r14
// dc: 41 5f                         popq    %r15
// de: 5d                            popq    %rbp
// df: c3                            retq
// e0: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// e5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e7:  R_X86_64_64  .rodata.str1.1+0x39
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_CheckRecursiveCall
// f9: 48 89 d7                      movq    %rdx, %rdi
// fc: ff d0                         callq   *%rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 74 08                         je      0x10a <_JIT_ENTRY+0x10a>
// 102: 4d 89 f4                      movq    %r14, %r12
// 105: e9 2d 02 00 00                jmp     0x337 <_JIT_ENTRY+0x337>
// 10a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10f: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 114: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 118: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11c: 74 84                         je      0xa2 <_JIT_ENTRY+0xa2>
// 11e: 31 ff                         xorl    %edi, %edi
// 120: 48 89 ee                      movq    %rbp, %rsi
// 123: 41 ff d0                      callq   *%r8
// 126: 48 8b 3c 24                   movq    (%rsp), %rdi
// 12a: ff 47 2c                      incl    0x2c(%rdi)
// 12d: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 132: 48 8b 45 00                   movq    (%rbp), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 26                         jg      0x161 <_JIT_ENTRY+0x161>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 154: 48 89 ea                      movq    %rbp, %rdx
// 157: ff d0                         callq   *%rax
// 159: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15d: 48 8b 45 00                   movq    (%rbp), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 29                         js      0x18e <_JIT_ENTRY+0x18e>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 48 8b 3c 24                   movq    (%rsp), %rdi
// 175: 48 ff 4d 00                   decq    (%rbp)
// 179: 75 13                         jne     0x18e <_JIT_ENTRY+0x18e>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: 48 89 ef                      movq    %rbp, %rdi
// 188: ff d0                         callq   *%rax
// 18a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18e: 49 8b 04 24                   movq    (%r12), %rax
// 192: 48 85 c0                      testq   %rax, %rax
// 195: 7f 26                         jg      0x1bd <_JIT_ENTRY+0x1bd>
// 197: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000199:  R_X86_64_64  .rodata.str1.1
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NegativeRefcount
// 1ab: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b0: 4c 89 e2                      movq    %r12, %rdx
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b9: 49 8b 04 24                   movq    (%r12), %rax
// 1bd: 85 c0                         testl   %eax, %eax
// 1bf: 78 29                         js      0x1ea <_JIT_ENTRY+0x1ea>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cb: ff d0                         callq   *%rax
// 1cd: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d1: 49 ff 0c 24                   decq    (%r12)
// 1d5: 75 13                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_Dealloc
// 1e1: 4c 89 e7                      movq    %r12, %rdi
// 1e4: ff d0                         callq   *%rax
// 1e6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ea: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1ee: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1f3: 48 85 c9                      testq   %rcx, %rcx
// 1f6: 0f 84 38 01 00 00             je      0x334 <_JIT_ENTRY+0x334>
// 1fc: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 200: 48 89 08                      movq    %rcx, (%rax)
// 203: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 207: 48 8b 00                      movq    (%rax), %rax
// 20a: 84 c0                         testb   %al, %al
// 20c: 74 14                         je      0x222 <_JIT_ENTRY+0x222>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_HandlePending
// 218: ff d0                         callq   *%rax
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 0f 85 15 01 00 00             jne     0x337 <_JIT_ENTRY+0x337>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  PySet_New
// 22c: 31 ff                         xorl    %edi, %edi
// 22e: ff d0                         callq   *%rax
// 230: 48 85 c0                      testq   %rax, %rax
// 233: 0f 84 fe 00 00 00             je      0x337 <_JIT_ENTRY+0x337>
// 239: 49 89 c7                      movq    %rax, %r15
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _JIT_OPARG
// 246: 66 85 c0                      testw   %ax, %ax
// 249: 48 8b 14 24                   movq    (%rsp), %rdx
// 24d: 0f 84 52 01 00 00             je      0x3a5 <_JIT_ENTRY+0x3a5>
// 253: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 258: 0f b7 c8                      movzwl  %ax, %ecx
// 25b: f7 d0                         notl    %eax
// 25d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 262: 48 98                         cltq
// 264: 48 29 c8                      subq    %rcx, %rax
// 267: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000269:  R_X86_64_64  _JIT_OPARG
// 271: 0f b7 c9                      movzwl  %cx, %ecx
// 274: 83 f9 02                      cmpl    $0x2, %ecx
// 277: be 01 00 00 00                movl    $0x1, %esi
// 27c: 0f 43 f1                      cmovael %ecx, %esi
// 27f: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 284: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 288: 45 31 ff                      xorl    %r15d, %r15d
// 28b: 31 ed                         xorl    %ebp, %ebp
// 28d: eb 0f                         jmp     0x29e <_JIT_ENTRY+0x29e>
// 28f: 90                            nop
// 290: 49 ff c7                      incq    %r15
// 293: 4c 39 7c 24 08                cmpq    %r15, 0x8(%rsp)
// 298: 0f 84 af 00 00 00             je      0x34d <_JIT_ENTRY+0x34d>
// 29e: 4f 8b 2c fc                   movq    (%r12,%r15,8), %r13
// 2a2: 85 ed                         testl   %ebp, %ebp
// 2a4: 74 0f                         je      0x2b5 <_JIT_ENTRY+0x2b5>
// 2a6: 49 8b 45 00                   movq    (%r13), %rax
// 2aa: 48 85 c0                      testq   %rax, %rax
// 2ad: 7e 29                         jle     0x2d8 <_JIT_ENTRY+0x2d8>
// 2af: 85 c0                         testl   %eax, %eax
// 2b1: 78 dd                         js      0x290 <_JIT_ENTRY+0x290>
// 2b3: eb 4d                         jmp     0x302 <_JIT_ENTRY+0x302>
// 2b5: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2ba: 4c 89 ee                      movq    %r13, %rsi
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  PySet_Add
// 2c7: ff d0                         callq   *%rax
// 2c9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2cd: 89 c5                         movl    %eax, %ebp
// 2cf: 49 8b 45 00                   movq    (%r13), %rax
// 2d3: 48 85 c0                      testq   %rax, %rax
// 2d6: 7f d7                         jg      0x2af <_JIT_ENTRY+0x2af>
// 2d8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002da:  R_X86_64_64  .rodata.str1.1
// 2e2: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// 2e7: 4c 89 ea                      movq    %r13, %rdx
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _Py_NegativeRefcount
// 2f4: ff d0                         callq   *%rax
// 2f6: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fa: 49 8b 45 00                   movq    (%r13), %rax
// 2fe: 85 c0                         testl   %eax, %eax
// 300: 78 8e                         js      0x290 <_JIT_ENTRY+0x290>
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30c: ff d0                         callq   *%rax
// 30e: 48 8b 14 24                   movq    (%rsp), %rdx
// 312: 49 ff 4d 00                   decq    (%r13)
// 316: 0f 85 74 ff ff ff             jne     0x290 <_JIT_ENTRY+0x290>
// 31c: 4c 89 ef                      movq    %r13, %rdi
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _Py_Dealloc
// 329: ff d0                         callq   *%rax
// 32b: 48 8b 14 24                   movq    (%rsp), %rdx
// 32f: e9 5c ff ff ff                jmp     0x290 <_JIT_ENTRY+0x290>
// 334: 49 89 c4                      movq    %rax, %r12
// 337: 49 29 dc                      subq    %rbx, %r12
// 33a: 49 83 c4 b8                   addq    $-0x48, %r12
// 33e: 49 c1 ec 03                   shrq    $0x3, %r12
// 342: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 346: 31 c0                         xorl    %eax, %eax
// 348: e9 84 fd ff ff                jmp     0xd1 <_JIT_ENTRY+0xd1>
// 34d: 85 ed                         testl   %ebp, %ebp
// 34f: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 354: 74 4f                         je      0x3a5 <_JIT_ENTRY+0x3a5>
// 356: 49 8b 07                      movq    (%r15), %rax
// 359: 48 85 c0                      testq   %rax, %rax
// 35c: 7f 21                         jg      0x37f <_JIT_ENTRY+0x37f>
// 35e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000360:  R_X86_64_64  .rodata.str1.1
// 368: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 36d: 4c 89 fa                      movq    %r15, %rdx
// 370: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000372:  R_X86_64_64  _Py_NegativeRefcount
// 37a: ff d0                         callq   *%rax
// 37c: 49 8b 07                      movq    (%r15), %rax
// 37f: 85 c0                         testl   %eax, %eax
// 381: 78 b4                         js      0x337 <_JIT_ENTRY+0x337>
// 383: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000385:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38d: ff d0                         callq   *%rax
// 38f: 49 ff 0f                      decq    (%r15)
// 392: 75 a3                         jne     0x337 <_JIT_ENTRY+0x337>
// 394: 4c 89 ff                      movq    %r15, %rdi
// 397: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000399:  R_X86_64_64  _Py_Dealloc
// 3a1: ff d0                         callq   *%rax
// 3a3: eb 92                         jmp     0x337 <_JIT_ENTRY+0x337>
// 3a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a7:  R_X86_64_64  _JIT_OPARG
// 3af: 0f b7 c8                      movzwl  %ax, %ecx
// 3b2: 0f b7 c0                      movzwl  %ax, %eax
// 3b5: be 01 00 00 00                movl    $0x1, %esi
// 3ba: 29 c6                         subl    %eax, %esi
// 3bc: f7 d0                         notl    %eax
// 3be: 48 98                         cltq
// 3c0: 48 63 f6                      movslq  %esi, %rsi
// 3c3: 48 01 c6                      addq    %rax, %rsi
// 3c6: 48 29 c8                      subq    %rcx, %rax
// 3c9: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 3cd: 49 8d 34 f6                   leaq    (%r14,%rsi,8), %rsi
// 3d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d3:  R_X86_64_64  _JIT_CONTINUE
// 3db: 48 89 df                      movq    %rbx, %rdi
// 3de: 48 83 c4 18                   addq    $0x18, %rsp
// 3e2: 5b                            popq    %rbx
// 3e3: 41 5c                         popq    %r12
// 3e5: 41 5d                         popq    %r13
// 3e7: 41 5e                         popq    %r14
// 3e9: 41 5f                         popq    %r15
// 3eb: 5d                            popq    %rbp
// 3ec: ff e0                         jmpq    *%rax
// 3ee: 
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_SET_code_body[1007] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x50, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x31, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x26, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7c, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x77, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf4, 0xe9, 0x2d, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x84, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x38, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x15, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x48, 0x8b, 0x14, 0x24, 0x0f, 0x84, 0x52, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x83, 0xf9, 0x02, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xf1, 0x48, 0x89, 0x74, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xc6, 0x45, 0x31, 0xff, 0x31, 0xed, 0xeb, 0x0f, 0x90, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0x7c, 0x24, 0x08, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x4f, 0x8b, 0x2c, 0xfc, 0x85, 0xed, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x29, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x4d, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x74, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xe9, 0x5c, 0xff, 0xff, 0xff, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x84, 0xfd, 0xff, 0xff, 0x85, 0xed, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x4f, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xb4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xa3, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x92, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc6, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x63, 0xf6, 0x48, 0x01, 0xc6, 0x48, 0x29, 0xc8, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_BUILD_SET_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x360, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x372, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x385, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x399, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3a7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3d3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_SET_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BUILD_SET_data_holes[1];

// _CALL_BUILTIN_Oplus_BUILD_SLICE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BUILD_SLICE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 48                         jle     0xe1 <_JIT_ENTRY+0xe1>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 76                         jne     0x119 <_JIT_ENTRY+0x119>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 71                         jmp     0x11b <_JIT_ENTRY+0x11b>
// aa: 49 29 de                      subq    %rbx, %r14
// ad: 49 83 c6 b8                   addq    $-0x48, %r14
// b1: 49 c1 ee 03                   shrq    $0x3, %r14
// b5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b9: 48 8b 03                      movq    (%rbx), %rax
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_TARGET
// c6: 89 c9                         movl    %ecx, %ecx
// c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d2: 48 83 c4 18                   addq    $0x18, %rsp
// d6: 5b                            popq    %rbx
// d7: 41 5c                         popq    %r12
// d9: 41 5d                         popq    %r13
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: 5d                            popq    %rbp
// e0: c3                            retq
// e1: 4c 89 04 24                   movq    %r8, (%rsp)
// e5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e7:  R_X86_64_64  .rodata.str1.1+0x39
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_CheckRecursiveCall
// f9: 48 89 d7                      movq    %rdx, %rdi
// fc: ff d0                         callq   *%rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 0f 85 cb 02 00 00             jne     0x3d1 <_JIT_ENTRY+0x3d1>
// 106: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10b: 4c 8b 04 24                   movq    (%rsp), %r8
// 10f: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 113: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 117: 74 8a                         je      0xa3 <_JIT_ENTRY+0xa3>
// 119: 31 ff                         xorl    %edi, %edi
// 11b: 48 89 ee                      movq    %rbp, %rsi
// 11e: 41 ff d0                      callq   *%r8
// 121: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 126: ff 41 2c                      incl    0x2c(%rcx)
// 129: 48 89 04 24                   movq    %rax, (%rsp)
// 12d: 48 8b 45 00                   movq    (%rbp), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7f 22                         jg      0x158 <_JIT_ENTRY+0x158>
// 136: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000138:  R_X86_64_64  .rodata.str1.1
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_NegativeRefcount
// 14a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 14f: 48 89 ea                      movq    %rbp, %rdx
// 152: ff d0                         callq   *%rax
// 154: 48 8b 45 00                   movq    (%rbp), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 78 21                         js      0x17d <_JIT_ENTRY+0x17d>
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 166: ff d0                         callq   *%rax
// 168: 48 ff 4d 00                   decq    (%rbp)
// 16c: 75 0f                         jne     0x17d <_JIT_ENTRY+0x17d>
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_Dealloc
// 178: 48 89 ef                      movq    %rbp, %rdi
// 17b: ff d0                         callq   *%rax
// 17d: 49 8b 04 24                   movq    (%r12), %rax
// 181: 48 85 c0                      testq   %rax, %rax
// 184: 7f 22                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 186: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000188:  R_X86_64_64  .rodata.str1.1
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_NegativeRefcount
// 19a: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19f: 4c 89 e2                      movq    %r12, %rdx
// 1a2: ff d0                         callq   *%rax
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 21                         js      0x1cd <_JIT_ENTRY+0x1cd>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b6: ff d0                         callq   *%rax
// 1b8: 49 ff 0c 24                   decq    (%r12)
// 1bc: 75 0f                         jne     0x1cd <_JIT_ENTRY+0x1cd>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_Dealloc
// 1c8: 4c 89 e7                      movq    %r12, %rdi
// 1cb: ff d0                         callq   *%rax
// 1cd: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1d1: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 0f 84 f0 01 00 00             je      0x3ce <_JIT_ENTRY+0x3ce>
// 1de: 48 89 08                      movq    %rcx, (%rax)
// 1e1: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e6: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1ea: 48 8b 00                      movq    (%rax), %rax
// 1ed: 84 c0                         testb   %al, %al
// 1ef: 74 19                         je      0x20a <_JIT_ENTRY+0x20a>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_HandlePending
// 1fb: ff d0                         callq   *%rax
// 1fd: 85 c0                         testl   %eax, %eax
// 1ff: 74 09                         je      0x20a <_JIT_ENTRY+0x20a>
// 201: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 205: e9 c7 01 00 00                jmp     0x3d1 <_JIT_ENTRY+0x3d1>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _JIT_OPARG
// 214: 66 83 f8 03                   cmpw    $0x3, %ax
// 218: 75 1f                         jne     0x239 <_JIT_ENTRY+0x239>
// 21a: 89 c1                         movl    %eax, %ecx
// 21c: f7 d1                         notl    %ecx
// 21e: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 224: 48 63 c9                      movslq  %ecx, %rcx
// 227: 31 d2                         xorl    %edx, %edx
// 229: 66 83 f8 03                   cmpw    $0x3, %ax
// 22d: 0f 94 c2                      sete    %dl
// 230: 48 29 d1                      subq    %rdx, %rcx
// 233: 4d 8b 04 ce                   movq    (%r14,%rcx,8), %r8
// 237: eb 03                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 239: 45 31 c0                      xorl    %r8d, %r8d
// 23c: 89 c1                         movl    %eax, %ecx
// 23e: f7 d1                         notl    %ecx
// 240: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 246: 48 63 c9                      movslq  %ecx, %rcx
// 249: 31 d2                         xorl    %edx, %edx
// 24b: 66 83 f8 03                   cmpw    $0x3, %ax
// 24f: 0f 94 c2                      sete    %dl
// 252: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 257: 29 d0                         subl    %edx, %eax
// 259: f7 d2                         notl    %edx
// 25b: 4c 63 e2                      movslq  %edx, %r12
// 25e: 49 01 cc                      addq    %rcx, %r12
// 261: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 265: 4c 63 f8                      movslq  %eax, %r15
// 268: 49 01 cf                      addq    %rcx, %r15
// 26b: 4f 8b 2c fe                   movq    (%r14,%r15,8), %r13
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  PySlice_New
// 279: 4c 89 ef                      movq    %r13, %rdi
// 27c: 48 89 ee                      movq    %rbp, %rsi
// 27f: 4c 89 04 24                   movq    %r8, (%rsp)
// 283: 4c 89 c2                      movq    %r8, %rdx
// 286: ff d0                         callq   *%rax
// 288: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 28d: 49 8b 45 00                   movq    (%r13), %rax
// 291: 48 85 c0                      testq   %rax, %rax
// 294: 7f 22                         jg      0x2b8 <_JIT_ENTRY+0x2b8>
// 296: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000298:  R_X86_64_64  .rodata.str1.1
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_NegativeRefcount
// 2aa: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// 2af: 4c 89 ea                      movq    %r13, %rdx
// 2b2: ff d0                         callq   *%rax
// 2b4: 49 8b 45 00                   movq    (%r13), %rax
// 2b8: 85 c0                         testl   %eax, %eax
// 2ba: 78 21                         js      0x2dd <_JIT_ENTRY+0x2dd>
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c6: ff d0                         callq   *%rax
// 2c8: 49 ff 4d 00                   decq    (%r13)
// 2cc: 75 0f                         jne     0x2dd <_JIT_ENTRY+0x2dd>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_Dealloc
// 2d8: 4c 89 ef                      movq    %r13, %rdi
// 2db: ff d0                         callq   *%rax
// 2dd: 48 8b 45 00                   movq    (%rbp), %rax
// 2e1: 48 85 c0                      testq   %rax, %rax
// 2e4: 7f 22                         jg      0x308 <_JIT_ENTRY+0x308>
// 2e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e8:  R_X86_64_64  .rodata.str1.1
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_NegativeRefcount
// 2fa: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 2ff: 48 89 ea                      movq    %rbp, %rdx
// 302: ff d0                         callq   *%rax
// 304: 48 8b 45 00                   movq    (%rbp), %rax
// 308: 85 c0                         testl   %eax, %eax
// 30a: 78 21                         js      0x32d <_JIT_ENTRY+0x32d>
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 316: ff d0                         callq   *%rax
// 318: 48 ff 4d 00                   decq    (%rbp)
// 31c: 75 0f                         jne     0x32d <_JIT_ENTRY+0x32d>
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _Py_Dealloc
// 328: 48 89 ef                      movq    %rbp, %rdi
// 32b: ff d0                         callq   *%rax
// 32d: 48 8b 0c 24                   movq    (%rsp), %rcx
// 331: 48 85 c9                      testq   %rcx, %rcx
// 334: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 339: 74 61                         je      0x39c <_JIT_ENTRY+0x39c>
// 33b: 48 8b 01                      movq    (%rcx), %rax
// 33e: 48 85 c0                      testq   %rax, %rax
// 341: 7f 2a                         jg      0x36d <_JIT_ENTRY+0x36d>
// 343: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000345:  R_X86_64_64  .rodata.str1.1+0x58
// 34d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034f:  R_X86_64_64  _Py_NegativeRefcount
// 357: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 35c: 48 89 ca                      movq    %rcx, %rdx
// 35f: ff d0                         callq   *%rax
// 361: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 366: 48 8b 04 24                   movq    (%rsp), %rax
// 36a: 48 8b 00                      movq    (%rax), %rax
// 36d: 85 c0                         testl   %eax, %eax
// 36f: 78 2b                         js      0x39c <_JIT_ENTRY+0x39c>
// 371: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000373:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 37b: ff d0                         callq   *%rax
// 37d: 48 8b 3c 24                   movq    (%rsp), %rdi
// 381: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 386: 48 ff 0f                      decq    (%rdi)
// 389: 75 11                         jne     0x39c <_JIT_ENTRY+0x39c>
// 38b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038d:  R_X86_64_64  _Py_Dealloc
// 395: ff d0                         callq   *%rax
// 397: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 39c: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 3a0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 3a5: 48 85 c9                      testq   %rcx, %rcx
// 3a8: 74 24                         je      0x3ce <_JIT_ENTRY+0x3ce>
// 3aa: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 3ae: 48 89 08                      movq    %rcx, (%rax)
// 3b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b3:  R_X86_64_64  _JIT_CONTINUE
// 3bb: 48 89 df                      movq    %rbx, %rdi
// 3be: 48 83 c4 18                   addq    $0x18, %rsp
// 3c2: 5b                            popq    %rbx
// 3c3: 41 5c                         popq    %r12
// 3c5: 41 5d                         popq    %r13
// 3c7: 41 5e                         popq    %r14
// 3c9: 41 5f                         popq    %r15
// 3cb: 5d                            popq    %rbp
// 3cc: ff e0                         jmpq    *%rax
// 3ce: 49 89 c6                      movq    %rax, %r14
// 3d1: 49 29 de                      subq    %rbx, %r14
// 3d4: 49 83 c6 b8                   addq    $-0x48, %r14
// 3d8: 49 c1 ee 03                   shrq    $0x3, %r14
// 3dc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3e0: 31 c0                         xorl    %eax, %eax
// 3e2: e9 eb fc ff ff                jmp     0xd2 <_JIT_ENTRY+0xd2>
// 3e7: 
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_SLICE_code_body[1000] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x76, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x71, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xcb, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x8a, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0xff, 0x41, 0x2c, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xf0, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0xc7, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x1f, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0x48, 0x29, 0xd1, 0x4d, 0x8b, 0x04, 0xce, 0xeb, 0x03, 0x45, 0x31, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd0, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x49, 0x01, 0xcc, 0x4b, 0x8b, 0x2c, 0xe6, 0x4c, 0x63, 0xf8, 0x49, 0x01, 0xcf, 0x4f, 0x8b, 0x2c, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0x4c, 0x89, 0x04, 0x24, 0x4c, 0x89, 0xc2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x74, 0x61, 0x48, 0x8b, 0x01, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x48, 0x89, 0xca, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x0f, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x24, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xeb, 0xfc, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BUILD_SLICE_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x345, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x58},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x373, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3b3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 88: 
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_SLICE_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BUILD_SLICE_data_holes[1];

// _CALL_BUILTIN_Oplus_BUILD_STRING
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BUILD_STRING.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4c                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 0c 24                   movq    %rcx, (%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7e                         jne     0x126 <_JIT_ENTRY+0x126>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 79                         jmp     0x128 <_JIT_ENTRY+0x128>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 04 24                   movq    %r8, (%rsp)
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_CheckRecursiveCall
// fe: 48 89 d7                      movq    %rdx, %rdi
// 101: ff d0                         callq   *%rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 74 08                         je      0x10f <_JIT_ENTRY+0x10f>
// 107: 4d 89 f4                      movq    %r14, %r12
// 10a: e9 57 02 00 00                jmp     0x366 <_JIT_ENTRY+0x366>
// 10f: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 114: 4c 8b 04 24                   movq    (%rsp), %r8
// 118: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11c: 48 89 0c 24                   movq    %rcx, (%rsp)
// 120: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 124: 74 82                         je      0xa8 <_JIT_ENTRY+0xa8>
// 126: 31 ff                         xorl    %edi, %edi
// 128: 4c 8b 3c 24                   movq    (%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 137: ff 47 2c                      incl    0x2c(%rdi)
// 13a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13f: 49 8b 07                      movq    (%r15), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 7f 2a                         jg      0x171 <_JIT_ENTRY+0x171>
// 147: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 160: 4c 8b 3c 24                   movq    (%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16e: 49 8b 07                      movq    (%r15), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 2f                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 8b 04 24                   movq    (%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 3c 24                   movq    (%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 27                         jg      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d0: 49 8b 04 24                   movq    (%r12), %rax
// 1d4: 85 c0                         testl   %eax, %eax
// 1d6: 78 2b                         js      0x203 <_JIT_ENTRY+0x203>
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e2: ff d0                         callq   *%rax
// 1e4: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e9: 49 ff 0c 24                   decq    (%r12)
// 1ed: 75 14                         jne     0x203 <_JIT_ENTRY+0x203>
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _Py_Dealloc
// 1f9: 4c 89 e7                      movq    %r12, %rdi
// 1fc: ff d0                         callq   *%rax
// 1fe: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 203: 4d 8d 24 ee                   leaq    (%r14,%rbp,8), %r12
// 207: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 20c: 48 85 c0                      testq   %rax, %rax
// 20f: 0f 84 51 01 00 00             je      0x366 <_JIT_ENTRY+0x366>
// 215: 49 89 04 24                   movq    %rax, (%r12)
// 219: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 21d: 48 8b 00                      movq    (%rax), %rax
// 220: 84 c0                         testb   %al, %al
// 222: 74 19                         je      0x23d <_JIT_ENTRY+0x23d>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_HandlePending
// 22e: ff d0                         callq   *%rax
// 230: 85 c0                         testl   %eax, %eax
// 232: 74 09                         je      0x23d <_JIT_ENTRY+0x23d>
// 234: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 238: e9 29 01 00 00                jmp     0x366 <_JIT_ENTRY+0x366>
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _JIT_OPARG
// 247: 0f b7 e8                      movzwl  %ax, %ebp
// 24a: 89 e9                         movl    %ebp, %ecx
// 24c: f7 d1                         notl    %ecx
// 24e: 48 63 c9                      movslq  %ecx, %rcx
// 251: 0f b7 d0                      movzwl  %ax, %edx
// 254: 48 29 d1                      subq    %rdx, %rcx
// 257: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _PyUnicode_JoinArray
// 265: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000267:  R_X86_64_64  _PyRuntime
// 26f: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 276: 4c 89 e6                      movq    %r12, %rsi
// 279: ff d0                         callq   *%rax
// 27b: 48 89 04 24                   movq    %rax, (%rsp)
// 27f: 85 ed                         testl   %ebp, %ebp
// 281: 0f 8e 88 00 00 00             jle     0x30f <_JIT_ENTRY+0x30f>
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_OPARG
// 291: 44 0f b7 f8                   movzwl  %ax, %r15d
// 295: 49 ff c7                      incq    %r15
// 298: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: eb 15                         jmp     0x2b9 <_JIT_ENTRY+0x2b9>
// 2a4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 2b0: 49 ff cf                      decq    %r15
// 2b3: 49 83 ff 01                   cmpq    $0x1, %r15
// 2b7: 7e 56                         jle     0x30f <_JIT_ENTRY+0x30f>
// 2b9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 2bd: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 2c1: 49 8b 45 00                   movq    (%r13), %rax
// 2c5: 48 85 c0                      testq   %rax, %rax
// 2c8: 7e 06                         jle     0x2d0 <_JIT_ENTRY+0x2d0>
// 2ca: 85 c0                         testl   %eax, %eax
// 2cc: 78 e2                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 2ce: eb 26                         jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 2d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d2:  R_X86_64_64  .rodata.str1.1
// 2da: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// 2df: 4c 89 ea                      movq    %r13, %rdx
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_NegativeRefcount
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 8b 45 00                   movq    (%r13), %rax
// 2f2: 85 c0                         testl   %eax, %eax
// 2f4: 78 ba                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 2f6: ff d5                         callq   *%rbp
// 2f8: 49 ff 4d 00                   decq    (%r13)
// 2fc: 75 b2                         jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 2fe: 4c 89 ef                      movq    %r13, %rdi
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _Py_Dealloc
// 30b: ff d0                         callq   *%rax
// 30d: eb a1                         jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 30f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 313: 48 85 ff                      testq   %rdi, %rdi
// 316: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 31b: 74 49                         je      0x366 <_JIT_ENTRY+0x366>
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _JIT_OPARG
// 327: 0f b7 c8                      movzwl  %ax, %ecx
// 32a: 0f b7 c0                      movzwl  %ax, %eax
// 32d: be 01 00 00 00                movl    $0x1, %esi
// 332: 29 c6                         subl    %eax, %esi
// 334: f7 d0                         notl    %eax
// 336: 48 98                         cltq
// 338: 48 63 f6                      movslq  %esi, %rsi
// 33b: 48 01 c6                      addq    %rax, %rsi
// 33e: 48 29 c8                      subq    %rcx, %rax
// 341: 49 89 3c c6                   movq    %rdi, (%r14,%rax,8)
// 345: 49 8d 34 f6                   leaq    (%r14,%rsi,8), %rsi
// 349: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034b:  R_X86_64_64  _JIT_CONTINUE
// 353: 48 89 df                      movq    %rbx, %rdi
// 356: 48 83 c4 18                   addq    $0x18, %rsp
// 35a: 5b                            popq    %rbx
// 35b: 41 5c                         popq    %r12
// 35d: 41 5d                         popq    %r13
// 35f: 41 5e                         popq    %r14
// 361: 41 5f                         popq    %r15
// 363: 5d                            popq    %rbp
// 364: ff e0                         jmpq    *%rax
// 366: 49 29 dc                      subq    %rbx, %r12
// 369: 49 83 c4 b8                   addq    $-0x48, %r12
// 36d: 49 c1 ec 03                   shrq    $0x3, %r12
// 371: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 375: 31 c0                         xorl    %eax, %eax
// 377: e9 5b fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 37c: 
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_STRING_code_body[893] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4c, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7e, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x79, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf4, 0xe9, 0x57, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x82, 0x31, 0xff, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xee, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x51, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x24, 0xee, 0xe9, 0x29, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x89, 0xe9, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x0f, 0xb7, 0xd0, 0x48, 0x29, 0xd1, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x85, 0xed, 0x0f, 0x8e, 0x88, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x15, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x56, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xb2, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa1, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x74, 0x49, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc6, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x63, 0xf6, 0x48, 0x01, 0xc6, 0x48, 0x29, 0xc8, 0x49, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x5b, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BUILD_STRING_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_STRING_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BUILD_STRING_data_holes[1];

// _CALL_BUILTIN_Oplus_BUILD_TUPLE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_BUILD_TUPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 de                      subq    %rbx, %r14
// b9: 49 83 c6 b8                   addq    $-0x48, %r14
// bd: 49 c1 ee 03                   shrq    $0x3, %r14
// c1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 f4                      movq    %r14, %r12
// 112: e9 ad 01 00 00                jmp     0x2c4 <_JIT_ENTRY+0x2c4>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 4c 89 fe                      movq    %r15, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 48 8b 3c 24                   movq    (%rsp), %rdi
// 145: ff 47 2c                      incl    0x2c(%rdi)
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 49 8b 07                      movq    (%r15), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 2a                         jg      0x17f <_JIT_ENTRY+0x17f>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16e: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 173: 4c 89 fa                      movq    %r15, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17c: 49 8b 07                      movq    (%r15), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 2f                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 ff 08                      decq    (%rax)
// 19b: 75 15                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 26                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 29                         js      0x20e <_JIT_ENTRY+0x20e>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 13                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 20e: 4d 8d 24 ee                   leaq    (%r14,%rbp,8), %r12
// 212: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 0f 84 a4 00 00 00             je      0x2c4 <_JIT_ENTRY+0x2c4>
// 220: 49 89 04 24                   movq    %rax, (%r12)
// 224: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 228: 48 8b 00                      movq    (%rax), %rax
// 22b: 84 c0                         testb   %al, %al
// 22d: 74 16                         je      0x245 <_JIT_ENTRY+0x245>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_HandlePending
// 239: ff d0                         callq   *%rax
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 74 06                         je      0x245 <_JIT_ENTRY+0x245>
// 23f: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 243: eb 7f                         jmp     0x2c4 <_JIT_ENTRY+0x2c4>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_OPARG
// 24f: 0f b7 f0                      movzwl  %ax, %esi
// 252: f7 d0                         notl    %eax
// 254: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 259: 48 98                         cltq
// 25b: 48 29 f0                      subq    %rsi, %rax
// 25e: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _PyTuple_FromArraySteal
// 26c: 4c 89 e7                      movq    %r12, %rdi
// 26f: ff d0                         callq   *%rax
// 271: 48 85 c0                      testq   %rax, %rax
// 274: 74 4e                         je      0x2c4 <_JIT_ENTRY+0x2c4>
// 276: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000278:  R_X86_64_64  _JIT_OPARG
// 280: 0f b7 d1                      movzwl  %cx, %edx
// 283: 0f b7 c9                      movzwl  %cx, %ecx
// 286: be 01 00 00 00                movl    $0x1, %esi
// 28b: 29 ce                         subl    %ecx, %esi
// 28d: f7 d1                         notl    %ecx
// 28f: 48 63 c9                      movslq  %ecx, %rcx
// 292: 48 63 f6                      movslq  %esi, %rsi
// 295: 48 01 ce                      addq    %rcx, %rsi
// 298: 48 29 d1                      subq    %rdx, %rcx
// 29b: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 29f: 49 8d 34 f6                   leaq    (%r14,%rsi,8), %rsi
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _JIT_CONTINUE
// 2ad: 48 89 df                      movq    %rbx, %rdi
// 2b0: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b4: 48 83 c4 18                   addq    $0x18, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: ff e0                         jmpq    *%rax
// 2c4: 49 29 dc                      subq    %rbx, %r12
// 2c7: 49 83 c4 b8                   addq    $-0x48, %r12
// 2cb: 49 c1 ec 03                   shrq    $0x3, %r12
// 2cf: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2d3: 31 c0                         xorl    %eax, %eax
// 2d5: e9 04 fe ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 2da: 
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_TUPLE_code_body[731] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf4, 0xe9, 0xad, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4d, 0x8d, 0x24, 0xee, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x06, 0x4f, 0x8d, 0x24, 0xee, 0xeb, 0x7f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xf0, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xce, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x63, 0xf6, 0x48, 0x01, 0xce, 0x48, 0x29, 0xd1, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x04, 0xfe, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_BUILD_TUPLE_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_BUILD_TUPLE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_BUILD_TUPLE_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_BUILTIN_CLASS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 0f 85 25 03 00 00             jne     0x382 <_JIT_ENTRY+0x382>
// 5d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 62: 29 c1                         subl    %eax, %ecx
// 64: 4c 63 f9                      movslq  %ecx, %r15
// 67: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  PyCFunction_Type
// 75: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7a: 0f 85 02 03 00 00             jne     0x382 <_JIT_ENTRY+0x382>
// 80: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 85: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 89: 0f 85 f3 02 00 00             jne     0x382 <_JIT_ENTRY+0x382>
// 8f: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 93: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 96: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 99: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9c: 85 c9                         testl   %ecx, %ecx
// 9e: 48 89 14 24                   movq    %rdx, (%rsp)
// a2: 7e 11                         jle     0xb5 <_JIT_ENTRY+0xb5>
// a4: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// a8: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ac: 75 41                         jne     0xef <_JIT_ENTRY+0xef>
// ae: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b3: eb 3c                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// b5: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// ba: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000bc:  R_X86_64_64  .rodata.str1.1+0x39
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _Py_CheckRecursiveCall
// ce: 48 89 d7                      movq    %rdx, %rdi
// d1: ff d0                         callq   *%rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 85 91 02 00 00             jne     0x36c <_JIT_ENTRY+0x36c>
// db: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e0: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// e5: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// e9: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ed: 74 bf                         je      0xae <_JIT_ENTRY+0xae>
// ef: 31 ff                         xorl    %edi, %edi
// f1: 48 89 ee                      movq    %rbp, %rsi
// f4: 41 ff d0                      callq   *%r8
// f7: 48 8b 3c 24                   movq    (%rsp), %rdi
// fb: ff 47 2c                      incl    0x2c(%rdi)
// fe: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 103: 48 8b 45 00                   movq    (%rbp), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 26                         jg      0x132 <_JIT_ENTRY+0x132>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 125: 48 89 ea                      movq    %rbp, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 12e: 48 8b 45 00                   movq    (%rbp), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 78 29                         js      0x15f <_JIT_ENTRY+0x15f>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 48 8b 3c 24                   movq    (%rsp), %rdi
// 146: 48 ff 4d 00                   decq    (%rbp)
// 14a: 75 13                         jne     0x15f <_JIT_ENTRY+0x15f>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_Dealloc
// 156: 48 89 ef                      movq    %rbp, %rdi
// 159: ff d0                         callq   *%rax
// 15b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15f: 49 8b 04 24                   movq    (%r12), %rax
// 163: 48 85 c0                      testq   %rax, %rax
// 166: 7f 26                         jg      0x18e <_JIT_ENTRY+0x18e>
// 168: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016a:  R_X86_64_64  .rodata.str1.1
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_NegativeRefcount
// 17c: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 181: 4c 89 e2                      movq    %r12, %rdx
// 184: ff d0                         callq   *%rax
// 186: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18a: 49 8b 04 24                   movq    (%r12), %rax
// 18e: 85 c0                         testl   %eax, %eax
// 190: 78 29                         js      0x1bb <_JIT_ENTRY+0x1bb>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 19c: ff d0                         callq   *%rax
// 19e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a2: 49 ff 0c 24                   decq    (%r12)
// 1a6: 75 13                         jne     0x1bb <_JIT_ENTRY+0x1bb>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_Dealloc
// 1b2: 4c 89 e7                      movq    %r12, %rdi
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1bb: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1bf: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c4: 48 85 c9                      testq   %rcx, %rcx
// 1c7: 0f 84 9c 01 00 00             je      0x369 <_JIT_ENTRY+0x369>
// 1cd: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 1d1: 48 89 08                      movq    %rcx, (%rax)
// 1d4: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1d8: 48 8b 00                      movq    (%rax), %rax
// 1db: 84 c0                         testb   %al, %al
// 1dd: 74 18                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_HandlePending
// 1e9: ff d0                         callq   *%rax
// 1eb: 85 c0                         testl   %eax, %eax
// 1ed: 74 08                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 1ef: 4d 89 fe                      movq    %r15, %r14
// 1f2: e9 75 01 00 00                jmp     0x36c <_JIT_ENTRY+0x36c>
// 1f7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f9:  R_X86_64_64  _JIT_OPARG
// 201: 0f b7 d1                      movzwl  %cx, %edx
// 204: 89 d0                         movl    %edx, %eax
// 206: f7 d0                         notl    %eax
// 208: 48 63 f0                      movslq  %eax, %rsi
// 20b: 4c 8d 0c 36                   leaq    (%rsi,%rsi), %r9
// 20f: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 213: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 218: 29 d7                         subl    %edx, %edi
// 21a: 4c 63 d7                      movslq  %edi, %r10
// 21d: 49 01 f2                      addq    %rsi, %r10
// 220: 0f b7 c9                      movzwl  %cx, %ecx
// 223: 48 89 ce                      movq    %rcx, %rsi
// 226: 48 f7 de                      negq    %rsi
// 229: 44 8d 62 01                   leal    0x1(%rdx), %r12d
// 22d: 48 85 c0                      testq   %rax, %rax
// 230: 48 f7 d1                      notq    %rcx
// 233: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 237: 44 0f 44 e2                   cmovel  %edx, %r12d
// 23b: 4b 8b 3c d6                   movq    (%r14,%r10,8), %rdi
// 23f: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 243: f6 82 ab 00 00 00 80          testb   $-0x80, 0xab(%rdx)
// 24a: 0f 84 2f 01 00 00             je      0x37f <_JIT_ENTRY+0x37f>
// 250: 4c 8b 87 90 01 00 00          movq    0x190(%rdi), %r8
// 257: 4d 85 c0                      testq   %r8, %r8
// 25a: 0f 84 1f 01 00 00             je      0x37f <_JIT_ENTRY+0x37f>
// 260: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// 265: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 26a: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 26e: 48 85 c0                      testq   %rax, %rax
// 271: 41 0f 94 c7                   sete    %r15b
// 275: 44 89 e2                      movl    %r12d, %edx
// 278: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 27d: 48 89 ee                      movq    %rbp, %rsi
// 280: 31 c9                         xorl    %ecx, %ecx
// 282: 41 ff d0                      callq   *%r8
// 285: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _JIT_OPARG
// 294: 66 85 c0                      testw   %ax, %ax
// 297: 0f 94 c0                      sete    %al
// 29a: 41 84 c7                      testb   %al, %r15b
// 29d: 0f 84 16 01 00 00             je      0x3b9 <_JIT_ENTRY+0x3b9>
// 2a3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 2a8: 49 8b 45 00                   movq    (%r13), %rax
// 2ac: 48 85 c0                      testq   %rax, %rax
// 2af: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b3: 7f 26                         jg      0x2db <_JIT_ENTRY+0x2db>
// 2b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_NegativeRefcount
// 2c9: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 2ce: 4c 89 ea                      movq    %r13, %rdx
// 2d1: ff d0                         callq   *%rax
// 2d3: 48 8b 14 24                   movq    (%rsp), %rdx
// 2d7: 49 8b 45 00                   movq    (%r13), %rax
// 2db: 85 c0                         testl   %eax, %eax
// 2dd: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2e2: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 2e7: 78 29                         js      0x312 <_JIT_ENTRY+0x312>
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f3: ff d0                         callq   *%rax
// 2f5: 48 8b 14 24                   movq    (%rsp), %rdx
// 2f9: 49 ff 4d 00                   decq    (%r13)
// 2fd: 75 13                         jne     0x312 <_JIT_ENTRY+0x312>
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_Dealloc
// 309: 4c 89 ef                      movq    %r13, %rdi
// 30c: ff d0                         callq   *%rax
// 30e: 48 8b 14 24                   movq    (%rsp), %rdx
// 312: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 316: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 31b: 48 85 c9                      testq   %rcx, %rcx
// 31e: 74 49                         je      0x369 <_JIT_ENTRY+0x369>
// 320: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 324: 48 89 08                      movq    %rcx, (%rax)
// 327: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 32b: 48 8b 00                      movq    (%rax), %rax
// 32e: 84 c0                         testb   %al, %al
// 330: 74 17                         je      0x349 <_JIT_ENTRY+0x349>
// 332: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000334:  R_X86_64_64  _Py_HandlePending
// 33c: 48 89 d7                      movq    %rdx, %rdi
// 33f: ff d0                         callq   *%rax
// 341: 48 8b 14 24                   movq    (%rsp), %rdx
// 345: 85 c0                         testl   %eax, %eax
// 347: 75 23                         jne     0x36c <_JIT_ENTRY+0x36c>
// 349: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034b:  R_X86_64_64  _JIT_CONTINUE
// 353: 48 89 df                      movq    %rbx, %rdi
// 356: 4c 89 f6                      movq    %r14, %rsi
// 359: 48 83 c4 28                   addq    $0x28, %rsp
// 35d: 5b                            popq    %rbx
// 35e: 41 5c                         popq    %r12
// 360: 41 5d                         popq    %r13
// 362: 41 5e                         popq    %r14
// 364: 41 5f                         popq    %r15
// 366: 5d                            popq    %rbp
// 367: ff e0                         jmpq    *%rax
// 369: 49 89 c6                      movq    %rax, %r14
// 36c: 49 29 de                      subq    %rbx, %r14
// 36f: 49 83 c6 b8                   addq    $-0x48, %r14
// 373: 49 c1 ee 03                   shrq    $0x3, %r14
// 377: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 37b: 31 c0                         xorl    %eax, %eax
// 37d: eb 2b                         jmp     0x3aa <_JIT_ENTRY+0x3aa>
// 37f: 4d 89 fe                      movq    %r15, %r14
// 382: 49 29 de                      subq    %rbx, %r14
// 385: 49 83 c6 b8                   addq    $-0x48, %r14
// 389: 49 c1 ee 03                   shrq    $0x3, %r14
// 38d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 391: 48 8b 03                      movq    (%rbx), %rax
// 394: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000396:  R_X86_64_64  _JIT_TARGET
// 39e: 89 c9                         movl    %ecx, %ecx
// 3a0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 3a4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 3aa: 48 83 c4 28                   addq    $0x28, %rsp
// 3ae: 5b                            popq    %rbx
// 3af: 41 5c                         popq    %r12
// 3b1: 41 5d                         popq    %r13
// 3b3: 41 5e                         popq    %r14
// 3b5: 41 5f                         popq    %r15
// 3b7: 5d                            popq    %rbp
// 3b8: c3                            retq
// 3b9: 41 83 fc 02                   cmpl    $0x2, %r12d
// 3bd: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 3c3: 45 0f 43 fc                   cmovael %r12d, %r15d
// 3c7: 45 31 e4                      xorl    %r12d, %r12d
// 3ca: eb 0c                         jmp     0x3d8 <_JIT_ENTRY+0x3d8>
// 3cc: 49 ff c4                      incq    %r12
// 3cf: 4d 39 e7                      cmpq    %r12, %r15
// 3d2: 0f 84 cb fe ff ff             je      0x2a3 <_JIT_ENTRY+0x2a3>
// 3d8: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 3dd: 49 8b 45 00                   movq    (%r13), %rax
// 3e1: 48 85 c0                      testq   %rax, %rax
// 3e4: 7f 22                         jg      0x408 <_JIT_ENTRY+0x408>
// 3e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003e8:  R_X86_64_64  .rodata.str1.1
// 3f0: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 3f5: 4c 89 ea                      movq    %r13, %rdx
// 3f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003fa:  R_X86_64_64  _Py_NegativeRefcount
// 402: ff d0                         callq   *%rax
// 404: 49 8b 45 00                   movq    (%r13), %rax
// 408: 85 c0                         testl   %eax, %eax
// 40a: 78 c0                         js      0x3cc <_JIT_ENTRY+0x3cc>
// 40c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 416: ff d0                         callq   *%rax
// 418: 49 ff 4d 00                   decq    (%r13)
// 41c: 75 ae                         jne     0x3cc <_JIT_ENTRY+0x3cc>
// 41e: 4c 89 ef                      movq    %r13, %rdi
// 421: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000423:  R_X86_64_64  _Py_Dealloc
// 42b: ff d0                         callq   *%rax
// 42d: eb 9d                         jmp     0x3cc <_JIT_ENTRY+0x3cc>
// 42f: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_BUILTIN_CLASS_code_body[1072] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x25, 0x03, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x02, 0x03, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xf3, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x11, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x41, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x3c, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x91, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xbf, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x9c, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfe, 0xe9, 0x75, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf0, 0x4c, 0x8d, 0x0c, 0x36, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x4c, 0x63, 0xd7, 0x49, 0x01, 0xf2, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x62, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xe2, 0x4b, 0x8b, 0x3c, 0xd6, 0x48, 0x8b, 0x57, 0x08, 0xf6, 0x82, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x2f, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x87, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x1f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x44, 0x89, 0xe2, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x14, 0x24, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x49, 0x4f, 0x8d, 0x34, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfc, 0x45, 0x31, 0xe4, 0xeb, 0x0c, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe7, 0x0f, 0x84, 0xcb, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xae, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9d};
static const Hole _CALL_BUILTIN_Oplus_CALL_BUILTIN_CLASS_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x334, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x3e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x40e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x423, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_BUILTIN_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_BUILTIN_CLASS_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 0f 85 2d 03 00 00             jne     0x38a <_JIT_ENTRY+0x38a>
// 5d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 62: 29 c1                         subl    %eax, %ecx
// 64: 4c 63 f9                      movslq  %ecx, %r15
// 67: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  PyCFunction_Type
// 75: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7a: 0f 85 0a 03 00 00             jne     0x38a <_JIT_ENTRY+0x38a>
// 80: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 85: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 89: 0f 85 fb 02 00 00             jne     0x38a <_JIT_ENTRY+0x38a>
// 8f: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 93: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 96: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 99: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9c: 85 c9                         testl   %ecx, %ecx
// 9e: 48 89 14 24                   movq    %rdx, (%rsp)
// a2: 7e 11                         jle     0xb5 <_JIT_ENTRY+0xb5>
// a4: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// a8: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ac: 75 41                         jne     0xef <_JIT_ENTRY+0xef>
// ae: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b3: eb 3c                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// b5: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// ba: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000bc:  R_X86_64_64  .rodata.str1.1+0x39
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _Py_CheckRecursiveCall
// ce: 48 89 d7                      movq    %rdx, %rdi
// d1: ff d0                         callq   *%rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 85 99 02 00 00             jne     0x374 <_JIT_ENTRY+0x374>
// db: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e0: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// e5: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// e9: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ed: 74 bf                         je      0xae <_JIT_ENTRY+0xae>
// ef: 31 ff                         xorl    %edi, %edi
// f1: 48 89 ee                      movq    %rbp, %rsi
// f4: 41 ff d0                      callq   *%r8
// f7: 48 8b 3c 24                   movq    (%rsp), %rdi
// fb: ff 47 2c                      incl    0x2c(%rdi)
// fe: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 103: 48 8b 45 00                   movq    (%rbp), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 26                         jg      0x132 <_JIT_ENTRY+0x132>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 125: 48 89 ea                      movq    %rbp, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 12e: 48 8b 45 00                   movq    (%rbp), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 78 29                         js      0x15f <_JIT_ENTRY+0x15f>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 48 8b 3c 24                   movq    (%rsp), %rdi
// 146: 48 ff 4d 00                   decq    (%rbp)
// 14a: 75 13                         jne     0x15f <_JIT_ENTRY+0x15f>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_Dealloc
// 156: 48 89 ef                      movq    %rbp, %rdi
// 159: ff d0                         callq   *%rax
// 15b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15f: 49 8b 04 24                   movq    (%r12), %rax
// 163: 48 85 c0                      testq   %rax, %rax
// 166: 7f 26                         jg      0x18e <_JIT_ENTRY+0x18e>
// 168: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016a:  R_X86_64_64  .rodata.str1.1
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_NegativeRefcount
// 17c: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 181: 4c 89 e2                      movq    %r12, %rdx
// 184: ff d0                         callq   *%rax
// 186: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18a: 49 8b 04 24                   movq    (%r12), %rax
// 18e: 85 c0                         testl   %eax, %eax
// 190: 78 29                         js      0x1bb <_JIT_ENTRY+0x1bb>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 19c: ff d0                         callq   *%rax
// 19e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a2: 49 ff 0c 24                   decq    (%r12)
// 1a6: 75 13                         jne     0x1bb <_JIT_ENTRY+0x1bb>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_Dealloc
// 1b2: 4c 89 e7                      movq    %r12, %rdi
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1bb: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1bf: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c4: 48 85 c9                      testq   %rcx, %rcx
// 1c7: 0f 84 a4 01 00 00             je      0x371 <_JIT_ENTRY+0x371>
// 1cd: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 1d1: 48 89 08                      movq    %rcx, (%rax)
// 1d4: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1d8: 48 8b 00                      movq    (%rax), %rax
// 1db: 84 c0                         testb   %al, %al
// 1dd: 74 18                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_HandlePending
// 1e9: ff d0                         callq   *%rax
// 1eb: 85 c0                         testl   %eax, %eax
// 1ed: 74 08                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 1ef: 4d 89 fe                      movq    %r15, %r14
// 1f2: e9 7d 01 00 00                jmp     0x374 <_JIT_ENTRY+0x374>
// 1f7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f9:  R_X86_64_64  _JIT_OPARG
// 201: 0f b7 d1                      movzwl  %cx, %edx
// 204: 89 d0                         movl    %edx, %eax
// 206: f7 d0                         notl    %eax
// 208: 48 63 f0                      movslq  %eax, %rsi
// 20b: 4c 8d 0c 36                   leaq    (%rsi,%rsi), %r9
// 20f: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 213: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 218: 29 d7                         subl    %edx, %edi
// 21a: 48 63 ff                      movslq  %edi, %rdi
// 21d: 48 01 f7                      addq    %rsi, %rdi
// 220: 4d 8b 14 fe                   movq    (%r14,%rdi,8), %r10
// 224: 0f b7 c9                      movzwl  %cx, %ecx
// 227: 48 89 ce                      movq    %rcx, %rsi
// 22a: 48 f7 de                      negq    %rsi
// 22d: 44 8d 62 01                   leal    0x1(%rdx), %r12d
// 231: 48 85 c0                      testq   %rax, %rax
// 234: 48 f7 d1                      notq    %rcx
// 237: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 23b: 44 0f 44 e2                   cmovel  %edx, %r12d
// 23f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000241:  R_X86_64_64  PyCFunction_Type
// 249: 49 39 52 08                   cmpq    %rdx, 0x8(%r10)
// 24d: 0f 85 34 01 00 00             jne     0x387 <_JIT_ENTRY+0x387>
// 253: 4d 8b 42 10                   movq    0x10(%r10), %r8
// 257: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 25f: 0f 85 22 01 00 00             jne     0x387 <_JIT_ENTRY+0x387>
// 265: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 26a: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 26f: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 273: 48 85 c0                      testq   %rax, %rax
// 276: 41 0f 94 c7                   sete    %r15b
// 27a: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 27f: 49 8b 7a 18                   movq    0x18(%r10), %rdi
// 283: 44 89 e2                      movl    %r12d, %edx
// 286: 48 89 ee                      movq    %rbp, %rsi
// 289: 41 ff 50 08                   callq   *0x8(%r8)
// 28d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _JIT_OPARG
// 29c: 66 85 c0                      testw   %ax, %ax
// 29f: 0f 94 c0                      sete    %al
// 2a2: 41 84 c7                      testb   %al, %r15b
// 2a5: 0f 84 16 01 00 00             je      0x3c1 <_JIT_ENTRY+0x3c1>
// 2ab: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 2b0: 49 8b 45 00                   movq    (%r13), %rax
// 2b4: 48 85 c0                      testq   %rax, %rax
// 2b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 2bb: 7f 26                         jg      0x2e3 <_JIT_ENTRY+0x2e3>
// 2bd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bf:  R_X86_64_64  .rodata.str1.1
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_NegativeRefcount
// 2d1: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 2d6: 4c 89 ea                      movq    %r13, %rdx
// 2d9: ff d0                         callq   *%rax
// 2db: 48 8b 14 24                   movq    (%rsp), %rdx
// 2df: 49 8b 45 00                   movq    (%r13), %rax
// 2e3: 85 c0                         testl   %eax, %eax
// 2e5: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2ea: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 2ef: 78 29                         js      0x31a <_JIT_ENTRY+0x31a>
// 2f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2fb: ff d0                         callq   *%rax
// 2fd: 48 8b 14 24                   movq    (%rsp), %rdx
// 301: 49 ff 4d 00                   decq    (%r13)
// 305: 75 13                         jne     0x31a <_JIT_ENTRY+0x31a>
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _Py_Dealloc
// 311: 4c 89 ef                      movq    %r13, %rdi
// 314: ff d0                         callq   *%rax
// 316: 48 8b 14 24                   movq    (%rsp), %rdx
// 31a: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 31e: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 323: 48 85 c9                      testq   %rcx, %rcx
// 326: 74 49                         je      0x371 <_JIT_ENTRY+0x371>
// 328: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 32c: 48 89 08                      movq    %rcx, (%rax)
// 32f: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 333: 48 8b 00                      movq    (%rax), %rax
// 336: 84 c0                         testb   %al, %al
// 338: 74 17                         je      0x351 <_JIT_ENTRY+0x351>
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _Py_HandlePending
// 344: 48 89 d7                      movq    %rdx, %rdi
// 347: ff d0                         callq   *%rax
// 349: 48 8b 14 24                   movq    (%rsp), %rdx
// 34d: 85 c0                         testl   %eax, %eax
// 34f: 75 23                         jne     0x374 <_JIT_ENTRY+0x374>
// 351: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000353:  R_X86_64_64  _JIT_CONTINUE
// 35b: 48 89 df                      movq    %rbx, %rdi
// 35e: 4c 89 f6                      movq    %r14, %rsi
// 361: 48 83 c4 28                   addq    $0x28, %rsp
// 365: 5b                            popq    %rbx
// 366: 41 5c                         popq    %r12
// 368: 41 5d                         popq    %r13
// 36a: 41 5e                         popq    %r14
// 36c: 41 5f                         popq    %r15
// 36e: 5d                            popq    %rbp
// 36f: ff e0                         jmpq    *%rax
// 371: 49 89 c6                      movq    %rax, %r14
// 374: 49 29 de                      subq    %rbx, %r14
// 377: 49 83 c6 b8                   addq    $-0x48, %r14
// 37b: 49 c1 ee 03                   shrq    $0x3, %r14
// 37f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 383: 31 c0                         xorl    %eax, %eax
// 385: eb 2b                         jmp     0x3b2 <_JIT_ENTRY+0x3b2>
// 387: 4d 89 fe                      movq    %r15, %r14
// 38a: 49 29 de                      subq    %rbx, %r14
// 38d: 49 83 c6 b8                   addq    $-0x48, %r14
// 391: 49 c1 ee 03                   shrq    $0x3, %r14
// 395: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 399: 48 8b 03                      movq    (%rbx), %rax
// 39c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000039e:  R_X86_64_64  _JIT_TARGET
// 3a6: 89 c9                         movl    %ecx, %ecx
// 3a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 3ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 3b2: 48 83 c4 28                   addq    $0x28, %rsp
// 3b6: 5b                            popq    %rbx
// 3b7: 41 5c                         popq    %r12
// 3b9: 41 5d                         popq    %r13
// 3bb: 41 5e                         popq    %r14
// 3bd: 41 5f                         popq    %r15
// 3bf: 5d                            popq    %rbp
// 3c0: c3                            retq
// 3c1: 41 83 fc 02                   cmpl    $0x2, %r12d
// 3c5: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 3cb: 45 0f 43 fc                   cmovael %r12d, %r15d
// 3cf: 45 31 e4                      xorl    %r12d, %r12d
// 3d2: eb 0c                         jmp     0x3e0 <_JIT_ENTRY+0x3e0>
// 3d4: 49 ff c4                      incq    %r12
// 3d7: 4d 39 e7                      cmpq    %r12, %r15
// 3da: 0f 84 cb fe ff ff             je      0x2ab <_JIT_ENTRY+0x2ab>
// 3e0: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 3e5: 49 8b 45 00                   movq    (%r13), %rax
// 3e9: 48 85 c0                      testq   %rax, %rax
// 3ec: 7f 22                         jg      0x410 <_JIT_ENTRY+0x410>
// 3ee: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003f0:  R_X86_64_64  .rodata.str1.1
// 3f8: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 3fd: 4c 89 ea                      movq    %r13, %rdx
// 400: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000402:  R_X86_64_64  _Py_NegativeRefcount
// 40a: ff d0                         callq   *%rax
// 40c: 49 8b 45 00                   movq    (%r13), %rax
// 410: 85 c0                         testl   %eax, %eax
// 412: 78 c0                         js      0x3d4 <_JIT_ENTRY+0x3d4>
// 414: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000416:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 41e: ff d0                         callq   *%rax
// 420: 49 ff 4d 00                   decq    (%r13)
// 424: 75 ae                         jne     0x3d4 <_JIT_ENTRY+0x3d4>
// 426: 4c 89 ef                      movq    %r13, %rdi
// 429: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000042b:  R_X86_64_64  _Py_Dealloc
// 433: ff d0                         callq   *%rax
// 435: eb 9d                         jmp     0x3d4 <_JIT_ENTRY+0x3d4>
// 437: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST_code_body[1080] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x2d, 0x03, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0a, 0x03, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x11, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x41, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x3c, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x99, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xbf, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa4, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfe, 0xe9, 0x7d, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf0, 0x4c, 0x8d, 0x0c, 0x36, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x48, 0x63, 0xff, 0x48, 0x01, 0xf7, 0x4d, 0x8b, 0x14, 0xfe, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x62, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xe2, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x52, 0x08, 0x0f, 0x85, 0x34, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x42, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x22, 0x01, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x49, 0x8b, 0x7a, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x14, 0x24, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x49, 0x4f, 0x8d, 0x34, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfc, 0x45, 0x31, 0xe4, 0xeb, 0x0c, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe7, 0x0f, 0x84, 0xcb, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xae, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9d};
static const Hole _CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x353, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x3f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x402, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x416, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x42b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 0f 85 2f 03 00 00             jne     0x38c <_JIT_ENTRY+0x38c>
// 5d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 62: 29 c1                         subl    %eax, %ecx
// 64: 4c 63 f9                      movslq  %ecx, %r15
// 67: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  PyCFunction_Type
// 75: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7a: 0f 85 0c 03 00 00             jne     0x38c <_JIT_ENTRY+0x38c>
// 80: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 85: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 89: 0f 85 fd 02 00 00             jne     0x38c <_JIT_ENTRY+0x38c>
// 8f: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 93: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 96: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 99: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9c: 85 c9                         testl   %ecx, %ecx
// 9e: 48 89 14 24                   movq    %rdx, (%rsp)
// a2: 7e 11                         jle     0xb5 <_JIT_ENTRY+0xb5>
// a4: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// a8: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ac: 75 41                         jne     0xef <_JIT_ENTRY+0xef>
// ae: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b3: eb 3c                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// b5: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// ba: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000bc:  R_X86_64_64  .rodata.str1.1+0x39
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _Py_CheckRecursiveCall
// ce: 48 89 d7                      movq    %rdx, %rdi
// d1: ff d0                         callq   *%rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 85 9b 02 00 00             jne     0x376 <_JIT_ENTRY+0x376>
// db: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e0: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// e5: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// e9: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ed: 74 bf                         je      0xae <_JIT_ENTRY+0xae>
// ef: 31 ff                         xorl    %edi, %edi
// f1: 48 89 ee                      movq    %rbp, %rsi
// f4: 41 ff d0                      callq   *%r8
// f7: 48 8b 3c 24                   movq    (%rsp), %rdi
// fb: ff 47 2c                      incl    0x2c(%rdi)
// fe: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 103: 48 8b 45 00                   movq    (%rbp), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 26                         jg      0x132 <_JIT_ENTRY+0x132>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 125: 48 89 ea                      movq    %rbp, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 12e: 48 8b 45 00                   movq    (%rbp), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 78 29                         js      0x15f <_JIT_ENTRY+0x15f>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 48 8b 3c 24                   movq    (%rsp), %rdi
// 146: 48 ff 4d 00                   decq    (%rbp)
// 14a: 75 13                         jne     0x15f <_JIT_ENTRY+0x15f>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_Dealloc
// 156: 48 89 ef                      movq    %rbp, %rdi
// 159: ff d0                         callq   *%rax
// 15b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15f: 49 8b 04 24                   movq    (%r12), %rax
// 163: 48 85 c0                      testq   %rax, %rax
// 166: 7f 26                         jg      0x18e <_JIT_ENTRY+0x18e>
// 168: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016a:  R_X86_64_64  .rodata.str1.1
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_NegativeRefcount
// 17c: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 181: 4c 89 e2                      movq    %r12, %rdx
// 184: ff d0                         callq   *%rax
// 186: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18a: 49 8b 04 24                   movq    (%r12), %rax
// 18e: 85 c0                         testl   %eax, %eax
// 190: 78 29                         js      0x1bb <_JIT_ENTRY+0x1bb>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 19c: ff d0                         callq   *%rax
// 19e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a2: 49 ff 0c 24                   decq    (%r12)
// 1a6: 75 13                         jne     0x1bb <_JIT_ENTRY+0x1bb>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_Dealloc
// 1b2: 4c 89 e7                      movq    %r12, %rdi
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1bb: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1bf: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c4: 48 85 c9                      testq   %rcx, %rcx
// 1c7: 0f 84 a6 01 00 00             je      0x373 <_JIT_ENTRY+0x373>
// 1cd: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 1d1: 48 89 08                      movq    %rcx, (%rax)
// 1d4: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1d8: 48 8b 00                      movq    (%rax), %rax
// 1db: 84 c0                         testb   %al, %al
// 1dd: 74 18                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_HandlePending
// 1e9: ff d0                         callq   *%rax
// 1eb: 85 c0                         testl   %eax, %eax
// 1ed: 74 08                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 1ef: 4d 89 fe                      movq    %r15, %r14
// 1f2: e9 7f 01 00 00                jmp     0x376 <_JIT_ENTRY+0x376>
// 1f7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f9:  R_X86_64_64  _JIT_OPARG
// 201: 0f b7 d1                      movzwl  %cx, %edx
// 204: 89 d0                         movl    %edx, %eax
// 206: f7 d0                         notl    %eax
// 208: 48 63 f0                      movslq  %eax, %rsi
// 20b: 4c 8d 0c 36                   leaq    (%rsi,%rsi), %r9
// 20f: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 213: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 218: 29 d7                         subl    %edx, %edi
// 21a: 48 63 ff                      movslq  %edi, %rdi
// 21d: 48 01 f7                      addq    %rsi, %rdi
// 220: 4d 8b 14 fe                   movq    (%r14,%rdi,8), %r10
// 224: 0f b7 c9                      movzwl  %cx, %ecx
// 227: 48 89 ce                      movq    %rcx, %rsi
// 22a: 48 f7 de                      negq    %rsi
// 22d: 44 8d 62 01                   leal    0x1(%rdx), %r12d
// 231: 48 85 c0                      testq   %rax, %rax
// 234: 48 f7 d1                      notq    %rcx
// 237: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 23b: 44 0f 44 e2                   cmovel  %edx, %r12d
// 23f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000241:  R_X86_64_64  PyCFunction_Type
// 249: 49 39 52 08                   cmpq    %rdx, 0x8(%r10)
// 24d: 0f 85 36 01 00 00             jne     0x389 <_JIT_ENTRY+0x389>
// 253: 4d 8b 42 10                   movq    0x10(%r10), %r8
// 257: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 25f: 0f 85 24 01 00 00             jne     0x389 <_JIT_ENTRY+0x389>
// 265: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 26a: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 26f: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 273: 48 85 c0                      testq   %rax, %rax
// 276: 41 0f 94 c7                   sete    %r15b
// 27a: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 27f: 49 8b 7a 18                   movq    0x18(%r10), %rdi
// 283: 44 89 e2                      movl    %r12d, %edx
// 286: 48 89 ee                      movq    %rbp, %rsi
// 289: 31 c9                         xorl    %ecx, %ecx
// 28b: 41 ff 50 08                   callq   *0x8(%r8)
// 28f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _JIT_OPARG
// 29e: 66 85 c0                      testw   %ax, %ax
// 2a1: 0f 94 c0                      sete    %al
// 2a4: 41 84 c7                      testb   %al, %r15b
// 2a7: 0f 84 16 01 00 00             je      0x3c3 <_JIT_ENTRY+0x3c3>
// 2ad: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 2b2: 49 8b 45 00                   movq    (%r13), %rax
// 2b6: 48 85 c0                      testq   %rax, %rax
// 2b9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2bd: 7f 26                         jg      0x2e5 <_JIT_ENTRY+0x2e5>
// 2bf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c1:  R_X86_64_64  .rodata.str1.1
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_NegativeRefcount
// 2d3: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 2d8: 4c 89 ea                      movq    %r13, %rdx
// 2db: ff d0                         callq   *%rax
// 2dd: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e1: 49 8b 45 00                   movq    (%r13), %rax
// 2e5: 85 c0                         testl   %eax, %eax
// 2e7: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2ec: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 2f1: 78 29                         js      0x31c <_JIT_ENTRY+0x31c>
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2fd: ff d0                         callq   *%rax
// 2ff: 48 8b 14 24                   movq    (%rsp), %rdx
// 303: 49 ff 4d 00                   decq    (%r13)
// 307: 75 13                         jne     0x31c <_JIT_ENTRY+0x31c>
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_Dealloc
// 313: 4c 89 ef                      movq    %r13, %rdi
// 316: ff d0                         callq   *%rax
// 318: 48 8b 14 24                   movq    (%rsp), %rdx
// 31c: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 320: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 325: 48 85 c9                      testq   %rcx, %rcx
// 328: 74 49                         je      0x373 <_JIT_ENTRY+0x373>
// 32a: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 32e: 48 89 08                      movq    %rcx, (%rax)
// 331: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 335: 48 8b 00                      movq    (%rax), %rax
// 338: 84 c0                         testb   %al, %al
// 33a: 74 17                         je      0x353 <_JIT_ENTRY+0x353>
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _Py_HandlePending
// 346: 48 89 d7                      movq    %rdx, %rdi
// 349: ff d0                         callq   *%rax
// 34b: 48 8b 14 24                   movq    (%rsp), %rdx
// 34f: 85 c0                         testl   %eax, %eax
// 351: 75 23                         jne     0x376 <_JIT_ENTRY+0x376>
// 353: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000355:  R_X86_64_64  _JIT_CONTINUE
// 35d: 48 89 df                      movq    %rbx, %rdi
// 360: 4c 89 f6                      movq    %r14, %rsi
// 363: 48 83 c4 28                   addq    $0x28, %rsp
// 367: 5b                            popq    %rbx
// 368: 41 5c                         popq    %r12
// 36a: 41 5d                         popq    %r13
// 36c: 41 5e                         popq    %r14
// 36e: 41 5f                         popq    %r15
// 370: 5d                            popq    %rbp
// 371: ff e0                         jmpq    *%rax
// 373: 49 89 c6                      movq    %rax, %r14
// 376: 49 29 de                      subq    %rbx, %r14
// 379: 49 83 c6 b8                   addq    $-0x48, %r14
// 37d: 49 c1 ee 03                   shrq    $0x3, %r14
// 381: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 385: 31 c0                         xorl    %eax, %eax
// 387: eb 2b                         jmp     0x3b4 <_JIT_ENTRY+0x3b4>
// 389: 4d 89 fe                      movq    %r15, %r14
// 38c: 49 29 de                      subq    %rbx, %r14
// 38f: 49 83 c6 b8                   addq    $-0x48, %r14
// 393: 49 c1 ee 03                   shrq    $0x3, %r14
// 397: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 39b: 48 8b 03                      movq    (%rbx), %rax
// 39e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003a0:  R_X86_64_64  _JIT_TARGET
// 3a8: 89 c9                         movl    %ecx, %ecx
// 3aa: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 3ae: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 3b4: 48 83 c4 28                   addq    $0x28, %rsp
// 3b8: 5b                            popq    %rbx
// 3b9: 41 5c                         popq    %r12
// 3bb: 41 5d                         popq    %r13
// 3bd: 41 5e                         popq    %r14
// 3bf: 41 5f                         popq    %r15
// 3c1: 5d                            popq    %rbp
// 3c2: c3                            retq
// 3c3: 41 83 fc 02                   cmpl    $0x2, %r12d
// 3c7: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 3cd: 45 0f 43 fc                   cmovael %r12d, %r15d
// 3d1: 45 31 e4                      xorl    %r12d, %r12d
// 3d4: eb 0c                         jmp     0x3e2 <_JIT_ENTRY+0x3e2>
// 3d6: 49 ff c4                      incq    %r12
// 3d9: 4d 39 e7                      cmpq    %r12, %r15
// 3dc: 0f 84 cb fe ff ff             je      0x2ad <_JIT_ENTRY+0x2ad>
// 3e2: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 3e7: 49 8b 45 00                   movq    (%r13), %rax
// 3eb: 48 85 c0                      testq   %rax, %rax
// 3ee: 7f 22                         jg      0x412 <_JIT_ENTRY+0x412>
// 3f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003f2:  R_X86_64_64  .rodata.str1.1
// 3fa: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 3ff: 4c 89 ea                      movq    %r13, %rdx
// 402: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000404:  R_X86_64_64  _Py_NegativeRefcount
// 40c: ff d0                         callq   *%rax
// 40e: 49 8b 45 00                   movq    (%r13), %rax
// 412: 85 c0                         testl   %eax, %eax
// 414: 78 c0                         js      0x3d6 <_JIT_ENTRY+0x3d6>
// 416: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000418:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 420: ff d0                         callq   *%rax
// 422: 49 ff 4d 00                   decq    (%r13)
// 426: 75 ae                         jne     0x3d6 <_JIT_ENTRY+0x3d6>
// 428: 4c 89 ef                      movq    %r13, %rdi
// 42b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000042d:  R_X86_64_64  _Py_Dealloc
// 435: ff d0                         callq   *%rax
// 437: eb 9d                         jmp     0x3d6 <_JIT_ENTRY+0x3d6>
// 439: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[1082] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x2f, 0x03, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0c, 0x03, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xfd, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x11, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x41, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x3c, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x9b, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xbf, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa6, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfe, 0xe9, 0x7f, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf0, 0x4c, 0x8d, 0x0c, 0x36, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x48, 0x63, 0xff, 0x48, 0x01, 0xf7, 0x4d, 0x8b, 0x14, 0xfe, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x62, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xe2, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x52, 0x08, 0x0f, 0x85, 0x36, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x42, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x24, 0x01, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x49, 0x8b, 0x7a, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x14, 0x24, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x49, 0x4f, 0x8d, 0x34, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfc, 0x45, 0x31, 0xe4, 0xeb, 0x0c, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe7, 0x0f, 0x84, 0xcb, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xae, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9d};
static const Hole _CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3a0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x3f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x404, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x418, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x42d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_BUILTIN_O
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_BUILTIN_O.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 0f 85 5b 02 00 00             jne     0x2b8 <_JIT_ENTRY+0x2b8>
// 5d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 62: 29 c1                         subl    %eax, %ecx
// 64: 4c 63 f9                      movslq  %ecx, %r15
// 67: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  PyCFunction_Type
// 75: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7a: 0f 85 38 02 00 00             jne     0x2b8 <_JIT_ENTRY+0x2b8>
// 80: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 85: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 89: 0f 85 29 02 00 00             jne     0x2b8 <_JIT_ENTRY+0x2b8>
// 8f: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 93: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 96: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 99: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9c: 85 c9                         testl   %ecx, %ecx
// 9e: 48 89 14 24                   movq    %rdx, (%rsp)
// a2: 7e 11                         jle     0xb5 <_JIT_ENTRY+0xb5>
// a4: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// a8: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ac: 75 41                         jne     0xef <_JIT_ENTRY+0xef>
// ae: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b3: eb 3c                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// b5: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// ba: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000bc:  R_X86_64_64  .rodata.str1.1+0x39
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _Py_CheckRecursiveCall
// ce: 48 89 d7                      movq    %rdx, %rdi
// d1: ff d0                         callq   *%rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 85 c7 01 00 00             jne     0x2a2 <_JIT_ENTRY+0x2a2>
// db: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e0: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// e5: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// e9: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ed: 74 bf                         je      0xae <_JIT_ENTRY+0xae>
// ef: 31 ff                         xorl    %edi, %edi
// f1: 48 89 ee                      movq    %rbp, %rsi
// f4: 41 ff d0                      callq   *%r8
// f7: 48 8b 3c 24                   movq    (%rsp), %rdi
// fb: ff 47 2c                      incl    0x2c(%rdi)
// fe: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 103: 48 8b 45 00                   movq    (%rbp), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 26                         jg      0x132 <_JIT_ENTRY+0x132>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 125: 48 89 ea                      movq    %rbp, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 12e: 48 8b 45 00                   movq    (%rbp), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 78 29                         js      0x15f <_JIT_ENTRY+0x15f>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 48 8b 3c 24                   movq    (%rsp), %rdi
// 146: 48 ff 4d 00                   decq    (%rbp)
// 14a: 75 13                         jne     0x15f <_JIT_ENTRY+0x15f>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_Dealloc
// 156: 48 89 ef                      movq    %rbp, %rdi
// 159: ff d0                         callq   *%rax
// 15b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15f: 49 8b 04 24                   movq    (%r12), %rax
// 163: 48 85 c0                      testq   %rax, %rax
// 166: 7f 26                         jg      0x18e <_JIT_ENTRY+0x18e>
// 168: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016a:  R_X86_64_64  .rodata.str1.1
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_NegativeRefcount
// 17c: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 181: 4c 89 e2                      movq    %r12, %rdx
// 184: ff d0                         callq   *%rax
// 186: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18a: 49 8b 04 24                   movq    (%r12), %rax
// 18e: 85 c0                         testl   %eax, %eax
// 190: 78 29                         js      0x1bb <_JIT_ENTRY+0x1bb>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 19c: ff d0                         callq   *%rax
// 19e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a2: 49 ff 0c 24                   decq    (%r12)
// 1a6: 75 13                         jne     0x1bb <_JIT_ENTRY+0x1bb>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_Dealloc
// 1b2: 4c 89 e7                      movq    %r12, %rdi
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1bb: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1bf: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c4: 48 85 c9                      testq   %rcx, %rcx
// 1c7: 0f 84 d2 00 00 00             je      0x29f <_JIT_ENTRY+0x29f>
// 1cd: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 1d1: 48 89 08                      movq    %rcx, (%rax)
// 1d4: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1d8: 48 8b 00                      movq    (%rax), %rax
// 1db: 84 c0                         testb   %al, %al
// 1dd: 74 1c                         je      0x1fb <_JIT_ENTRY+0x1fb>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_HandlePending
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ef: 85 c0                         testl   %eax, %eax
// 1f1: 74 08                         je      0x1fb <_JIT_ENTRY+0x1fb>
// 1f3: 4d 89 ee                      movq    %r13, %r14
// 1f6: e9 a7 00 00 00                jmp     0x2a2 <_JIT_ENTRY+0x2a2>
// 1fb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001fd:  R_X86_64_64  _JIT_OPARG
// 205: 0f b7 c2                      movzwl  %dx, %eax
// 208: 89 c1                         movl    %eax, %ecx
// 20a: f7 d1                         notl    %ecx
// 20c: 48 63 c9                      movslq  %ecx, %rcx
// 20f: 4c 8d 3c 09                   leaq    (%rcx,%rcx), %r15
// 213: 0f b7 ea                      movzwl  %dx, %ebp
// 216: 48 89 ea                      movq    %rbp, %rdx
// 219: 48 f7 da                      negq    %rdx
// 21c: 31 f6                         xorl    %esi, %esi
// 21e: 66 85 ed                      testw   %bp, %bp
// 221: 40 0f 94 c6                   sete    %sil
// 225: 45 31 c0                      xorl    %r8d, %r8d
// 228: 66 83 fd 01                   cmpw    $0x1, %bp
// 22c: 41 0f 94 c0                   sete    %r8b
// 230: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 235: 48 f7 d5                      notq    %rbp
// 238: 48 0f 44 ea                   cmoveq  %rdx, %rbp
// 23c: 41 0f 44 f0                   cmovel  %r8d, %esi
// 240: 40 80 fe 01                   cmpb    $0x1, %sil
// 244: 75 6f                         jne     0x2b5 <_JIT_ENTRY+0x2b5>
// 246: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 24b: 29 c2                         subl    %eax, %edx
// 24d: 4c 63 e2                      movslq  %edx, %r12
// 250: 49 01 cc                      addq    %rcx, %r12
// 253: 4b 8b 34 e6                   movq    (%r14,%r12,8), %rsi
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  PyCFunction_Type
// 261: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 265: 75 4e                         jne     0x2b5 <_JIT_ENTRY+0x2b5>
// 267: 48 8b 46 10                   movq    0x10(%rsi), %rax
// 26b: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 26f: 75 44                         jne     0x2b5 <_JIT_ENTRY+0x2b5>
// 271: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 275: 8b 4f 2c                      movl    0x2c(%rdi), %ecx
// 278: 8d 51 ff                      leal    -0x1(%rcx), %edx
// 27b: 89 57 2c                      movl    %edx, 0x2c(%rdi)
// 27e: 85 c9                         testl   %ecx, %ecx
// 280: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 285: 7e 68                         jle     0x2ef <_JIT_ENTRY+0x2ef>
// 287: 4d 8b 6c ed 00                movq    (%r13,%rbp,8), %r13
// 28c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 290: 0f 85 99 00 00 00             jne     0x32f <_JIT_ENTRY+0x32f>
// 296: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 29a: e9 92 00 00 00                jmp     0x331 <_JIT_ENTRY+0x331>
// 29f: 49 89 c6                      movq    %rax, %r14
// 2a2: 49 29 de                      subq    %rbx, %r14
// 2a5: 49 83 c6 b8                   addq    $-0x48, %r14
// 2a9: 49 c1 ee 03                   shrq    $0x3, %r14
// 2ad: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2b1: 31 c0                         xorl    %eax, %eax
// 2b3: eb 2b                         jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 2b5: 4d 89 ee                      movq    %r13, %r14
// 2b8: 49 29 de                      subq    %rbx, %r14
// 2bb: 49 83 c6 b8                   addq    $-0x48, %r14
// 2bf: 49 c1 ee 03                   shrq    $0x3, %r14
// 2c3: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2c7: 48 8b 03                      movq    (%rbx), %rax
// 2ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002cc:  R_X86_64_64  _JIT_TARGET
// 2d4: 89 c9                         movl    %ecx, %ecx
// 2d6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2da: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2e0: 48 83 c4 18                   addq    $0x18, %rsp
// 2e4: 5b                            popq    %rbx
// 2e5: 41 5c                         popq    %r12
// 2e7: 41 5d                         popq    %r13
// 2e9: 41 5e                         popq    %r14
// 2eb: 41 5f                         popq    %r15
// 2ed: 5d                            popq    %rbp
// 2ee: c3                            retq
// 2ef: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 2f4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002f6:  R_X86_64_64  .rodata.str1.1+0x39
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  _Py_CheckRecursiveCall
// 308: ff d0                         callq   *%rax
// 30a: 85 c0                         testl   %eax, %eax
// 30c: 0f 85 e1 fe ff ff             jne     0x1f3 <_JIT_ENTRY+0x1f3>
// 312: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 317: 48 8b 46 10                   movq    0x10(%rsi), %rax
// 31b: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 320: 4d 8b 6c ed 00                movq    (%r13,%rbp,8), %r13
// 325: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 329: 0f 84 67 ff ff ff             je      0x296 <_JIT_ENTRY+0x296>
// 32f: 31 ff                         xorl    %edi, %edi
// 331: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 335: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 33a: 4c 89 ee                      movq    %r13, %rsi
// 33d: 41 ff d0                      callq   *%r8
// 340: 48 89 c5                      movq    %rax, %rbp
// 343: 4c 8b 24 24                   movq    (%rsp), %r12
// 347: 41 ff 44 24 2c                incl    0x2c(%r12)
// 34c: bf 02 0b 00 00                movl    $0xb02, %edi            # imm = 0xB02
// 351: 4c 89 ee                      movq    %r13, %rsi
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  .text+0x3e0
// 35e: ff d0                         callq   *%rax
// 360: bf 03 0b 00 00                movl    $0xb03, %edi            # imm = 0xB03
// 365: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 36a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036c:  R_X86_64_64  .text+0x3e0
// 374: ff d0                         callq   *%rax
// 376: 48 85 ed                      testq   %rbp, %rbp
// 379: 74 56                         je      0x3d1 <_JIT_ENTRY+0x3d1>
// 37b: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 37f: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 384: 48 89 28                      movq    %rbp, (%rax)
// 387: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 38c: 48 8b 00                      movq    (%rax), %rax
// 38f: 84 c0                         testb   %al, %al
// 391: 74 1b                         je      0x3ae <_JIT_ENTRY+0x3ae>
// 393: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000395:  R_X86_64_64  _Py_HandlePending
// 39d: 4c 89 e7                      movq    %r12, %rdi
// 3a0: ff d0                         callq   *%rax
// 3a2: 4c 8b 24 24                   movq    (%rsp), %r12
// 3a6: 85 c0                         testl   %eax, %eax
// 3a8: 0f 85 f4 fe ff ff             jne     0x2a2 <_JIT_ENTRY+0x2a2>
// 3ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b0:  R_X86_64_64  _JIT_CONTINUE
// 3b8: 48 89 df                      movq    %rbx, %rdi
// 3bb: 4c 89 f6                      movq    %r14, %rsi
// 3be: 4c 89 e2                      movq    %r12, %rdx
// 3c1: 48 83 c4 18                   addq    $0x18, %rsp
// 3c5: 5b                            popq    %rbx
// 3c6: 41 5c                         popq    %r12
// 3c8: 41 5d                         popq    %r13
// 3ca: 41 5e                         popq    %r14
// 3cc: 41 5f                         popq    %r15
// 3ce: 5d                            popq    %rbp
// 3cf: ff e0                         jmpq    *%rax
// 3d1: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 3d6: e9 c7 fe ff ff                jmp     0x2a2 <_JIT_ENTRY+0x2a2>
// 3db: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 
// 00000000000003e0 <Py_DECREF>:
// 3e0: 53                            pushq   %rbx
// 3e1: 48 89 f3                      movq    %rsi, %rbx
// 3e4: 48 8b 06                      movq    (%rsi), %rax
// 3e7: 48 85 c0                      testq   %rax, %rax
// 3ea: 7e 06                         jle     0x3f2 <Py_DECREF+0x12>
// 3ec: 85 c0                         testl   %eax, %eax
// 3ee: 79 24                         jns     0x414 <Py_DECREF+0x34>
// 3f0: eb 33                         jmp     0x425 <Py_DECREF+0x45>
// 3f2: 89 fe                         movl    %edi, %esi
// 3f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003f6:  R_X86_64_64  .rodata.str1.1
// 3fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000400:  R_X86_64_64  _Py_NegativeRefcount
// 408: 48 89 da                      movq    %rbx, %rdx
// 40b: ff d0                         callq   *%rax
// 40d: 48 8b 03                      movq    (%rbx), %rax
// 410: 85 c0                         testl   %eax, %eax
// 412: 78 11                         js      0x425 <Py_DECREF+0x45>
// 414: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000416:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 41e: ff d0                         callq   *%rax
// 420: 48 ff 0b                      decq    (%rbx)
// 423: 74 02                         je      0x427 <Py_DECREF+0x47>
// 425: 5b                            popq    %rbx
// 426: c3                            retq
// 427: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000429:  R_X86_64_64  _Py_Dealloc
// 431: 48 89 df                      movq    %rbx, %rdi
// 434: 5b                            popq    %rbx
// 435: ff e0                         jmpq    *%rax
// 437: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_BUILTIN_O_code_body[1080] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x5b, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x38, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x11, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x41, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x3c, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xc7, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xbf, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xee, 0xe9, 0xa7, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc2, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x3c, 0x09, 0x0f, 0xb7, 0xea, 0x48, 0x89, 0xea, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xed, 0x40, 0x0f, 0x94, 0xc6, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xfd, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xea, 0x41, 0x0f, 0x44, 0xf0, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x6f, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x49, 0x01, 0xcc, 0x4b, 0x8b, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x46, 0x08, 0x75, 0x4e, 0x48, 0x8b, 0x46, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x44, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4f, 0x2c, 0x8d, 0x51, 0xff, 0x89, 0x57, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x74, 0x24, 0x08, 0x7e, 0x68, 0x4d, 0x8b, 0x6c, 0xed, 0x00, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x99, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7e, 0x18, 0xe9, 0x92, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xe1, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x46, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8b, 0x6c, 0xed, 0x00, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x67, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x89, 0x44, 0x24, 0x10, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x4c, 0x8b, 0x24, 0x24, 0x41, 0xff, 0x44, 0x24, 0x2c, 0xbf, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0x03, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x56, 0x4f, 0x8d, 0x34, 0xfe, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x28, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0xf4, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0xe9, 0xc7, 0xfe, 0xff, 0xff, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_CALL_BUILTIN_O_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3e0},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3e0},
    {0x395, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3b0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x400, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x416, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x429, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_BUILTIN_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_BUILTIN_O_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_INTRINSIC_1
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_INTRINSIC_1.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 f5 01 00 00             jne     0x301 <_JIT_ENTRY+0x301>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 3c 24                   movq    (%rsp), %rdi
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2e                         je      0x23b <_JIT_ENTRY+0x23b>
// 20d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 24                         je      0x243 <_JIT_ENTRY+0x243>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 22f: 85 c0                         testl   %eax, %eax
// 231: 74 10                         je      0x243 <_JIT_ENTRY+0x243>
// 233: 4d 89 e6                      movq    %r12, %r14
// 236: e9 c6 00 00 00                jmp     0x301 <_JIT_ENTRY+0x301>
// 23b: 49 89 c6                      movq    %rax, %r14
// 23e: e9 be 00 00 00                jmp     0x301 <_JIT_ENTRY+0x301>
// 243: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _JIT_OPARG
// 252: 0f b7 c8                      movzwl  %ax, %ecx
// 255: f7 d0                         notl    %eax
// 257: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25c: 4c 63 e0                      movslq  %eax, %r12
// 25f: 4b 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %rbp
// 264: 48 c1 e1 04                   shlq    $0x4, %rcx
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 272: 48 89 ee                      movq    %rbp, %rsi
// 275: ff 14 01                      callq   *(%rcx,%rax)
// 278: 49 89 c5                      movq    %rax, %r13
// 27b: 48 8b 45 00                   movq    (%rbp), %rax
// 27f: 48 85 c0                      testq   %rax, %rax
// 282: 7f 22                         jg      0x2a6 <_JIT_ENTRY+0x2a6>
// 284: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000286:  R_X86_64_64  .rodata.str1.1
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_NegativeRefcount
// 298: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 29d: 48 89 ea                      movq    %rbp, %rdx
// 2a0: ff d0                         callq   *%rax
// 2a2: 48 8b 45 00                   movq    (%rbp), %rax
// 2a6: 85 c0                         testl   %eax, %eax
// 2a8: 78 21                         js      0x2cb <_JIT_ENTRY+0x2cb>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b4: ff d0                         callq   *%rax
// 2b6: 48 ff 4d 00                   decq    (%rbp)
// 2ba: 75 0f                         jne     0x2cb <_JIT_ENTRY+0x2cb>
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_Dealloc
// 2c6: 48 89 ef                      movq    %rbp, %rdi
// 2c9: ff d0                         callq   *%rax
// 2cb: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 2cf: 49 83 c6 f8                   addq    $-0x8, %r14
// 2d3: 4d 85 ed                      testq   %r13, %r13
// 2d6: 74 29                         je      0x301 <_JIT_ENTRY+0x301>
// 2d8: 4d 89 2e                      movq    %r13, (%r14)
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _JIT_CONTINUE
// 2e5: 48 89 df                      movq    %rbx, %rdi
// 2e8: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 2ed: 48 8b 14 24                   movq    (%rsp), %rdx
// 2f1: 48 83 c4 18                   addq    $0x18, %rsp
// 2f5: 5b                            popq    %rbx
// 2f6: 41 5c                         popq    %r12
// 2f8: 41 5d                         popq    %r13
// 2fa: 41 5e                         popq    %r14
// 2fc: 41 5f                         popq    %r15
// 2fe: 5d                            popq    %rbp
// 2ff: ff e0                         jmpq    *%rax
// 301: 49 29 de                      subq    %rbx, %r14
// 304: 49 83 c6 b8                   addq    $-0x48, %r14
// 308: 49 c1 ee 03                   shrq    $0x3, %r14
// 30c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 310: 31 c0                         xorl    %eax, %eax
// 312: e9 c0 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 317: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_INTRINSIC_1_code_body[792] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xf5, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x74, 0x10, 0x4d, 0x89, 0xe6, 0xe9, 0xc6, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xe9, 0xbe, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x64, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xee, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x85, 0xed, 0x74, 0x29, 0x4d, 0x89, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xc0, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_CALL_INTRINSIC_1_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_INTRINSIC_1_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_INTRINSIC_1_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_INTRINSIC_2
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_INTRINSIC_2.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 46 02 00 00             jne     0x352 <_JIT_ENTRY+0x352>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 3c 24                   movq    (%rsp), %rdi
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 208: 4d 85 ff                      testq   %r15, %r15
// 20b: 0f 84 3e 01 00 00             je      0x34f <_JIT_ENTRY+0x34f>
// 211: 4c 89 38                      movq    %r15, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 1d                         je      0x23c <_JIT_ENTRY+0x23c>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 22f: 85 c0                         testl   %eax, %eax
// 231: 74 09                         je      0x23c <_JIT_ENTRY+0x23c>
// 233: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 237: e9 16 01 00 00                jmp     0x352 <_JIT_ENTRY+0x352>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _JIT_OPARG
// 246: 0f b7 c8                      movzwl  %ax, %ecx
// 249: f7 d0                         notl    %eax
// 24b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 250: 4c 63 e0                      movslq  %eax, %r12
// 253: 4b 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %rbp
// 258: 4f 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %r13
// 25d: 48 c1 e1 04                   shlq    $0x4, %rcx
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 26b: 48 89 ee                      movq    %rbp, %rsi
// 26e: 4c 89 ea                      movq    %r13, %rdx
// 271: ff 14 01                      callq   *(%rcx,%rax)
// 274: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 279: 48 8b 45 00                   movq    (%rbp), %rax
// 27d: 48 85 c0                      testq   %rax, %rax
// 280: 7f 22                         jg      0x2a4 <_JIT_ENTRY+0x2a4>
// 282: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000284:  R_X86_64_64  .rodata.str1.1
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_NegativeRefcount
// 296: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 29b: 48 89 ea                      movq    %rbp, %rdx
// 29e: ff d0                         callq   *%rax
// 2a0: 48 8b 45 00                   movq    (%rbp), %rax
// 2a4: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000002a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ae: 85 c0                         testl   %eax, %eax
// 2b0: 78 18                         js      0x2ca <_JIT_ENTRY+0x2ca>
// 2b2: 41 ff d7                      callq   *%r15
// 2b5: 48 ff 4d 00                   decq    (%rbp)
// 2b9: 75 0f                         jne     0x2ca <_JIT_ENTRY+0x2ca>
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_Dealloc
// 2c5: 48 89 ef                      movq    %rbp, %rdi
// 2c8: ff d0                         callq   *%rax
// 2ca: 49 8b 45 00                   movq    (%r13), %rax
// 2ce: 48 85 c0                      testq   %rax, %rax
// 2d1: 7f 22                         jg      0x2f5 <_JIT_ENTRY+0x2f5>
// 2d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d5:  R_X86_64_64  .rodata.str1.1
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_NegativeRefcount
// 2e7: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 2ec: 4c 89 ea                      movq    %r13, %rdx
// 2ef: ff d0                         callq   *%rax
// 2f1: 49 8b 45 00                   movq    (%r13), %rax
// 2f5: 85 c0                         testl   %eax, %eax
// 2f7: 78 18                         js      0x311 <_JIT_ENTRY+0x311>
// 2f9: 41 ff d7                      callq   *%r15
// 2fc: 49 ff 4d 00                   decq    (%r13)
// 300: 75 0f                         jne     0x311 <_JIT_ENTRY+0x311>
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_Dealloc
// 30c: 4c 89 ef                      movq    %r13, %rdi
// 30f: ff d0                         callq   *%rax
// 311: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 315: 48 83 c0 f0                   addq    $-0x10, %rax
// 319: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 31e: 48 85 c9                      testq   %rcx, %rcx
// 321: 74 2c                         je      0x34f <_JIT_ENTRY+0x34f>
// 323: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 327: 48 83 c6 f8                   addq    $-0x8, %rsi
// 32b: 48 89 08                      movq    %rcx, (%rax)
// 32e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000330:  R_X86_64_64  _JIT_CONTINUE
// 338: 48 89 df                      movq    %rbx, %rdi
// 33b: 48 8b 14 24                   movq    (%rsp), %rdx
// 33f: 48 83 c4 18                   addq    $0x18, %rsp
// 343: 5b                            popq    %rbx
// 344: 41 5c                         popq    %r12
// 346: 41 5d                         popq    %r13
// 348: 41 5e                         popq    %r14
// 34a: 41 5f                         popq    %r15
// 34c: 5d                            popq    %rbp
// 34d: ff e0                         jmpq    *%rax
// 34f: 49 89 c6                      movq    %rax, %r14
// 352: 49 29 de                      subq    %rbx, %r14
// 355: 49 83 c6 b8                   addq    $-0x48, %r14
// 359: 49 c1 ee 03                   shrq    $0x3, %r14
// 35d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 361: 31 c0                         xorl    %eax, %eax
// 363: e9 6f fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 368: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_INTRINSIC_2_code_body[873] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x46, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x3e, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x16, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf0, 0x4f, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0xff, 0x14, 0x01, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x2c, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x6f, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_CALL_INTRINSIC_2_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_INTRINSIC_2_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_INTRINSIC_2_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_ISINSTANCE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_ISINSTANCE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 0f 85 15 02 00 00             jne     0x272 <_JIT_ENTRY+0x272>
// 5d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 62: 29 c1                         subl    %eax, %ecx
// 64: 4c 63 f9                      movslq  %ecx, %r15
// 67: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  PyCFunction_Type
// 75: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7a: 0f 85 f2 01 00 00             jne     0x272 <_JIT_ENTRY+0x272>
// 80: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 85: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 89: 0f 85 e3 01 00 00             jne     0x272 <_JIT_ENTRY+0x272>
// 8f: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 93: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 96: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 99: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9c: 85 c9                         testl   %ecx, %ecx
// 9e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// a3: 7e 11                         jle     0xb6 <_JIT_ENTRY+0xb6>
// a5: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// a9: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ad: 75 45                         jne     0xf4 <_JIT_ENTRY+0xf4>
// af: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b4: eb 40                         jmp     0xf6 <_JIT_ENTRY+0xf6>
// b6: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// bb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000bd:  R_X86_64_64  .rodata.str1.1+0x39
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_CheckRecursiveCall
// cf: 48 89 d7                      movq    %rdx, %rdi
// d2: ff d0                         callq   *%rax
// d4: 85 c0                         testl   %eax, %eax
// d6: 74 08                         je      0xe0 <_JIT_ENTRY+0xe0>
// d8: 4d 89 f7                      movq    %r14, %r15
// db: e9 cc 01 00 00                jmp     0x2ac <_JIT_ENTRY+0x2ac>
// e0: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e5: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// ea: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// ee: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f2: 74 bb                         je      0xaf <_JIT_ENTRY+0xaf>
// f4: 31 ff                         xorl    %edi, %edi
// f6: 48 89 ee                      movq    %rbp, %rsi
// f9: 41 ff d0                      callq   *%r8
// fc: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 101: ff 47 2c                      incl    0x2c(%rdi)
// 104: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 48 85 c0                      testq   %rax, %rax
// 110: 7f 27                         jg      0x139 <_JIT_ENTRY+0x139>
// 112: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000114:  R_X86_64_64  .rodata.str1.1
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _Py_NegativeRefcount
// 126: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 12b: 48 89 ea                      movq    %rbp, %rdx
// 12e: ff d0                         callq   *%rax
// 130: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 135: 48 8b 45 00                   movq    (%rbp), %rax
// 139: 85 c0                         testl   %eax, %eax
// 13b: 78 2b                         js      0x168 <_JIT_ENTRY+0x168>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 14e: 48 ff 4d 00                   decq    (%rbp)
// 152: 75 14                         jne     0x168 <_JIT_ENTRY+0x168>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_Dealloc
// 15e: 48 89 ef                      movq    %rbp, %rdi
// 161: ff d0                         callq   *%rax
// 163: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 168: 49 8b 04 24                   movq    (%r12), %rax
// 16c: 48 85 c0                      testq   %rax, %rax
// 16f: 7f 27                         jg      0x198 <_JIT_ENTRY+0x198>
// 171: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000173:  R_X86_64_64  .rodata.str1.1
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_NegativeRefcount
// 185: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 18a: 4c 89 e2                      movq    %r12, %rdx
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 194: 49 8b 04 24                   movq    (%r12), %rax
// 198: 85 c0                         testl   %eax, %eax
// 19a: 78 2b                         js      0x1c7 <_JIT_ENTRY+0x1c7>
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a6: ff d0                         callq   *%rax
// 1a8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ad: 49 ff 0c 24                   decq    (%r12)
// 1b1: 75 14                         jne     0x1c7 <_JIT_ENTRY+0x1c7>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_Dealloc
// 1bd: 4c 89 e7                      movq    %r12, %rdi
// 1c0: ff d0                         callq   *%rax
// 1c2: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1c7: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1cb: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d0: 48 85 c9                      testq   %rcx, %rcx
// 1d3: 0f 84 d0 00 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 1d9: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 1dd: 48 89 08                      movq    %rcx, (%rax)
// 1e0: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1e4: 48 8b 00                      movq    (%rax), %rax
// 1e7: 84 c0                         testb   %al, %al
// 1e9: 74 19                         je      0x204 <_JIT_ENTRY+0x204>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_HandlePending
// 1f5: ff d0                         callq   *%rax
// 1f7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1fc: 85 c0                         testl   %eax, %eax
// 1fe: 0f 85 a8 00 00 00             jne     0x2ac <_JIT_ENTRY+0x2ac>
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _JIT_OPARG
// 20e: 0f b7 c8                      movzwl  %ax, %ecx
// 211: 89 ca                         movl    %ecx, %edx
// 213: f7 d2                         notl    %edx
// 215: 48 63 d2                      movslq  %edx, %rdx
// 218: 48 8d 2c 12                   leaq    (%rdx,%rdx), %rbp
// 21c: 0f b7 c0                      movzwl  %ax, %eax
// 21f: 48 89 c6                      movq    %rax, %rsi
// 222: 48 f7 de                      negq    %rsi
// 225: 45 31 c9                      xorl    %r9d, %r9d
// 228: 66 83 f8 01                   cmpw    $0x1, %ax
// 22c: 41 0f 94 c1                   sete    %r9b
// 230: 45 31 c0                      xorl    %r8d, %r8d
// 233: 66 83 f8 02                   cmpw    $0x2, %ax
// 237: 41 0f 94 c0                   sete    %r8b
// 23b: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 240: 48 f7 d0                      notq    %rax
// 243: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 247: 45 0f 44 c8                   cmovel  %r8d, %r9d
// 24b: 41 80 f9 01                   cmpb    $0x1, %r9b
// 24f: 75 1e                         jne     0x26f <_JIT_ENTRY+0x26f>
// 251: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 256: 29 ce                         subl    %ecx, %esi
// 258: 4c 63 e6                      movslq  %esi, %r12
// 25b: 49 01 d4                      addq    %rdx, %r12
// 25e: 4b 8b 14 e6                   movq    (%r14,%r12,8), %rdx
// 262: 48 8b 4f 10                   movq    0x10(%rdi), %rcx
// 266: 48 3b 91 b8 54 06 00          cmpq    0x654b8(%rcx), %rdx
// 26d: 74 50                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 26f: 4d 89 fe                      movq    %r15, %r14
// 272: 49 29 de                      subq    %rbx, %r14
// 275: 49 83 c6 b8                   addq    $-0x48, %r14
// 279: 49 c1 ee 03                   shrq    $0x3, %r14
// 27d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 281: 48 8b 03                      movq    (%rbx), %rax
// 284: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000286:  R_X86_64_64  _JIT_TARGET
// 28e: 89 c9                         movl    %ecx, %ecx
// 290: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 294: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 29a: 48 83 c4 28                   addq    $0x28, %rsp
// 29e: 5b                            popq    %rbx
// 29f: 41 5c                         popq    %r12
// 2a1: 41 5d                         popq    %r13
// 2a3: 41 5e                         popq    %r14
// 2a5: 41 5f                         popq    %r15
// 2a7: 5d                            popq    %rbp
// 2a8: c3                            retq
// 2a9: 49 89 c7                      movq    %rax, %r15
// 2ac: 49 29 df                      subq    %rbx, %r15
// 2af: 49 83 c7 b8                   addq    $-0x48, %r15
// 2b3: 49 c1 ef 03                   shrq    $0x3, %r15
// 2b7: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2bb: 31 c0                         xorl    %eax, %eax
// 2bd: eb db                         jmp     0x29a <_JIT_ENTRY+0x29a>
// 2bf: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 2c4: 4d 8b 2c c7                   movq    (%r15,%rax,8), %r13
// 2c8: 49 8b 74 c7 08                movq    0x8(%r15,%rax,8), %rsi
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  PyObject_IsInstance
// 2d7: 4c 89 ef                      movq    %r13, %rdi
// 2da: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 2df: ff d0                         callq   *%rax
// 2e1: 85 c0                         testl   %eax, %eax
// 2e3: 78 c7                         js      0x2ac <_JIT_ENTRY+0x2ac>
// 2e5: 89 c7                         movl    %eax, %edi
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  PyBool_FromLong
// 2f1: ff d0                         callq   *%rax
// 2f3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 2f8: 49 8b 45 00                   movq    (%r13), %rax
// 2fc: 48 85 c0                      testq   %rax, %rax
// 2ff: 7f 22                         jg      0x323 <_JIT_ENTRY+0x323>
// 301: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000303:  R_X86_64_64  .rodata.str1.1
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _Py_NegativeRefcount
// 315: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 31a: 4c 89 ea                      movq    %r13, %rdx
// 31d: ff d0                         callq   *%rax
// 31f: 49 8b 45 00                   movq    (%r13), %rax
// 323: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000325:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 32d: 85 c0                         testl   %eax, %eax
// 32f: 78 18                         js      0x349 <_JIT_ENTRY+0x349>
// 331: 41 ff d7                      callq   *%r15
// 334: 49 ff 4d 00                   decq    (%r13)
// 338: 75 0f                         jne     0x349 <_JIT_ENTRY+0x349>
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _Py_Dealloc
// 344: 4c 89 ef                      movq    %r13, %rdi
// 347: ff d0                         callq   *%rax
// 349: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 34e: 48 8b 00                      movq    (%rax), %rax
// 351: 48 85 c0                      testq   %rax, %rax
// 354: 7f 27                         jg      0x37d <_JIT_ENTRY+0x37d>
// 356: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000358:  R_X86_64_64  .rodata.str1.1
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _Py_NegativeRefcount
// 36a: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 36f: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 374: 4c 89 ea                      movq    %r13, %rdx
// 377: ff d0                         callq   *%rax
// 379: 49 8b 45 00                   movq    (%r13), %rax
// 37d: 85 c0                         testl   %eax, %eax
// 37f: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 384: 78 1e                         js      0x3a4 <_JIT_ENTRY+0x3a4>
// 386: 41 ff d7                      callq   *%r15
// 389: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 38e: 48 ff 08                      decq    (%rax)
// 391: 75 11                         jne     0x3a4 <_JIT_ENTRY+0x3a4>
// 393: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000395:  R_X86_64_64  _Py_Dealloc
// 39d: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 3a2: ff d0                         callq   *%rax
// 3a4: 49 8b 45 00                   movq    (%r13), %rax
// 3a8: 48 85 c0                      testq   %rax, %rax
// 3ab: 7f 22                         jg      0x3cf <_JIT_ENTRY+0x3cf>
// 3ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003af:  R_X86_64_64  .rodata.str1.1
// 3b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b9:  R_X86_64_64  _Py_NegativeRefcount
// 3c1: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 3c6: 4c 89 ea                      movq    %r13, %rdx
// 3c9: ff d0                         callq   *%rax
// 3cb: 49 8b 45 00                   movq    (%r13), %rax
// 3cf: 85 c0                         testl   %eax, %eax
// 3d1: 78 18                         js      0x3eb <_JIT_ENTRY+0x3eb>
// 3d3: 41 ff d7                      callq   *%r15
// 3d6: 49 ff 4d 00                   decq    (%r13)
// 3da: 75 0f                         jne     0x3eb <_JIT_ENTRY+0x3eb>
// 3dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003de:  R_X86_64_64  _Py_Dealloc
// 3e6: 4c 89 ef                      movq    %r13, %rdi
// 3e9: ff d0                         callq   *%rax
// 3eb: 4f 8d 3c e6                   leaq    (%r14,%r12,8), %r15
// 3ef: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 3f4: 48 85 c0                      testq   %rax, %rax
// 3f7: 0f 84 af fe ff ff             je      0x2ac <_JIT_ENTRY+0x2ac>
// 3fd: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 401: 49 89 07                      movq    %rax, (%r15)
// 404: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000406:  R_X86_64_64  _JIT_CONTINUE
// 40e: 48 89 df                      movq    %rbx, %rdi
// 411: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 416: 48 83 c4 28                   addq    $0x28, %rsp
// 41a: 5b                            popq    %rbx
// 41b: 41 5c                         popq    %r12
// 41d: 41 5d                         popq    %r13
// 41f: 41 5e                         popq    %r14
// 421: 41 5f                         popq    %r15
// 423: 5d                            popq    %rbp
// 424: ff e0                         jmpq    *%rax
// 426: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_ISINSTANCE_code_body[1063] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x15, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf2, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x11, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x45, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x40, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf7, 0xe9, 0xcc, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xbb, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x85, 0xc0, 0x0f, 0x85, 0xa8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x8d, 0x2c, 0x12, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x45, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc1, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x45, 0x0f, 0x44, 0xc8, 0x41, 0x80, 0xf9, 0x01, 0x75, 0x1e, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xe6, 0x49, 0x01, 0xd4, 0x4b, 0x8b, 0x14, 0xe6, 0x48, 0x8b, 0x4f, 0x10, 0x48, 0x3b, 0x91, 0xb8, 0x54, 0x06, 0x00, 0x74, 0x50, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xeb, 0xdb, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x2c, 0xc7, 0x49, 0x8b, 0x74, 0xc7, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x10, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xc7, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x1e, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4f, 0x8d, 0x3c, 0xe6, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xaf, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_CALL_ISINSTANCE_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x395, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x406, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_ISINSTANCE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_ISINSTANCE_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_LEN
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_LEN.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 0f 85 0b 02 00 00             jne     0x268 <_JIT_ENTRY+0x268>
// 5d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 62: 29 c1                         subl    %eax, %ecx
// 64: 4c 63 f9                      movslq  %ecx, %r15
// 67: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  PyCFunction_Type
// 75: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7a: 0f 85 e8 01 00 00             jne     0x268 <_JIT_ENTRY+0x268>
// 80: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 85: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 89: 0f 85 d9 01 00 00             jne     0x268 <_JIT_ENTRY+0x268>
// 8f: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 93: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 96: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 99: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9c: 85 c9                         testl   %ecx, %ecx
// 9e: 48 89 14 24                   movq    %rdx, (%rsp)
// a2: 7e 11                         jle     0xb5 <_JIT_ENTRY+0xb5>
// a4: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// a8: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ac: 75 45                         jne     0xf3 <_JIT_ENTRY+0xf3>
// ae: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b3: eb 40                         jmp     0xf5 <_JIT_ENTRY+0xf5>
// b5: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// ba: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000bc:  R_X86_64_64  .rodata.str1.1+0x39
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _Py_CheckRecursiveCall
// ce: 48 89 d7                      movq    %rdx, %rdi
// d1: ff d0                         callq   *%rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 74 08                         je      0xdf <_JIT_ENTRY+0xdf>
// d7: 4d 89 f7                      movq    %r14, %r15
// da: e9 c3 01 00 00                jmp     0x2a2 <_JIT_ENTRY+0x2a2>
// df: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e4: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// e9: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// ed: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f1: 74 bb                         je      0xae <_JIT_ENTRY+0xae>
// f3: 31 ff                         xorl    %edi, %edi
// f5: 48 89 ee                      movq    %rbp, %rsi
// f8: 41 ff d0                      callq   *%r8
// fb: 48 8b 3c 24                   movq    (%rsp), %rdi
// ff: ff 47 2c                      incl    0x2c(%rdi)
// 102: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 107: 48 8b 45 00                   movq    (%rbp), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 7f 26                         jg      0x136 <_JIT_ENTRY+0x136>
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_NegativeRefcount
// 124: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 129: 48 89 ea                      movq    %rbp, %rdx
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 132: 48 8b 45 00                   movq    (%rbp), %rax
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 29                         js      0x163 <_JIT_ENTRY+0x163>
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 144: ff d0                         callq   *%rax
// 146: 48 8b 3c 24                   movq    (%rsp), %rdi
// 14a: 48 ff 4d 00                   decq    (%rbp)
// 14e: 75 13                         jne     0x163 <_JIT_ENTRY+0x163>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_Dealloc
// 15a: 48 89 ef                      movq    %rbp, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 163: 49 8b 04 24                   movq    (%r12), %rax
// 167: 48 85 c0                      testq   %rax, %rax
// 16a: 7f 26                         jg      0x192 <_JIT_ENTRY+0x192>
// 16c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016e:  R_X86_64_64  .rodata.str1.1
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _Py_NegativeRefcount
// 180: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 185: 4c 89 e2                      movq    %r12, %rdx
// 188: ff d0                         callq   *%rax
// 18a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18e: 49 8b 04 24                   movq    (%r12), %rax
// 192: 85 c0                         testl   %eax, %eax
// 194: 78 29                         js      0x1bf <_JIT_ENTRY+0x1bf>
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a0: ff d0                         callq   *%rax
// 1a2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a6: 49 ff 0c 24                   decq    (%r12)
// 1aa: 75 13                         jne     0x1bf <_JIT_ENTRY+0x1bf>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _Py_Dealloc
// 1b6: 4c 89 e7                      movq    %r12, %rdi
// 1b9: ff d0                         callq   *%rax
// 1bb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1bf: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1c3: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c8: 48 85 c9                      testq   %rcx, %rcx
// 1cb: 0f 84 ce 00 00 00             je      0x29f <_JIT_ENTRY+0x29f>
// 1d1: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 1d5: 48 89 08                      movq    %rcx, (%rax)
// 1d8: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1dc: 48 8b 00                      movq    (%rax), %rax
// 1df: 84 c0                         testb   %al, %al
// 1e1: 74 18                         je      0x1fb <_JIT_ENTRY+0x1fb>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_HandlePending
// 1ed: ff d0                         callq   *%rax
// 1ef: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f3: 85 c0                         testl   %eax, %eax
// 1f5: 0f 85 a7 00 00 00             jne     0x2a2 <_JIT_ENTRY+0x2a2>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_OPARG
// 205: 0f b7 c8                      movzwl  %ax, %ecx
// 208: 89 ca                         movl    %ecx, %edx
// 20a: f7 d2                         notl    %edx
// 20c: 48 63 d2                      movslq  %edx, %rdx
// 20f: 4c 8d 2c 12                   leaq    (%rdx,%rdx), %r13
// 213: 0f b7 c0                      movzwl  %ax, %eax
// 216: 48 89 c6                      movq    %rax, %rsi
// 219: 48 f7 de                      negq    %rsi
// 21c: 45 31 c9                      xorl    %r9d, %r9d
// 21f: 66 85 c0                      testw   %ax, %ax
// 222: 41 0f 94 c1                   sete    %r9b
// 226: 45 31 c0                      xorl    %r8d, %r8d
// 229: 66 83 f8 01                   cmpw    $0x1, %ax
// 22d: 41 0f 94 c0                   sete    %r8b
// 231: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 236: 48 f7 d0                      notq    %rax
// 239: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 23d: 45 0f 44 c8                   cmovel  %r8d, %r9d
// 241: 41 80 f9 01                   cmpb    $0x1, %r9b
// 245: 75 1e                         jne     0x265 <_JIT_ENTRY+0x265>
// 247: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 24c: 29 ce                         subl    %ecx, %esi
// 24e: 4c 63 e6                      movslq  %esi, %r12
// 251: 49 01 d4                      addq    %rdx, %r12
// 254: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 258: 48 8b 4f 10                   movq    0x10(%rdi), %rcx
// 25c: 48 3b a9 c0 54 06 00          cmpq    0x654c0(%rcx), %rbp
// 263: 74 50                         je      0x2b5 <_JIT_ENTRY+0x2b5>
// 265: 4d 89 fe                      movq    %r15, %r14
// 268: 49 29 de                      subq    %rbx, %r14
// 26b: 49 83 c6 b8                   addq    $-0x48, %r14
// 26f: 49 c1 ee 03                   shrq    $0x3, %r14
// 273: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 277: 48 8b 03                      movq    (%rbx), %rax
// 27a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027c:  R_X86_64_64  _JIT_TARGET
// 284: 89 c9                         movl    %ecx, %ecx
// 286: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 28a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 290: 48 83 c4 18                   addq    $0x18, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: c3                            retq
// 29f: 49 89 c7                      movq    %rax, %r15
// 2a2: 49 29 df                      subq    %rbx, %r15
// 2a5: 49 83 c7 b8                   addq    $-0x48, %r15
// 2a9: 49 c1 ef 03                   shrq    $0x3, %r15
// 2ad: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2b1: 31 c0                         xorl    %eax, %eax
// 2b3: eb db                         jmp     0x290 <_JIT_ENTRY+0x290>
// 2b5: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  PyObject_Size
// 2c3: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 2c8: ff d0                         callq   *%rax
// 2ca: 48 85 c0                      testq   %rax, %rax
// 2cd: 78 d3                         js      0x2a2 <_JIT_ENTRY+0x2a2>
// 2cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002d1:  R_X86_64_64  PyLong_FromSsize_t
// 2d9: 48 89 c7                      movq    %rax, %rdi
// 2dc: ff d1                         callq   *%rcx
// 2de: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2e3: 48 8b 45 00                   movq    (%rbp), %rax
// 2e7: 48 85 c0                      testq   %rax, %rax
// 2ea: 7f 22                         jg      0x30e <_JIT_ENTRY+0x30e>
// 2ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ee:  R_X86_64_64  .rodata.str1.1
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _Py_NegativeRefcount
// 300: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 305: 48 89 ea                      movq    %rbp, %rdx
// 308: ff d0                         callq   *%rax
// 30a: 48 8b 45 00                   movq    (%rbp), %rax
// 30e: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000310:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 318: 85 c0                         testl   %eax, %eax
// 31a: 78 18                         js      0x334 <_JIT_ENTRY+0x334>
// 31c: 41 ff d7                      callq   *%r15
// 31f: 48 ff 4d 00                   decq    (%rbp)
// 323: 75 0f                         jne     0x334 <_JIT_ENTRY+0x334>
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  _Py_Dealloc
// 32f: 48 89 ef                      movq    %rbp, %rdi
// 332: ff d0                         callq   *%rax
// 334: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 339: 48 8b 45 00                   movq    (%rbp), %rax
// 33d: 48 85 c0                      testq   %rax, %rax
// 340: 7f 22                         jg      0x364 <_JIT_ENTRY+0x364>
// 342: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000344:  R_X86_64_64  .rodata.str1.1
// 34c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034e:  R_X86_64_64  _Py_NegativeRefcount
// 356: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 35b: 48 89 ea                      movq    %rbp, %rdx
// 35e: ff d0                         callq   *%rax
// 360: 48 8b 45 00                   movq    (%rbp), %rax
// 364: 85 c0                         testl   %eax, %eax
// 366: 78 18                         js      0x380 <_JIT_ENTRY+0x380>
// 368: 41 ff d7                      callq   *%r15
// 36b: 48 ff 4d 00                   decq    (%rbp)
// 36f: 75 0f                         jne     0x380 <_JIT_ENTRY+0x380>
// 371: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000373:  R_X86_64_64  _Py_Dealloc
// 37b: 48 89 ef                      movq    %rbp, %rdi
// 37e: ff d0                         callq   *%rax
// 380: 4f 8d 3c e6                   leaq    (%r14,%r12,8), %r15
// 384: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 389: 48 85 c0                      testq   %rax, %rax
// 38c: 0f 84 10 ff ff ff             je      0x2a2 <_JIT_ENTRY+0x2a2>
// 392: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 396: 49 89 07                      movq    %rax, (%r15)
// 399: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039b:  R_X86_64_64  _JIT_CONTINUE
// 3a3: 48 89 df                      movq    %rbx, %rdi
// 3a6: 48 8b 14 24                   movq    (%rsp), %rdx
// 3aa: 48 83 c4 18                   addq    $0x18, %rsp
// 3ae: 5b                            popq    %rbx
// 3af: 41 5c                         popq    %r12
// 3b1: 41 5d                         popq    %r13
// 3b3: 41 5e                         popq    %r14
// 3b5: 41 5f                         popq    %r15
// 3b7: 5d                            popq    %rbp
// 3b8: ff e0                         jmpq    *%rax
// 3ba: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_LEN_code_body[955] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x0b, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xe8, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xd9, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x11, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x45, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x40, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf7, 0xe9, 0xc3, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xbb, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0xa7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x4c, 0x8d, 0x2c, 0x12, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x45, 0x31, 0xc9, 0x66, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc1, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x45, 0x0f, 0x44, 0xc8, 0x41, 0x80, 0xf9, 0x01, 0x75, 0x1e, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xe6, 0x49, 0x01, 0xd4, 0x4b, 0x8b, 0x2c, 0xe6, 0x48, 0x8b, 0x4f, 0x10, 0x48, 0x3b, 0xa9, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x50, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xeb, 0xdb, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0xd3, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4f, 0x8d, 0x3c, 0xe6, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x10, 0xff, 0xff, 0xff, 0x4b, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_CALL_LEN_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x344, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x34e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x373, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x39b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_LEN_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_LEN_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 50                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 31                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 26                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 14 24                   movq    %rdx, (%rsp)
// 96: 7e 4b                         jle     0xe3 <_JIT_ENTRY+0xe3>
// 98: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a0: 75 7b                         jne     0x11d <_JIT_ENTRY+0x11d>
// a2: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a7: eb 76                         jmp     0x11f <_JIT_ENTRY+0x11f>
// a9: 4d 89 f7                      movq    %r14, %r15
// ac: 49 29 df                      subq    %rbx, %r15
// af: 49 83 c7 b8                   addq    $-0x48, %r15
// b3: 49 c1 ef 03                   shrq    $0x3, %r15
// b7: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// bb: 48 8b 03                      movq    (%rbx), %rax
// be: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c0:  R_X86_64_64  _JIT_TARGET
// c8: 89 c9                         movl    %ecx, %ecx
// ca: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ce: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d4: 48 83 c4 28                   addq    $0x28, %rsp
// d8: 5b                            popq    %rbx
// d9: 41 5c                         popq    %r12
// db: 41 5d                         popq    %r13
// dd: 41 5e                         popq    %r14
// df: 41 5f                         popq    %r15
// e1: 5d                            popq    %rbp
// e2: c3                            retq
// e3: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// e8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ea:  R_X86_64_64  .rodata.str1.1+0x39
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_CheckRecursiveCall
// fc: 48 89 d7                      movq    %rdx, %rdi
// ff: ff d0                         callq   *%rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 0f 85 b6 02 00 00             jne     0x3bf <_JIT_ENTRY+0x3bf>
// 109: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10e: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 113: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 117: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11b: 74 85                         je      0xa2 <_JIT_ENTRY+0xa2>
// 11d: 31 ff                         xorl    %edi, %edi
// 11f: 48 89 ee                      movq    %rbp, %rsi
// 122: 41 ff d0                      callq   *%r8
// 125: 48 8b 3c 24                   movq    (%rsp), %rdi
// 129: ff 47 2c                      incl    0x2c(%rdi)
// 12c: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 131: 48 8b 45 00                   movq    (%rbp), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 26                         jg      0x160 <_JIT_ENTRY+0x160>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 153: 48 89 ea                      movq    %rbp, %rdx
// 156: ff d0                         callq   *%rax
// 158: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15c: 48 8b 45 00                   movq    (%rbp), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 29                         js      0x18d <_JIT_ENTRY+0x18d>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 3c 24                   movq    (%rsp), %rdi
// 174: 48 ff 4d 00                   decq    (%rbp)
// 178: 75 13                         jne     0x18d <_JIT_ENTRY+0x18d>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_Dealloc
// 184: 48 89 ef                      movq    %rbp, %rdi
// 187: ff d0                         callq   *%rax
// 189: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18d: 49 8b 04 24                   movq    (%r12), %rax
// 191: 48 85 c0                      testq   %rax, %rax
// 194: 7f 26                         jg      0x1bc <_JIT_ENTRY+0x1bc>
// 196: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000198:  R_X86_64_64  .rodata.str1.1
// 1a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a2:  R_X86_64_64  _Py_NegativeRefcount
// 1aa: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1af: 4c 89 e2                      movq    %r12, %rdx
// 1b2: ff d0                         callq   *%rax
// 1b4: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b8: 49 8b 04 24                   movq    (%r12), %rax
// 1bc: 85 c0                         testl   %eax, %eax
// 1be: 78 29                         js      0x1e9 <_JIT_ENTRY+0x1e9>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ca: ff d0                         callq   *%rax
// 1cc: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d0: 49 ff 0c 24                   decq    (%r12)
// 1d4: 75 13                         jne     0x1e9 <_JIT_ENTRY+0x1e9>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_Dealloc
// 1e0: 4c 89 e7                      movq    %r12, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e9: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1ed: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1f2: 48 85 c9                      testq   %rcx, %rcx
// 1f5: 0f 84 c1 01 00 00             je      0x3bc <_JIT_ENTRY+0x3bc>
// 1fb: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 1ff: 48 89 08                      movq    %rcx, (%rax)
// 202: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 206: 48 8b 00                      movq    (%rax), %rax
// 209: 84 c0                         testb   %al, %al
// 20b: 74 18                         je      0x225 <_JIT_ENTRY+0x225>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_HandlePending
// 217: ff d0                         callq   *%rax
// 219: 85 c0                         testl   %eax, %eax
// 21b: 74 08                         je      0x225 <_JIT_ENTRY+0x225>
// 21d: 4d 89 fe                      movq    %r15, %r14
// 220: e9 9a 01 00 00                jmp     0x3bf <_JIT_ENTRY+0x3bf>
// 225: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000227:  R_X86_64_64  _JIT_OPARG
// 22f: 0f b7 f1                      movzwl  %cx, %esi
// 232: 89 f0                         movl    %esi, %eax
// 234: f7 d0                         notl    %eax
// 236: 48 63 d0                      movslq  %eax, %rdx
// 239: 4c 8d 04 12                   leaq    (%rdx,%rdx), %r8
// 23d: 4b 8b 04 c6                   movq    (%r14,%r8,8), %rax
// 241: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 246: 29 f7                         subl    %esi, %edi
// 248: 48 63 ef                      movslq  %edi, %rbp
// 24b: 48 01 d5                      addq    %rdx, %rbp
// 24e: 0f b7 d1                      movzwl  %cx, %edx
// 251: 48 89 d1                      movq    %rdx, %rcx
// 254: 48 f7 d9                      negq    %rcx
// 257: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 25b: 48 85 c0                      testq   %rax, %rax
// 25e: 48 f7 d2                      notq    %rdx
// 261: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 265: 44 0f 44 ee                   cmovel  %esi, %r13d
// 269: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 26d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026f:  R_X86_64_64  PyMethodDescr_Type
// 277: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 27c: 0f 85 2a fe ff ff             jne     0xac <_JIT_ENTRY+0xac>
// 282: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 287: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 28e: 0f 85 18 fe ff ff             jne     0xac <_JIT_ENTRY+0xac>
// 294: 49 8d 34 d7                   leaq    (%r15,%rdx,8), %rsi
// 298: 48 8b 3e                      movq    (%rsi), %rdi
// 29b: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 29f: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 2a4: 0f 85 02 fe ff ff             jne     0xac <_JIT_ENTRY+0xac>
// 2aa: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 2af: 48 85 c0                      testq   %rax, %rax
// 2b2: 41 0f 94 c7                   sete    %r15b
// 2b6: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// 2ba: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 2bf: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2c4: 48 8d 72 08                   leaq    0x8(%rdx), %rsi
// 2c8: 48 63 d0                      movslq  %eax, %rdx
// 2cb: ff 51 08                      callq   *0x8(%rcx)
// 2ce: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2d3: 48 8b 14 24                   movq    (%rsp), %rdx
// 2d7: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _JIT_OPARG
// 2e6: 66 85 c0                      testw   %ax, %ax
// 2e9: 0f 94 c0                      sete    %al
// 2ec: 41 84 c7                      testb   %al, %r15b
// 2ef: 0f 84 e0 00 00 00             je      0x3d5 <_JIT_ENTRY+0x3d5>
// 2f5: 49 8b 04 24                   movq    (%r12), %rax
// 2f9: 48 85 c0                      testq   %rax, %rax
// 2fc: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 301: 7f 2b                         jg      0x32e <_JIT_ENTRY+0x32e>
// 303: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000305:  R_X86_64_64  .rodata.str1.1
// 30d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030f:  R_X86_64_64  _Py_NegativeRefcount
// 317: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 31c: 4c 89 e2                      movq    %r12, %rdx
// 31f: ff d0                         callq   *%rax
// 321: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 326: 48 8b 14 24                   movq    (%rsp), %rdx
// 32a: 49 8b 04 24                   movq    (%r12), %rax
// 32e: 85 c0                         testl   %eax, %eax
// 330: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 335: 78 33                         js      0x36a <_JIT_ENTRY+0x36a>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 341: ff d0                         callq   *%rax
// 343: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 348: 48 8b 14 24                   movq    (%rsp), %rdx
// 34c: 49 ff 0c 24                   decq    (%r12)
// 350: 75 18                         jne     0x36a <_JIT_ENTRY+0x36a>
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _Py_Dealloc
// 35c: 4c 89 e7                      movq    %r12, %rdi
// 35f: ff d0                         callq   *%rax
// 361: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 366: 48 8b 14 24                   movq    (%rsp), %rdx
// 36a: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 36e: 4d 85 ff                      testq   %r15, %r15
// 371: 74 49                         je      0x3bc <_JIT_ENTRY+0x3bc>
// 373: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 377: 4c 89 38                      movq    %r15, (%rax)
// 37a: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 37e: 48 8b 00                      movq    (%rax), %rax
// 381: 84 c0                         testb   %al, %al
// 383: 74 17                         je      0x39c <_JIT_ENTRY+0x39c>
// 385: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000387:  R_X86_64_64  _Py_HandlePending
// 38f: 48 89 d7                      movq    %rdx, %rdi
// 392: ff d0                         callq   *%rax
// 394: 48 8b 14 24                   movq    (%rsp), %rdx
// 398: 85 c0                         testl   %eax, %eax
// 39a: 75 23                         jne     0x3bf <_JIT_ENTRY+0x3bf>
// 39c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039e:  R_X86_64_64  _JIT_CONTINUE
// 3a6: 48 89 df                      movq    %rbx, %rdi
// 3a9: 4c 89 f6                      movq    %r14, %rsi
// 3ac: 48 83 c4 28                   addq    $0x28, %rsp
// 3b0: 5b                            popq    %rbx
// 3b1: 41 5c                         popq    %r12
// 3b3: 41 5d                         popq    %r13
// 3b5: 41 5e                         popq    %r14
// 3b7: 41 5f                         popq    %r15
// 3b9: 5d                            popq    %rbp
// 3ba: ff e0                         jmpq    *%rax
// 3bc: 49 89 c6                      movq    %rax, %r14
// 3bf: 49 29 de                      subq    %rbx, %r14
// 3c2: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c6: 49 c1 ee 03                   shrq    $0x3, %r14
// 3ca: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3ce: 31 c0                         xorl    %eax, %eax
// 3d0: e9 ff fc ff ff                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 3d5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 3d9: b8 01 00 00 00                movl    $0x1, %eax
// 3de: 41 0f 43 c5                   cmovael %r13d, %eax
// 3e2: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 3e7: 45 31 ff                      xorl    %r15d, %r15d
// 3ea: eb 0e                         jmp     0x3fa <_JIT_ENTRY+0x3fa>
// 3ec: 49 ff c7                      incq    %r15
// 3ef: 4c 39 7c 24 20                cmpq    %r15, 0x20(%rsp)
// 3f4: 0f 84 fb fe ff ff             je      0x2f5 <_JIT_ENTRY+0x2f5>
// 3fa: 4e 8b 2c f9                   movq    (%rcx,%r15,8), %r13
// 3fe: 49 8b 45 00                   movq    (%r13), %rax
// 402: 48 85 c0                      testq   %rax, %rax
// 405: 7f 2b                         jg      0x432 <_JIT_ENTRY+0x432>
// 407: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000409:  R_X86_64_64  .rodata.str1.1
// 411: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 416: 4c 89 ea                      movq    %r13, %rdx
// 419: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041b:  R_X86_64_64  _Py_NegativeRefcount
// 423: ff d0                         callq   *%rax
// 425: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 42a: 48 8b 14 24                   movq    (%rsp), %rdx
// 42e: 49 8b 45 00                   movq    (%r13), %rax
// 432: 85 c0                         testl   %eax, %eax
// 434: 78 b6                         js      0x3ec <_JIT_ENTRY+0x3ec>
// 436: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000438:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 440: ff d0                         callq   *%rax
// 442: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 447: 48 8b 14 24                   movq    (%rsp), %rdx
// 44b: 49 ff 4d 00                   decq    (%r13)
// 44f: 75 9b                         jne     0x3ec <_JIT_ENTRY+0x3ec>
// 451: 4c 89 ef                      movq    %r13, %rdi
// 454: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000456:  R_X86_64_64  _Py_Dealloc
// 45e: ff d0                         callq   *%rax
// 460: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 465: 48 8b 14 24                   movq    (%rsp), %rdx
// 469: eb 81                         jmp     0x3ec <_JIT_ENTRY+0x3ec>
// 46b: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[1132] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x50, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x31, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x26, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4b, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7b, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x76, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xb6, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x85, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc1, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfe, 0xe9, 0x9a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x4c, 0x8d, 0x04, 0x12, 0x4b, 0x8b, 0x04, 0xc6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x48, 0x63, 0xef, 0x48, 0x01, 0xd5, 0x0f, 0xb7, 0xd1, 0x48, 0x89, 0xd1, 0x48, 0xf7, 0xd9, 0x44, 0x8d, 0x6e, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd1, 0x44, 0x0f, 0x44, 0xee, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x2a, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x18, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xd7, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x0f, 0x85, 0x02, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x72, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xe0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x7f, 0x2b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x4d, 0x85, 0xff, 0x74, 0x49, 0x4d, 0x8d, 0x34, 0xce, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xff, 0xfc, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xc5, 0x48, 0x89, 0x44, 0x24, 0x20, 0x45, 0x31, 0xff, 0xeb, 0x0e, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0x7c, 0x24, 0x20, 0x0f, 0x84, 0xfb, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xf9, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x2b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xb6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x9b, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8b, 0x14, 0x24, 0xeb, 0x81};
static const Hole _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x387, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x409, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x41b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x438, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x456, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 50                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 31                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 26                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 14 24                   movq    %rdx, (%rsp)
// 96: 7e 4b                         jle     0xe3 <_JIT_ENTRY+0xe3>
// 98: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a0: 75 7b                         jne     0x11d <_JIT_ENTRY+0x11d>
// a2: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a7: eb 76                         jmp     0x11f <_JIT_ENTRY+0x11f>
// a9: 4d 89 f5                      movq    %r14, %r13
// ac: 49 29 dd                      subq    %rbx, %r13
// af: 49 83 c5 b8                   addq    $-0x48, %r13
// b3: 49 c1 ed 03                   shrq    $0x3, %r13
// b7: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// bb: 48 8b 03                      movq    (%rbx), %rax
// be: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c0:  R_X86_64_64  _JIT_TARGET
// c8: 89 c9                         movl    %ecx, %ecx
// ca: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ce: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d4: 48 83 c4 28                   addq    $0x28, %rsp
// d8: 5b                            popq    %rbx
// d9: 41 5c                         popq    %r12
// db: 41 5d                         popq    %r13
// dd: 41 5e                         popq    %r14
// df: 41 5f                         popq    %r15
// e1: 5d                            popq    %rbp
// e2: c3                            retq
// e3: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// e8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ea:  R_X86_64_64  .rodata.str1.1+0x39
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_CheckRecursiveCall
// fc: 48 89 d7                      movq    %rdx, %rdi
// ff: ff d0                         callq   *%rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 0f 85 b7 02 00 00             jne     0x3c0 <_JIT_ENTRY+0x3c0>
// 109: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10e: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 113: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 117: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11b: 74 85                         je      0xa2 <_JIT_ENTRY+0xa2>
// 11d: 31 ff                         xorl    %edi, %edi
// 11f: 48 89 ee                      movq    %rbp, %rsi
// 122: 41 ff d0                      callq   *%r8
// 125: 48 8b 3c 24                   movq    (%rsp), %rdi
// 129: ff 47 2c                      incl    0x2c(%rdi)
// 12c: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 131: 48 8b 45 00                   movq    (%rbp), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 26                         jg      0x160 <_JIT_ENTRY+0x160>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 153: 48 89 ea                      movq    %rbp, %rdx
// 156: ff d0                         callq   *%rax
// 158: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15c: 48 8b 45 00                   movq    (%rbp), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 29                         js      0x18d <_JIT_ENTRY+0x18d>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 3c 24                   movq    (%rsp), %rdi
// 174: 48 ff 4d 00                   decq    (%rbp)
// 178: 75 13                         jne     0x18d <_JIT_ENTRY+0x18d>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_Dealloc
// 184: 48 89 ef                      movq    %rbp, %rdi
// 187: ff d0                         callq   *%rax
// 189: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18d: 49 8b 04 24                   movq    (%r12), %rax
// 191: 48 85 c0                      testq   %rax, %rax
// 194: 7f 26                         jg      0x1bc <_JIT_ENTRY+0x1bc>
// 196: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000198:  R_X86_64_64  .rodata.str1.1
// 1a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a2:  R_X86_64_64  _Py_NegativeRefcount
// 1aa: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1af: 4c 89 e2                      movq    %r12, %rdx
// 1b2: ff d0                         callq   *%rax
// 1b4: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b8: 49 8b 04 24                   movq    (%r12), %rax
// 1bc: 85 c0                         testl   %eax, %eax
// 1be: 78 29                         js      0x1e9 <_JIT_ENTRY+0x1e9>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ca: ff d0                         callq   *%rax
// 1cc: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d0: 49 ff 0c 24                   decq    (%r12)
// 1d4: 75 13                         jne     0x1e9 <_JIT_ENTRY+0x1e9>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_Dealloc
// 1e0: 4c 89 e7                      movq    %r12, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e9: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1ed: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1f2: 48 85 c9                      testq   %rcx, %rcx
// 1f5: 0f 84 c2 01 00 00             je      0x3bd <_JIT_ENTRY+0x3bd>
// 1fb: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 1ff: 48 89 08                      movq    %rcx, (%rax)
// 202: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 206: 48 8b 00                      movq    (%rax), %rax
// 209: 84 c0                         testb   %al, %al
// 20b: 74 18                         je      0x225 <_JIT_ENTRY+0x225>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_HandlePending
// 217: ff d0                         callq   *%rax
// 219: 85 c0                         testl   %eax, %eax
// 21b: 74 08                         je      0x225 <_JIT_ENTRY+0x225>
// 21d: 4d 89 ee                      movq    %r13, %r14
// 220: e9 9b 01 00 00                jmp     0x3c0 <_JIT_ENTRY+0x3c0>
// 225: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000227:  R_X86_64_64  _JIT_OPARG
// 22f: 0f b7 d1                      movzwl  %cx, %edx
// 232: 89 d0                         movl    %edx, %eax
// 234: f7 d0                         notl    %eax
// 236: 48 63 f0                      movslq  %eax, %rsi
// 239: 4c 8d 0c 36                   leaq    (%rsi,%rsi), %r9
// 23d: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 241: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 246: 29 d7                         subl    %edx, %edi
// 248: 48 63 ef                      movslq  %edi, %rbp
// 24b: 48 01 f5                      addq    %rsi, %rbp
// 24e: 0f b7 c9                      movzwl  %cx, %ecx
// 251: 48 89 ce                      movq    %rcx, %rsi
// 254: 48 f7 de                      negq    %rsi
// 257: 44 8d 7a 01                   leal    0x1(%rdx), %r15d
// 25b: 48 85 c0                      testq   %rax, %rax
// 25e: 48 f7 d1                      notq    %rcx
// 261: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 265: 44 0f 44 fa                   cmovel  %edx, %r15d
// 269: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 26d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000026f:  R_X86_64_64  PyMethodDescr_Type
// 277: 49 39 54 24 08                cmpq    %rdx, 0x8(%r12)
// 27c: 0f 85 2a fe ff ff             jne     0xac <_JIT_ENTRY+0xac>
// 282: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 287: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 28f: 0f 85 17 fe ff ff             jne     0xac <_JIT_ENTRY+0xac>
// 295: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 29d: 4c 01 ea                      addq    %r13, %rdx
// 2a0: 48 8b 3a                      movq    (%rdx), %rdi
// 2a3: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 2a7: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 2ac: 0f 85 fa fd ff ff             jne     0xac <_JIT_ENTRY+0xac>
// 2b2: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 2b7: 48 85 c0                      testq   %rax, %rax
// 2ba: 41 0f 94 c5                   sete    %r13b
// 2be: 41 8d 47 ff                   leal    -0x1(%r15), %eax
// 2c2: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 2c7: 48 8d 72 08                   leaq    0x8(%rdx), %rsi
// 2cb: 48 63 d0                      movslq  %eax, %rdx
// 2ce: 31 c9                         xorl    %ecx, %ecx
// 2d0: 41 ff 50 08                   callq   *0x8(%r8)
// 2d4: 48 8b 14 24                   movq    (%rsp), %rdx
// 2d8: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _JIT_OPARG
// 2e7: 66 85 c0                      testw   %ax, %ax
// 2ea: 0f 94 c0                      sete    %al
// 2ed: 41 84 c5                      testb   %al, %r13b
// 2f0: 0f 84 e0 00 00 00             je      0x3d6 <_JIT_ENTRY+0x3d6>
// 2f6: 49 8b 04 24                   movq    (%r12), %rax
// 2fa: 48 85 c0                      testq   %rax, %rax
// 2fd: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 302: 7f 2b                         jg      0x32f <_JIT_ENTRY+0x32f>
// 304: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000306:  R_X86_64_64  .rodata.str1.1
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_NegativeRefcount
// 318: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 31d: 4c 89 e2                      movq    %r12, %rdx
// 320: ff d0                         callq   *%rax
// 322: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 327: 48 8b 14 24                   movq    (%rsp), %rdx
// 32b: 49 8b 04 24                   movq    (%r12), %rax
// 32f: 85 c0                         testl   %eax, %eax
// 331: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 336: 78 33                         js      0x36b <_JIT_ENTRY+0x36b>
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 342: ff d0                         callq   *%rax
// 344: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 349: 48 8b 14 24                   movq    (%rsp), %rdx
// 34d: 49 ff 0c 24                   decq    (%r12)
// 351: 75 18                         jne     0x36b <_JIT_ENTRY+0x36b>
// 353: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000355:  R_X86_64_64  _Py_Dealloc
// 35d: 4c 89 e7                      movq    %r12, %rdi
// 360: ff d0                         callq   *%rax
// 362: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 367: 48 8b 14 24                   movq    (%rsp), %rdx
// 36b: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 36f: 4d 85 ff                      testq   %r15, %r15
// 372: 74 49                         je      0x3bd <_JIT_ENTRY+0x3bd>
// 374: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 378: 4c 89 38                      movq    %r15, (%rax)
// 37b: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 37f: 48 8b 00                      movq    (%rax), %rax
// 382: 84 c0                         testb   %al, %al
// 384: 74 17                         je      0x39d <_JIT_ENTRY+0x39d>
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _Py_HandlePending
// 390: 48 89 d7                      movq    %rdx, %rdi
// 393: ff d0                         callq   *%rax
// 395: 48 8b 14 24                   movq    (%rsp), %rdx
// 399: 85 c0                         testl   %eax, %eax
// 39b: 75 23                         jne     0x3c0 <_JIT_ENTRY+0x3c0>
// 39d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039f:  R_X86_64_64  _JIT_CONTINUE
// 3a7: 48 89 df                      movq    %rbx, %rdi
// 3aa: 4c 89 f6                      movq    %r14, %rsi
// 3ad: 48 83 c4 28                   addq    $0x28, %rsp
// 3b1: 5b                            popq    %rbx
// 3b2: 41 5c                         popq    %r12
// 3b4: 41 5d                         popq    %r13
// 3b6: 41 5e                         popq    %r14
// 3b8: 41 5f                         popq    %r15
// 3ba: 5d                            popq    %rbp
// 3bb: ff e0                         jmpq    *%rax
// 3bd: 49 89 c6                      movq    %rax, %r14
// 3c0: 49 29 de                      subq    %rbx, %r14
// 3c3: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c7: 49 c1 ee 03                   shrq    $0x3, %r14
// 3cb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3cf: 31 c0                         xorl    %eax, %eax
// 3d1: e9 fe fc ff ff                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 3d6: 41 83 ff 02                   cmpl    $0x2, %r15d
// 3da: b8 01 00 00 00                movl    $0x1, %eax
// 3df: 41 0f 43 c7                   cmovael %r15d, %eax
// 3e3: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 3e8: 45 31 ff                      xorl    %r15d, %r15d
// 3eb: eb 0e                         jmp     0x3fb <_JIT_ENTRY+0x3fb>
// 3ed: 49 ff c7                      incq    %r15
// 3f0: 4c 39 7c 24 20                cmpq    %r15, 0x20(%rsp)
// 3f5: 0f 84 fb fe ff ff             je      0x2f6 <_JIT_ENTRY+0x2f6>
// 3fb: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 400: 4e 8b 2c f8                   movq    (%rax,%r15,8), %r13
// 404: 49 8b 45 00                   movq    (%r13), %rax
// 408: 48 85 c0                      testq   %rax, %rax
// 40b: 7f 26                         jg      0x433 <_JIT_ENTRY+0x433>
// 40d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000040f:  R_X86_64_64  .rodata.str1.1
// 417: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 41c: 4c 89 ea                      movq    %r13, %rdx
// 41f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000421:  R_X86_64_64  _Py_NegativeRefcount
// 429: ff d0                         callq   *%rax
// 42b: 48 8b 14 24                   movq    (%rsp), %rdx
// 42f: 49 8b 45 00                   movq    (%r13), %rax
// 433: 85 c0                         testl   %eax, %eax
// 435: 78 b6                         js      0x3ed <_JIT_ENTRY+0x3ed>
// 437: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000439:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 441: ff d0                         callq   *%rax
// 443: 48 8b 14 24                   movq    (%rsp), %rdx
// 447: 49 ff 4d 00                   decq    (%r13)
// 44b: 75 a0                         jne     0x3ed <_JIT_ENTRY+0x3ed>
// 44d: 4c 89 ef                      movq    %r13, %rdi
// 450: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000452:  R_X86_64_64  _Py_Dealloc
// 45a: ff d0                         callq   *%rax
// 45c: 48 8b 14 24                   movq    (%rsp), %rdx
// 460: eb 8b                         jmp     0x3ed <_JIT_ENTRY+0x3ed>
// 462: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[1123] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x50, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x31, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x26, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4b, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7b, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x76, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xb7, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x85, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc2, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xee, 0xe9, 0x9b, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf0, 0x4c, 0x8d, 0x0c, 0x36, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x48, 0x63, 0xef, 0x48, 0x01, 0xf5, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x7a, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xfa, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x24, 0x08, 0x0f, 0x85, 0x2a, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x17, 0xfe, 0xff, 0xff, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xea, 0x48, 0x8b, 0x3a, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x0f, 0x85, 0xfa, 0xfd, 0xff, 0xff, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x47, 0xff, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x72, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc5, 0x0f, 0x84, 0xe0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x7f, 0x2b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x4d, 0x85, 0xff, 0x74, 0x49, 0x4d, 0x8d, 0x34, 0xce, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xfe, 0xfc, 0xff, 0xff, 0x41, 0x83, 0xff, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xc7, 0x48, 0x89, 0x44, 0x24, 0x20, 0x45, 0x31, 0xff, 0xeb, 0x0e, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0x7c, 0x24, 0x20, 0x0f, 0x84, 0xfb, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4e, 0x8b, 0x2c, 0xf8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xb6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa0, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xeb, 0x8b};
static const Hole _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x39f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x40f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x421, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x439, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x452, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_NOARGS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 0f 85 04 03 00 00             jne     0x361 <_JIT_ENTRY+0x361>
// 5d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 62: 29 c1                         subl    %eax, %ecx
// 64: 4c 63 f9                      movslq  %ecx, %r15
// 67: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  PyCFunction_Type
// 75: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7a: 0f 85 e1 02 00 00             jne     0x361 <_JIT_ENTRY+0x361>
// 80: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 85: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 89: 0f 85 d2 02 00 00             jne     0x361 <_JIT_ENTRY+0x361>
// 8f: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 93: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 96: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 99: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9c: 85 c9                         testl   %ecx, %ecx
// 9e: 48 89 14 24                   movq    %rdx, (%rsp)
// a2: 7e 11                         jle     0xb5 <_JIT_ENTRY+0xb5>
// a4: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// a8: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ac: 75 45                         jne     0xf3 <_JIT_ENTRY+0xf3>
// ae: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b3: eb 40                         jmp     0xf5 <_JIT_ENTRY+0xf5>
// b5: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// ba: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000bc:  R_X86_64_64  .rodata.str1.1+0x39
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _Py_CheckRecursiveCall
// ce: 48 89 d7                      movq    %rdx, %rdi
// d1: ff d0                         callq   *%rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 74 08                         je      0xdf <_JIT_ENTRY+0xdf>
// d7: 4c 89 f5                      movq    %r14, %rbp
// da: e9 6d 02 00 00                jmp     0x34c <_JIT_ENTRY+0x34c>
// df: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e4: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// e9: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// ed: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f1: 74 bb                         je      0xae <_JIT_ENTRY+0xae>
// f3: 31 ff                         xorl    %edi, %edi
// f5: 48 89 ee                      movq    %rbp, %rsi
// f8: 41 ff d0                      callq   *%r8
// fb: 4c 8b 0c 24                   movq    (%rsp), %r9
// ff: 41 ff 41 2c                   incl    0x2c(%r9)
// 103: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 108: 48 8b 45 00                   movq    (%rbp), %rax
// 10c: 48 85 c0                      testq   %rax, %rax
// 10f: 7f 26                         jg      0x137 <_JIT_ENTRY+0x137>
// 111: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000113:  R_X86_64_64  .rodata.str1.1
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_NegativeRefcount
// 125: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 12a: 48 89 ea                      movq    %rbp, %rdx
// 12d: ff d0                         callq   *%rax
// 12f: 4c 8b 0c 24                   movq    (%rsp), %r9
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 85 c0                         testl   %eax, %eax
// 139: 78 29                         js      0x164 <_JIT_ENTRY+0x164>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 4c 8b 0c 24                   movq    (%rsp), %r9
// 14b: 48 ff 4d 00                   decq    (%rbp)
// 14f: 75 13                         jne     0x164 <_JIT_ENTRY+0x164>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_Dealloc
// 15b: 48 89 ef                      movq    %rbp, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 4c 8b 0c 24                   movq    (%rsp), %r9
// 164: 49 8b 04 24                   movq    (%r12), %rax
// 168: 48 85 c0                      testq   %rax, %rax
// 16b: 7f 26                         jg      0x193 <_JIT_ENTRY+0x193>
// 16d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016f:  R_X86_64_64  .rodata.str1.1
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_NegativeRefcount
// 181: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 186: 4c 89 e2                      movq    %r12, %rdx
// 189: ff d0                         callq   *%rax
// 18b: 4c 8b 0c 24                   movq    (%rsp), %r9
// 18f: 49 8b 04 24                   movq    (%r12), %rax
// 193: 85 c0                         testl   %eax, %eax
// 195: 78 29                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a1: ff d0                         callq   *%rax
// 1a3: 4c 8b 0c 24                   movq    (%rsp), %r9
// 1a7: 49 ff 0c 24                   decq    (%r12)
// 1ab: 75 13                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _Py_Dealloc
// 1b7: 4c 89 e7                      movq    %r12, %rdi
// 1ba: ff d0                         callq   *%rax
// 1bc: 4c 8b 0c 24                   movq    (%rsp), %r9
// 1c0: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1c4: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c9: 48 85 c9                      testq   %rcx, %rcx
// 1cc: 0f 84 77 01 00 00             je      0x349 <_JIT_ENTRY+0x349>
// 1d2: 4b 8d 2c ee                   leaq    (%r14,%r13,8), %rbp
// 1d6: 48 89 08                      movq    %rcx, (%rax)
// 1d9: 49 8b 41 10                   movq    0x10(%r9), %rax
// 1dd: 48 8b 00                      movq    (%rax), %rax
// 1e0: 84 c0                         testb   %al, %al
// 1e2: 74 1b                         je      0x1ff <_JIT_ENTRY+0x1ff>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_HandlePending
// 1ee: 4c 89 cf                      movq    %r9, %rdi
// 1f1: ff d0                         callq   *%rax
// 1f3: 4c 8b 0c 24                   movq    (%rsp), %r9
// 1f7: 85 c0                         testl   %eax, %eax
// 1f9: 0f 85 4d 01 00 00             jne     0x34c <_JIT_ENTRY+0x34c>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _JIT_OPARG
// 209: 0f b7 c8                      movzwl  %ax, %ecx
// 20c: 89 ca                         movl    %ecx, %edx
// 20e: f7 d2                         notl    %edx
// 210: 48 63 d2                      movslq  %edx, %rdx
// 213: 4c 8d 3c 12                   leaq    (%rdx,%rdx), %r15
// 217: 0f b7 c0                      movzwl  %ax, %eax
// 21a: 48 89 c6                      movq    %rax, %rsi
// 21d: 48 f7 de                      negq    %rsi
// 220: 31 ff                         xorl    %edi, %edi
// 222: 66 85 c0                      testw   %ax, %ax
// 225: 40 0f 94 c7                   sete    %dil
// 229: 45 31 c0                      xorl    %r8d, %r8d
// 22c: 66 83 f8 01                   cmpw    $0x1, %ax
// 230: 41 0f 94 c0                   sete    %r8b
// 234: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 239: 48 f7 d0                      notq    %rax
// 23c: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 240: 41 0f 44 f8                   cmovel  %r8d, %edi
// 244: 40 80 ff 01                   cmpb    $0x1, %dil
// 248: 0f 85 10 01 00 00             jne     0x35e <_JIT_ENTRY+0x35e>
// 24e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 253: 29 ce                         subl    %ecx, %esi
// 255: 4c 63 ee                      movslq  %esi, %r13
// 258: 49 01 d5                      addq    %rdx, %r13
// 25b: 4f 8b 24 ee                   movq    (%r14,%r13,8), %r12
// 25f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000261:  R_X86_64_64  PyMethodDescr_Type
// 269: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 26e: 0f 85 ea 00 00 00             jne     0x35e <_JIT_ENTRY+0x35e>
// 274: 48 8b 54 c5 00                movq    (%rbp,%rax,8), %rdx
// 279: 48 8b 42 08                   movq    0x8(%rdx), %rax
// 27d: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 282: 0f 85 d6 00 00 00             jne     0x35e <_JIT_ENTRY+0x35e>
// 288: 49 8b 44 24 28                movq    0x28(%r12), %rax
// 28d: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// 291: 0f 85 c7 00 00 00             jne     0x35e <_JIT_ENTRY+0x35e>
// 297: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 29b: 41 8b 41 2c                   movl    0x2c(%r9), %eax
// 29f: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 2a2: 41 89 49 2c                   movl    %ecx, 0x2c(%r9)
// 2a6: 85 c0                         testl   %eax, %eax
// 2a8: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 2ad: 0f 8e e5 00 00 00             jle     0x398 <_JIT_ENTRY+0x398>
// 2b3: 4b 8d 2c ee                   leaq    (%r14,%r13,8), %rbp
// 2b7: 48 89 d7                      movq    %rdx, %rdi
// 2ba: 31 f6                         xorl    %esi, %esi
// 2bc: 4d 89 cd                      movq    %r9, %r13
// 2bf: 41 ff d0                      callq   *%r8
// 2c2: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2c7: 41 ff 45 2c                   incl    0x2c(%r13)
// 2cb: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000002cd:  R_X86_64_64  .text+0x3d0
// 2d5: bf 10 0c 00 00                movl    $0xc10, %edi            # imm = 0xC10
// 2da: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 2df: 41 ff d5                      callq   *%r13
// 2e2: bf 11 0c 00 00                movl    $0xc11, %edi            # imm = 0xC11
// 2e7: 4c 89 e6                      movq    %r12, %rsi
// 2ea: 41 ff d5                      callq   *%r13
// 2ed: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2f2: 48 85 c0                      testq   %rax, %rax
// 2f5: 74 55                         je      0x34c <_JIT_ENTRY+0x34c>
// 2f7: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 2fb: 48 89 45 00                   movq    %rax, (%rbp)
// 2ff: 48 8b 14 24                   movq    (%rsp), %rdx
// 303: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 307: 48 8b 00                      movq    (%rax), %rax
// 30a: 84 c0                         testb   %al, %al
// 30c: 74 1b                         je      0x329 <_JIT_ENTRY+0x329>
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_HandlePending
// 318: 48 89 d7                      movq    %rdx, %rdi
// 31b: ff d0                         callq   *%rax
// 31d: 48 8b 14 24                   movq    (%rsp), %rdx
// 321: 85 c0                         testl   %eax, %eax
// 323: 0f 85 ae fd ff ff             jne     0xd7 <_JIT_ENTRY+0xd7>
// 329: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032b:  R_X86_64_64  _JIT_CONTINUE
// 333: 48 89 df                      movq    %rbx, %rdi
// 336: 4c 89 f6                      movq    %r14, %rsi
// 339: 48 83 c4 18                   addq    $0x18, %rsp
// 33d: 5b                            popq    %rbx
// 33e: 41 5c                         popq    %r12
// 340: 41 5d                         popq    %r13
// 342: 41 5e                         popq    %r14
// 344: 41 5f                         popq    %r15
// 346: 5d                            popq    %rbp
// 347: ff e0                         jmpq    *%rax
// 349: 48 89 c5                      movq    %rax, %rbp
// 34c: 48 29 dd                      subq    %rbx, %rbp
// 34f: 48 83 c5 b8                   addq    $-0x48, %rbp
// 353: 48 c1 ed 03                   shrq    $0x3, %rbp
// 357: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 35a: 31 c0                         xorl    %eax, %eax
// 35c: eb 2b                         jmp     0x389 <_JIT_ENTRY+0x389>
// 35e: 49 89 ee                      movq    %rbp, %r14
// 361: 49 29 de                      subq    %rbx, %r14
// 364: 49 83 c6 b8                   addq    $-0x48, %r14
// 368: 49 c1 ee 03                   shrq    $0x3, %r14
// 36c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 370: 48 8b 03                      movq    (%rbx), %rax
// 373: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000375:  R_X86_64_64  _JIT_TARGET
// 37d: 89 c9                         movl    %ecx, %ecx
// 37f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 383: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 389: 48 83 c4 18                   addq    $0x18, %rsp
// 38d: 5b                            popq    %rbx
// 38e: 41 5c                         popq    %r12
// 390: 41 5d                         popq    %r13
// 392: 41 5e                         popq    %r14
// 394: 41 5f                         popq    %r15
// 396: 5d                            popq    %rbp
// 397: c3                            retq
// 398: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000039a:  R_X86_64_64  .rodata.str1.1+0x39
// 3a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a4:  R_X86_64_64  _Py_CheckRecursiveCall
// 3ac: 4c 89 cf                      movq    %r9, %rdi
// 3af: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 3b4: ff d0                         callq   *%rax
// 3b6: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 3bb: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3c0: 4c 8b 0c 24                   movq    (%rsp), %r9
// 3c4: 85 c0                         testl   %eax, %eax
// 3c6: 75 84                         jne     0x34c <_JIT_ENTRY+0x34c>
// 3c8: e9 e6 fe ff ff                jmp     0x2b3 <_JIT_ENTRY+0x2b3>
// 3cd: 0f 1f 00                      nopl    (%rax)
// 
// 00000000000003d0 <Py_DECREF>:
// 3d0: 53                            pushq   %rbx
// 3d1: 48 89 f3                      movq    %rsi, %rbx
// 3d4: 48 8b 06                      movq    (%rsi), %rax
// 3d7: 48 85 c0                      testq   %rax, %rax
// 3da: 7e 06                         jle     0x3e2 <Py_DECREF+0x12>
// 3dc: 85 c0                         testl   %eax, %eax
// 3de: 79 24                         jns     0x404 <Py_DECREF+0x34>
// 3e0: eb 33                         jmp     0x415 <Py_DECREF+0x45>
// 3e2: 89 fe                         movl    %edi, %esi
// 3e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003e6:  R_X86_64_64  .rodata.str1.1
// 3ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f0:  R_X86_64_64  _Py_NegativeRefcount
// 3f8: 48 89 da                      movq    %rbx, %rdx
// 3fb: ff d0                         callq   *%rax
// 3fd: 48 8b 03                      movq    (%rbx), %rax
// 400: 85 c0                         testl   %eax, %eax
// 402: 78 11                         js      0x415 <Py_DECREF+0x45>
// 404: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000406:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 40e: ff d0                         callq   *%rax
// 410: 48 ff 0b                      decq    (%rbx)
// 413: 74 02                         je      0x417 <Py_DECREF+0x47>
// 415: 5b                            popq    %rbx
// 416: c3                            retq
// 417: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000419:  R_X86_64_64  _Py_Dealloc
// 421: 48 89 df                      movq    %rbx, %rdi
// 424: 5b                            popq    %rbx
// 425: ff e0                         jmpq    *%rax
// 427: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[1064] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x04, 0x03, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xe1, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xd2, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x11, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x45, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x40, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4c, 0x89, 0xf5, 0xe9, 0x6d, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xbb, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x41, 0xff, 0x41, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x77, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x41, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xcf, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0x4d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x4c, 0x8d, 0x3c, 0x12, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x10, 0x01, 0x00, 0x00, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xee, 0x49, 0x01, 0xd5, 0x4f, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xea, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x54, 0xc5, 0x00, 0x48, 0x8b, 0x42, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xd6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0xc7, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x41, 0x8b, 0x41, 0x2c, 0x8d, 0x48, 0xff, 0x41, 0x89, 0x49, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x54, 0x24, 0x08, 0x0f, 0x8e, 0xe5, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0xd7, 0x31, 0xf6, 0x4d, 0x89, 0xcd, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xff, 0x45, 0x2c, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x10, 0x0c, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x41, 0xff, 0xd5, 0xbf, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x55, 0x4f, 0x8d, 0x34, 0xfe, 0x48, 0x89, 0x45, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0xae, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x89, 0xc5, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x49, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xcf, 0x4c, 0x89, 0x44, 0x24, 0x10, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4c, 0x8b, 0x0c, 0x24, 0x85, 0xc0, 0x75, 0x84, 0xe9, 0xe6, 0xfe, 0xff, 0xff, 0x0f, 0x1f, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3d0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x375, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x39a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x3a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x3e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x406, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x419, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_O.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 0f 85 37 02 00 00             jne     0x294 <_JIT_ENTRY+0x294>
// 5d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 62: 29 c1                         subl    %eax, %ecx
// 64: 4c 63 f9                      movslq  %ecx, %r15
// 67: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  PyCFunction_Type
// 75: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7a: 0f 85 14 02 00 00             jne     0x294 <_JIT_ENTRY+0x294>
// 80: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 85: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 89: 0f 85 05 02 00 00             jne     0x294 <_JIT_ENTRY+0x294>
// 8f: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 93: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 96: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 99: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9c: 85 c9                         testl   %ecx, %ecx
// 9e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// a3: 7e 11                         jle     0xb6 <_JIT_ENTRY+0xb6>
// a5: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// a9: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ad: 75 45                         jne     0xf4 <_JIT_ENTRY+0xf4>
// af: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b4: eb 40                         jmp     0xf6 <_JIT_ENTRY+0xf6>
// b6: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// bb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000bd:  R_X86_64_64  .rodata.str1.1+0x39
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_CheckRecursiveCall
// cf: 48 89 d7                      movq    %rdx, %rdi
// d2: ff d0                         callq   *%rax
// d4: 85 c0                         testl   %eax, %eax
// d6: 74 08                         je      0xe0 <_JIT_ENTRY+0xe0>
// d8: 4d 89 f5                      movq    %r14, %r13
// db: e9 ee 01 00 00                jmp     0x2ce <_JIT_ENTRY+0x2ce>
// e0: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e5: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// ea: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// ee: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f2: 74 bb                         je      0xaf <_JIT_ENTRY+0xaf>
// f4: 31 ff                         xorl    %edi, %edi
// f6: 48 89 ee                      movq    %rbp, %rsi
// f9: 41 ff d0                      callq   *%r8
// fc: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 101: 41 ff 41 2c                   incl    0x2c(%r9)
// 105: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 10a: 48 8b 45 00                   movq    (%rbp), %rax
// 10e: 48 85 c0                      testq   %rax, %rax
// 111: 7f 27                         jg      0x13a <_JIT_ENTRY+0x13a>
// 113: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000115:  R_X86_64_64  .rodata.str1.1
// 11d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011f:  R_X86_64_64  _Py_NegativeRefcount
// 127: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 12c: 48 89 ea                      movq    %rbp, %rdx
// 12f: ff d0                         callq   *%rax
// 131: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 136: 48 8b 45 00                   movq    (%rbp), %rax
// 13a: 85 c0                         testl   %eax, %eax
// 13c: 78 2b                         js      0x169 <_JIT_ENTRY+0x169>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 148: ff d0                         callq   *%rax
// 14a: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 14f: 48 ff 4d 00                   decq    (%rbp)
// 153: 75 14                         jne     0x169 <_JIT_ENTRY+0x169>
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_Dealloc
// 15f: 48 89 ef                      movq    %rbp, %rdi
// 162: ff d0                         callq   *%rax
// 164: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 169: 49 8b 04 24                   movq    (%r12), %rax
// 16d: 48 85 c0                      testq   %rax, %rax
// 170: 7f 27                         jg      0x199 <_JIT_ENTRY+0x199>
// 172: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000174:  R_X86_64_64  .rodata.str1.1
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_NegativeRefcount
// 186: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 18b: 4c 89 e2                      movq    %r12, %rdx
// 18e: ff d0                         callq   *%rax
// 190: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 195: 49 8b 04 24                   movq    (%r12), %rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 2b                         js      0x1c8 <_JIT_ENTRY+0x1c8>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a7: ff d0                         callq   *%rax
// 1a9: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 1ae: 49 ff 0c 24                   decq    (%r12)
// 1b2: 75 14                         jne     0x1c8 <_JIT_ENTRY+0x1c8>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_Dealloc
// 1be: 4c 89 e7                      movq    %r12, %rdi
// 1c1: ff d0                         callq   *%rax
// 1c3: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 1c8: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1cc: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d1: 48 85 c9                      testq   %rcx, %rcx
// 1d4: 0f 84 f1 00 00 00             je      0x2cb <_JIT_ENTRY+0x2cb>
// 1da: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 1de: 48 89 08                      movq    %rcx, (%rax)
// 1e1: 49 8b 41 10                   movq    0x10(%r9), %rax
// 1e5: 48 8b 00                      movq    (%rax), %rax
// 1e8: 84 c0                         testb   %al, %al
// 1ea: 74 1c                         je      0x208 <_JIT_ENTRY+0x208>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_HandlePending
// 1f6: 4c 89 cf                      movq    %r9, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 200: 85 c0                         testl   %eax, %eax
// 202: 0f 85 c6 00 00 00             jne     0x2ce <_JIT_ENTRY+0x2ce>
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _JIT_OPARG
// 212: 0f b7 c8                      movzwl  %ax, %ecx
// 215: 89 ca                         movl    %ecx, %edx
// 217: f7 d2                         notl    %edx
// 219: 48 63 d2                      movslq  %edx, %rdx
// 21c: 4c 8d 3c 12                   leaq    (%rdx,%rdx), %r15
// 220: 0f b7 c0                      movzwl  %ax, %eax
// 223: 48 89 c6                      movq    %rax, %rsi
// 226: 48 f7 de                      negq    %rsi
// 229: 31 ff                         xorl    %edi, %edi
// 22b: 66 83 f8 01                   cmpw    $0x1, %ax
// 22f: 40 0f 94 c7                   sete    %dil
// 233: 45 31 c0                      xorl    %r8d, %r8d
// 236: 66 83 f8 02                   cmpw    $0x2, %ax
// 23a: 41 0f 94 c0                   sete    %r8b
// 23e: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 243: 48 f7 d0                      notq    %rax
// 246: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 24a: 41 0f 44 f8                   cmovel  %r8d, %edi
// 24e: 40 80 ff 01                   cmpb    $0x1, %dil
// 252: 75 3d                         jne     0x291 <_JIT_ENTRY+0x291>
// 254: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 259: 29 ce                         subl    %ecx, %esi
// 25b: 48 63 ee                      movslq  %esi, %rbp
// 25e: 48 01 d5                      addq    %rdx, %rbp
// 261: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 265: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000267:  R_X86_64_64  PyMethodDescr_Type
// 26f: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 274: 75 1b                         jne     0x291 <_JIT_ENTRY+0x291>
// 276: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 27b: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 27f: 75 10                         jne     0x291 <_JIT_ENTRY+0x291>
// 281: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
// 286: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 28a: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 28f: 74 50                         je      0x2e1 <_JIT_ENTRY+0x2e1>
// 291: 4d 89 ee                      movq    %r13, %r14
// 294: 49 29 de                      subq    %rbx, %r14
// 297: 49 83 c6 b8                   addq    $-0x48, %r14
// 29b: 49 c1 ee 03                   shrq    $0x3, %r14
// 29f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2a3: 48 8b 03                      movq    (%rbx), %rax
// 2a6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a8:  R_X86_64_64  _JIT_TARGET
// 2b0: 89 c9                         movl    %ecx, %ecx
// 2b2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2b6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2bc: 48 83 c4 28                   addq    $0x28, %rsp
// 2c0: 5b                            popq    %rbx
// 2c1: 41 5c                         popq    %r12
// 2c3: 41 5d                         popq    %r13
// 2c5: 41 5e                         popq    %r14
// 2c7: 41 5f                         popq    %r15
// 2c9: 5d                            popq    %rbp
// 2ca: c3                            retq
// 2cb: 49 89 c5                      movq    %rax, %r13
// 2ce: 49 29 dd                      subq    %rbx, %r13
// 2d1: 49 83 c5 b8                   addq    $-0x48, %r13
// 2d5: 49 c1 ed 03                   shrq    $0x3, %r13
// 2d9: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2dd: 31 c0                         xorl    %eax, %eax
// 2df: eb db                         jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 2e1: 49 8b 54 c5 08                movq    0x8(%r13,%rax,8), %rdx
// 2e6: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 2ea: 41 8b 41 2c                   movl    0x2c(%r9), %eax
// 2ee: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 2f1: 41 89 49 2c                   movl    %ecx, 0x2c(%r9)
// 2f5: 85 c0                         testl   %eax, %eax
// 2f7: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 2fc: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 301: 0f 8e a3 00 00 00             jle     0x3aa <_JIT_ENTRY+0x3aa>
// 307: 4d 8d 2c ee                   leaq    (%r14,%rbp,8), %r13
// 30b: 48 89 d6                      movq    %rdx, %rsi
// 30e: 4c 89 cd                      movq    %r9, %rbp
// 311: 41 ff d0                      callq   *%r8
// 314: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 319: ff 45 2c                      incl    0x2c(%rbp)
// 31c: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000031e:  R_X86_64_64  .text+0x3f0
// 326: bf bf 0b 00 00                movl    $0xbbf, %edi            # imm = 0xBBF
// 32b: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// 330: ff d5                         callq   *%rbp
// 332: bf c0 0b 00 00                movl    $0xbc0, %edi            # imm = 0xBC0
// 337: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 33c: ff d5                         callq   *%rbp
// 33e: bf c1 0b 00 00                movl    $0xbc1, %edi            # imm = 0xBC1
// 343: 4c 89 e6                      movq    %r12, %rsi
// 346: ff d5                         callq   *%rbp
// 348: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 34d: 48 85 c0                      testq   %rax, %rax
// 350: 0f 84 78 ff ff ff             je      0x2ce <_JIT_ENTRY+0x2ce>
// 356: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 35a: 49 89 45 00                   movq    %rax, (%r13)
// 35e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 363: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 367: 48 8b 00                      movq    (%rax), %rax
// 36a: 84 c0                         testb   %al, %al
// 36c: 74 1c                         je      0x38a <_JIT_ENTRY+0x38a>
// 36e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000370:  R_X86_64_64  _Py_HandlePending
// 378: 48 89 d7                      movq    %rdx, %rdi
// 37b: ff d0                         callq   *%rax
// 37d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 382: 85 c0                         testl   %eax, %eax
// 384: 0f 85 4e fd ff ff             jne     0xd8 <_JIT_ENTRY+0xd8>
// 38a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038c:  R_X86_64_64  _JIT_CONTINUE
// 394: 48 89 df                      movq    %rbx, %rdi
// 397: 4c 89 f6                      movq    %r14, %rsi
// 39a: 48 83 c4 28                   addq    $0x28, %rsp
// 39e: 5b                            popq    %rbx
// 39f: 41 5c                         popq    %r12
// 3a1: 41 5d                         popq    %r13
// 3a3: 41 5e                         popq    %r14
// 3a5: 41 5f                         popq    %r15
// 3a7: 5d                            popq    %rbp
// 3a8: ff e0                         jmpq    *%rax
// 3aa: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003ac:  R_X86_64_64  .rodata.str1.1+0x39
// 3b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b6:  R_X86_64_64  _Py_CheckRecursiveCall
// 3be: 4c 89 cf                      movq    %r9, %rdi
// 3c1: 4c 89 44 24 18                movq    %r8, 0x18(%rsp)
// 3c6: ff d0                         callq   *%rax
// 3c8: 4c 8b 44 24 18                movq    0x18(%rsp), %r8
// 3cd: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// 3d2: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 3d7: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 3dc: 85 c0                         testl   %eax, %eax
// 3de: 0f 85 ea fe ff ff             jne     0x2ce <_JIT_ENTRY+0x2ce>
// 3e4: e9 1e ff ff ff                jmp     0x307 <_JIT_ENTRY+0x307>
// 3e9: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 
// 00000000000003f0 <Py_DECREF>:
// 3f0: 53                            pushq   %rbx
// 3f1: 48 89 f3                      movq    %rsi, %rbx
// 3f4: 48 8b 06                      movq    (%rsi), %rax
// 3f7: 48 85 c0                      testq   %rax, %rax
// 3fa: 7e 06                         jle     0x402 <Py_DECREF+0x12>
// 3fc: 85 c0                         testl   %eax, %eax
// 3fe: 79 24                         jns     0x424 <Py_DECREF+0x34>
// 400: eb 33                         jmp     0x435 <Py_DECREF+0x45>
// 402: 89 fe                         movl    %edi, %esi
// 404: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000406:  R_X86_64_64  .rodata.str1.1
// 40e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000410:  R_X86_64_64  _Py_NegativeRefcount
// 418: 48 89 da                      movq    %rbx, %rdx
// 41b: ff d0                         callq   *%rax
// 41d: 48 8b 03                      movq    (%rbx), %rax
// 420: 85 c0                         testl   %eax, %eax
// 422: 78 11                         js      0x435 <Py_DECREF+0x45>
// 424: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000426:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 42e: ff d0                         callq   *%rax
// 430: 48 ff 0b                      decq    (%rbx)
// 433: 74 02                         je      0x437 <Py_DECREF+0x47>
// 435: 5b                            popq    %rbx
// 436: c3                            retq
// 437: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000439:  R_X86_64_64  _Py_Dealloc
// 441: 48 89 df                      movq    %rbx, %rdi
// 444: 5b                            popq    %rbx
// 445: ff e0                         jmpq    *%rax
// 447: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_O_code_body[1096] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x37, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x14, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0x05, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x11, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x45, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x40, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf5, 0xe9, 0xee, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xbb, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x41, 0xff, 0x41, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xf1, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x41, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xcf, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x85, 0xc0, 0x0f, 0x85, 0xc6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x4c, 0x8d, 0x3c, 0x12, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x3d, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x48, 0x63, 0xee, 0x48, 0x01, 0xd5, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x1b, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x10, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x74, 0x50, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xeb, 0xdb, 0x49, 0x8b, 0x54, 0xc5, 0x08, 0x4c, 0x8b, 0x41, 0x08, 0x41, 0x8b, 0x41, 0x2c, 0x8d, 0x48, 0xff, 0x41, 0x89, 0x49, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x0f, 0x8e, 0xa3, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0xd6, 0x4c, 0x89, 0xcd, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xff, 0x45, 0x2c, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xbf, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x20, 0xff, 0xd5, 0xbf, 0xc0, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x10, 0xff, 0xd5, 0xbf, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x89, 0x45, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x0f, 0x85, 0x4e, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xcf, 0x4c, 0x89, 0x44, 0x24, 0x18, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x85, 0xc0, 0x0f, 0x85, 0xea, 0xfe, 0xff, 0xff, 0xe9, 0x1e, 0xff, 0xff, 0xff, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_O_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3f0},
    {0x370, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3ac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x3b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x406, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x410, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x426, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x439, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_STR_1
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_STR_1.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 4a                         jle     0xe3 <_JIT_ENTRY+0xe3>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 7a                         jne     0x11d <_JIT_ENTRY+0x11d>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 75                         jmp     0x11f <_JIT_ENTRY+0x11f>
// aa: 4c 89 f5                      movq    %r14, %rbp
// ad: 48 29 dd                      subq    %rbx, %rbp
// b0: 48 83 c5 b8                   addq    $-0x48, %rbp
// b4: 48 c1 ed 03                   shrq    $0x3, %rbp
// b8: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// bb: 48 8b 03                      movq    (%rbx), %rax
// be: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c0:  R_X86_64_64  _JIT_TARGET
// c8: 89 c9                         movl    %ecx, %ecx
// ca: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ce: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d4: 48 83 c4 18                   addq    $0x18, %rsp
// d8: 5b                            popq    %rbx
// d9: 41 5c                         popq    %r12
// db: 41 5d                         popq    %r13
// dd: 41 5e                         popq    %r14
// df: 41 5f                         popq    %r15
// e1: 5d                            popq    %rbp
// e2: c3                            retq
// e3: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ea:  R_X86_64_64  .rodata.str1.1+0x39
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_CheckRecursiveCall
// fc: 48 89 d7                      movq    %rdx, %rdi
// ff: ff d0                         callq   *%rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 0f 85 a0 02 00 00             jne     0x3a9 <_JIT_ENTRY+0x3a9>
// 109: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10e: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 113: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 117: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11b: 74 86                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11d: 31 ff                         xorl    %edi, %edi
// 11f: 48 89 ee                      movq    %rbp, %rsi
// 122: 41 ff d0                      callq   *%r8
// 125: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 12a: ff 47 2c                      incl    0x2c(%rdi)
// 12d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 132: 48 8b 45 00                   movq    (%rbp), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 154: 48 89 ea                      movq    %rbp, %rdx
// 157: ff d0                         callq   *%rax
// 159: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 2b                         js      0x191 <_JIT_ENTRY+0x191>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 177: 48 ff 4d 00                   decq    (%rbp)
// 17b: 75 14                         jne     0x191 <_JIT_ENTRY+0x191>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_Dealloc
// 187: 48 89 ef                      movq    %rbp, %rdi
// 18a: ff d0                         callq   *%rax
// 18c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 191: 49 8b 04 24                   movq    (%r12), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7f 27                         jg      0x1c1 <_JIT_ENTRY+0x1c1>
// 19a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019c:  R_X86_64_64  .rodata.str1.1
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_NegativeRefcount
// 1ae: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b3: 4c 89 e2                      movq    %r12, %rdx
// 1b6: ff d0                         callq   *%rax
// 1b8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1bd: 49 8b 04 24                   movq    (%r12), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 2b                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d6: 49 ff 0c 24                   decq    (%r12)
// 1da: 75 14                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_Dealloc
// 1e6: 4c 89 e7                      movq    %r12, %rdi
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f0: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f9: 48 85 c9                      testq   %rcx, %rcx
// 1fc: 0f 84 a4 01 00 00             je      0x3a6 <_JIT_ENTRY+0x3a6>
// 202: 4b 8d 2c ee                   leaq    (%r14,%r13,8), %rbp
// 206: 48 89 08                      movq    %rcx, (%rax)
// 209: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 20d: 48 8b 00                      movq    (%rax), %rax
// 210: 84 c0                         testb   %al, %al
// 212: 74 18                         je      0x22c <_JIT_ENTRY+0x22c>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_HandlePending
// 21e: ff d0                         callq   *%rax
// 220: 85 c0                         testl   %eax, %eax
// 222: 74 08                         je      0x22c <_JIT_ENTRY+0x22c>
// 224: 49 89 ee                      movq    %rbp, %r14
// 227: e9 7d 01 00 00                jmp     0x3a9 <_JIT_ENTRY+0x3a9>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _JIT_OPARG
// 236: 0f b7 c0                      movzwl  %ax, %eax
// 239: 89 c1                         movl    %eax, %ecx
// 23b: f7 d1                         notl    %ecx
// 23d: 48 63 c9                      movslq  %ecx, %rcx
// 240: 4c 8d 3c 09                   leaq    (%rcx,%rcx), %r15
// 244: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 249: 0f 85 5e fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 24f: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 254: 29 c2                         subl    %eax, %edx
// 256: 48 63 c2                      movslq  %edx, %rax
// 259: 48 01 c8                      addq    %rcx, %rax
// 25c: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 260: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000262:  R_X86_64_64  PyUnicode_Type
// 26a: 4d 39 65 00                   cmpq    %r12, (%r13)
// 26e: 0f 85 39 fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _JIT_OPARG
// 27e: 0f b7 c8                      movzwl  %ax, %ecx
// 281: f7 d0                         notl    %eax
// 283: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 288: 48 98                         cltq
// 28a: 48 29 c8                      subq    %rcx, %rax
// 28d: 49 8b 2c c6                   movq    (%r14,%rax,8), %rbp
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  PyObject_Str
// 29b: 48 89 ef                      movq    %rbp, %rdi
// 29e: ff d0                         callq   *%rax
// 2a0: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2a5: 48 8b 45 00                   movq    (%rbp), %rax
// 2a9: 48 85 c0                      testq   %rax, %rax
// 2ac: 7f 22                         jg      0x2d0 <_JIT_ENTRY+0x2d0>
// 2ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b0:  R_X86_64_64  .rodata.str1.1
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_NegativeRefcount
// 2c2: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// 2c7: 48 89 ea                      movq    %rbp, %rdx
// 2ca: ff d0                         callq   *%rax
// 2cc: 48 8b 45 00                   movq    (%rbp), %rax
// 2d0: 85 c0                         testl   %eax, %eax
// 2d2: 78 21                         js      0x2f5 <_JIT_ENTRY+0x2f5>
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2de: ff d0                         callq   *%rax
// 2e0: 48 ff 4d 00                   decq    (%rbp)
// 2e4: 75 0f                         jne     0x2f5 <_JIT_ENTRY+0x2f5>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_Dealloc
// 2f0: 48 89 ef                      movq    %rbp, %rdi
// 2f3: ff d0                         callq   *%rax
// 2f5: 49 8b 04 24                   movq    (%r12), %rax
// 2f9: 48 85 c0                      testq   %rax, %rax
// 2fc: 7f 22                         jg      0x320 <_JIT_ENTRY+0x320>
// 2fe: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000300:  R_X86_64_64  .rodata.str1.1
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _Py_NegativeRefcount
// 312: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 317: 4c 89 e2                      movq    %r12, %rdx
// 31a: ff d0                         callq   *%rax
// 31c: 49 8b 04 24                   movq    (%r12), %rax
// 320: 85 c0                         testl   %eax, %eax
// 322: 78 28                         js      0x34c <_JIT_ENTRY+0x34c>
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 32e: ff d0                         callq   *%rax
// 330: 49 ff 0c 24                   decq    (%r12)
// 334: 75 16                         jne     0x34c <_JIT_ENTRY+0x34c>
// 336: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000338:  R_X86_64_64  PyUnicode_Type
// 340: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000342:  R_X86_64_64  _Py_Dealloc
// 34a: ff d0                         callq   *%rax
// 34c: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 351: 48 85 c0                      testq   %rax, %rax
// 354: 74 69                         je      0x3bf <_JIT_ENTRY+0x3bf>
// 356: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 35a: 49 89 45 00                   movq    %rax, (%r13)
// 35e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 363: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 367: 48 8b 00                      movq    (%rax), %rax
// 36a: 84 c0                         testb   %al, %al
// 36c: 74 18                         je      0x386 <_JIT_ENTRY+0x386>
// 36e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000370:  R_X86_64_64  _Py_HandlePending
// 378: 48 89 d7                      movq    %rdx, %rdi
// 37b: ff d0                         callq   *%rax
// 37d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 382: 85 c0                         testl   %eax, %eax
// 384: 75 23                         jne     0x3a9 <_JIT_ENTRY+0x3a9>
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _JIT_CONTINUE
// 390: 48 89 df                      movq    %rbx, %rdi
// 393: 4c 89 f6                      movq    %r14, %rsi
// 396: 48 83 c4 18                   addq    $0x18, %rsp
// 39a: 5b                            popq    %rbx
// 39b: 41 5c                         popq    %r12
// 39d: 41 5d                         popq    %r13
// 39f: 41 5e                         popq    %r14
// 3a1: 41 5f                         popq    %r15
// 3a3: 5d                            popq    %rbp
// 3a4: ff e0                         jmpq    *%rax
// 3a6: 49 89 c6                      movq    %rax, %r14
// 3a9: 49 29 de                      subq    %rbx, %r14
// 3ac: 49 83 c6 b8                   addq    $-0x48, %r14
// 3b0: 49 c1 ee 03                   shrq    $0x3, %r14
// 3b4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3b8: 31 c0                         xorl    %eax, %eax
// 3ba: e9 15 fd ff ff                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 3bf: 4d 89 ee                      movq    %r13, %r14
// 3c2: eb e5                         jmp     0x3a9 <_JIT_ENTRY+0x3a9>
// 3c4: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_STR_1_code_body[965] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4a, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x4c, 0x89, 0xf5, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xa0, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa4, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x49, 0x89, 0xee, 0xe9, 0x7d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x3c, 0x09, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x0f, 0x85, 0x5e, 0xfe, 0xff, 0xff, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x65, 0x00, 0x0f, 0x85, 0x39, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x69, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x89, 0x45, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x15, 0xfd, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xeb, 0xe5};
static const Hole _CALL_BUILTIN_Oplus_CALL_STR_1_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x338, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x342, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x370, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_STR_1_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_STR_1_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_TUPLE_1
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_TUPLE_1.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 4a                         jle     0xe3 <_JIT_ENTRY+0xe3>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 7a                         jne     0x11d <_JIT_ENTRY+0x11d>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 75                         jmp     0x11f <_JIT_ENTRY+0x11f>
// aa: 4c 89 f5                      movq    %r14, %rbp
// ad: 48 29 dd                      subq    %rbx, %rbp
// b0: 48 83 c5 b8                   addq    $-0x48, %rbp
// b4: 48 c1 ed 03                   shrq    $0x3, %rbp
// b8: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// bb: 48 8b 03                      movq    (%rbx), %rax
// be: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c0:  R_X86_64_64  _JIT_TARGET
// c8: 89 c9                         movl    %ecx, %ecx
// ca: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ce: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d4: 48 83 c4 18                   addq    $0x18, %rsp
// d8: 5b                            popq    %rbx
// d9: 41 5c                         popq    %r12
// db: 41 5d                         popq    %r13
// dd: 41 5e                         popq    %r14
// df: 41 5f                         popq    %r15
// e1: 5d                            popq    %rbp
// e2: c3                            retq
// e3: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ea:  R_X86_64_64  .rodata.str1.1+0x39
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_CheckRecursiveCall
// fc: 48 89 d7                      movq    %rdx, %rdi
// ff: ff d0                         callq   *%rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 0f 85 a0 02 00 00             jne     0x3a9 <_JIT_ENTRY+0x3a9>
// 109: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10e: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 113: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 117: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11b: 74 86                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11d: 31 ff                         xorl    %edi, %edi
// 11f: 48 89 ee                      movq    %rbp, %rsi
// 122: 41 ff d0                      callq   *%r8
// 125: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 12a: ff 47 2c                      incl    0x2c(%rdi)
// 12d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 132: 48 8b 45 00                   movq    (%rbp), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 154: 48 89 ea                      movq    %rbp, %rdx
// 157: ff d0                         callq   *%rax
// 159: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 2b                         js      0x191 <_JIT_ENTRY+0x191>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 177: 48 ff 4d 00                   decq    (%rbp)
// 17b: 75 14                         jne     0x191 <_JIT_ENTRY+0x191>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_Dealloc
// 187: 48 89 ef                      movq    %rbp, %rdi
// 18a: ff d0                         callq   *%rax
// 18c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 191: 49 8b 04 24                   movq    (%r12), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7f 27                         jg      0x1c1 <_JIT_ENTRY+0x1c1>
// 19a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019c:  R_X86_64_64  .rodata.str1.1
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_NegativeRefcount
// 1ae: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b3: 4c 89 e2                      movq    %r12, %rdx
// 1b6: ff d0                         callq   *%rax
// 1b8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1bd: 49 8b 04 24                   movq    (%r12), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 2b                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d6: 49 ff 0c 24                   decq    (%r12)
// 1da: 75 14                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_Dealloc
// 1e6: 4c 89 e7                      movq    %r12, %rdi
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f0: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f9: 48 85 c9                      testq   %rcx, %rcx
// 1fc: 0f 84 a4 01 00 00             je      0x3a6 <_JIT_ENTRY+0x3a6>
// 202: 4b 8d 2c ee                   leaq    (%r14,%r13,8), %rbp
// 206: 48 89 08                      movq    %rcx, (%rax)
// 209: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 20d: 48 8b 00                      movq    (%rax), %rax
// 210: 84 c0                         testb   %al, %al
// 212: 74 18                         je      0x22c <_JIT_ENTRY+0x22c>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_HandlePending
// 21e: ff d0                         callq   *%rax
// 220: 85 c0                         testl   %eax, %eax
// 222: 74 08                         je      0x22c <_JIT_ENTRY+0x22c>
// 224: 49 89 ee                      movq    %rbp, %r14
// 227: e9 7d 01 00 00                jmp     0x3a9 <_JIT_ENTRY+0x3a9>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _JIT_OPARG
// 236: 0f b7 c0                      movzwl  %ax, %eax
// 239: 89 c1                         movl    %eax, %ecx
// 23b: f7 d1                         notl    %ecx
// 23d: 48 63 c9                      movslq  %ecx, %rcx
// 240: 4c 8d 3c 09                   leaq    (%rcx,%rcx), %r15
// 244: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 249: 0f 85 5e fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 24f: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 254: 29 c2                         subl    %eax, %edx
// 256: 48 63 c2                      movslq  %edx, %rax
// 259: 48 01 c8                      addq    %rcx, %rax
// 25c: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 260: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000262:  R_X86_64_64  PyTuple_Type
// 26a: 4d 39 65 00                   cmpq    %r12, (%r13)
// 26e: 0f 85 39 fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _JIT_OPARG
// 27e: 0f b7 c8                      movzwl  %ax, %ecx
// 281: f7 d0                         notl    %eax
// 283: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 288: 48 98                         cltq
// 28a: 48 29 c8                      subq    %rcx, %rax
// 28d: 49 8b 2c c6                   movq    (%r14,%rax,8), %rbp
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  PySequence_Tuple
// 29b: 48 89 ef                      movq    %rbp, %rdi
// 29e: ff d0                         callq   *%rax
// 2a0: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2a5: 48 8b 45 00                   movq    (%rbp), %rax
// 2a9: 48 85 c0                      testq   %rax, %rax
// 2ac: 7f 22                         jg      0x2d0 <_JIT_ENTRY+0x2d0>
// 2ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b0:  R_X86_64_64  .rodata.str1.1
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_NegativeRefcount
// 2c2: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// 2c7: 48 89 ea                      movq    %rbp, %rdx
// 2ca: ff d0                         callq   *%rax
// 2cc: 48 8b 45 00                   movq    (%rbp), %rax
// 2d0: 85 c0                         testl   %eax, %eax
// 2d2: 78 21                         js      0x2f5 <_JIT_ENTRY+0x2f5>
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2de: ff d0                         callq   *%rax
// 2e0: 48 ff 4d 00                   decq    (%rbp)
// 2e4: 75 0f                         jne     0x2f5 <_JIT_ENTRY+0x2f5>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_Dealloc
// 2f0: 48 89 ef                      movq    %rbp, %rdi
// 2f3: ff d0                         callq   *%rax
// 2f5: 49 8b 04 24                   movq    (%r12), %rax
// 2f9: 48 85 c0                      testq   %rax, %rax
// 2fc: 7f 22                         jg      0x320 <_JIT_ENTRY+0x320>
// 2fe: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000300:  R_X86_64_64  .rodata.str1.1
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _Py_NegativeRefcount
// 312: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 317: 4c 89 e2                      movq    %r12, %rdx
// 31a: ff d0                         callq   *%rax
// 31c: 49 8b 04 24                   movq    (%r12), %rax
// 320: 85 c0                         testl   %eax, %eax
// 322: 78 28                         js      0x34c <_JIT_ENTRY+0x34c>
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 32e: ff d0                         callq   *%rax
// 330: 49 ff 0c 24                   decq    (%r12)
// 334: 75 16                         jne     0x34c <_JIT_ENTRY+0x34c>
// 336: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000338:  R_X86_64_64  PyTuple_Type
// 340: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000342:  R_X86_64_64  _Py_Dealloc
// 34a: ff d0                         callq   *%rax
// 34c: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 351: 48 85 c0                      testq   %rax, %rax
// 354: 74 69                         je      0x3bf <_JIT_ENTRY+0x3bf>
// 356: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 35a: 49 89 45 00                   movq    %rax, (%r13)
// 35e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 363: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 367: 48 8b 00                      movq    (%rax), %rax
// 36a: 84 c0                         testb   %al, %al
// 36c: 74 18                         je      0x386 <_JIT_ENTRY+0x386>
// 36e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000370:  R_X86_64_64  _Py_HandlePending
// 378: 48 89 d7                      movq    %rdx, %rdi
// 37b: ff d0                         callq   *%rax
// 37d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 382: 85 c0                         testl   %eax, %eax
// 384: 75 23                         jne     0x3a9 <_JIT_ENTRY+0x3a9>
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _JIT_CONTINUE
// 390: 48 89 df                      movq    %rbx, %rdi
// 393: 4c 89 f6                      movq    %r14, %rsi
// 396: 48 83 c4 18                   addq    $0x18, %rsp
// 39a: 5b                            popq    %rbx
// 39b: 41 5c                         popq    %r12
// 39d: 41 5d                         popq    %r13
// 39f: 41 5e                         popq    %r14
// 3a1: 41 5f                         popq    %r15
// 3a3: 5d                            popq    %rbp
// 3a4: ff e0                         jmpq    *%rax
// 3a6: 49 89 c6                      movq    %rax, %r14
// 3a9: 49 29 de                      subq    %rbx, %r14
// 3ac: 49 83 c6 b8                   addq    $-0x48, %r14
// 3b0: 49 c1 ee 03                   shrq    $0x3, %r14
// 3b4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3b8: 31 c0                         xorl    %eax, %eax
// 3ba: e9 15 fd ff ff                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 3bf: 4d 89 ee                      movq    %r13, %r14
// 3c2: eb e5                         jmp     0x3a9 <_JIT_ENTRY+0x3a9>
// 3c4: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_TUPLE_1_code_body[965] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4a, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x4c, 0x89, 0xf5, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xa0, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa4, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x49, 0x89, 0xee, 0xe9, 0x7d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x3c, 0x09, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x0f, 0x85, 0x5e, 0xfe, 0xff, 0xff, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x65, 0x00, 0x0f, 0x85, 0x39, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x69, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x89, 0x45, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x15, 0xfd, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xeb, 0xe5};
static const Hole _CALL_BUILTIN_Oplus_CALL_TUPLE_1_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x338, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x342, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x370, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_TUPLE_1_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_TUPLE_1_data_holes[1];

// _CALL_BUILTIN_Oplus_CALL_TYPE_1
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CALL_TYPE_1.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 4b                         jle     0xe4 <_JIT_ENTRY+0xe4>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 7b                         jne     0x11e <_JIT_ENTRY+0x11e>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 76                         jmp     0x120 <_JIT_ENTRY+0x120>
// aa: 4d 89 f5                      movq    %r14, %r13
// ad: 49 29 dd                      subq    %rbx, %r13
// b0: 49 83 c5 b8                   addq    $-0x48, %r13
// b4: 49 c1 ed 03                   shrq    $0x3, %r13
// b8: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// bc: 48 8b 03                      movq    (%rbx), %rax
// bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c1:  R_X86_64_64  _JIT_TARGET
// c9: 89 c9                         movl    %ecx, %ecx
// cb: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cf: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d5: 48 83 c4 18                   addq    $0x18, %rsp
// d9: 5b                            popq    %rbx
// da: 41 5c                         popq    %r12
// dc: 41 5d                         popq    %r13
// de: 41 5e                         popq    %r14
// e0: 41 5f                         popq    %r15
// e2: 5d                            popq    %rbp
// e3: c3                            retq
// e4: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000eb:  R_X86_64_64  .rodata.str1.1+0x39
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_CheckRecursiveCall
// fd: 48 89 d7                      movq    %rdx, %rdi
// 100: ff d0                         callq   *%rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 0f 85 bc 01 00 00             jne     0x2c6 <_JIT_ENTRY+0x2c6>
// 10a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10f: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 114: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 118: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11c: 74 85                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11e: 31 ff                         xorl    %edi, %edi
// 120: 48 89 ee                      movq    %rbp, %rsi
// 123: 41 ff d0                      callq   *%r8
// 126: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 12b: ff 42 2c                      incl    0x2c(%rdx)
// 12e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 27                         jg      0x163 <_JIT_ENTRY+0x163>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 15f: 48 8b 45 00                   movq    (%rbp), %rax
// 163: 85 c0                         testl   %eax, %eax
// 165: 78 2b                         js      0x192 <_JIT_ENTRY+0x192>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 178: 48 ff 4d 00                   decq    (%rbp)
// 17c: 75 14                         jne     0x192 <_JIT_ENTRY+0x192>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_Dealloc
// 188: 48 89 ef                      movq    %rbp, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 192: 49 8b 04 24                   movq    (%r12), %rax
// 196: 48 85 c0                      testq   %rax, %rax
// 199: 7f 27                         jg      0x1c2 <_JIT_ENTRY+0x1c2>
// 19b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019d:  R_X86_64_64  .rodata.str1.1
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_NegativeRefcount
// 1af: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b4: 4c 89 e2                      movq    %r12, %rdx
// 1b7: ff d0                         callq   *%rax
// 1b9: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1be: 49 8b 04 24                   movq    (%r12), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 2b                         js      0x1f1 <_JIT_ENTRY+0x1f1>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1d7: 49 ff 0c 24                   decq    (%r12)
// 1db: 75 14                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_Dealloc
// 1e7: 4c 89 e7                      movq    %r12, %rdi
// 1ea: ff d0                         callq   *%rax
// 1ec: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1f1: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f5: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1fa: 48 85 c9                      testq   %rcx, %rcx
// 1fd: 0f 84 c0 00 00 00             je      0x2c3 <_JIT_ENTRY+0x2c3>
// 203: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 207: 48 89 08                      movq    %rcx, (%rax)
// 20a: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 20e: 48 8b 00                      movq    (%rax), %rax
// 211: 84 c0                         testb   %al, %al
// 213: 74 20                         je      0x235 <_JIT_ENTRY+0x235>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_HandlePending
// 21f: 48 89 d7                      movq    %rdx, %rdi
// 222: ff d0                         callq   *%rax
// 224: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 229: 85 c0                         testl   %eax, %eax
// 22b: 74 08                         je      0x235 <_JIT_ENTRY+0x235>
// 22d: 4d 89 ee                      movq    %r13, %r14
// 230: e9 91 00 00 00                jmp     0x2c6 <_JIT_ENTRY+0x2c6>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_OPARG
// 23f: f7 d0                         notl    %eax
// 241: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 246: 4c 63 f8                      movslq  %eax, %r15
// 249: 4d 01 ff                      addq    %r15, %r15
// 24c: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 251: 0f 85 56 fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _JIT_OPARG
// 261: 0f b7 c0                      movzwl  %ax, %eax
// 264: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 269: 29 c1                         subl    %eax, %ecx
// 26b: 48 63 c9                      movslq  %ecx, %rcx
// 26e: f7 d0                         notl    %eax
// 270: 48 98                         cltq
// 272: 48 01 c8                      addq    %rcx, %rax
// 275: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000277:  R_X86_64_64  PyType_Type
// 27f: 4d 39 24 c6                   cmpq    %r12, (%r14,%rax,8)
// 283: 0f 85 24 fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _JIT_OPARG
// 293: 0f b7 c8                      movzwl  %ax, %ecx
// 296: f7 d0                         notl    %eax
// 298: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 29d: 48 98                         cltq
// 29f: 48 29 c8                      subq    %rcx, %rax
// 2a2: 4d 8b 2c c6                   movq    (%r14,%rax,8), %r13
// 2a6: 49 8b 6d 08                   movq    0x8(%r13), %rbp
// 2aa: 8b 45 00                      movl    (%rbp), %eax
// 2ad: ff c0                         incl    %eax
// 2af: 75 2b                         jne     0x2dc <_JIT_ENTRY+0x2dc>
// 2b1: 49 8b 45 00                   movq    (%r13), %rax
// 2b5: 48 85 c0                      testq   %rax, %rax
// 2b8: 7e 3f                         jle     0x2f9 <_JIT_ENTRY+0x2f9>
// 2ba: 85 c0                         testl   %eax, %eax
// 2bc: 79 66                         jns     0x324 <_JIT_ENTRY+0x324>
// 2be: e9 8c 00 00 00                jmp     0x34f <_JIT_ENTRY+0x34f>
// 2c3: 49 89 c6                      movq    %rax, %r14
// 2c6: 49 29 de                      subq    %rbx, %r14
// 2c9: 49 83 c6 b8                   addq    $-0x48, %r14
// 2cd: 49 c1 ee 03                   shrq    $0x3, %r14
// 2d1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2d5: 31 c0                         xorl    %eax, %eax
// 2d7: e9 f9 fd ff ff                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 2dc: 89 45 00                      movl    %eax, (%rbp)
// 2df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2e9: ff d0                         callq   *%rax
// 2eb: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2f0: 49 8b 45 00                   movq    (%r13), %rax
// 2f4: 48 85 c0                      testq   %rax, %rax
// 2f7: 7f c1                         jg      0x2ba <_JIT_ENTRY+0x2ba>
// 2f9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002fb:  R_X86_64_64  .rodata.str1.1
// 303: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000305:  R_X86_64_64  _Py_NegativeRefcount
// 30d: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 312: 4c 89 ea                      movq    %r13, %rdx
// 315: ff d0                         callq   *%rax
// 317: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 31c: 49 8b 45 00                   movq    (%r13), %rax
// 320: 85 c0                         testl   %eax, %eax
// 322: 78 2b                         js      0x34f <_JIT_ENTRY+0x34f>
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 32e: ff d0                         callq   *%rax
// 330: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 335: 49 ff 4d 00                   decq    (%r13)
// 339: 75 14                         jne     0x34f <_JIT_ENTRY+0x34f>
// 33b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033d:  R_X86_64_64  _Py_Dealloc
// 345: 4c 89 ef                      movq    %r13, %rdi
// 348: ff d0                         callq   *%rax
// 34a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 34f: 49 8b 04 24                   movq    (%r12), %rax
// 353: 48 85 c0                      testq   %rax, %rax
// 356: 7f 27                         jg      0x37f <_JIT_ENTRY+0x37f>
// 358: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035a:  R_X86_64_64  .rodata.str1.1
// 362: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000364:  R_X86_64_64  _Py_NegativeRefcount
// 36c: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 371: 4c 89 e2                      movq    %r12, %rdx
// 374: ff d0                         callq   *%rax
// 376: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 37b: 49 8b 04 24                   movq    (%r12), %rax
// 37f: 4f 8d 2c fe                   leaq    (%r14,%r15,8), %r13
// 383: 85 c0                         testl   %eax, %eax
// 385: 78 32                         js      0x3b9 <_JIT_ENTRY+0x3b9>
// 387: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000389:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 391: ff d0                         callq   *%rax
// 393: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 398: 49 ff 0c 24                   decq    (%r12)
// 39c: 75 1b                         jne     0x3b9 <_JIT_ENTRY+0x3b9>
// 39e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003a0:  R_X86_64_64  PyType_Type
// 3a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003aa:  R_X86_64_64  _Py_Dealloc
// 3b2: ff d0                         callq   *%rax
// 3b4: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bb:  R_X86_64_64  _JIT_OPARG
// 3c3: 0f b7 c0                      movzwl  %ax, %eax
// 3c6: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 3cb: 29 c1                         subl    %eax, %ecx
// 3cd: 48 63 c9                      movslq  %ecx, %rcx
// 3d0: f7 d0                         notl    %eax
// 3d2: 48 98                         cltq
// 3d4: 48 01 c8                      addq    %rcx, %rax
// 3d7: 49 89 2c c6                   movq    %rbp, (%r14,%rax,8)
// 3db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003dd:  R_X86_64_64  _JIT_CONTINUE
// 3e5: 48 89 df                      movq    %rbx, %rdi
// 3e8: 4c 89 ee                      movq    %r13, %rsi
// 3eb: 48 83 c4 18                   addq    $0x18, %rsp
// 3ef: 5b                            popq    %rbx
// 3f0: 41 5c                         popq    %r12
// 3f2: 41 5d                         popq    %r13
// 3f4: 41 5e                         popq    %r14
// 3f6: 41 5f                         popq    %r15
// 3f8: 5d                            popq    %rbp
// 3f9: ff e0                         jmpq    *%rax
// 3fb: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_TYPE_1_code_body[1020] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4b, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7b, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x76, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xbc, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x85, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xee, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4d, 0x01, 0xff, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x0f, 0x85, 0x56, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x24, 0xc6, 0x0f, 0x85, 0x24, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x4d, 0x8b, 0x2c, 0xc6, 0x49, 0x8b, 0x6d, 0x08, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x2b, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x3f, 0x85, 0xc0, 0x79, 0x66, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xf9, 0xfd, 0xff, 0xff, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xc1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xfe, 0x85, 0xc0, 0x78, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x1b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_CALL_TYPE_1_code_holes[31] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x389, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x3aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3bb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CALL_TYPE_1_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CALL_TYPE_1_data_holes[1];

// _CALL_BUILTIN_Oplus_CHECK_ATTR_CLASS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CHECK_ATTR_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 1d 02 00 00             jne     0x27b <_JIT_ENTRY+0x27b>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 fa 01 00 00             jne     0x27b <_JIT_ENTRY+0x27b>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 eb 01 00 00             jne     0x27b <_JIT_ENTRY+0x27b>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 2a 01 00 00             jne     0x20b <_JIT_ENTRY+0x20b>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 26                         js      0x179 <_JIT_ENTRY+0x179>
// 153: 41 ff d7                      callq   *%r15
// 156: 48 8b 14 24                   movq    (%rsp), %rdx
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 48 8b 14 24                   movq    (%rsp), %rdx
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 20                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ac: 41 ff d7                      callq   *%r15
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 13                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 2e                         je      0x208 <_JIT_ENTRY+0x208>
// 1da: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1de: 48 89 08                      movq    %rcx, (%rax)
// 1e1: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1e5: 48 8b 00                      movq    (%rax), %rax
// 1e8: 84 c0                         testb   %al, %al
// 1ea: 74 35                         je      0x221 <_JIT_ENTRY+0x221>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_HandlePending
// 1f6: 48 89 d7                      movq    %rdx, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 74 1e                         je      0x221 <_JIT_ENTRY+0x221>
// 203: 4d 89 e6                      movq    %r12, %r14
// 206: eb 03                         jmp     0x20b <_JIT_ENTRY+0x20b>
// 208: 49 89 c6                      movq    %rax, %r14
// 20b: 49 29 de                      subq    %rbx, %r14
// 20e: 49 83 c6 b8                   addq    $-0x48, %r14
// 212: 49 c1 ee 03                   shrq    $0x3, %r14
// 216: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21a: 31 c0                         xorl    %eax, %eax
// 21c: e9 82 00 00 00                jmp     0x2a3 <_JIT_ENTRY+0x2a3>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _JIT_OPARG
// 22b: f7 d0                         notl    %eax
// 22d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 232: 48 98                         cltq
// 234: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 239: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 23d: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 244: 74 32                         je      0x278 <_JIT_ENTRY+0x278>
// 246: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000248:  R_X86_64_64  _JIT_OPERAND
// 250: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 256: 75 20                         jne     0x278 <_JIT_ENTRY+0x278>
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _JIT_CONTINUE
// 262: 48 89 df                      movq    %rbx, %rdi
// 265: 4c 89 e6                      movq    %r12, %rsi
// 268: 48 83 c4 18                   addq    $0x18, %rsp
// 26c: 5b                            popq    %rbx
// 26d: 41 5c                         popq    %r12
// 26f: 41 5d                         popq    %r13
// 271: 41 5e                         popq    %r14
// 273: 41 5f                         popq    %r15
// 275: 5d                            popq    %rbp
// 276: ff e0                         jmpq    *%rax
// 278: 4d 89 e6                      movq    %r12, %r14
// 27b: 49 29 de                      subq    %rbx, %r14
// 27e: 49 83 c6 b8                   addq    $-0x48, %r14
// 282: 49 c1 ee 03                   shrq    $0x3, %r14
// 286: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 28a: 48 8b 03                      movq    (%rbx), %rax
// 28d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028f:  R_X86_64_64  _JIT_TARGET
// 297: 89 c9                         movl    %ecx, %ecx
// 299: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 29d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2a3: 48 83 c4 18                   addq    $0x18, %rsp
// 2a7: 5b                            popq    %rbx
// 2a8: 41 5c                         popq    %r12
// 2aa: 41 5d                         popq    %r13
// 2ac: 41 5e                         popq    %r14
// 2ae: 41 5f                         popq    %r15
// 2b0: 5d                            popq    %rbp
// 2b1: c3                            retq
// 2b2: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_ATTR_CLASS_code_body[691] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x1d, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xfa, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xeb, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x32, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_CHECK_ATTR_CLASS_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_ATTR_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CHECK_ATTR_CLASS_data_holes[1];

// _CALL_BUILTIN_Oplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CHECK_ATTR_METHOD_LAZY_DICT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 ed 01 00 00             jne     0x24b <_JIT_ENTRY+0x24b>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 ca 01 00 00             jne     0x24b <_JIT_ENTRY+0x24b>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 bb 01 00 00             jne     0x24b <_JIT_ENTRY+0x24b>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 2a 01 00 00             jne     0x20b <_JIT_ENTRY+0x20b>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 26                         js      0x179 <_JIT_ENTRY+0x179>
// 153: 41 ff d7                      callq   *%r15
// 156: 48 8b 14 24                   movq    (%rsp), %rdx
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 48 8b 14 24                   movq    (%rsp), %rdx
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 20                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ac: 41 ff d7                      callq   *%r15
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 13                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 2e                         je      0x208 <_JIT_ENTRY+0x208>
// 1da: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1de: 48 89 08                      movq    %rcx, (%rax)
// 1e1: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1e5: 48 8b 00                      movq    (%rax), %rax
// 1e8: 84 c0                         testb   %al, %al
// 1ea: 74 32                         je      0x21e <_JIT_ENTRY+0x21e>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_HandlePending
// 1f6: 48 89 d7                      movq    %rdx, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 74 1b                         je      0x21e <_JIT_ENTRY+0x21e>
// 203: 4d 89 e6                      movq    %r12, %r14
// 206: eb 03                         jmp     0x20b <_JIT_ENTRY+0x20b>
// 208: 49 89 c6                      movq    %rax, %r14
// 20b: 49 29 de                      subq    %rbx, %r14
// 20e: 49 83 c6 b8                   addq    $-0x48, %r14
// 212: 49 c1 ee 03                   shrq    $0x3, %r14
// 216: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21a: 31 c0                         xorl    %eax, %eax
// 21c: eb 55                         jmp     0x273 <_JIT_ENTRY+0x273>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_OPARG
// 228: f7 d0                         notl    %eax
// 22a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22f: 48 98                         cltq
// 231: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 236: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 23a: 48 8b 89 20 01 00 00          movq    0x120(%rcx), %rcx
// 241: 48 83 3c 08 00                cmpq    $0x0, (%rax,%rcx)
// 246: 74 3a                         je      0x282 <_JIT_ENTRY+0x282>
// 248: 4d 89 e6                      movq    %r12, %r14
// 24b: 49 29 de                      subq    %rbx, %r14
// 24e: 49 83 c6 b8                   addq    $-0x48, %r14
// 252: 49 c1 ee 03                   shrq    $0x3, %r14
// 256: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 25a: 48 8b 03                      movq    (%rbx), %rax
// 25d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025f:  R_X86_64_64  _JIT_TARGET
// 267: 89 c9                         movl    %ecx, %ecx
// 269: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 26d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 273: 48 83 c4 18                   addq    $0x18, %rsp
// 277: 5b                            popq    %rbx
// 278: 41 5c                         popq    %r12
// 27a: 41 5d                         popq    %r13
// 27c: 41 5e                         popq    %r14
// 27e: 41 5f                         popq    %r15
// 280: 5d                            popq    %rbp
// 281: c3                            retq
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_CONTINUE
// 28c: 48 89 df                      movq    %rbx, %rdi
// 28f: 4c 89 e6                      movq    %r12, %rsi
// 292: 48 83 c4 18                   addq    $0x18, %rsp
// 296: 5b                            popq    %rbx
// 297: 41 5c                         popq    %r12
// 299: 41 5d                         popq    %r13
// 29b: 41 5e                         popq    %r14
// 29d: 41 5f                         popq    %r15
// 29f: 5d                            popq    %rbp
// 2a0: ff e0                         jmpq    *%rax
// 2a2: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[675] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xed, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xca, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xbb, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x55, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x08, 0x00, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _CALL_BUILTIN_Oplus_CHECK_ATTR_MODULE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CHECK_ATTR_MODULE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 25 02 00 00             jne     0x283 <_JIT_ENTRY+0x283>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 02 02 00 00             jne     0x283 <_JIT_ENTRY+0x283>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 f3 01 00 00             jne     0x283 <_JIT_ENTRY+0x283>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 2a 01 00 00             jne     0x20b <_JIT_ENTRY+0x20b>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 26                         js      0x179 <_JIT_ENTRY+0x179>
// 153: 41 ff d7                      callq   *%r15
// 156: 48 8b 14 24                   movq    (%rsp), %rdx
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 48 8b 14 24                   movq    (%rsp), %rdx
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 20                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ac: 41 ff d7                      callq   *%r15
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 13                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 2e                         je      0x208 <_JIT_ENTRY+0x208>
// 1da: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1de: 48 89 08                      movq    %rcx, (%rax)
// 1e1: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1e5: 48 8b 00                      movq    (%rax), %rax
// 1e8: 84 c0                         testb   %al, %al
// 1ea: 74 35                         je      0x221 <_JIT_ENTRY+0x221>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_HandlePending
// 1f6: 48 89 d7                      movq    %rdx, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 74 1e                         je      0x221 <_JIT_ENTRY+0x221>
// 203: 4d 89 e6                      movq    %r12, %r14
// 206: eb 03                         jmp     0x20b <_JIT_ENTRY+0x20b>
// 208: 49 89 c6                      movq    %rax, %r14
// 20b: 49 29 de                      subq    %rbx, %r14
// 20e: 49 83 c6 b8                   addq    $-0x48, %r14
// 212: 49 c1 ee 03                   shrq    $0x3, %r14
// 216: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21a: 31 c0                         xorl    %eax, %eax
// 21c: e9 8a 00 00 00                jmp     0x2ab <_JIT_ENTRY+0x2ab>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _JIT_OPARG
// 22b: f7 d0                         notl    %eax
// 22d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 232: 48 98                         cltq
// 234: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 239: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023b:  R_X86_64_64  PyModule_Type
// 243: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 247: 75 37                         jne     0x280 <_JIT_ENTRY+0x280>
// 249: 48 8b 40 10                   movq    0x10(%rax), %rax
// 24d: 48 8b 40 20                   movq    0x20(%rax), %rax
// 251: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000253:  R_X86_64_64  _JIT_OPERAND
// 25b: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 25e: 75 20                         jne     0x280 <_JIT_ENTRY+0x280>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _JIT_CONTINUE
// 26a: 48 89 df                      movq    %rbx, %rdi
// 26d: 4c 89 e6                      movq    %r12, %rsi
// 270: 48 83 c4 18                   addq    $0x18, %rsp
// 274: 5b                            popq    %rbx
// 275: 41 5c                         popq    %r12
// 277: 41 5d                         popq    %r13
// 279: 41 5e                         popq    %r14
// 27b: 41 5f                         popq    %r15
// 27d: 5d                            popq    %rbp
// 27e: ff e0                         jmpq    *%rax
// 280: 4d 89 e6                      movq    %r12, %r14
// 283: 49 29 de                      subq    %rbx, %r14
// 286: 49 83 c6 b8                   addq    $-0x48, %r14
// 28a: 49 c1 ee 03                   shrq    $0x3, %r14
// 28e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 292: 48 8b 03                      movq    (%rbx), %rax
// 295: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000297:  R_X86_64_64  _JIT_TARGET
// 29f: 89 c9                         movl    %ecx, %ecx
// 2a1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2a5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2ab: 48 83 c4 18                   addq    $0x18, %rsp
// 2af: 5b                            popq    %rbx
// 2b0: 41 5c                         popq    %r12
// 2b2: 41 5d                         popq    %r13
// 2b4: 41 5e                         popq    %r14
// 2b6: 41 5f                         popq    %r15
// 2b8: 5d                            popq    %rbp
// 2b9: c3                            retq
// 2ba: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_ATTR_MODULE_code_body[699] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x25, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x02, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xf3, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x37, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_CHECK_ATTR_MODULE_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_ATTR_MODULE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CHECK_ATTR_MODULE_data_holes[1];

// _CALL_BUILTIN_Oplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CHECK_ATTR_WITH_HINT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 10 02 00 00             jne     0x26e <_JIT_ENTRY+0x26e>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 ed 01 00 00             jne     0x26e <_JIT_ENTRY+0x26e>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 de 01 00 00             jne     0x26e <_JIT_ENTRY+0x26e>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 32 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 2e                         je      0x210 <_JIT_ENTRY+0x210>
// 1e2: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 32                         je      0x226 <_JIT_ENTRY+0x226>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 1b                         je      0x226 <_JIT_ENTRY+0x226>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: eb 03                         jmp     0x213 <_JIT_ENTRY+0x213>
// 210: 49 89 c6                      movq    %rax, %r14
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: eb 70                         jmp     0x296 <_JIT_ENTRY+0x296>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: f7 d0                         notl    %eax
// 232: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 237: 48 98                         cltq
// 239: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 23e: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// 242: a8 01                         testb   $0x1, %al
// 244: 75 25                         jne     0x26b <_JIT_ENTRY+0x26b>
// 246: 48 85 c0                      testq   %rax, %rax
// 249: 74 20                         je      0x26b <_JIT_ENTRY+0x26b>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _JIT_CONTINUE
// 255: 48 89 df                      movq    %rbx, %rdi
// 258: 4c 89 e6                      movq    %r12, %rsi
// 25b: 48 83 c4 18                   addq    $0x18, %rsp
// 25f: 5b                            popq    %rbx
// 260: 41 5c                         popq    %r12
// 262: 41 5d                         popq    %r13
// 264: 41 5e                         popq    %r14
// 266: 41 5f                         popq    %r15
// 268: 5d                            popq    %rbp
// 269: ff e0                         jmpq    *%rax
// 26b: 4d 89 e6                      movq    %r12, %r14
// 26e: 49 29 de                      subq    %rbx, %r14
// 271: 49 83 c6 b8                   addq    $-0x48, %r14
// 275: 49 c1 ee 03                   shrq    $0x3, %r14
// 279: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 27d: 48 8b 03                      movq    (%rbx), %rax
// 280: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000282:  R_X86_64_64  _JIT_TARGET
// 28a: 89 c9                         movl    %ecx, %ecx
// 28c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 290: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 296: 48 83 c4 18                   addq    $0x18, %rsp
// 29a: 5b                            popq    %rbx
// 29b: 41 5c                         popq    %r12
// 29d: 41 5d                         popq    %r13
// 29f: 41 5e                         popq    %r14
// 2a1: 41 5f                         popq    %r15
// 2a3: 5d                            popq    %rbp
// 2a4: c3                            retq
// 2a5: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_ATTR_WITH_HINT_code_body[678] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x10, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xed, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xde, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x75, 0x25, 0x48, 0x85, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_CHECK_ATTR_WITH_HINT_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_ATTR_WITH_HINT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _CALL_BUILTIN_Oplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 1a 02 00 00             jne     0x278 <_JIT_ENTRY+0x278>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 f7 01 00 00             jne     0x278 <_JIT_ENTRY+0x278>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 e8 01 00 00             jne     0x278 <_JIT_ENTRY+0x278>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 32 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 2e                         je      0x210 <_JIT_ENTRY+0x210>
// 1e2: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 32                         je      0x226 <_JIT_ENTRY+0x226>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 1b                         je      0x226 <_JIT_ENTRY+0x226>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: eb 03                         jmp     0x213 <_JIT_ENTRY+0x213>
// 210: 49 89 c6                      movq    %rax, %r14
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: eb 7a                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: f7 d0                         notl    %eax
// 232: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 237: 48 98                         cltq
// 239: 48 01 c0                      addq    %rax, %rax
// 23c: 49 83 3c c6 00                cmpq    $0x0, (%r14,%rax,8)
// 241: 75 32                         jne     0x275 <_JIT_ENTRY+0x275>
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_OPARG
// 24d: 0f b7 c0                      movzwl  %ax, %eax
// 250: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 255: 29 c1                         subl    %eax, %ecx
// 257: 48 63 c9                      movslq  %ecx, %rcx
// 25a: f7 d0                         notl    %eax
// 25c: 48 98                         cltq
// 25e: 48 01 c8                      addq    %rcx, %rax
// 261: 49 8b 04 c6                   movq    (%r14,%rax,8), %rax
// 265: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000267:  R_X86_64_64  PyMethod_Type
// 26f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 273: 74 3a                         je      0x2af <_JIT_ENTRY+0x2af>
// 275: 4d 89 e6                      movq    %r12, %r14
// 278: 49 29 de                      subq    %rbx, %r14
// 27b: 49 83 c6 b8                   addq    $-0x48, %r14
// 27f: 49 c1 ee 03                   shrq    $0x3, %r14
// 283: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 287: 48 8b 03                      movq    (%rbx), %rax
// 28a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028c:  R_X86_64_64  _JIT_TARGET
// 294: 89 c9                         movl    %ecx, %ecx
// 296: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 29a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2a0: 48 83 c4 18                   addq    $0x18, %rsp
// 2a4: 5b                            popq    %rbx
// 2a5: 41 5c                         popq    %r12
// 2a7: 41 5d                         popq    %r13
// 2a9: 41 5e                         popq    %r14
// 2ab: 41 5f                         popq    %r15
// 2ad: 5d                            popq    %rbp
// 2ae: c3                            retq
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _JIT_CONTINUE
// 2b9: 48 89 df                      movq    %rbx, %rdi
// 2bc: 4c 89 e6                      movq    %r12, %rsi
// 2bf: 48 83 c4 18                   addq    $0x18, %rsp
// 2c3: 5b                            popq    %rbx
// 2c4: 41 5c                         popq    %r12
// 2c6: 41 5d                         popq    %r13
// 2c8: 41 5e                         popq    %r14
// 2ca: 41 5f                         popq    %r15
// 2cc: 5d                            popq    %rbp
// 2cd: ff e0                         jmpq    *%rax
// 2cf: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[720] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x1a, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf7, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xe8, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x7a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc0, 0x49, 0x83, 0x3c, 0xc6, 0x00, 0x75, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8b, 0x04, 0xc6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _CALL_BUILTIN_Oplus_CHECK_EG_MATCH
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CHECK_EG_MATCH.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 48 63 ee                      movslq  %esi, %rbp
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 e9                   movzwl  %cx, %r13d
// 3f: 4c 89 e9                      movq    %r13, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d5                      notq    %r13
// 50: 4c 0f 44 e9                   cmoveq  %rcx, %r13
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 51                         jne     0xab <_JIT_ENTRY+0xab>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 4c 63 f9                      movslq  %ecx, %r15
// 64: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 32                         jne     0xab <_JIT_ENTRY+0xab>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 27                         jne     0xab <_JIT_ENTRY+0xab>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 48                         jle     0xe2 <_JIT_ENTRY+0xe2>
// 9a: 4f 8b 2c ee                   movq    (%r14,%r13,8), %r13
// 9e: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a2: 75 78                         jne     0x11c <_JIT_ENTRY+0x11c>
// a4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a9: eb 73                         jmp     0x11e <_JIT_ENTRY+0x11e>
// ab: 49 29 de                      subq    %rbx, %r14
// ae: 49 83 c6 b8                   addq    $-0x48, %r14
// b2: 49 c1 ee 03                   shrq    $0x3, %r14
// b6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// ba: 48 8b 03                      movq    (%rbx), %rax
// bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bf:  R_X86_64_64  _JIT_TARGET
// c7: 89 c9                         movl    %ecx, %ecx
// c9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cd: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d3: 48 83 c4 28                   addq    $0x28, %rsp
// d7: 5b                            popq    %rbx
// d8: 41 5c                         popq    %r12
// da: 41 5d                         popq    %r13
// dc: 41 5e                         popq    %r14
// de: 41 5f                         popq    %r15
// e0: 5d                            popq    %rbp
// e1: c3                            retq
// e2: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1+0x39
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_CheckRecursiveCall
// fb: 48 89 d7                      movq    %rdx, %rdi
// fe: ff d0                         callq   *%rax
// 100: 85 c0                         testl   %eax, %eax
// 102: 0f 85 61 03 00 00             jne     0x469 <_JIT_ENTRY+0x469>
// 108: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10d: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 112: 4f 8b 2c ee                   movq    (%r14,%r13,8), %r13
// 116: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11a: 74 88                         je      0xa4 <_JIT_ENTRY+0xa4>
// 11c: 31 ff                         xorl    %edi, %edi
// 11e: 4c 89 ee                      movq    %r13, %rsi
// 121: 41 ff d0                      callq   *%r8
// 124: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 129: ff 47 2c                      incl    0x2c(%rdi)
// 12c: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 27                         jg      0x161 <_JIT_ENTRY+0x161>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 153: 4c 89 ea                      movq    %r13, %rdx
// 156: ff d0                         callq   *%rax
// 158: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 15d: 49 8b 45 00                   movq    (%r13), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 2b                         js      0x190 <_JIT_ENTRY+0x190>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 176: 49 ff 4d 00                   decq    (%r13)
// 17a: 75 14                         jne     0x190 <_JIT_ENTRY+0x190>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: 4c 89 ef                      movq    %r13, %rdi
// 189: ff d0                         callq   *%rax
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: 49 8b 04 24                   movq    (%r12), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7f 27                         jg      0x1c0 <_JIT_ENTRY+0x1c0>
// 199: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019b:  R_X86_64_64  .rodata.str1.1
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_NegativeRefcount
// 1ad: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b2: 4c 89 e2                      movq    %r12, %rdx
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1bc: 49 8b 04 24                   movq    (%r12), %rax
// 1c0: 85 c0                         testl   %eax, %eax
// 1c2: 78 2b                         js      0x1ef <_JIT_ENTRY+0x1ef>
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d5: 49 ff 0c 24                   decq    (%r12)
// 1d9: 75 14                         jne     0x1ef <_JIT_ENTRY+0x1ef>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: 4c 89 e7                      movq    %r12, %rdi
// 1e8: ff d0                         callq   *%rax
// 1ea: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ef: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f3: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f8: 48 85 c9                      testq   %rcx, %rcx
// 1fb: 0f 84 b8 01 00 00             je      0x3b9 <_JIT_ENTRY+0x3b9>
// 201: 4d 8d 3c ee                   leaq    (%r14,%rbp,8), %r15
// 205: 48 89 08                      movq    %rcx, (%rax)
// 208: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 20c: 48 8b 00                      movq    (%rax), %rax
// 20f: 84 c0                         testb   %al, %al
// 211: 74 1d                         je      0x230 <_JIT_ENTRY+0x230>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_HandlePending
// 21d: ff d0                         callq   *%rax
// 21f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 224: 85 c0                         testl   %eax, %eax
// 226: 74 08                         je      0x230 <_JIT_ENTRY+0x230>
// 228: 4d 89 fe                      movq    %r15, %r14
// 22b: e9 39 02 00 00                jmp     0x469 <_JIT_ENTRY+0x469>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _JIT_OPARG
// 23a: f7 d0                         notl    %eax
// 23c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 241: 4c 63 e8                      movslq  %eax, %r13
// 244: 4b 8b 6c ee f0                movq    -0x10(%r14,%r13,8), %rbp
// 249: 4f 8b 64 ee f8                movq    -0x8(%r14,%r13,8), %r12
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 258: 4c 89 e6                      movq    %r12, %rsi
// 25b: ff d0                         callq   *%rax
// 25d: 85 c0                         testl   %eax, %eax
// 25f: 0f 88 5c 01 00 00             js      0x3c1 <_JIT_ENTRY+0x3c1>
// 265: 48 c7 44 24 18 00 00 00 00    movq    $0x0, 0x18(%rsp)
// 26e: 48 c7 44 24 20 00 00 00 00    movq    $0x0, 0x20(%rsp)
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 281: 48 8d 54 24 18                leaq    0x18(%rsp), %rdx
// 286: 48 8d 4c 24 20                leaq    0x20(%rsp), %rcx
// 28b: 48 89 ef                      movq    %rbp, %rdi
// 28e: 4c 89 e6                      movq    %r12, %rsi
// 291: ff d0                         callq   *%rax
// 293: 89 44 24 10                   movl    %eax, 0x10(%rsp)
// 297: 48 8b 45 00                   movq    (%rbp), %rax
// 29b: 48 85 c0                      testq   %rax, %rax
// 29e: 7f 22                         jg      0x2c2 <_JIT_ENTRY+0x2c2>
// 2a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a2:  R_X86_64_64  .rodata.str1.1
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_NegativeRefcount
// 2b4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 2b9: 48 89 ea                      movq    %rbp, %rdx
// 2bc: ff d0                         callq   *%rax
// 2be: 48 8b 45 00                   movq    (%rbp), %rax
// 2c2: 85 c0                         testl   %eax, %eax
// 2c4: 78 21                         js      0x2e7 <_JIT_ENTRY+0x2e7>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d0: ff d0                         callq   *%rax
// 2d2: 48 ff 4d 00                   decq    (%rbp)
// 2d6: 75 0f                         jne     0x2e7 <_JIT_ENTRY+0x2e7>
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _Py_Dealloc
// 2e2: 48 89 ef                      movq    %rbp, %rdi
// 2e5: ff d0                         callq   *%rax
// 2e7: 49 8b 04 24                   movq    (%r12), %rax
// 2eb: 48 85 c0                      testq   %rax, %rax
// 2ee: 7f 22                         jg      0x312 <_JIT_ENTRY+0x312>
// 2f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f2:  R_X86_64_64  .rodata.str1.1
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _Py_NegativeRefcount
// 304: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 309: 4c 89 e2                      movq    %r12, %rdx
// 30c: ff d0                         callq   *%rax
// 30e: 49 8b 04 24                   movq    (%r12), %rax
// 312: 85 c0                         testl   %eax, %eax
// 314: 78 21                         js      0x337 <_JIT_ENTRY+0x337>
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 320: ff d0                         callq   *%rax
// 322: 49 ff 0c 24                   decq    (%r12)
// 326: 75 0f                         jne     0x337 <_JIT_ENTRY+0x337>
// 328: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032a:  R_X86_64_64  _Py_Dealloc
// 332: 4c 89 e7                      movq    %r12, %rdi
// 335: ff d0                         callq   *%rax
// 337: 83 7c 24 10 00                cmpl    $0x0, 0x10(%rsp)
// 33c: 0f 88 1f 01 00 00             js      0x461 <_JIT_ENTRY+0x461>
// 342: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 347: 48 85 ff                      testq   %rdi, %rdi
// 34a: 0f 84 11 01 00 00             je      0x461 <_JIT_ENTRY+0x461>
// 350: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000352:  R_X86_64_64  _Py_NoneStruct
// 35a: 48 39 c7                      cmpq    %rax, %rdi
// 35d: 74 11                         je      0x370 <_JIT_ENTRY+0x370>
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  PyErr_SetHandledException
// 369: ff d0                         callq   *%rax
// 36b: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 370: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 375: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000377:  R_X86_64_64  _JIT_OPARG
// 37f: f7 d2                         notl    %edx
// 381: 81 ca 00 00 ff ff             orl     $0xffff0000, %edx       # imm = 0xFFFF0000
// 387: 48 63 d2                      movslq  %edx, %rdx
// 38a: 49 89 4c d6 f0                movq    %rcx, -0x10(%r14,%rdx,8)
// 38f: 49 89 44 d6 f8                movq    %rax, -0x8(%r14,%rdx,8)
// 394: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000396:  R_X86_64_64  _JIT_CONTINUE
// 39e: 48 89 df                      movq    %rbx, %rdi
// 3a1: 4c 89 fe                      movq    %r15, %rsi
// 3a4: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3a9: 48 83 c4 28                   addq    $0x28, %rsp
// 3ad: 5b                            popq    %rbx
// 3ae: 41 5c                         popq    %r12
// 3b0: 41 5d                         popq    %r13
// 3b2: 41 5e                         popq    %r14
// 3b4: 41 5f                         popq    %r15
// 3b6: 5d                            popq    %rbp
// 3b7: ff e0                         jmpq    *%rax
// 3b9: 49 89 c6                      movq    %rax, %r14
// 3bc: e9 a8 00 00 00                jmp     0x469 <_JIT_ENTRY+0x469>
// 3c1: 48 8b 45 00                   movq    (%rbp), %rax
// 3c5: 48 85 c0                      testq   %rax, %rax
// 3c8: 7f 22                         jg      0x3ec <_JIT_ENTRY+0x3ec>
// 3ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003cc:  R_X86_64_64  .rodata.str1.1
// 3d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d6:  R_X86_64_64  _Py_NegativeRefcount
// 3de: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 3e3: 48 89 ea                      movq    %rbp, %rdx
// 3e6: ff d0                         callq   *%rax
// 3e8: 48 8b 45 00                   movq    (%rbp), %rax
// 3ec: 85 c0                         testl   %eax, %eax
// 3ee: 78 21                         js      0x411 <_JIT_ENTRY+0x411>
// 3f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3fa: ff d0                         callq   *%rax
// 3fc: 48 ff 4d 00                   decq    (%rbp)
// 400: 75 0f                         jne     0x411 <_JIT_ENTRY+0x411>
// 402: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000404:  R_X86_64_64  _Py_Dealloc
// 40c: 48 89 ef                      movq    %rbp, %rdi
// 40f: ff d0                         callq   *%rax
// 411: 49 8b 04 24                   movq    (%r12), %rax
// 415: 48 85 c0                      testq   %rax, %rax
// 418: 7f 22                         jg      0x43c <_JIT_ENTRY+0x43c>
// 41a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000041c:  R_X86_64_64  .rodata.str1.1
// 424: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000426:  R_X86_64_64  _Py_NegativeRefcount
// 42e: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 433: 4c 89 e2                      movq    %r12, %rdx
// 436: ff d0                         callq   *%rax
// 438: 49 8b 04 24                   movq    (%r12), %rax
// 43c: 85 c0                         testl   %eax, %eax
// 43e: 78 21                         js      0x461 <_JIT_ENTRY+0x461>
// 440: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000442:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 44a: ff d0                         callq   *%rax
// 44c: 49 ff 0c 24                   decq    (%r12)
// 450: 75 0f                         jne     0x461 <_JIT_ENTRY+0x461>
// 452: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000454:  R_X86_64_64  _Py_Dealloc
// 45c: 4c 89 e7                      movq    %r12, %rdi
// 45f: ff d0                         callq   *%rax
// 461: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 465: 49 83 c6 f0                   addq    $-0x10, %r14
// 469: 49 29 de                      subq    %rbx, %r14
// 46c: 49 83 c6 b8                   addq    $-0x48, %r14
// 470: 49 c1 ee 03                   shrq    $0x3, %r14
// 474: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 478: 31 c0                         xorl    %eax, %eax
// 47a: e9 54 fc ff ff                jmp     0xd3 <_JIT_ENTRY+0xd3>
// 47f: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_EG_MATCH_code_body[1152] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x48, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xe9, 0x4c, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd5, 0x4c, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x48, 0x4f, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x78, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x73, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x61, 0x03, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x4f, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x88, 0x31, 0xff, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb8, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfe, 0xe9, 0x39, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4b, 0x8b, 0x6c, 0xee, 0xf0, 0x4f, 0x8b, 0x64, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x5c, 0x01, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x18, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x0f, 0x88, 0x1f, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x11, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd2, 0x81, 0xca, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x4c, 0xd6, 0xf0, 0x49, 0x89, 0x44, 0xd6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xe9, 0xa8, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x54, 0xfc, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_CHECK_EG_MATCH_code_holes[38] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x352, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3cc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x404, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x41c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x426, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x442, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x454, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_EG_MATCH_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CHECK_EG_MATCH_data_holes[1];

// _CALL_BUILTIN_Oplus_CHECK_EXC_MATCH
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CHECK_EXC_MATCH.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 fc                      movq    %r15, %r12
// 112: e9 66 02 00 00                jmp     0x37d <_JIT_ENTRY+0x37d>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13b: 4c 89 f6                      movq    %r14, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 48 8b 3c 24                   movq    (%rsp), %rdi
// 145: ff 47 2c                      incl    0x2c(%rdi)
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 49 8b 06                      movq    (%r14), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 2a                         jg      0x17f <_JIT_ENTRY+0x17f>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16e: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 173: 4c 89 f2                      movq    %r14, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17c: 49 8b 06                      movq    (%r14), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 2f                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 ff 08                      decq    (%rax)
// 19b: 75 15                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 26                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 29                         js      0x20e <_JIT_ENTRY+0x20e>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 13                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 20e: 4d 8d 24 ef                   leaq    (%r15,%rbp,8), %r12
// 212: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 0f 84 5d 01 00 00             je      0x37d <_JIT_ENTRY+0x37d>
// 220: 4b 8d 2c ef                   leaq    (%r15,%r13,8), %rbp
// 224: 49 89 04 24                   movq    %rax, (%r12)
// 228: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 22c: 48 8b 00                      movq    (%rax), %rax
// 22f: 84 c0                         testb   %al, %al
// 231: 74 1c                         je      0x24f <_JIT_ENTRY+0x24f>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_HandlePending
// 23d: ff d0                         callq   *%rax
// 23f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 243: 85 c0                         testl   %eax, %eax
// 245: 74 08                         je      0x24f <_JIT_ENTRY+0x24f>
// 247: 49 89 ec                      movq    %rbp, %r12
// 24a: e9 2e 01 00 00                jmp     0x37d <_JIT_ENTRY+0x37d>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _JIT_OPARG
// 259: f7 d0                         notl    %eax
// 25b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 260: 48 98                         cltq
// 262: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 266: 49 83 c4 f8                   addq    $-0x8, %r12
// 26a: 4d 8b 6c c7 f0                movq    -0x10(%r15,%rax,8), %r13
// 26f: 4d 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %r15
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 27e: 4c 89 fe                      movq    %r15, %rsi
// 281: ff d0                         callq   *%rax
// 283: 85 c0                         testl   %eax, %eax
// 285: 0f 88 a5 00 00 00             js      0x330 <_JIT_ENTRY+0x330>
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  PyErr_GivenExceptionMatches
// 295: 4c 89 ef                      movq    %r13, %rdi
// 298: 4c 89 fe                      movq    %r15, %rsi
// 29b: ff d0                         callq   *%rax
// 29d: 41 89 c5                      movl    %eax, %r13d
// 2a0: 49 8b 07                      movq    (%r15), %rax
// 2a3: 48 85 c0                      testq   %rax, %rax
// 2a6: 7f 21                         jg      0x2c9 <_JIT_ENTRY+0x2c9>
// 2a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002aa:  R_X86_64_64  .rodata.str1.1
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 2c1: 4c 89 fa                      movq    %r15, %rdx
// 2c4: ff d0                         callq   *%rax
// 2c6: 49 8b 07                      movq    (%r15), %rax
// 2c9: 85 c0                         testl   %eax, %eax
// 2cb: 78 20                         js      0x2ed <_JIT_ENTRY+0x2ed>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d7: ff d0                         callq   *%rax
// 2d9: 49 ff 0f                      decq    (%r15)
// 2dc: 75 0f                         jne     0x2ed <_JIT_ENTRY+0x2ed>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_Dealloc
// 2e8: 4c 89 ff                      movq    %r15, %rdi
// 2eb: ff d0                         callq   *%rax
// 2ed: 45 85 ed                      testl   %r13d, %r13d
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_FalseStruct
// 2fa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fc:  R_X86_64_64  _Py_TrueStruct
// 304: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 308: 49 89 0c 24                   movq    %rcx, (%r12)
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  _JIT_CONTINUE
// 316: 48 89 df                      movq    %rbx, %rdi
// 319: 48 89 ee                      movq    %rbp, %rsi
// 31c: 48 8b 14 24                   movq    (%rsp), %rdx
// 320: 48 83 c4 18                   addq    $0x18, %rsp
// 324: 5b                            popq    %rbx
// 325: 41 5c                         popq    %r12
// 327: 41 5d                         popq    %r13
// 329: 41 5e                         popq    %r14
// 32b: 41 5f                         popq    %r15
// 32d: 5d                            popq    %rbp
// 32e: ff e0                         jmpq    *%rax
// 330: 49 8b 07                      movq    (%r15), %rax
// 333: 48 85 c0                      testq   %rax, %rax
// 336: 7f 21                         jg      0x359 <_JIT_ENTRY+0x359>
// 338: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033a:  R_X86_64_64  .rodata.str1.1
// 342: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000344:  R_X86_64_64  _Py_NegativeRefcount
// 34c: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 351: 4c 89 fa                      movq    %r15, %rdx
// 354: ff d0                         callq   *%rax
// 356: 49 8b 07                      movq    (%r15), %rax
// 359: 85 c0                         testl   %eax, %eax
// 35b: 78 20                         js      0x37d <_JIT_ENTRY+0x37d>
// 35d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 367: ff d0                         callq   *%rax
// 369: 49 ff 0f                      decq    (%r15)
// 36c: 75 0f                         jne     0x37d <_JIT_ENTRY+0x37d>
// 36e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000370:  R_X86_64_64  _Py_Dealloc
// 378: 4c 89 ff                      movq    %r15, %rdi
// 37b: ff d0                         callq   *%rax
// 37d: 49 29 dc                      subq    %rbx, %r12
// 380: 49 83 c4 b8                   addq    $-0x48, %r12
// 384: 49 c1 ec 03                   shrq    $0x3, %r12
// 388: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 38c: 31 c0                         xorl    %eax, %eax
// 38e: e9 4b fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 393: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_EXC_MATCH_code_body[916] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfc, 0xe9, 0x66, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4d, 0x8d, 0x24, 0xef, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xef, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x74, 0x08, 0x49, 0x89, 0xec, 0xe9, 0x2e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf0, 0x4d, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x41, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x45, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x0c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x4b, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_CHECK_EXC_MATCH_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x344, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x35f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x370, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_EXC_MATCH_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CHECK_EXC_MATCH_data_holes[1];

// _CALL_BUILTIN_Oplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CHECK_FUNCTION_EXACT_ARGS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 53 02 00 00             jne     0x2b1 <_JIT_ENTRY+0x2b1>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 30 02 00 00             jne     0x2b1 <_JIT_ENTRY+0x2b1>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 21 02 00 00             jne     0x2b1 <_JIT_ENTRY+0x2b1>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 ba 01 00 00             jne     0x29b <_JIT_ENTRY+0x29b>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 4c 8b 04 24                   movq    (%rsp), %r8
// 10b: 41 ff 40 2c                   incl    0x2c(%r8)
// 10f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 114: 49 8b 07                      movq    (%r15), %rax
// 117: 48 85 c0                      testq   %rax, %rax
// 11a: 7f 2a                         jg      0x146 <_JIT_ENTRY+0x146>
// 11c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011e:  R_X86_64_64  .rodata.str1.1
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _Py_NegativeRefcount
// 130: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 135: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13a: 4c 89 fa                      movq    %r15, %rdx
// 13d: ff d0                         callq   *%rax
// 13f: 4c 8b 04 24                   movq    (%rsp), %r8
// 143: 49 8b 07                      movq    (%r15), %rax
// 146: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000148:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 150: 85 c0                         testl   %eax, %eax
// 152: 78 26                         js      0x17a <_JIT_ENTRY+0x17a>
// 154: 41 ff d7                      callq   *%r15
// 157: 4c 8b 04 24                   movq    (%rsp), %r8
// 15b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 160: 48 ff 08                      decq    (%rax)
// 163: 75 15                         jne     0x17a <_JIT_ENTRY+0x17a>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_Dealloc
// 16f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 174: ff d0                         callq   *%rax
// 176: 4c 8b 04 24                   movq    (%rsp), %r8
// 17a: 49 8b 04 24                   movq    (%r12), %rax
// 17e: 48 85 c0                      testq   %rax, %rax
// 181: 7f 26                         jg      0x1a9 <_JIT_ENTRY+0x1a9>
// 183: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000185:  R_X86_64_64  .rodata.str1.1
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_NegativeRefcount
// 197: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19c: 4c 89 e2                      movq    %r12, %rdx
// 19f: ff d0                         callq   *%rax
// 1a1: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 78 20                         js      0x1cd <_JIT_ENTRY+0x1cd>
// 1ad: 41 ff d7                      callq   *%r15
// 1b0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1b4: 49 ff 0c 24                   decq    (%r12)
// 1b8: 75 13                         jne     0x1cd <_JIT_ENTRY+0x1cd>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_Dealloc
// 1c4: 4c 89 e7                      movq    %r12, %rdi
// 1c7: ff d0                         callq   *%rax
// 1c9: 4c 8b 04 24                   movq    (%rsp), %r8
// 1cd: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d1: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d6: 48 85 c9                      testq   %rcx, %rcx
// 1d9: 0f 84 b9 00 00 00             je      0x298 <_JIT_ENTRY+0x298>
// 1df: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e3: 48 89 08                      movq    %rcx, (%rax)
// 1e6: 49 8b 40 10                   movq    0x10(%r8), %rax
// 1ea: 48 8b 00                      movq    (%rax), %rax
// 1ed: 84 c0                         testb   %al, %al
// 1ef: 74 1f                         je      0x210 <_JIT_ENTRY+0x210>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_HandlePending
// 1fb: 4c 89 c7                      movq    %r8, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 4c 8b 04 24                   movq    (%rsp), %r8
// 204: 85 c0                         testl   %eax, %eax
// 206: 74 08                         je      0x210 <_JIT_ENTRY+0x210>
// 208: 4d 89 e6                      movq    %r12, %r14
// 20b: e9 8b 00 00 00                jmp     0x29b <_JIT_ENTRY+0x29b>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _JIT_OPARG
// 21a: 0f b7 c0                      movzwl  %ax, %eax
// 21d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 222: 29 c1                         subl    %eax, %ecx
// 224: f7 d0                         notl    %eax
// 226: 48 98                         cltq
// 228: 48 63 c9                      movslq  %ecx, %rcx
// 22b: 48 01 c1                      addq    %rax, %rcx
// 22e: 49 8b 0c ce                   movq    (%r14,%rcx,8), %rcx
// 232: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000234:  R_X86_64_64  PyFunction_Type
// 23c: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 240: 75 6c                         jne     0x2ae <_JIT_ENTRY+0x2ae>
// 242: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000244:  R_X86_64_64  _JIT_OPERAND
// 24c: 39 91 88 00 00 00             cmpl    %edx, 0x88(%rcx)
// 252: 75 5a                         jne     0x2ae <_JIT_ENTRY+0x2ae>
// 254: 48 01 c0                      addq    %rax, %rax
// 257: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 25b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000025d:  R_X86_64_64  _JIT_OPARG
// 265: 0f b7 d2                      movzwl  %dx, %edx
// 268: 49 83 3c c6 01                cmpq    $0x1, (%r14,%rax,8)
// 26d: 83 da ff                      sbbl    $-0x1, %edx
// 270: 39 51 34                      cmpl    %edx, 0x34(%rcx)
// 273: 75 39                         jne     0x2ae <_JIT_ENTRY+0x2ae>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _JIT_CONTINUE
// 27f: 48 89 df                      movq    %rbx, %rdi
// 282: 4c 89 e6                      movq    %r12, %rsi
// 285: 4c 89 c2                      movq    %r8, %rdx
// 288: 48 83 c4 18                   addq    $0x18, %rsp
// 28c: 5b                            popq    %rbx
// 28d: 41 5c                         popq    %r12
// 28f: 41 5d                         popq    %r13
// 291: 41 5e                         popq    %r14
// 293: 41 5f                         popq    %r15
// 295: 5d                            popq    %rbp
// 296: ff e0                         jmpq    *%rax
// 298: 49 89 c6                      movq    %rax, %r14
// 29b: 49 29 de                      subq    %rbx, %r14
// 29e: 49 83 c6 b8                   addq    $-0x48, %r14
// 2a2: 49 c1 ee 03                   shrq    $0x3, %r14
// 2a6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2aa: 31 c0                         xorl    %eax, %eax
// 2ac: eb 2b                         jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 2ae: 4d 89 e6                      movq    %r12, %r14
// 2b1: 49 29 de                      subq    %rbx, %r14
// 2b4: 49 83 c6 b8                   addq    $-0x48, %r14
// 2b8: 49 c1 ee 03                   shrq    $0x3, %r14
// 2bc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2c0: 48 8b 03                      movq    (%rbx), %rax
// 2c3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c5:  R_X86_64_64  _JIT_TARGET
// 2cd: 89 c9                         movl    %ecx, %ecx
// 2cf: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2d3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2d9: 48 83 c4 18                   addq    $0x18, %rsp
// 2dd: 5b                            popq    %rbx
// 2de: 41 5c                         popq    %r12
// 2e0: 41 5d                         popq    %r13
// 2e2: 41 5e                         popq    %r14
// 2e4: 41 5f                         popq    %r15
// 2e6: 5d                            popq    %rbp
// 2e7: c3                            retq
// 2e8: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_FUNCTION_EXACT_ARGS_code_body[745] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x53, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x30, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0x21, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xba, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x49, 0x8b, 0x0c, 0xce, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x6c, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x91, 0x88, 0x00, 0x00, 0x00, 0x75, 0x5a, 0x48, 0x01, 0xc0, 0x48, 0x8b, 0x49, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x83, 0x3c, 0xc6, 0x01, 0x83, 0xda, 0xff, 0x39, 0x51, 0x34, 0x75, 0x39, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_FUNCTION_EXACT_ARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _CALL_BUILTIN_Oplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 24 02 00 00             jne     0x282 <_JIT_ENTRY+0x282>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 01 02 00 00             jne     0x282 <_JIT_ENTRY+0x282>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 f2 01 00 00             jne     0x282 <_JIT_ENTRY+0x282>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 32 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 2e                         je      0x210 <_JIT_ENTRY+0x210>
// 1e2: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 35                         je      0x229 <_JIT_ENTRY+0x229>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 1e                         je      0x229 <_JIT_ENTRY+0x229>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: eb 03                         jmp     0x213 <_JIT_ENTRY+0x213>
// 210: 49 89 c6                      movq    %rax, %r14
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: e9 81 00 00 00                jmp     0x2aa <_JIT_ENTRY+0x2aa>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 98                         cltq
// 23c: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 241: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 245: 75 18                         jne     0x25f <_JIT_ENTRY+0x25f>
// 247: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 255: ff d0                         callq   *%rax
// 257: 48 8b 14 24                   movq    (%rsp), %rdx
// 25b: 84 c0                         testb   %al, %al
// 25d: 74 20                         je      0x27f <_JIT_ENTRY+0x27f>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _JIT_CONTINUE
// 269: 48 89 df                      movq    %rbx, %rdi
// 26c: 4c 89 e6                      movq    %r12, %rsi
// 26f: 48 83 c4 18                   addq    $0x18, %rsp
// 273: 5b                            popq    %rbx
// 274: 41 5c                         popq    %r12
// 276: 41 5d                         popq    %r13
// 278: 41 5e                         popq    %r14
// 27a: 41 5f                         popq    %r15
// 27c: 5d                            popq    %rbp
// 27d: ff e0                         jmpq    *%rax
// 27f: 4d 89 e6                      movq    %r12, %r14
// 282: 49 29 de                      subq    %rbx, %r14
// 285: 49 83 c6 b8                   addq    $-0x48, %r14
// 289: 49 c1 ee 03                   shrq    $0x3, %r14
// 28d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 291: 48 8b 03                      movq    (%rbx), %rax
// 294: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000296:  R_X86_64_64  _JIT_TARGET
// 29e: 89 c9                         movl    %ecx, %ecx
// 2a0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2a4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2aa: 48 83 c4 18                   addq    $0x18, %rsp
// 2ae: 5b                            popq    %rbx
// 2af: 41 5c                         popq    %r12
// 2b1: 41 5d                         popq    %r13
// 2b3: 41 5e                         popq    %r14
// 2b5: 41 5f                         popq    %r15
// 2b7: 5d                            popq    %rbp
// 2b8: c3                            retq
// 2b9: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[698] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x24, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x01, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xf2, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x18, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _CALL_BUILTIN_Oplus_CHECK_PEP_523
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CHECK_PEP_523.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 b5 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 92 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 83 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 6c 01 00 00             jne     0x24d <_JIT_ENTRY+0x24d>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 26                         js      0x179 <_JIT_ENTRY+0x179>
// 153: 41 ff d7                      callq   *%r15
// 156: 48 8b 14 24                   movq    (%rsp), %rdx
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 48 8b 14 24                   movq    (%rsp), %rdx
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 20                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ac: 41 ff d7                      callq   *%r15
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 13                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 70                         je      0x24a <_JIT_ENTRY+0x24a>
// 1da: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1de: 48 89 08                      movq    %rcx, (%rax)
// 1e1: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1e5: 48 8b 08                      movq    (%rax), %rcx
// 1e8: 84 c9                         testb   %cl, %cl
// 1ea: 74 1d                         je      0x209 <_JIT_ENTRY+0x209>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_HandlePending
// 1f6: 48 89 d7                      movq    %rdx, %rdi
// 1f9: 49 89 d7                      movq    %rdx, %r15
// 1fc: ff d0                         callq   *%rax
// 1fe: 85 c0                         testl   %eax, %eax
// 200: 75 4b                         jne     0x24d <_JIT_ENTRY+0x24d>
// 202: 49 8b 47 10                   movq    0x10(%r15), %rax
// 206: 4c 89 fa                      movq    %r15, %rdx
// 209: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// 211: 74 4d                         je      0x260 <_JIT_ENTRY+0x260>
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 48 8b 03                      movq    (%rbx), %rax
// 225: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000227:  R_X86_64_64  _JIT_TARGET
// 22f: 89 c9                         movl    %ecx, %ecx
// 231: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 235: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23b: 48 83 c4 18                   addq    $0x18, %rsp
// 23f: 5b                            popq    %rbx
// 240: 41 5c                         popq    %r12
// 242: 41 5d                         popq    %r13
// 244: 41 5e                         popq    %r14
// 246: 41 5f                         popq    %r15
// 248: 5d                            popq    %rbp
// 249: c3                            retq
// 24a: 49 89 c6                      movq    %rax, %r14
// 24d: 49 29 de                      subq    %rbx, %r14
// 250: 49 83 c6 b8                   addq    $-0x48, %r14
// 254: 49 c1 ee 03                   shrq    $0x3, %r14
// 258: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 25c: 31 c0                         xorl    %eax, %eax
// 25e: eb db                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _JIT_CONTINUE
// 26a: 48 89 df                      movq    %rbx, %rdi
// 26d: 4c 89 f6                      movq    %r14, %rsi
// 270: 48 83 c4 18                   addq    $0x18, %rsp
// 274: 5b                            popq    %rbx
// 275: 41 5c                         popq    %r12
// 277: 41 5d                         popq    %r13
// 279: 41 5e                         popq    %r14
// 27b: 41 5f                         popq    %r15
// 27d: 5d                            popq    %rbp
// 27e: ff e0                         jmpq    *%rax
// 280: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_PEP_523_code_body[641] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xb5, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x92, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0x83, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x6c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x70, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x08, 0x84, 0xc9, 0x74, 0x1d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x49, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x4b, 0x49, 0x8b, 0x47, 0x10, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x74, 0x4d, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xdb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_CHECK_PEP_523_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_PEP_523_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CHECK_PEP_523_data_holes[1];

// _CALL_BUILTIN_Oplus_CHECK_STACK_SPACE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CHECK_STACK_SPACE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 06 02 00 00             jne     0x264 <_JIT_ENTRY+0x264>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 e3 01 00 00             jne     0x264 <_JIT_ENTRY+0x264>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 d4 01 00 00             jne     0x264 <_JIT_ENTRY+0x264>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 bd 01 00 00             jne     0x29e <_JIT_ENTRY+0x29e>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 4c 8b 04 24                   movq    (%rsp), %r8
// 10b: 41 ff 40 2c                   incl    0x2c(%r8)
// 10f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 114: 49 8b 07                      movq    (%r15), %rax
// 117: 48 85 c0                      testq   %rax, %rax
// 11a: 7f 2a                         jg      0x146 <_JIT_ENTRY+0x146>
// 11c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011e:  R_X86_64_64  .rodata.str1.1
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _Py_NegativeRefcount
// 130: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 135: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13a: 4c 89 fa                      movq    %r15, %rdx
// 13d: ff d0                         callq   *%rax
// 13f: 4c 8b 04 24                   movq    (%rsp), %r8
// 143: 49 8b 07                      movq    (%r15), %rax
// 146: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000148:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 150: 85 c0                         testl   %eax, %eax
// 152: 78 26                         js      0x17a <_JIT_ENTRY+0x17a>
// 154: 41 ff d7                      callq   *%r15
// 157: 4c 8b 04 24                   movq    (%rsp), %r8
// 15b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 160: 48 ff 08                      decq    (%rax)
// 163: 75 15                         jne     0x17a <_JIT_ENTRY+0x17a>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_Dealloc
// 16f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 174: ff d0                         callq   *%rax
// 176: 4c 8b 04 24                   movq    (%rsp), %r8
// 17a: 49 8b 04 24                   movq    (%r12), %rax
// 17e: 48 85 c0                      testq   %rax, %rax
// 181: 7f 26                         jg      0x1a9 <_JIT_ENTRY+0x1a9>
// 183: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000185:  R_X86_64_64  .rodata.str1.1
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_NegativeRefcount
// 197: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19c: 4c 89 e2                      movq    %r12, %rdx
// 19f: ff d0                         callq   *%rax
// 1a1: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 78 20                         js      0x1cd <_JIT_ENTRY+0x1cd>
// 1ad: 41 ff d7                      callq   *%r15
// 1b0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1b4: 49 ff 0c 24                   decq    (%r12)
// 1b8: 75 13                         jne     0x1cd <_JIT_ENTRY+0x1cd>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_Dealloc
// 1c4: 4c 89 e7                      movq    %r12, %rdi
// 1c7: ff d0                         callq   *%rax
// 1c9: 4c 8b 04 24                   movq    (%rsp), %r8
// 1cd: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d1: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d6: 48 85 c9                      testq   %rcx, %rcx
// 1d9: 0f 84 bc 00 00 00             je      0x29b <_JIT_ENTRY+0x29b>
// 1df: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e3: 48 89 08                      movq    %rcx, (%rax)
// 1e6: 49 8b 40 10                   movq    0x10(%r8), %rax
// 1ea: 48 8b 00                      movq    (%rax), %rax
// 1ed: 84 c0                         testb   %al, %al
// 1ef: 74 1f                         je      0x210 <_JIT_ENTRY+0x210>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_HandlePending
// 1fb: 4c 89 c7                      movq    %r8, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 4c 8b 04 24                   movq    (%rsp), %r8
// 204: 85 c0                         testl   %eax, %eax
// 206: 74 08                         je      0x210 <_JIT_ENTRY+0x210>
// 208: 4d 89 e6                      movq    %r12, %r14
// 20b: e9 8e 00 00 00                jmp     0x29e <_JIT_ENTRY+0x29e>
// 210: 49 8b 80 00 01 00 00          movq    0x100(%r8), %rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 74 45                         je      0x261 <_JIT_ENTRY+0x261>
// 21c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021e:  R_X86_64_64  _JIT_OPARG
// 226: 0f b7 c9                      movzwl  %cx, %ecx
// 229: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 22e: 29 ca                         subl    %ecx, %edx
// 230: 48 63 d2                      movslq  %edx, %rdx
// 233: f7 d1                         notl    %ecx
// 235: 48 63 c9                      movslq  %ecx, %rcx
// 238: 48 01 d1                      addq    %rdx, %rcx
// 23b: 49 8b 0c ce                   movq    (%r14,%rcx,8), %rcx
// 23f: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 243: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// 247: 49 8b 90 08 01 00 00          movq    0x108(%r8), %rdx
// 24e: 48 29 c2                      subq    %rax, %rdx
// 251: 48 c1 fa 03                   sarq    $0x3, %rdx
// 255: 48 39 ca                      cmpq    %rcx, %rdx
// 258: 7e 07                         jle     0x261 <_JIT_ENTRY+0x261>
// 25a: 41 83 78 24 02                cmpl    $0x2, 0x24(%r8)
// 25f: 7d 50                         jge     0x2b1 <_JIT_ENTRY+0x2b1>
// 261: 4d 89 e6                      movq    %r12, %r14
// 264: 49 29 de                      subq    %rbx, %r14
// 267: 49 83 c6 b8                   addq    $-0x48, %r14
// 26b: 49 c1 ee 03                   shrq    $0x3, %r14
// 26f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 273: 48 8b 03                      movq    (%rbx), %rax
// 276: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000278:  R_X86_64_64  _JIT_TARGET
// 280: 89 c9                         movl    %ecx, %ecx
// 282: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 286: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 28c: 48 83 c4 18                   addq    $0x18, %rsp
// 290: 5b                            popq    %rbx
// 291: 41 5c                         popq    %r12
// 293: 41 5d                         popq    %r13
// 295: 41 5e                         popq    %r14
// 297: 41 5f                         popq    %r15
// 299: 5d                            popq    %rbp
// 29a: c3                            retq
// 29b: 49 89 c6                      movq    %rax, %r14
// 29e: 49 29 de                      subq    %rbx, %r14
// 2a1: 49 83 c6 b8                   addq    $-0x48, %r14
// 2a5: 49 c1 ee 03                   shrq    $0x3, %r14
// 2a9: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2ad: 31 c0                         xorl    %eax, %eax
// 2af: eb db                         jmp     0x28c <_JIT_ENTRY+0x28c>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _JIT_CONTINUE
// 2bb: 48 89 df                      movq    %rbx, %rdi
// 2be: 4c 89 e6                      movq    %r12, %rsi
// 2c1: 4c 89 c2                      movq    %r8, %rdx
// 2c4: 48 83 c4 18                   addq    $0x18, %rsp
// 2c8: 5b                            popq    %rbx
// 2c9: 41 5c                         popq    %r12
// 2cb: 41 5d                         popq    %r13
// 2cd: 41 5e                         popq    %r14
// 2cf: 41 5f                         popq    %r15
// 2d1: 5d                            popq    %rbp
// 2d2: ff e0                         jmpq    *%rax
// 2d4: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_STACK_SPACE_code_body[725] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x06, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xe3, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xd4, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xbd, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x80, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xd1, 0x49, 0x8b, 0x0c, 0xce, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x49, 0x8b, 0x90, 0x08, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc2, 0x48, 0xc1, 0xfa, 0x03, 0x48, 0x39, 0xca, 0x7e, 0x07, 0x41, 0x83, 0x78, 0x24, 0x02, 0x7d, 0x50, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xdb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_CHECK_STACK_SPACE_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_STACK_SPACE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CHECK_STACK_SPACE_data_holes[1];

// _CALL_BUILTIN_Oplus_CHECK_VALIDITY
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CHECK_VALIDITY.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 e1 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 be 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 af 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 98 01 00 00             jne     0x279 <_JIT_ENTRY+0x279>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 0f 84 90 00 00 00             je      0x276 <_JIT_ENTRY+0x276>
// 1e6: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1ea: 48 89 08                      movq    %rcx, (%rax)
// 1ed: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1f1: 48 8b 00                      movq    (%rax), %rax
// 1f4: 84 c0                         testb   %al, %al
// 1f6: 74 17                         je      0x20f <_JIT_ENTRY+0x20f>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_HandlePending
// 202: 48 89 d7                      movq    %rdx, %rdi
// 205: ff d0                         callq   *%rax
// 207: 48 8b 14 24                   movq    (%rsp), %rdx
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 75 6a                         jne     0x279 <_JIT_ENTRY+0x279>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _JIT_EXECUTOR
// 219: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 21d: 74 20                         je      0x23f <_JIT_ENTRY+0x23f>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _JIT_CONTINUE
// 229: 48 89 df                      movq    %rbx, %rdi
// 22c: 4c 89 f6                      movq    %r14, %rsi
// 22f: 48 83 c4 18                   addq    $0x18, %rsp
// 233: 5b                            popq    %rbx
// 234: 41 5c                         popq    %r12
// 236: 41 5d                         popq    %r13
// 238: 41 5e                         popq    %r14
// 23a: 41 5f                         popq    %r15
// 23c: 5d                            popq    %rbp
// 23d: ff e0                         jmpq    *%rax
// 23f: 49 29 de                      subq    %rbx, %r14
// 242: 49 83 c6 b8                   addq    $-0x48, %r14
// 246: 49 c1 ee 03                   shrq    $0x3, %r14
// 24a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24e: 48 8b 03                      movq    (%rbx), %rax
// 251: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000253:  R_X86_64_64  _JIT_TARGET
// 25b: 89 c9                         movl    %ecx, %ecx
// 25d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 261: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 267: 48 83 c4 18                   addq    $0x18, %rsp
// 26b: 5b                            popq    %rbx
// 26c: 41 5c                         popq    %r12
// 26e: 41 5d                         popq    %r13
// 270: 41 5e                         popq    %r14
// 272: 41 5f                         popq    %r15
// 274: 5d                            popq    %rbp
// 275: c3                            retq
// 276: 49 89 c6                      movq    %rax, %r14
// 279: 49 29 de                      subq    %rbx, %r14
// 27c: 49 83 c6 b8                   addq    $-0x48, %r14
// 280: 49 c1 ee 03                   shrq    $0x3, %r14
// 284: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 288: 31 c0                         xorl    %eax, %eax
// 28a: eb db                         jmp     0x267 <_JIT_ENTRY+0x267>
// 28c: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_VALIDITY_code_body[653] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xe1, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xbe, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xaf, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x98, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x75, 0x6a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xdb};
static const Hole _CALL_BUILTIN_Oplus_CHECK_VALIDITY_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CHECK_VALIDITY_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CHECK_VALIDITY_data_holes[1];

// _CALL_BUILTIN_Oplus_COMPARE_OP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_COMPARE_OP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 48                         jle     0xe1 <_JIT_ENTRY+0xe1>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 78                         jne     0x11b <_JIT_ENTRY+0x11b>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 73                         jmp     0x11d <_JIT_ENTRY+0x11d>
// aa: 49 29 de                      subq    %rbx, %r14
// ad: 49 83 c6 b8                   addq    $-0x48, %r14
// b1: 49 c1 ee 03                   shrq    $0x3, %r14
// b5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b9: 48 8b 03                      movq    (%rbx), %rax
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_TARGET
// c6: 89 c9                         movl    %ecx, %ecx
// c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d2: 48 83 c4 18                   addq    $0x18, %rsp
// d6: 5b                            popq    %rbx
// d7: 41 5c                         popq    %r12
// d9: 41 5d                         popq    %r13
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: 5d                            popq    %rbp
// e0: c3                            retq
// e1: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1+0x39
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_CheckRecursiveCall
// fa: 48 89 d7                      movq    %rdx, %rdi
// fd: ff d0                         callq   *%rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 0f 85 ca 02 00 00             jne     0x3d1 <_JIT_ENTRY+0x3d1>
// 107: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10c: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 111: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 115: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 119: 74 88                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11b: 31 ff                         xorl    %edi, %edi
// 11d: 48 89 ee                      movq    %rbp, %rsi
// 120: 41 ff d0                      callq   *%r8
// 123: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 128: ff 47 2c                      incl    0x2c(%rdi)
// 12b: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 130: 48 8b 45 00                   movq    (%rbp), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 27                         jg      0x160 <_JIT_ENTRY+0x160>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 152: 48 89 ea                      movq    %rbp, %rdx
// 155: ff d0                         callq   *%rax
// 157: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 15c: 48 8b 45 00                   movq    (%rbp), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 2b                         js      0x18f <_JIT_ENTRY+0x18f>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 175: 48 ff 4d 00                   decq    (%rbp)
// 179: 75 14                         jne     0x18f <_JIT_ENTRY+0x18f>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: 48 89 ef                      movq    %rbp, %rdi
// 188: ff d0                         callq   *%rax
// 18a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18f: 49 8b 04 24                   movq    (%r12), %rax
// 193: 48 85 c0                      testq   %rax, %rax
// 196: 7f 27                         jg      0x1bf <_JIT_ENTRY+0x1bf>
// 198: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019a:  R_X86_64_64  .rodata.str1.1
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_NegativeRefcount
// 1ac: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b1: 4c 89 e2                      movq    %r12, %rdx
// 1b4: ff d0                         callq   *%rax
// 1b6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1bb: 49 8b 04 24                   movq    (%r12), %rax
// 1bf: 85 c0                         testl   %eax, %eax
// 1c1: 78 2b                         js      0x1ee <_JIT_ENTRY+0x1ee>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d4: 49 ff 0c 24                   decq    (%r12)
// 1d8: 75 14                         jne     0x1ee <_JIT_ENTRY+0x1ee>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_Dealloc
// 1e4: 4c 89 e7                      movq    %r12, %rdi
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ee: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f2: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f7: 48 85 c9                      testq   %rcx, %rcx
// 1fa: 0f 84 c9 01 00 00             je      0x3c9 <_JIT_ENTRY+0x3c9>
// 200: 48 89 08                      movq    %rcx, (%rax)
// 203: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 207: 48 8b 00                      movq    (%rax), %rax
// 20a: 84 c0                         testb   %al, %al
// 20c: 74 19                         je      0x227 <_JIT_ENTRY+0x227>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_HandlePending
// 218: ff d0                         callq   *%rax
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 74 09                         je      0x227 <_JIT_ENTRY+0x227>
// 21e: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 222: e9 aa 01 00 00                jmp     0x3d1 <_JIT_ENTRY+0x3d1>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_OPARG
// 231: 0f b7 d0                      movzwl  %ax, %edx
// 234: 89 d0                         movl    %edx, %eax
// 236: f7 d0                         notl    %eax
// 238: 4c 63 f8                      movslq  %eax, %r15
// 23b: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 240: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 245: c1 ea 05                      shrl    $0x5, %edx
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  PyObject_RichCompare
// 252: 48 89 ef                      movq    %rbp, %rdi
// 255: 4c 89 ee                      movq    %r13, %rsi
// 258: ff d0                         callq   *%rax
// 25a: 49 89 c4                      movq    %rax, %r12
// 25d: 48 8b 45 00                   movq    (%rbp), %rax
// 261: 48 85 c0                      testq   %rax, %rax
// 264: 7f 22                         jg      0x288 <_JIT_ENTRY+0x288>
// 266: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000268:  R_X86_64_64  .rodata.str1.1
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_NegativeRefcount
// 27a: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 27f: 48 89 ea                      movq    %rbp, %rdx
// 282: ff d0                         callq   *%rax
// 284: 48 8b 45 00                   movq    (%rbp), %rax
// 288: 85 c0                         testl   %eax, %eax
// 28a: 78 21                         js      0x2ad <_JIT_ENTRY+0x2ad>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 296: ff d0                         callq   *%rax
// 298: 48 ff 4d 00                   decq    (%rbp)
// 29c: 75 0f                         jne     0x2ad <_JIT_ENTRY+0x2ad>
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _Py_Dealloc
// 2a8: 48 89 ef                      movq    %rbp, %rdi
// 2ab: ff d0                         callq   *%rax
// 2ad: 49 8b 45 00                   movq    (%r13), %rax
// 2b1: 48 85 c0                      testq   %rax, %rax
// 2b4: 7f 22                         jg      0x2d8 <_JIT_ENTRY+0x2d8>
// 2b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b8:  R_X86_64_64  .rodata.str1.1
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_NegativeRefcount
// 2ca: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 2cf: 4c 89 ea                      movq    %r13, %rdx
// 2d2: ff d0                         callq   *%rax
// 2d4: 49 8b 45 00                   movq    (%r13), %rax
// 2d8: 85 c0                         testl   %eax, %eax
// 2da: 78 21                         js      0x2fd <_JIT_ENTRY+0x2fd>
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e6: ff d0                         callq   *%rax
// 2e8: 49 ff 4d 00                   decq    (%r13)
// 2ec: 75 0f                         jne     0x2fd <_JIT_ENTRY+0x2fd>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_Dealloc
// 2f8: 4c 89 ef                      movq    %r13, %rdi
// 2fb: ff d0                         callq   *%rax
// 2fd: 4d 89 fd                      movq    %r15, %r13
// 300: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 304: 49 83 c7 f0                   addq    $-0x10, %r15
// 308: 4d 85 e4                      testq   %r12, %r12
// 30b: 0f 84 bd 00 00 00             je      0x3ce <_JIT_ENTRY+0x3ce>
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _JIT_OPARG
// 31b: a8 10                         testb   $0x10, %al
// 31d: 74 7d                         je      0x39c <_JIT_ENTRY+0x39c>
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  PyObject_IsTrue
// 329: 4c 89 e7                      movq    %r12, %rdi
// 32c: ff d0                         callq   *%rax
// 32e: 89 c5                         movl    %eax, %ebp
// 330: 49 8b 04 24                   movq    (%r12), %rax
// 334: 48 85 c0                      testq   %rax, %rax
// 337: 7f 22                         jg      0x35b <_JIT_ENTRY+0x35b>
// 339: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033b:  R_X86_64_64  .rodata.str1.1
// 343: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000345:  R_X86_64_64  _Py_NegativeRefcount
// 34d: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 352: 4c 89 e2                      movq    %r12, %rdx
// 355: ff d0                         callq   *%rax
// 357: 49 8b 04 24                   movq    (%r12), %rax
// 35b: 85 c0                         testl   %eax, %eax
// 35d: 78 21                         js      0x380 <_JIT_ENTRY+0x380>
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 369: ff d0                         callq   *%rax
// 36b: 49 ff 0c 24                   decq    (%r12)
// 36f: 75 0f                         jne     0x380 <_JIT_ENTRY+0x380>
// 371: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000373:  R_X86_64_64  _Py_Dealloc
// 37b: 4c 89 e7                      movq    %r12, %rdi
// 37e: ff d0                         callq   *%rax
// 380: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000382:  R_X86_64_64  _Py_FalseStruct
// 38a: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000038c:  R_X86_64_64  _Py_TrueStruct
// 394: 85 ed                         testl   %ebp, %ebp
// 396: 4c 0f 44 e0                   cmoveq  %rax, %r12
// 39a: 78 32                         js      0x3ce <_JIT_ENTRY+0x3ce>
// 39c: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 3a0: 48 83 c6 f8                   addq    $-0x8, %rsi
// 3a4: 4d 89 27                      movq    %r12, (%r15)
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _JIT_CONTINUE
// 3b1: 48 89 df                      movq    %rbx, %rdi
// 3b4: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3b9: 48 83 c4 18                   addq    $0x18, %rsp
// 3bd: 5b                            popq    %rbx
// 3be: 41 5c                         popq    %r12
// 3c0: 41 5d                         popq    %r13
// 3c2: 41 5e                         popq    %r14
// 3c4: 41 5f                         popq    %r15
// 3c6: 5d                            popq    %rbp
// 3c7: ff e0                         jmpq    *%rax
// 3c9: 49 89 c6                      movq    %rax, %r14
// 3cc: eb 03                         jmp     0x3d1 <_JIT_ENTRY+0x3d1>
// 3ce: 4d 89 fe                      movq    %r15, %r14
// 3d1: 49 29 de                      subq    %rbx, %r14
// 3d4: 49 83 c6 b8                   addq    $-0x48, %r14
// 3d8: 49 c1 ee 03                   shrq    $0x3, %r14
// 3dc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3e0: 31 c0                         xorl    %eax, %eax
// 3e2: e9 eb fc ff ff                jmp     0xd2 <_JIT_ENTRY+0xd2>
// 3e7: 
static const unsigned char _CALL_BUILTIN_Oplus_COMPARE_OP_code_body[1000] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x78, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x73, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xca, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x88, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc9, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0xaa, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x89, 0xd0, 0xf7, 0xd0, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x4f, 0x8d, 0x3c, 0xfe, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xbd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x74, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe0, 0x78, 0x32, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x03, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xeb, 0xfc, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_COMPARE_OP_code_holes[34] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x345, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x373, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x382, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_COMPARE_OP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_COMPARE_OP_data_holes[1];

// _CALL_BUILTIN_Oplus_COMPARE_OP_FLOAT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_COMPARE_OP_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 59                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3a                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2f                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 80 00 00 00             jne     0x12c <_JIT_ENTRY+0x12c>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: eb 7b                         jmp     0x12e <_JIT_ENTRY+0x12e>
// b3: 4d 89 f7                      movq    %r14, %r15
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 0f 85 6d 02 00 00             jne     0x380 <_JIT_ENTRY+0x380>
// 113: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 118: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 11d: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 121: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 126: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12a: 74 80                         je      0xac <_JIT_ENTRY+0xac>
// 12c: 31 ff                         xorl    %edi, %edi
// 12e: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 133: 4c 89 fe                      movq    %r15, %rsi
// 136: 41 ff d0                      callq   *%r8
// 139: 4c 8b 04 24                   movq    (%rsp), %r8
// 13d: 41 ff 40 2c                   incl    0x2c(%r8)
// 141: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 146: 49 8b 07                      movq    (%r15), %rax
// 149: 48 85 c0                      testq   %rax, %rax
// 14c: 7f 2a                         jg      0x178 <_JIT_ENTRY+0x178>
// 14e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000150:  R_X86_64_64  .rodata.str1.1
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_NegativeRefcount
// 162: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 167: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 16c: 4c 89 fa                      movq    %r15, %rdx
// 16f: ff d0                         callq   *%rax
// 171: 4c 8b 04 24                   movq    (%rsp), %r8
// 175: 49 8b 07                      movq    (%r15), %rax
// 178: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000017a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 182: 85 c0                         testl   %eax, %eax
// 184: 78 26                         js      0x1ac <_JIT_ENTRY+0x1ac>
// 186: 41 ff d7                      callq   *%r15
// 189: 4c 8b 04 24                   movq    (%rsp), %r8
// 18d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 192: 48 ff 08                      decq    (%rax)
// 195: 75 15                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_Dealloc
// 1a1: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a6: ff d0                         callq   *%rax
// 1a8: 4c 8b 04 24                   movq    (%rsp), %r8
// 1ac: 49 8b 04 24                   movq    (%r12), %rax
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 7f 26                         jg      0x1db <_JIT_ENTRY+0x1db>
// 1b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b7:  R_X86_64_64  .rodata.str1.1
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_NegativeRefcount
// 1c9: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1ce: 4c 89 e2                      movq    %r12, %rdx
// 1d1: ff d0                         callq   *%rax
// 1d3: 4c 8b 04 24                   movq    (%rsp), %r8
// 1d7: 49 8b 04 24                   movq    (%r12), %rax
// 1db: 85 c0                         testl   %eax, %eax
// 1dd: 78 20                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1df: 41 ff d7                      callq   *%r15
// 1e2: 4c 8b 04 24                   movq    (%rsp), %r8
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 4c 8b 04 24                   movq    (%rsp), %r8
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 0f 84 6c 01 00 00             je      0x37d <_JIT_ENTRY+0x37d>
// 211: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 215: 48 89 08                      movq    %rcx, (%rax)
// 218: 49 8b 40 10                   movq    0x10(%r8), %rax
// 21c: 48 8b 00                      movq    (%rax), %rax
// 21f: 84 c0                         testb   %al, %al
// 221: 74 1f                         je      0x242 <_JIT_ENTRY+0x242>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_HandlePending
// 22d: 4c 89 c7                      movq    %r8, %rdi
// 230: ff d0                         callq   *%rax
// 232: 4c 8b 04 24                   movq    (%rsp), %r8
// 236: 85 c0                         testl   %eax, %eax
// 238: 74 08                         je      0x242 <_JIT_ENTRY+0x242>
// 23a: 4d 89 fe                      movq    %r15, %r14
// 23d: e9 3e 01 00 00                jmp     0x380 <_JIT_ENTRY+0x380>
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _JIT_OPARG
// 24c: f7 d0                         notl    %eax
// 24e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 253: 48 63 e8                      movslq  %eax, %rbp
// 256: 4d 8b 64 ee f0                movq    -0x10(%r14,%rbp,8), %r12
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  PyFloat_Type
// 265: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 26a: 0f 85 46 fe ff ff             jne     0xb6 <_JIT_ENTRY+0xb6>
// 270: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// 275: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 279: 0f 85 37 fe ff ff             jne     0xb6 <_JIT_ENTRY+0xb6>
// 27f: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 286: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// 28c: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 292: f2 0f 11 44 24 10             movsd   %xmm0, 0x10(%rsp)
// 298: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 29e: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000002a0:  R_X86_64_64  PyInterpreterState_Get
// 2a8: 75 27                         jne     0x2d1 <_JIT_ENTRY+0x2d1>
// 2aa: 41 ff d7                      callq   *%r15
// 2ad: 4c 8b 04 24                   movq    (%rsp), %r8
// 2b1: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2b8: 49 ff 0c 24                   decq    (%r12)
// 2bc: 75 13                         jne     0x2d1 <_JIT_ENTRY+0x2d1>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _PyFloat_ExactDealloc
// 2c8: 4c 89 e7                      movq    %r12, %rdi
// 2cb: ff d0                         callq   *%rax
// 2cd: 4c 8b 04 24                   movq    (%rsp), %r8
// 2d1: 4d 8d 24 ee                   leaq    (%r14,%rbp,8), %r12
// 2d5: 49 83 c4 f8                   addq    $-0x8, %r12
// 2d9: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2de: 75 27                         jne     0x307 <_JIT_ENTRY+0x307>
// 2e0: 41 ff d7                      callq   *%r15
// 2e3: 4c 8b 04 24                   movq    (%rsp), %r8
// 2e7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2ee: 49 ff 4d 00                   decq    (%r13)
// 2f2: 75 13                         jne     0x307 <_JIT_ENTRY+0x307>
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _PyFloat_ExactDealloc
// 2fe: 4c 89 ef                      movq    %r13, %rdi
// 301: ff d0                         callq   *%rax
// 303: 4c 8b 04 24                   movq    (%rsp), %r8
// 307: 31 c0                         xorl    %eax, %eax
// 309: f2 0f 10 44 24 08             movsd   0x8(%rsp), %xmm0        # xmm0 = mem[0],zero
// 30f: f2 0f 10 4c 24 10             movsd   0x10(%rsp), %xmm1       # xmm1 = mem[0],zero
// 315: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 319: 0f 93 c0                      setae   %al
// 31c: 01 c0                         addl    %eax, %eax
// 31e: 31 c9                         xorl    %ecx, %ecx
// 320: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 324: 0f 93 c1                      setae   %cl
// 327: 09 c1                         orl     %eax, %ecx
// 329: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032b:  R_X86_64_64  _JIT_OPARG
// 333: 0f b7 c0                      movzwl  %ax, %eax
// 336: 0f a3 c8                      btl     %ecx, %eax
// 339: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000033b:  R_X86_64_64  _Py_FalseStruct
// 343: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000345:  R_X86_64_64  _Py_TrueStruct
// 34d: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 351: f7 d0                         notl    %eax
// 353: 48 98                         cltq
// 355: 49 89 54 c6 f0                movq    %rdx, -0x10(%r14,%rax,8)
// 35a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035c:  R_X86_64_64  _JIT_CONTINUE
// 364: 48 89 df                      movq    %rbx, %rdi
// 367: 4c 89 e6                      movq    %r12, %rsi
// 36a: 4c 89 c2                      movq    %r8, %rdx
// 36d: 48 83 c4 18                   addq    $0x18, %rsp
// 371: 5b                            popq    %rbx
// 372: 41 5c                         popq    %r12
// 374: 41 5d                         popq    %r13
// 376: 41 5e                         popq    %r14
// 378: 41 5f                         popq    %r15
// 37a: 5d                            popq    %rbp
// 37b: ff e0                         jmpq    *%rax
// 37d: 49 89 c6                      movq    %rax, %r14
// 380: 49 29 de                      subq    %rbx, %r14
// 383: 49 83 c6 b8                   addq    $-0x48, %r14
// 387: 49 c1 ee 03                   shrq    $0x3, %r14
// 38b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 38f: 31 c0                         xorl    %eax, %eax
// 391: e9 48 fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 396: 
static const unsigned char _CALL_BUILTIN_Oplus_COMPARE_OP_FLOAT_code_body[919] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x59, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3a, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2f, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x80, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x7b, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x6d, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x80, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x6c, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfe, 0xe9, 0x3e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x64, 0xee, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x46, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x37, 0xfe, 0xff, 0xff, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x27, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xee, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x27, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x08, 0xf2, 0x0f, 0x10, 0x4c, 0x24, 0x10, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x0f, 0xa3, 0xc8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x54, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x48, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_COMPARE_OP_FLOAT_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x345, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_COMPARE_OP_FLOAT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_COMPARE_OP_FLOAT_data_holes[1];

// _CALL_BUILTIN_Oplus_COMPARE_OP_INT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_COMPARE_OP_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 56                         jne     0xb0 <_JIT_ENTRY+0xb0>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 37                         jne     0xb0 <_JIT_ENTRY+0xb0>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2c                         jne     0xb0 <_JIT_ENTRY+0xb0>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4f                         jle     0xe9 <_JIT_ENTRY+0xe9>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// a3: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a7: 75 7f                         jne     0x128 <_JIT_ENTRY+0x128>
// a9: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ae: eb 7a                         jmp     0x12a <_JIT_ENTRY+0x12a>
// b0: 4c 89 f5                      movq    %r14, %rbp
// b3: 48 29 dd                      subq    %rbx, %rbp
// b6: 48 83 c5 b8                   addq    $-0x48, %rbp
// ba: 48 c1 ed 03                   shrq    $0x3, %rbp
// be: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// c1: 48 8b 03                      movq    (%rbx), %rax
// c4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c6:  R_X86_64_64  _JIT_TARGET
// ce: 89 c9                         movl    %ecx, %ecx
// d0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// da: 48 83 c4 28                   addq    $0x28, %rsp
// de: 5b                            popq    %rbx
// df: 41 5c                         popq    %r12
// e1: 41 5d                         popq    %r13
// e3: 41 5e                         popq    %r14
// e5: 41 5f                         popq    %r15
// e7: 5d                            popq    %rbp
// e8: c3                            retq
// e9: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// ee: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f0:  R_X86_64_64  .rodata.str1.1+0x39
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_CheckRecursiveCall
// 102: 48 89 d7                      movq    %rdx, %rdi
// 105: ff d0                         callq   *%rax
// 107: 85 c0                         testl   %eax, %eax
// 109: 0f 85 d9 02 00 00             jne     0x3e8 <_JIT_ENTRY+0x3e8>
// 10f: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 114: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 119: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11d: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 122: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 126: 74 81                         je      0xa9 <_JIT_ENTRY+0xa9>
// 128: 31 ff                         xorl    %edi, %edi
// 12a: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 12f: 4c 89 fe                      movq    %r15, %rsi
// 132: 41 ff d0                      callq   *%r8
// 135: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 13a: 41 ff 40 2c                   incl    0x2c(%r8)
// 13e: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 143: 49 8b 07                      movq    (%r15), %rax
// 146: 48 85 c0                      testq   %rax, %rax
// 149: 7f 2b                         jg      0x176 <_JIT_ENTRY+0x176>
// 14b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014d:  R_X86_64_64  .rodata.str1.1
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_NegativeRefcount
// 15f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 164: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 169: 4c 89 fa                      movq    %r15, %rdx
// 16c: ff d0                         callq   *%rax
// 16e: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 173: 49 8b 07                      movq    (%r15), %rax
// 176: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000178:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 180: 85 c0                         testl   %eax, %eax
// 182: 78 28                         js      0x1ac <_JIT_ENTRY+0x1ac>
// 184: 41 ff d7                      callq   *%r15
// 187: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 18c: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 191: 48 ff 08                      decq    (%rax)
// 194: 75 16                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _Py_Dealloc
// 1a0: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1a5: ff d0                         callq   *%rax
// 1a7: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1ac: 49 8b 04 24                   movq    (%r12), %rax
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 7f 27                         jg      0x1dc <_JIT_ENTRY+0x1dc>
// 1b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b7:  R_X86_64_64  .rodata.str1.1
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_NegativeRefcount
// 1c9: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1ce: 4c 89 e2                      movq    %r12, %rdx
// 1d1: ff d0                         callq   *%rax
// 1d3: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1d8: 49 8b 04 24                   movq    (%r12), %rax
// 1dc: 85 c0                         testl   %eax, %eax
// 1de: 78 22                         js      0x202 <_JIT_ENTRY+0x202>
// 1e0: 41 ff d7                      callq   *%r15
// 1e3: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1e8: 49 ff 0c 24                   decq    (%r12)
// 1ec: 75 14                         jne     0x202 <_JIT_ENTRY+0x202>
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _Py_Dealloc
// 1f8: 4c 89 e7                      movq    %r12, %rdi
// 1fb: ff d0                         callq   *%rax
// 1fd: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 202: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 206: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 20b: 48 85 c9                      testq   %rcx, %rcx
// 20e: 0f 84 d1 01 00 00             je      0x3e5 <_JIT_ENTRY+0x3e5>
// 214: 4b 8d 2c ee                   leaq    (%r14,%r13,8), %rbp
// 218: 48 89 08                      movq    %rcx, (%rax)
// 21b: 49 8b 40 10                   movq    0x10(%r8), %rax
// 21f: 48 8b 00                      movq    (%rax), %rax
// 222: 84 c0                         testb   %al, %al
// 224: 74 20                         je      0x246 <_JIT_ENTRY+0x246>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_HandlePending
// 230: 4c 89 c7                      movq    %r8, %rdi
// 233: ff d0                         callq   *%rax
// 235: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 23a: 85 c0                         testl   %eax, %eax
// 23c: 74 08                         je      0x246 <_JIT_ENTRY+0x246>
// 23e: 49 89 ee                      movq    %rbp, %r14
// 241: e9 a2 01 00 00                jmp     0x3e8 <_JIT_ENTRY+0x3e8>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _JIT_OPARG
// 250: f7 d0                         notl    %eax
// 252: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 257: 4c 63 e8                      movslq  %eax, %r13
// 25a: 4f 8b 64 ee f0                movq    -0x10(%r14,%r13,8), %r12
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  PyLong_Type
// 269: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 26e: 0f 85 3f fe ff ff             jne     0xb3 <_JIT_ENTRY+0xb3>
// 274: 4f 8b 7c ee f8                movq    -0x8(%r14,%r13,8), %r15
// 279: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 27d: 0f 85 30 fe ff ff             jne     0xb3 <_JIT_ENTRY+0xb3>
// 283: 49 8b 54 24 10                movq    0x10(%r12), %rdx
// 288: 48 83 fa 0f                   cmpq    $0xf, %rdx
// 28c: 0f 87 21 fe ff ff             ja      0xb3 <_JIT_ENTRY+0xb3>
// 292: 49 8b 47 10                   movq    0x10(%r15), %rax
// 296: 48 83 f8 0f                   cmpq    $0xf, %rax
// 29a: 0f 87 13 fe ff ff             ja      0xb3 <_JIT_ENTRY+0xb3>
// 2a0: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2a5: 41 8b 44 24 18                movl    0x18(%r12), %eax
// 2aa: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 2af: 41 8b 47 18                   movl    0x18(%r15), %eax
// 2b3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 2b8: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 2be: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c0:  R_X86_64_64  PyInterpreterState_Get
// 2c8: 75 4f                         jne     0x319 <_JIT_ENTRY+0x319>
// 2ca: 48 89 d5                      movq    %rdx, %rbp
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  PyInterpreterState_Get
// 2d7: ff d0                         callq   *%rax
// 2d9: 48 89 ea                      movq    %rbp, %rdx
// 2dc: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 2e1: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ea:  R_X86_64_64  PyInterpreterState_Get
// 2f2: 49 ff 0c 24                   decq    (%r12)
// 2f6: 75 21                         jne     0x319 <_JIT_ENTRY+0x319>
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  PyObject_Free
// 302: 4c 89 e7                      movq    %r12, %rdi
// 305: ff d0                         callq   *%rax
// 307: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000309:  R_X86_64_64  PyInterpreterState_Get
// 311: 48 89 ea                      movq    %rbp, %rdx
// 314: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 319: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 31d: 49 83 c4 f8                   addq    $-0x8, %r12
// 321: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 326: 75 30                         jne     0x358 <_JIT_ENTRY+0x358>
// 328: 49 89 d5                      movq    %rdx, %r13
// 32b: ff d1                         callq   *%rcx
// 32d: 4c 89 ea                      movq    %r13, %rdx
// 330: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 335: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 33c: 49 ff 0f                      decq    (%r15)
// 33f: 75 17                         jne     0x358 <_JIT_ENTRY+0x358>
// 341: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000343:  R_X86_64_64  PyObject_Free
// 34b: 4c 89 ff                      movq    %r15, %rdi
// 34e: ff d0                         callq   *%rax
// 350: 4c 89 ea                      movq    %r13, %rdx
// 353: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 358: 83 e2 03                      andl    $0x3, %edx
// 35b: b8 01 00 00 00                movl    $0x1, %eax
// 360: b9 01 00 00 00                movl    $0x1, %ecx
// 365: 48 29 d1                      subq    %rdx, %rcx
// 368: 48 0f af 4c 24 20             imulq   0x20(%rsp), %rcx
// 36e: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 373: 83 e2 03                      andl    $0x3, %edx
// 376: 48 29 d0                      subq    %rdx, %rax
// 379: 48 0f af 44 24 18             imulq   0x18(%rsp), %rax
// 37f: 31 d2                         xorl    %edx, %edx
// 381: 31 f6                         xorl    %esi, %esi
// 383: 48 39 c1                      cmpq    %rax, %rcx
// 386: 0f 9d c2                      setge   %dl
// 389: 40 0f 9e c6                   setle   %sil
// 38d: 01 d2                         addl    %edx, %edx
// 38f: 09 d6                         orl     %edx, %esi
// 391: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000393:  R_X86_64_64  _JIT_OPARG
// 39b: 0f b7 c0                      movzwl  %ax, %eax
// 39e: 0f a3 f0                      btl     %esi, %eax
// 3a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003a3:  R_X86_64_64  _Py_FalseStruct
// 3ab: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000003ad:  R_X86_64_64  _Py_TrueStruct
// 3b5: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 3b9: f7 d0                         notl    %eax
// 3bb: 48 98                         cltq
// 3bd: 49 89 54 c6 f0                movq    %rdx, -0x10(%r14,%rax,8)
// 3c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c4:  R_X86_64_64  _JIT_CONTINUE
// 3cc: 48 89 df                      movq    %rbx, %rdi
// 3cf: 4c 89 e6                      movq    %r12, %rsi
// 3d2: 4c 89 c2                      movq    %r8, %rdx
// 3d5: 48 83 c4 28                   addq    $0x28, %rsp
// 3d9: 5b                            popq    %rbx
// 3da: 41 5c                         popq    %r12
// 3dc: 41 5d                         popq    %r13
// 3de: 41 5e                         popq    %r14
// 3e0: 41 5f                         popq    %r15
// 3e2: 5d                            popq    %rbp
// 3e3: ff e0                         jmpq    *%rax
// 3e5: 49 89 c6                      movq    %rax, %r14
// 3e8: 49 29 de                      subq    %rbx, %r14
// 3eb: 49 83 c6 b8                   addq    $-0x48, %r14
// 3ef: 49 c1 ee 03                   shrq    $0x3, %r14
// 3f3: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3f7: 31 c0                         xorl    %eax, %eax
// 3f9: e9 dc fc ff ff                jmp     0xda <_JIT_ENTRY+0xda>
// 3fe: 
static const unsigned char _CALL_BUILTIN_Oplus_COMPARE_OP_INT_code_body[1023] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x56, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x37, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2c, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4f, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7f, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x7a, 0x4c, 0x89, 0xf5, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xd9, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x81, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x18, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0xff, 0x08, 0x75, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x22, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xd1, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x85, 0xc0, 0x74, 0x08, 0x49, 0x89, 0xee, 0xe9, 0xa2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4f, 0x8b, 0x64, 0xee, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x3f, 0xfe, 0xff, 0xff, 0x4f, 0x8b, 0x7c, 0xee, 0xf8, 0x49, 0x39, 0x47, 0x08, 0x0f, 0x85, 0x30, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xfa, 0x0f, 0x0f, 0x87, 0x21, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x83, 0xf8, 0x0f, 0x0f, 0x87, 0x13, 0xfe, 0xff, 0xff, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x89, 0x44, 0x24, 0x20, 0x41, 0x8b, 0x47, 0x18, 0x48, 0x89, 0x44, 0x24, 0x18, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x4f, 0x48, 0x89, 0xd5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xea, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xea, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4f, 0x8d, 0x24, 0xee, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x75, 0x30, 0x49, 0x89, 0xd5, 0xff, 0xd1, 0x4c, 0x89, 0xea, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0f, 0x75, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x89, 0xea, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x83, 0xe2, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x48, 0x29, 0xd1, 0x48, 0x0f, 0xaf, 0x4c, 0x24, 0x20, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x83, 0xe2, 0x03, 0x48, 0x29, 0xd0, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x18, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x0f, 0xa3, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x54, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xdc, 0xfc, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_COMPARE_OP_INT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x343, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x393, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x3ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x3c4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_COMPARE_OP_INT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_COMPARE_OP_INT_data_holes[1];

// _CALL_BUILTIN_Oplus_COMPARE_OP_STR
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_COMPARE_OP_STR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 59                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3a                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2f                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 80 00 00 00             jne     0x12c <_JIT_ENTRY+0x12c>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: eb 7b                         jmp     0x12e <_JIT_ENTRY+0x12e>
// b3: 4d 89 f7                      movq    %r14, %r15
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 0f 85 50 02 00 00             jne     0x363 <_JIT_ENTRY+0x363>
// 113: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 118: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 11d: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 121: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 126: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12a: 74 80                         je      0xac <_JIT_ENTRY+0xac>
// 12c: 31 ff                         xorl    %edi, %edi
// 12e: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 133: 4c 89 fe                      movq    %r15, %rsi
// 136: 41 ff d0                      callq   *%r8
// 139: 48 8b 3c 24                   movq    (%rsp), %rdi
// 13d: ff 47 2c                      incl    0x2c(%rdi)
// 140: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 145: 49 8b 07                      movq    (%r15), %rax
// 148: 48 85 c0                      testq   %rax, %rax
// 14b: 7f 2a                         jg      0x177 <_JIT_ENTRY+0x177>
// 14d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014f:  R_X86_64_64  .rodata.str1.1
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _Py_NegativeRefcount
// 161: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 166: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 16b: 4c 89 fa                      movq    %r15, %rdx
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 3c 24                   movq    (%rsp), %rdi
// 174: 49 8b 07                      movq    (%r15), %rax
// 177: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: 85 c0                         testl   %eax, %eax
// 183: 78 26                         js      0x1ab <_JIT_ENTRY+0x1ab>
// 185: 41 ff d7                      callq   *%r15
// 188: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 191: 48 ff 08                      decq    (%rax)
// 194: 75 15                         jne     0x1ab <_JIT_ENTRY+0x1ab>
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _Py_Dealloc
// 1a0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a5: ff d0                         callq   *%rax
// 1a7: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ab: 49 8b 04 24                   movq    (%r12), %rax
// 1af: 48 85 c0                      testq   %rax, %rax
// 1b2: 7f 26                         jg      0x1da <_JIT_ENTRY+0x1da>
// 1b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b6:  R_X86_64_64  .rodata.str1.1
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_NegativeRefcount
// 1c8: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1cd: 4c 89 e2                      movq    %r12, %rdx
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d6: 49 8b 04 24                   movq    (%r12), %rax
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 20                         js      0x1fe <_JIT_ENTRY+0x1fe>
// 1de: 41 ff d7                      callq   *%r15
// 1e1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 13                         jne     0x1fe <_JIT_ENTRY+0x1fe>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fe: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 202: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 207: 48 85 c9                      testq   %rcx, %rcx
// 20a: 0f 84 50 01 00 00             je      0x360 <_JIT_ENTRY+0x360>
// 210: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 214: 48 89 08                      movq    %rcx, (%rax)
// 217: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 21b: 48 8b 00                      movq    (%rax), %rax
// 21e: 84 c0                         testb   %al, %al
// 220: 74 18                         je      0x23a <_JIT_ENTRY+0x23a>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_HandlePending
// 22c: ff d0                         callq   *%rax
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 08                         je      0x23a <_JIT_ENTRY+0x23a>
// 232: 4d 89 fe                      movq    %r15, %r14
// 235: e9 29 01 00 00                jmp     0x363 <_JIT_ENTRY+0x363>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _JIT_OPARG
// 244: f7 d0                         notl    %eax
// 246: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24b: 48 63 e8                      movslq  %eax, %rbp
// 24e: 4d 8b 6c ee f0                movq    -0x10(%r14,%rbp,8), %r13
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  PyUnicode_Type
// 25d: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 261: 0f 85 4f fe ff ff             jne     0xb6 <_JIT_ENTRY+0xb6>
// 267: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 26c: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 271: 0f 85 3f fe ff ff             jne     0xb6 <_JIT_ENTRY+0xb6>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _PyUnicode_Equal
// 281: 4c 89 ef                      movq    %r13, %rdi
// 284: 4c 89 e6                      movq    %r12, %rsi
// 287: ff d0                         callq   *%rax
// 289: 41 89 c7                      movl    %eax, %r15d
// 28c: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 291: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000293:  R_X86_64_64  PyInterpreterState_Get
// 29b: 75 3c                         jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  PyInterpreterState_Get
// 2a7: ff d0                         callq   *%rax
// 2a9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2b0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b2:  R_X86_64_64  PyInterpreterState_Get
// 2ba: 49 ff 4d 00                   decq    (%r13)
// 2be: 75 19                         jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _PyUnicode_ExactDealloc
// 2ca: 4c 89 ef                      movq    %r13, %rdi
// 2cd: ff d0                         callq   *%rax
// 2cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002d1:  R_X86_64_64  PyInterpreterState_Get
// 2d9: 4d 8d 2c ee                   leaq    (%r14,%rbp,8), %r13
// 2dd: 49 83 c5 f8                   addq    $-0x8, %r13
// 2e1: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 2e7: 75 1e                         jne     0x307 <_JIT_ENTRY+0x307>
// 2e9: ff d1                         callq   *%rcx
// 2eb: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2f2: 49 ff 0c 24                   decq    (%r12)
// 2f6: 75 0f                         jne     0x307 <_JIT_ENTRY+0x307>
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _PyUnicode_ExactDealloc
// 302: 4c 89 e7                      movq    %r12, %rdi
// 305: ff d0                         callq   *%rax
// 307: 41 83 c7 07                   addl    $0x7, %r15d
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _JIT_OPARG
// 315: 0f b7 c0                      movzwl  %ax, %eax
// 318: 41 85 c7                      testl   %eax, %r15d
// 31b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000031d:  R_X86_64_64  _Py_FalseStruct
// 325: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000327:  R_X86_64_64  _Py_TrueStruct
// 32f: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 333: f7 d0                         notl    %eax
// 335: 48 98                         cltq
// 337: 49 89 54 c6 f0                movq    %rdx, -0x10(%r14,%rax,8)
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _JIT_CONTINUE
// 346: 48 89 df                      movq    %rbx, %rdi
// 349: 4c 89 ee                      movq    %r13, %rsi
// 34c: 48 8b 14 24                   movq    (%rsp), %rdx
// 350: 48 83 c4 18                   addq    $0x18, %rsp
// 354: 5b                            popq    %rbx
// 355: 41 5c                         popq    %r12
// 357: 41 5d                         popq    %r13
// 359: 41 5e                         popq    %r14
// 35b: 41 5f                         popq    %r15
// 35d: 5d                            popq    %rbp
// 35e: ff e0                         jmpq    *%rax
// 360: 49 89 c6                      movq    %rax, %r14
// 363: 49 29 de                      subq    %rbx, %r14
// 366: 49 83 c6 b8                   addq    $-0x48, %r14
// 36a: 49 c1 ee 03                   shrq    $0x3, %r14
// 36e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 372: 31 c0                         xorl    %eax, %eax
// 374: e9 65 fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 379: 
static const unsigned char _CALL_BUILTIN_Oplus_COMPARE_OP_STR_code_body[890] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x59, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3a, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2f, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x80, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x7b, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x50, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x80, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfe, 0xe9, 0x29, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x6c, 0xee, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x4f, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x3f, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x2c, 0xee, 0x49, 0x83, 0xc5, 0xf8, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x41, 0x83, 0xc7, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x41, 0x85, 0xc7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x54, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x65, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_COMPARE_OP_STR_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_COMPARE_OP_STR_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_COMPARE_OP_STR_data_holes[1];

// _CALL_BUILTIN_Oplus_CONTAINS_OP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CONTAINS_OP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4c                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 0c 24                   movq    %rcx, (%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7a                         jne     0x122 <_JIT_ENTRY+0x122>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 75                         jmp     0x124 <_JIT_ENTRY+0x124>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 04 24                   movq    %r8, (%rsp)
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_CheckRecursiveCall
// fe: 48 89 d7                      movq    %rdx, %rdi
// 101: ff d0                         callq   *%rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 0f 85 5e 02 00 00             jne     0x369 <_JIT_ENTRY+0x369>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 04 24                   movq    (%rsp), %r8
// 114: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 118: 48 89 0c 24                   movq    %rcx, (%rsp)
// 11c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 120: 74 86                         je      0xa8 <_JIT_ENTRY+0xa8>
// 122: 31 ff                         xorl    %edi, %edi
// 124: 4c 8b 3c 24                   movq    (%rsp), %r15
// 128: 4c 89 fe                      movq    %r15, %rsi
// 12b: 41 ff d0                      callq   *%r8
// 12e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 133: ff 47 2c                      incl    0x2c(%rdi)
// 136: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13b: 49 8b 07                      movq    (%r15), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7f 2a                         jg      0x16d <_JIT_ENTRY+0x16d>
// 143: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 160: 4c 89 fa                      movq    %r15, %rdx
// 163: ff d0                         callq   *%rax
// 165: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16a: 49 8b 07                      movq    (%r15), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 2f                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 8b 04 24                   movq    (%rsp), %rax
// 186: 48 ff 08                      decq    (%rax)
// 189: 75 15                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 48 8b 3c 24                   movq    (%rsp), %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 27                         jg      0x1d0 <_JIT_ENTRY+0x1d0>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 2b                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 14                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 208: 4d 85 ff                      testq   %r15, %r15
// 20b: 0f 84 55 01 00 00             je      0x366 <_JIT_ENTRY+0x366>
// 211: 4c 89 38                      movq    %r15, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 19                         je      0x238 <_JIT_ENTRY+0x238>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 74 09                         je      0x238 <_JIT_ENTRY+0x238>
// 22f: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 233: e9 31 01 00 00                jmp     0x369 <_JIT_ENTRY+0x369>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_OPARG
// 242: f7 d0                         notl    %eax
// 244: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 249: 48 63 e8                      movslq  %eax, %rbp
// 24c: 4d 8b 6c ee f0                movq    -0x10(%r14,%rbp,8), %r13
// 251: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  PySequence_Contains
// 260: 4c 89 e7                      movq    %r12, %rdi
// 263: 4c 89 ee                      movq    %r13, %rsi
// 266: ff d0                         callq   *%rax
// 268: 89 04 24                      movl    %eax, (%rsp)
// 26b: 49 8b 45 00                   movq    (%r13), %rax
// 26f: 48 85 c0                      testq   %rax, %rax
// 272: 7f 22                         jg      0x296 <_JIT_ENTRY+0x296>
// 274: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000276:  R_X86_64_64  .rodata.str1.1
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_NegativeRefcount
// 288: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 28d: 4c 89 ea                      movq    %r13, %rdx
// 290: ff d0                         callq   *%rax
// 292: 49 8b 45 00                   movq    (%r13), %rax
// 296: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000298:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a0: 85 c0                         testl   %eax, %eax
// 2a2: 78 18                         js      0x2bc <_JIT_ENTRY+0x2bc>
// 2a4: 41 ff d7                      callq   *%r15
// 2a7: 49 ff 4d 00                   decq    (%r13)
// 2ab: 75 0f                         jne     0x2bc <_JIT_ENTRY+0x2bc>
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _Py_Dealloc
// 2b7: 4c 89 ef                      movq    %r13, %rdi
// 2ba: ff d0                         callq   *%rax
// 2bc: 49 8b 04 24                   movq    (%r12), %rax
// 2c0: 48 85 c0                      testq   %rax, %rax
// 2c3: 7f 22                         jg      0x2e7 <_JIT_ENTRY+0x2e7>
// 2c5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c7:  R_X86_64_64  .rodata.str1.1
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _Py_NegativeRefcount
// 2d9: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// 2de: 4c 89 e2                      movq    %r12, %rdx
// 2e1: ff d0                         callq   *%rax
// 2e3: 49 8b 04 24                   movq    (%r12), %rax
// 2e7: 85 c0                         testl   %eax, %eax
// 2e9: 78 18                         js      0x303 <_JIT_ENTRY+0x303>
// 2eb: 41 ff d7                      callq   *%r15
// 2ee: 49 ff 0c 24                   decq    (%r12)
// 2f2: 75 0f                         jne     0x303 <_JIT_ENTRY+0x303>
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _Py_Dealloc
// 2fe: 4c 89 e7                      movq    %r12, %rdi
// 301: ff d0                         callq   *%rax
// 303: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 307: 48 83 c0 f0                   addq    $-0x10, %rax
// 30b: 8b 14 24                      movl    (%rsp), %edx
// 30e: 85 d2                         testl   %edx, %edx
// 310: 78 54                         js      0x366 <_JIT_ENTRY+0x366>
// 312: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 316: 48 83 c6 f8                   addq    $-0x8, %rsi
// 31a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000031c:  R_X86_64_64  _JIT_OPARG
// 324: 0f b7 c9                      movzwl  %cx, %ecx
// 327: 39 ca                         cmpl    %ecx, %edx
// 329: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000032b:  R_X86_64_64  _Py_FalseStruct
// 333: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000335:  R_X86_64_64  _Py_TrueStruct
// 33d: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 341: 48 89 10                      movq    %rdx, (%rax)
// 344: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000346:  R_X86_64_64  _JIT_CONTINUE
// 34e: 48 89 df                      movq    %rbx, %rdi
// 351: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 356: 48 83 c4 18                   addq    $0x18, %rsp
// 35a: 5b                            popq    %rbx
// 35b: 41 5c                         popq    %r12
// 35d: 41 5d                         popq    %r13
// 35f: 41 5e                         popq    %r14
// 361: 41 5f                         popq    %r15
// 363: 5d                            popq    %rbp
// 364: ff e0                         jmpq    *%rax
// 366: 49 89 c6                      movq    %rax, %r14
// 369: 49 29 de                      subq    %rbx, %r14
// 36c: 49 83 c6 b8                   addq    $-0x48, %r14
// 370: 49 c1 ee 03                   shrq    $0x3, %r14
// 374: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 378: 31 c0                         xorl    %eax, %eax
// 37a: e9 58 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 37f: 
static const unsigned char _CALL_BUILTIN_Oplus_CONTAINS_OP_code_body[896] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4c, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x5e, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xee, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x55, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x31, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x6c, 0xee, 0xf0, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf0, 0x8b, 0x14, 0x24, 0x85, 0xd2, 0x78, 0x54, 0x49, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0xca, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x58, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_CONTAINS_OP_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x335, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_CONTAINS_OP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CONTAINS_OP_data_holes[1];

// _CALL_BUILTIN_Oplus_CONVERT_VALUE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_CONVERT_VALUE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4c                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 0c 24                   movq    %rcx, (%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7a                         jne     0x122 <_JIT_ENTRY+0x122>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 75                         jmp     0x124 <_JIT_ENTRY+0x124>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 04 24                   movq    %r8, (%rsp)
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_CheckRecursiveCall
// fe: 48 89 d7                      movq    %rdx, %rdi
// 101: ff d0                         callq   *%rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 0f 85 ed 01 00 00             jne     0x2f8 <_JIT_ENTRY+0x2f8>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 04 24                   movq    (%rsp), %r8
// 114: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 118: 48 89 0c 24                   movq    %rcx, (%rsp)
// 11c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 120: 74 86                         je      0xa8 <_JIT_ENTRY+0xa8>
// 122: 31 ff                         xorl    %edi, %edi
// 124: 4c 8b 3c 24                   movq    (%rsp), %r15
// 128: 4c 89 fe                      movq    %r15, %rsi
// 12b: 41 ff d0                      callq   *%r8
// 12e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 133: ff 47 2c                      incl    0x2c(%rdi)
// 136: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13b: 49 8b 07                      movq    (%r15), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7f 2a                         jg      0x16d <_JIT_ENTRY+0x16d>
// 143: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 160: 4c 89 fa                      movq    %r15, %rdx
// 163: ff d0                         callq   *%rax
// 165: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16a: 49 8b 07                      movq    (%r15), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 2f                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 8b 04 24                   movq    (%rsp), %rax
// 186: 48 ff 08                      decq    (%rax)
// 189: 75 15                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 48 8b 3c 24                   movq    (%rsp), %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 27                         jg      0x1d0 <_JIT_ENTRY+0x1d0>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 2b                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 14                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2a                         je      0x237 <_JIT_ENTRY+0x237>
// 20d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 20                         je      0x23f <_JIT_ENTRY+0x23f>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 74 10                         je      0x23f <_JIT_ENTRY+0x23f>
// 22f: 4d 89 e6                      movq    %r12, %r14
// 232: e9 c1 00 00 00                jmp     0x2f8 <_JIT_ENTRY+0x2f8>
// 237: 49 89 c6                      movq    %rax, %r14
// 23a: e9 b9 00 00 00                jmp     0x2f8 <_JIT_ENTRY+0x2f8>
// 23f: 4c 89 24 24                   movq    %r12, (%rsp)
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_OPARG
// 24d: 0f b7 c8                      movzwl  %ax, %ecx
// 250: f7 d0                         notl    %eax
// 252: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 257: 4c 63 e0                      movslq  %eax, %r12
// 25a: 4b 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %rbp
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  .rodata
// 269: 48 89 ef                      movq    %rbp, %rdi
// 26c: ff 14 c8                      callq   *(%rax,%rcx,8)
// 26f: 49 89 c5                      movq    %rax, %r13
// 272: 48 8b 45 00                   movq    (%rbp), %rax
// 276: 48 85 c0                      testq   %rax, %rax
// 279: 7f 22                         jg      0x29d <_JIT_ENTRY+0x29d>
// 27b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027d:  R_X86_64_64  .rodata.str1.1
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_NegativeRefcount
// 28f: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 294: 48 89 ea                      movq    %rbp, %rdx
// 297: ff d0                         callq   *%rax
// 299: 48 8b 45 00                   movq    (%rbp), %rax
// 29d: 85 c0                         testl   %eax, %eax
// 29f: 78 21                         js      0x2c2 <_JIT_ENTRY+0x2c2>
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ab: ff d0                         callq   *%rax
// 2ad: 48 ff 4d 00                   decq    (%rbp)
// 2b1: 75 0f                         jne     0x2c2 <_JIT_ENTRY+0x2c2>
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _Py_Dealloc
// 2bd: 48 89 ef                      movq    %rbp, %rdi
// 2c0: ff d0                         callq   *%rax
// 2c2: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 2c6: 49 83 c6 f8                   addq    $-0x8, %r14
// 2ca: 4d 85 ed                      testq   %r13, %r13
// 2cd: 74 29                         je      0x2f8 <_JIT_ENTRY+0x2f8>
// 2cf: 4d 89 2e                      movq    %r13, (%r14)
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _JIT_CONTINUE
// 2dc: 48 89 df                      movq    %rbx, %rdi
// 2df: 48 8b 34 24                   movq    (%rsp), %rsi
// 2e3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2e8: 48 83 c4 18                   addq    $0x18, %rsp
// 2ec: 5b                            popq    %rbx
// 2ed: 41 5c                         popq    %r12
// 2ef: 41 5d                         popq    %r13
// 2f1: 41 5e                         popq    %r14
// 2f3: 41 5f                         popq    %r15
// 2f5: 5d                            popq    %rbp
// 2f6: ff e0                         jmpq    *%rax
// 2f8: 49 29 de                      subq    %rbx, %r14
// 2fb: 49 83 c6 b8                   addq    $-0x48, %r14
// 2ff: 49 c1 ee 03                   shrq    $0x3, %r14
// 303: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 307: 31 c0                         xorl    %eax, %eax
// 309: e9 c9 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 30e: 
static const unsigned char _CALL_BUILTIN_Oplus_CONVERT_VALUE_code_body[783] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4c, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xed, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x10, 0x4d, 0x89, 0xe6, 0xe9, 0xc1, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xe9, 0xb9, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x24, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0x14, 0xc8, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x85, 0xed, 0x74, 0x29, 0x4d, 0x89, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xc9, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_CONVERT_VALUE_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x58},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 78: 
static const unsigned char _CALL_BUILTIN_Oplus_CONVERT_VALUE_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_CONVERT_VALUE_data_holes[4] = {
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _CALL_BUILTIN_Oplus_COPY
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_COPY.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2f 01 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1af: 7f 26                         jg      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b3:  R_X86_64_64  .rodata.str1.1
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_NegativeRefcount
// 1c5: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1ca: 4c 89 e2                      movq    %r12, %rdx
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d3: 49 8b 04 24                   movq    (%r12), %rax
// 1d7: 85 c0                         testl   %eax, %eax
// 1d9: 78 29                         js      0x204 <_JIT_ENTRY+0x204>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e5: ff d0                         callq   *%rax
// 1e7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1eb: 49 ff 0c 24                   decq    (%r12)
// 1ef: 75 13                         jne     0x204 <_JIT_ENTRY+0x204>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 4c 89 e7                      movq    %r12, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 48 8b 14 24                   movq    (%rsp), %rdx
// 204: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 208: 4d 85 ff                      testq   %r15, %r15
// 20b: 74 2b                         je      0x238 <_JIT_ENTRY+0x238>
// 20d: 4c 89 38                      movq    %r15, (%rax)
// 210: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: 48 89 d7                      movq    %rdx, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 14 24                   movq    (%rsp), %rdx
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 1f                         je      0x251 <_JIT_ENTRY+0x251>
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: eb 03                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 238: 49 89 c6                      movq    %rax, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: e9 86 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_OPARG
// 25b: 0f b7 c8                      movzwl  %ax, %ecx
// 25e: f7 d0                         notl    %eax
// 260: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 265: 48 98                         cltq
// 267: 48 29 c8                      subq    %rcx, %rax
// 26a: 4d 8b 3c c6                   movq    (%r14,%rax,8), %r15
// 26e: 41 8b 07                      movl    (%r15), %eax
// 271: ff c0                         incl    %eax
// 273: 74 13                         je      0x288 <_JIT_ENTRY+0x288>
// 275: 41 89 07                      movl    %eax, (%r15)
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 282: ff d0                         callq   *%rax
// 284: 48 8b 14 24                   movq    (%rsp), %rdx
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _JIT_OPARG
// 292: f7 d0                         notl    %eax
// 294: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 299: 48 98                         cltq
// 29b: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 29f: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2a3: 48 83 c6 08                   addq    $0x8, %rsi
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _JIT_CONTINUE
// 2b1: 48 89 df                      movq    %rbx, %rdi
// 2b4: 48 83 c4 18                   addq    $0x18, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: ff e0                         jmpq    *%rax
// 2c4: 
static const unsigned char _CALL_BUILTIN_Oplus_COPY_code_body[709] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x4d, 0x85, 0xff, 0x74, 0x2b, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x4d, 0x8b, 0x3c, 0xc6, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x13, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_COPY_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_COPY_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_COPY_data_holes[1];

// _CALL_BUILTIN_Oplus_COPY_FREE_VARS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_COPY_FREE_VARS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 56                         jne     0xb0 <_JIT_ENTRY+0xb0>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 37                         jne     0xb0 <_JIT_ENTRY+0xb0>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2c                         jne     0xb0 <_JIT_ENTRY+0xb0>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4d                         jle     0xe7 <_JIT_ENTRY+0xe7>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// a3: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a7: 75 7d                         jne     0x126 <_JIT_ENTRY+0x126>
// a9: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ae: eb 78                         jmp     0x128 <_JIT_ENTRY+0x128>
// b0: 49 29 de                      subq    %rbx, %r14
// b3: 49 83 c6 b8                   addq    $-0x48, %r14
// b7: 49 c1 ee 03                   shrq    $0x3, %r14
// bb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// bf: 48 8b 03                      movq    (%rbx), %rax
// c2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c4:  R_X86_64_64  _JIT_TARGET
// cc: 89 c9                         movl    %ecx, %ecx
// ce: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d8: 48 83 c4 28                   addq    $0x28, %rsp
// dc: 5b                            popq    %rbx
// dd: 41 5c                         popq    %r12
// df: 41 5d                         popq    %r13
// e1: 41 5e                         popq    %r14
// e3: 41 5f                         popq    %r15
// e5: 5d                            popq    %rbp
// e6: c3                            retq
// e7: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// ec: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ee:  R_X86_64_64  .rodata.str1.1+0x39
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  _Py_CheckRecursiveCall
// 100: 48 89 d7                      movq    %rdx, %rdi
// 103: ff d0                         callq   *%rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 0f 85 cf 01 00 00             jne     0x2dc <_JIT_ENTRY+0x2dc>
// 10d: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 112: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 117: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11b: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 120: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 124: 74 83                         je      0xa9 <_JIT_ENTRY+0xa9>
// 126: 31 ff                         xorl    %edi, %edi
// 128: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 12d: 4c 89 fe                      movq    %r15, %rsi
// 130: 41 ff d0                      callq   *%r8
// 133: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 138: ff 42 2c                      incl    0x2c(%rdx)
// 13b: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 140: 49 8b 07                      movq    (%r15), %rax
// 143: 48 85 c0                      testq   %rax, %rax
// 146: 7f 2b                         jg      0x173 <_JIT_ENTRY+0x173>
// 148: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014a:  R_X86_64_64  .rodata.str1.1
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 161: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 166: 4c 89 fa                      movq    %r15, %rdx
// 169: ff d0                         callq   *%rax
// 16b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 170: 49 8b 07                      movq    (%r15), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 31                         js      0x1a8 <_JIT_ENTRY+0x1a8>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 188: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 18d: 48 ff 08                      decq    (%rax)
// 190: 75 16                         jne     0x1a8 <_JIT_ENTRY+0x1a8>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_Dealloc
// 19c: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1a1: ff d0                         callq   *%rax
// 1a3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1a8: 49 8b 04 24                   movq    (%r12), %rax
// 1ac: 48 85 c0                      testq   %rax, %rax
// 1af: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 1b4: 7f 27                         jg      0x1dd <_JIT_ENTRY+0x1dd>
// 1b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b8:  R_X86_64_64  .rodata.str1.1
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_NegativeRefcount
// 1ca: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1cf: 4c 89 e2                      movq    %r12, %rdx
// 1d2: ff d0                         callq   *%rax
// 1d4: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1d9: 49 8b 04 24                   movq    (%r12), %rax
// 1dd: 85 c0                         testl   %eax, %eax
// 1df: 78 2b                         js      0x20c <_JIT_ENTRY+0x20c>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1eb: ff d0                         callq   *%rax
// 1ed: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1f2: 49 ff 0c 24                   decq    (%r12)
// 1f6: 75 14                         jne     0x20c <_JIT_ENTRY+0x20c>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_Dealloc
// 202: 4c 89 e7                      movq    %r12, %rdi
// 205: ff d0                         callq   *%rax
// 207: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 20c: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 210: 4d 85 ff                      testq   %r15, %r15
// 213: 0f 84 c0 00 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 219: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 21d: 4c 89 38                      movq    %r15, (%rax)
// 220: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 224: 48 8b 00                      movq    (%rax), %rax
// 227: 84 c0                         testb   %al, %al
// 229: 74 1c                         je      0x247 <_JIT_ENTRY+0x247>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_HandlePending
// 235: 48 89 d7                      movq    %rdx, %rdi
// 238: ff d0                         callq   *%rax
// 23a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 23f: 85 c0                         testl   %eax, %eax
// 241: 0f 85 95 00 00 00             jne     0x2dc <_JIT_ENTRY+0x2dc>
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _JIT_OPARG
// 251: 66 85 c0                      testw   %ax, %ax
// 254: 0f 84 98 00 00 00             je      0x2f2 <_JIT_ENTRY+0x2f2>
// 25a: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 25e: 4c 8b 60 48                   movq    0x48(%rax), %r12
// 262: 48 8b 03                      movq    (%rbx), %rax
// 265: 8b 40 48                      movl    0x48(%rax), %eax
// 268: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026a:  R_X86_64_64  _JIT_OPARG
// 272: 0f b7 c9                      movzwl  %cx, %ecx
// 275: 29 c8                         subl    %ecx, %eax
// 277: 83 f9 02                      cmpl    $0x2, %ecx
// 27a: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 280: 44 0f 43 e9                   cmovael %ecx, %r13d
// 284: 48 98                         cltq
// 286: 48 8d 0c c3                   leaq    (%rbx,%rax,8), %rcx
// 28a: 48 83 c1 48                   addq    $0x48, %rcx
// 28e: 31 ed                         xorl    %ebp, %ebp
// 290: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 295: eb 15                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 297: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 2a0: 4c 89 3c e9                   movq    %r15, (%rcx,%rbp,8)
// 2a4: 48 ff c5                      incq    %rbp
// 2a7: 49 39 ed                      cmpq    %rbp, %r13
// 2aa: 74 46                         je      0x2f2 <_JIT_ENTRY+0x2f2>
// 2ac: 4d 8b 7c ec 18                movq    0x18(%r12,%rbp,8), %r15
// 2b1: 41 8b 07                      movl    (%r15), %eax
// 2b4: ff c0                         incl    %eax
// 2b6: 74 e8                         je      0x2a0 <_JIT_ENTRY+0x2a0>
// 2b8: 41 89 07                      movl    %eax, (%r15)
// 2bb: 48 89 cb                      movq    %rcx, %rbx
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2c8: ff d0                         callq   *%rax
// 2ca: 48 89 d9                      movq    %rbx, %rcx
// 2cd: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 2d2: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2d7: eb c7                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 2d9: 49 89 c6                      movq    %rax, %r14
// 2dc: 49 29 de                      subq    %rbx, %r14
// 2df: 49 83 c6 b8                   addq    $-0x48, %r14
// 2e3: 49 c1 ee 03                   shrq    $0x3, %r14
// 2e7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2eb: 31 c0                         xorl    %eax, %eax
// 2ed: e9 e6 fd ff ff                jmp     0xd8 <_JIT_ENTRY+0xd8>
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _JIT_CONTINUE
// 2fc: 48 89 df                      movq    %rbx, %rdi
// 2ff: 4c 89 f6                      movq    %r14, %rsi
// 302: 48 83 c4 28                   addq    $0x28, %rsp
// 306: 5b                            popq    %rbx
// 307: 41 5c                         popq    %r12
// 309: 41 5d                         popq    %r13
// 30b: 41 5e                         popq    %r14
// 30d: 41 5f                         popq    %r15
// 30f: 5d                            popq    %rbp
// 310: ff e0                         jmpq    *%rax
// 312: 
static const unsigned char _CALL_BUILTIN_Oplus_COPY_FREE_VARS_code_body[787] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x56, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x37, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2c, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xcf, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x18, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0xff, 0x08, 0x75, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xee, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x0f, 0x85, 0x95, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x43, 0x10, 0x4c, 0x8b, 0x60, 0x48, 0x48, 0x8b, 0x03, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe9, 0x48, 0x98, 0x48, 0x8d, 0x0c, 0xc3, 0x48, 0x83, 0xc1, 0x48, 0x31, 0xed, 0x48, 0x89, 0x5c, 0x24, 0x20, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x3c, 0xe9, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xed, 0x74, 0x46, 0x4d, 0x8b, 0x7c, 0xec, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0xe8, 0x41, 0x89, 0x07, 0x48, 0x89, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xd9, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xeb, 0xc7, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xe6, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_COPY_FREE_VARS_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_COPY_FREE_VARS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_COPY_FREE_VARS_data_holes[1];

// _CALL_BUILTIN_Oplus_DELETE_ATTR
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_DELETE_ATTR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 df                      subq    %rbx, %r15
// b2: 49 83 c7 b8                   addq    $-0x48, %r15
// b6: 49 c1 ef 03                   shrq    $0x3, %r15
// ba: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 d0 01 00 00             jne     0x2dc <_JIT_ENTRY+0x2dc>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12c: 4c 89 f6                      movq    %r14, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 06                      movq    (%r14), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 164: 4c 89 f2                      movq    %r14, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 06                      movq    (%r14), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 3c 24                   movq    (%rsp), %rdi
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1af: 7f 26                         jg      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b3:  R_X86_64_64  .rodata.str1.1
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_NegativeRefcount
// 1c5: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1ca: 4c 89 e2                      movq    %r12, %rdx
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d3: 49 8b 04 24                   movq    (%r12), %rax
// 1d7: 85 c0                         testl   %eax, %eax
// 1d9: 78 29                         js      0x204 <_JIT_ENTRY+0x204>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e5: ff d0                         callq   *%rax
// 1e7: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1eb: 49 ff 0c 24                   decq    (%r12)
// 1ef: 75 13                         jne     0x204 <_JIT_ENTRY+0x204>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 4c 89 e7                      movq    %r12, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 48 8b 3c 24                   movq    (%rsp), %rdi
// 204: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 208: 4d 85 f6                      testq   %r14, %r14
// 20b: 0f 84 c8 00 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 211: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 215: 4c 89 30                      movq    %r14, (%rax)
// 218: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 21c: 48 8b 00                      movq    (%rax), %rax
// 21f: 84 c0                         testb   %al, %al
// 221: 74 14                         je      0x237 <_JIT_ENTRY+0x237>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_HandlePending
// 22d: ff d0                         callq   *%rax
// 22f: 85 c0                         testl   %eax, %eax
// 231: 0f 85 9d 00 00 00             jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_OPARG
// 241: 0f b7 c8                      movzwl  %ax, %ecx
// 244: f7 d0                         notl    %eax
// 246: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24b: 4c 63 f0                      movslq  %eax, %r14
// 24e: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 253: 48 8b 03                      movq    (%rbx), %rax
// 256: 48 8b 40 20                   movq    0x20(%rax), %rax
// 25a: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  PyObject_DelAttr
// 269: 4c 89 ef                      movq    %r13, %rdi
// 26c: ff d0                         callq   *%rax
// 26e: 89 c5                         movl    %eax, %ebp
// 270: 49 8b 45 00                   movq    (%r13), %rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 7f 22                         jg      0x29b <_JIT_ENTRY+0x29b>
// 279: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027b:  R_X86_64_64  .rodata.str1.1
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_NegativeRefcount
// 28d: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// 292: 4c 89 ea                      movq    %r13, %rdx
// 295: ff d0                         callq   *%rax
// 297: 49 8b 45 00                   movq    (%r13), %rax
// 29b: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 29f: 49 83 c6 f8                   addq    $-0x8, %r14
// 2a3: 85 c0                         testl   %eax, %eax
// 2a5: 78 21                         js      0x2c8 <_JIT_ENTRY+0x2c8>
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b1: ff d0                         callq   *%rax
// 2b3: 49 ff 4d 00                   decq    (%r13)
// 2b7: 75 0f                         jne     0x2c8 <_JIT_ENTRY+0x2c8>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_Dealloc
// 2c3: 4c 89 ef                      movq    %r13, %rdi
// 2c6: ff d0                         callq   *%rax
// 2c8: 85 ed                         testl   %ebp, %ebp
// 2ca: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 2ce: 74 22                         je      0x2f2 <_JIT_ENTRY+0x2f2>
// 2d0: 49 83 c4 f8                   addq    $-0x8, %r12
// 2d4: 4d 89 e7                      movq    %r12, %r15
// 2d7: eb 03                         jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 2d9: 49 89 c7                      movq    %rax, %r15
// 2dc: 49 29 df                      subq    %rbx, %r15
// 2df: 49 83 c7 b8                   addq    $-0x48, %r15
// 2e3: 49 c1 ef 03                   shrq    $0x3, %r15
// 2e7: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2eb: 31 c0                         xorl    %eax, %eax
// 2ed: e9 e5 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _JIT_CONTINUE
// 2fc: 48 89 df                      movq    %rbx, %rdi
// 2ff: 4c 89 e6                      movq    %r12, %rsi
// 302: 48 8b 14 24                   movq    (%rsp), %rdx
// 306: 48 83 c4 18                   addq    $0x18, %rsp
// 30a: 5b                            popq    %rbx
// 30b: 41 5c                         popq    %r12
// 30d: 41 5d                         popq    %r13
// 30f: 41 5e                         popq    %r14
// 311: 41 5f                         popq    %r15
// 313: 5d                            popq    %rbp
// 314: ff e0                         jmpq    *%rax
// 316: 
static const unsigned char _CALL_BUILTIN_Oplus_DELETE_ATTR_code_body[791] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xd0, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x22, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x89, 0xe7, 0xeb, 0x03, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xe5, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_DELETE_ATTR_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_DELETE_ATTR_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_DELETE_ATTR_data_holes[1];

// _CALL_BUILTIN_Oplus_DELETE_DEREF
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_DELETE_DEREF.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 fc 01 00 00             jne     0x308 <_JIT_ENTRY+0x308>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 0c 24                   movq    (%rsp), %rcx
// 136: ff 41 2c                      incl    0x2c(%rcx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 0c 24                   movq    (%rsp), %rcx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 208: 48 85 d2                      testq   %rdx, %rdx
// 20b: 0f 84 d3 00 00 00             je      0x2e4 <_JIT_ENTRY+0x2e4>
// 211: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 215: 48 89 10                      movq    %rdx, (%rax)
// 218: 48 8b 41 10                   movq    0x10(%rcx), %rax
// 21c: 48 8b 00                      movq    (%rax), %rax
// 21f: 84 c0                         testb   %al, %al
// 221: 74 1b                         je      0x23e <_JIT_ENTRY+0x23e>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_HandlePending
// 22d: 48 89 cf                      movq    %rcx, %rdi
// 230: ff d0                         callq   *%rax
// 232: 48 8b 0c 24                   movq    (%rsp), %rcx
// 236: 85 c0                         testl   %eax, %eax
// 238: 0f 85 ca 00 00 00             jne     0x308 <_JIT_ENTRY+0x308>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _JIT_OPARG
// 248: 0f b7 c0                      movzwl  %ax, %eax
// 24b: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 250: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 254: 4d 85 e4                      testq   %r12, %r12
// 257: 0f 84 8c 00 00 00             je      0x2e9 <_JIT_ENTRY+0x2e9>
// 25d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 265: 49 8b 04 24                   movq    (%r12), %rax
// 269: 48 85 c0                      testq   %rax, %rax
// 26c: 7f 26                         jg      0x294 <_JIT_ENTRY+0x294>
// 26e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000270:  R_X86_64_64  .rodata.str1.1
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_NegativeRefcount
// 282: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 287: 4c 89 e2                      movq    %r12, %rdx
// 28a: ff d0                         callq   *%rax
// 28c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 290: 49 8b 04 24                   movq    (%r12), %rax
// 294: 85 c0                         testl   %eax, %eax
// 296: 78 29                         js      0x2c1 <_JIT_ENTRY+0x2c1>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: ff d0                         callq   *%rax
// 2a4: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2a8: 49 ff 0c 24                   decq    (%r12)
// 2ac: 75 13                         jne     0x2c1 <_JIT_ENTRY+0x2c1>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_Dealloc
// 2b8: 4c 89 e7                      movq    %r12, %rdi
// 2bb: ff d0                         callq   *%rax
// 2bd: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _JIT_CONTINUE
// 2cb: 48 89 df                      movq    %rbx, %rdi
// 2ce: 4c 89 f6                      movq    %r14, %rsi
// 2d1: 48 89 ca                      movq    %rcx, %rdx
// 2d4: 48 83 c4 18                   addq    $0x18, %rsp
// 2d8: 5b                            popq    %rbx
// 2d9: 41 5c                         popq    %r12
// 2db: 41 5d                         popq    %r13
// 2dd: 41 5e                         popq    %r14
// 2df: 41 5f                         popq    %r15
// 2e1: 5d                            popq    %rbp
// 2e2: ff e0                         jmpq    *%rax
// 2e4: 49 89 c6                      movq    %rax, %r14
// 2e7: eb 1f                         jmp     0x308 <_JIT_ENTRY+0x308>
// 2e9: 48 8b 33                      movq    (%rbx), %rsi
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _JIT_OPARG
// 2f6: 0f b7 d0                      movzwl  %ax, %edx
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _PyEval_FormatExcUnbound
// 303: 48 89 cf                      movq    %rcx, %rdi
// 306: ff d0                         callq   *%rax
// 308: 49 29 de                      subq    %rbx, %r14
// 30b: 49 83 c6 b8                   addq    $-0x48, %r14
// 30f: 49 c1 ee 03                   shrq    $0x3, %r14
// 313: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 317: 31 c0                         xorl    %eax, %eax
// 319: e9 b9 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 31e: 
static const unsigned char _CALL_BUILTIN_Oplus_DELETE_DEREF_code_body[799] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xfc, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0xff, 0x41, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xd3, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x41, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0xca, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xca, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x1f, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb9, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_DELETE_DEREF_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_DELETE_DEREF_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_DELETE_DEREF_data_holes[1];

// _CALL_BUILTIN_Oplus_DELETE_FAST
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_DELETE_FAST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 34 02 00 00             jne     0x340 <_JIT_ENTRY+0x340>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 0f 84 da 00 00 00             je      0x2eb <_JIT_ENTRY+0x2eb>
// 211: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 215: 48 89 08                      movq    %rcx, (%rax)
// 218: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 21c: 48 8b 00                      movq    (%rax), %rax
// 21f: 84 c0                         testb   %al, %al
// 221: 74 1b                         je      0x23e <_JIT_ENTRY+0x23e>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_HandlePending
// 22d: 48 89 d7                      movq    %rdx, %rdi
// 230: ff d0                         callq   *%rax
// 232: 48 8b 14 24                   movq    (%rsp), %rdx
// 236: 85 c0                         testl   %eax, %eax
// 238: 0f 85 02 01 00 00             jne     0x340 <_JIT_ENTRY+0x340>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _JIT_OPARG
// 248: 0f b7 c0                      movzwl  %ax, %eax
// 24b: 4c 8b 64 c3 48                movq    0x48(%rbx,%rax,8), %r12
// 250: 4d 85 e4                      testq   %r12, %r12
// 253: 0f 84 97 00 00 00             je      0x2f0 <_JIT_ENTRY+0x2f0>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_OPARG
// 263: 0f b7 c0                      movzwl  %ax, %eax
// 266: 48 c7 44 c3 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rax,8)
// 26f: 49 8b 04 24                   movq    (%r12), %rax
// 273: 48 85 c0                      testq   %rax, %rax
// 276: 7f 26                         jg      0x29e <_JIT_ENTRY+0x29e>
// 278: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027a:  R_X86_64_64  .rodata.str1.1+0xa2
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_NegativeRefcount
// 28c: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 291: 4c 89 e2                      movq    %r12, %rdx
// 294: ff d0                         callq   *%rax
// 296: 48 8b 14 24                   movq    (%rsp), %rdx
// 29a: 49 8b 04 24                   movq    (%r12), %rax
// 29e: 85 c0                         testl   %eax, %eax
// 2a0: 78 29                         js      0x2cb <_JIT_ENTRY+0x2cb>
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ac: ff d0                         callq   *%rax
// 2ae: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b2: 49 ff 0c 24                   decq    (%r12)
// 2b6: 75 13                         jne     0x2cb <_JIT_ENTRY+0x2cb>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_Dealloc
// 2c2: 4c 89 e7                      movq    %r12, %rdi
// 2c5: ff d0                         callq   *%rax
// 2c7: 48 8b 14 24                   movq    (%rsp), %rdx
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _JIT_CONTINUE
// 2d5: 48 89 df                      movq    %rbx, %rdi
// 2d8: 4c 89 f6                      movq    %r14, %rsi
// 2db: 48 83 c4 18                   addq    $0x18, %rsp
// 2df: 5b                            popq    %rbx
// 2e0: 41 5c                         popq    %r12
// 2e2: 41 5d                         popq    %r13
// 2e4: 41 5e                         popq    %r14
// 2e6: 41 5f                         popq    %r15
// 2e8: 5d                            popq    %rbp
// 2e9: ff e0                         jmpq    *%rax
// 2eb: 49 89 c6                      movq    %rax, %r14
// 2ee: eb 50                         jmp     0x340 <_JIT_ENTRY+0x340>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  PyExc_UnboundLocalError
// 2fa: 4c 8b 20                      movq    (%rax), %r12
// 2fd: 48 8b 03                      movq    (%rbx), %rax
// 300: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 304: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000306:  R_X86_64_64  _JIT_OPARG
// 30e: 0f b7 f0                      movzwl  %ax, %esi
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  PyTuple_GetItem
// 31b: 49 89 d7                      movq    %rdx, %r15
// 31e: ff d0                         callq   *%rax
// 320: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000322:  R_X86_64_64  .rodata.str1.1+0x58
// 32a: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000032c:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 334: 4c 89 ff                      movq    %r15, %rdi
// 337: 4c 89 e6                      movq    %r12, %rsi
// 33a: 48 89 c1                      movq    %rax, %rcx
// 33d: 41 ff d0                      callq   *%r8
// 340: 49 29 de                      subq    %rbx, %r14
// 343: 49 83 c6 b8                   addq    $-0x48, %r14
// 347: 49 c1 ee 03                   shrq    $0x3, %r14
// 34b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 34f: 31 c0                         xorl    %eax, %eax
// 351: e9 81 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 356: 
static const unsigned char _CALL_BUILTIN_Oplus_DELETE_FAST_code_body[855] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x34, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0x02, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x64, 0xc3, 0x48, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc7, 0x44, 0xc3, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x81, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_DELETE_FAST_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa2},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x58},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// d2: 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_DELETE_FAST_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_DELETE_FAST_data_holes[1];

// _CALL_BUILTIN_Oplus_DELETE_GLOBAL
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_DELETE_GLOBAL.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x56
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 a5 01 00 00             jne     0x2b1 <_JIT_ENTRY+0x2b1>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000172:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 26                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 17e: 41 ff d7                      callq   *%r15
// 181: 48 8b 3c 24                   movq    (%rsp), %rdi
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 20                         js      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d7: 41 ff d7                      callq   *%r15
// 1da: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1de: 49 ff 0c 24                   decq    (%r12)
// 1e2: 75 13                         jne     0x1f7 <_JIT_ENTRY+0x1f7>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_Dealloc
// 1ee: 4c 89 e7                      movq    %r12, %rdi
// 1f1: ff d0                         callq   *%rax
// 1f3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f7: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1fb: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 200: 48 85 c9                      testq   %rcx, %rcx
// 203: 0f 84 a5 00 00 00             je      0x2ae <_JIT_ENTRY+0x2ae>
// 209: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 20d: 48 89 08                      movq    %rcx, (%rax)
// 210: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 14                         je      0x22f <_JIT_ENTRY+0x22f>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: ff d0                         callq   *%rax
// 227: 85 c0                         testl   %eax, %eax
// 229: 0f 85 82 00 00 00             jne     0x2b1 <_JIT_ENTRY+0x2b1>
// 22f: 48 8b 03                      movq    (%rbx), %rax
// 232: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 236: 48 8b 40 20                   movq    0x20(%rax), %rax
// 23a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023c:  R_X86_64_64  _JIT_OPARG
// 244: 0f b7 c9                      movzwl  %cx, %ecx
// 247: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  PyDict_DelItem
// 256: 4c 89 e6                      movq    %r12, %rsi
// 259: ff d0                         callq   *%rax
// 25b: 85 c0                         testl   %eax, %eax
// 25d: 74 68                         je      0x2c7 <_JIT_ENTRY+0x2c7>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  PyExc_KeyError
// 269: 48 8b 30                      movq    (%rax), %rsi
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _PyErr_ExceptionMatches
// 276: 4c 8b 3c 24                   movq    (%rsp), %r15
// 27a: 4c 89 ff                      movq    %r15, %rdi
// 27d: ff d0                         callq   *%rax
// 27f: 85 c0                         testl   %eax, %eax
// 281: 74 2e                         je      0x2b1 <_JIT_ENTRY+0x2b1>
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  PyExc_NameError
// 28d: 48 8b 30                      movq    (%rax), %rsi
// 290: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000292:  R_X86_64_64  .rodata.str1.1+0x39
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2a4: 4c 89 ff                      movq    %r15, %rdi
// 2a7: 4c 89 e1                      movq    %r12, %rcx
// 2aa: ff d0                         callq   *%rax
// 2ac: eb 03                         jmp     0x2b1 <_JIT_ENTRY+0x2b1>
// 2ae: 49 89 c6                      movq    %rax, %r14
// 2b1: 49 29 de                      subq    %rbx, %r14
// 2b4: 49 83 c6 b8                   addq    $-0x48, %r14
// 2b8: 49 c1 ee 03                   shrq    $0x3, %r14
// 2bc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2c0: 31 c0                         xorl    %eax, %eax
// 2c2: e9 10 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _JIT_CONTINUE
// 2d1: 48 89 df                      movq    %rbx, %rdi
// 2d4: 4c 89 f6                      movq    %r14, %rsi
// 2d7: 48 8b 14 24                   movq    (%rsp), %rdx
// 2db: 48 83 c4 18                   addq    $0x18, %rsp
// 2df: 5b                            popq    %rbx
// 2e0: 41 5c                         popq    %r12
// 2e2: 41 5d                         popq    %r13
// 2e4: 41 5e                         popq    %r14
// 2e6: 41 5f                         popq    %r15
// 2e8: 5d                            popq    %rbp
// 2e9: ff e0                         jmpq    *%rax
// 2eb: 
static const unsigned char _CALL_BUILTIN_Oplus_DELETE_GLOBAL_code_body[748] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xa5, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x82, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x10, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_DELETE_GLOBAL_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00 while calling a Python object\x00"
// 75: 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_DELETE_GLOBAL_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_DELETE_GLOBAL_data_holes[1];

// _CALL_BUILTIN_Oplus_DELETE_NAME
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_DELETE_NAME.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x71
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 c5 01 00 00             jne     0x2d1 <_JIT_ENTRY+0x2d1>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 4c 8b 0c 24                   movq    (%rsp), %r9
// 136: 41 ff 41 2c                   incl    0x2c(%r9)
// 13a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13f: 49 8b 07                      movq    (%r15), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 7f 2a                         jg      0x171 <_JIT_ENTRY+0x171>
// 147: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 160: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 165: 4c 89 fa                      movq    %r15, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 4c 8b 0c 24                   movq    (%rsp), %r9
// 16e: 49 8b 07                      movq    (%r15), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 2f                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 4c 8b 0c 24                   movq    (%rsp), %r9
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 0c 24                   movq    (%rsp), %r9
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 4c 8b 0c 24                   movq    (%rsp), %r9
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 29                         js      0x200 <_JIT_ENTRY+0x200>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 4c 8b 0c 24                   movq    (%rsp), %r9
// 1e7: 49 ff 0c 24                   decq    (%r12)
// 1eb: 75 13                         jne     0x200 <_JIT_ENTRY+0x200>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_Dealloc
// 1f7: 4c 89 e7                      movq    %r12, %rdi
// 1fa: ff d0                         callq   *%rax
// 1fc: 4c 8b 0c 24                   movq    (%rsp), %r9
// 200: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 204: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 209: 48 85 c9                      testq   %rcx, %rcx
// 20c: 0f 84 8e 00 00 00             je      0x2a0 <_JIT_ENTRY+0x2a0>
// 212: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 216: 48 89 08                      movq    %rcx, (%rax)
// 219: 49 8b 41 10                   movq    0x10(%r9), %rax
// 21d: 48 8b 00                      movq    (%rax), %rax
// 220: 84 c0                         testb   %al, %al
// 222: 74 1b                         je      0x23f <_JIT_ENTRY+0x23f>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_HandlePending
// 22e: 4c 89 cf                      movq    %r9, %rdi
// 231: ff d0                         callq   *%rax
// 233: 4c 8b 0c 24                   movq    (%rsp), %r9
// 237: 85 c0                         testl   %eax, %eax
// 239: 0f 85 92 00 00 00             jne     0x2d1 <_JIT_ENTRY+0x2d1>
// 23f: 48 8b 03                      movq    (%rbx), %rax
// 242: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 246: 48 8b 40 20                   movq    0x20(%rax), %rax
// 24a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024c:  R_X86_64_64  _JIT_OPARG
// 254: 0f b7 c9                      movzwl  %cx, %ecx
// 257: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 25c: 48 85 ff                      testq   %rdi, %rdi
// 25f: 74 44                         je      0x2a5 <_JIT_ENTRY+0x2a5>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  PyObject_DelItem
// 26b: 4c 89 e6                      movq    %r12, %rsi
// 26e: ff d0                         callq   *%rax
// 270: 85 c0                         testl   %eax, %eax
// 272: 74 73                         je      0x2e7 <_JIT_ENTRY+0x2e7>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  PyExc_NameError
// 27e: 48 8b 30                      movq    (%rax), %rsi
// 281: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000283:  R_X86_64_64  .rodata.str1.1+0x54
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 295: 48 8b 3c 24                   movq    (%rsp), %rdi
// 299: 4c 89 e1                      movq    %r12, %rcx
// 29c: ff d0                         callq   *%rax
// 29e: eb 31                         jmp     0x2d1 <_JIT_ENTRY+0x2d1>
// 2a0: 49 89 c6                      movq    %rax, %r14
// 2a3: eb 2c                         jmp     0x2d1 <_JIT_ENTRY+0x2d1>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  PyExc_SystemError
// 2af: 48 8b 30                      movq    (%rax), %rsi
// 2b2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002b4:  R_X86_64_64  .rodata.str1.1+0x39
// 2bc: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002be:  R_X86_64_64  _PyErr_Format
// 2c6: 4c 89 cf                      movq    %r9, %rdi
// 2c9: 4c 89 e1                      movq    %r12, %rcx
// 2cc: 31 c0                         xorl    %eax, %eax
// 2ce: 41 ff d0                      callq   *%r8
// 2d1: 49 29 de                      subq    %rbx, %r14
// 2d4: 49 83 c6 b8                   addq    $-0x48, %r14
// 2d8: 49 c1 ee 03                   shrq    $0x3, %r14
// 2dc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2e0: 31 c0                         xorl    %eax, %eax
// 2e2: e9 f0 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _JIT_CONTINUE
// 2f1: 48 89 df                      movq    %rbx, %rdi
// 2f4: 4c 89 f6                      movq    %r14, %rsi
// 2f7: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fb: 48 83 c4 18                   addq    $0x18, %rsp
// 2ff: 5b                            popq    %rbx
// 300: 41 5c                         popq    %r12
// 302: 41 5d                         popq    %r13
// 304: 41 5e                         popq    %r14
// 306: 41 5f                         popq    %r15
// 308: 5d                            popq    %rbp
// 309: ff e0                         jmpq    *%rax
// 30b: 
static const unsigned char _CALL_BUILTIN_Oplus_DELETE_NAME_code_body[780] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xc5, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x41, 0xff, 0x41, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x41, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xcf, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0x92, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xeb, 0x31, 0x49, 0x89, 0xc6, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xcf, 0x4c, 0x89, 0xe1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xf0, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_DELETE_NAME_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x71},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x54},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals when deleting %R\x00name '%.200s' is not defined\x00 while calling a Python object\x00"
// 90: 
static const unsigned char _CALL_BUILTIN_Oplus_DELETE_NAME_data_body[145] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_DELETE_NAME_data_holes[1];

// _CALL_BUILTIN_Oplus_DELETE_SUBSCR
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_DELETE_SUBSCR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4c                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 9a: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9e: 48 89 0c 24                   movq    %rcx, (%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7a                         jne     0x122 <_JIT_ENTRY+0x122>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 75                         jmp     0x124 <_JIT_ENTRY+0x124>
// af: 49 29 df                      subq    %rbx, %r15
// b2: 49 83 c7 b8                   addq    $-0x48, %r15
// b6: 49 c1 ef 03                   shrq    $0x3, %r15
// ba: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 04 24                   movq    %r8, (%rsp)
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_CheckRecursiveCall
// fe: 48 89 d7                      movq    %rdx, %rdi
// 101: ff d0                         callq   *%rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 0f 85 1a 02 00 00             jne     0x325 <_JIT_ENTRY+0x325>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 04 24                   movq    (%rsp), %r8
// 114: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 118: 48 89 0c 24                   movq    %rcx, (%rsp)
// 11c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 120: 74 86                         je      0xa8 <_JIT_ENTRY+0xa8>
// 122: 31 ff                         xorl    %edi, %edi
// 124: 4c 8b 34 24                   movq    (%rsp), %r14
// 128: 4c 89 f6                      movq    %r14, %rsi
// 12b: 41 ff d0                      callq   *%r8
// 12e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 133: ff 47 2c                      incl    0x2c(%rdi)
// 136: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13b: 49 8b 06                      movq    (%r14), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7f 2a                         jg      0x16d <_JIT_ENTRY+0x16d>
// 143: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15c: 4c 8b 34 24                   movq    (%rsp), %r14
// 160: 4c 89 f2                      movq    %r14, %rdx
// 163: ff d0                         callq   *%rax
// 165: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16a: 49 8b 06                      movq    (%r14), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 2f                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 8b 04 24                   movq    (%rsp), %rax
// 186: 48 ff 08                      decq    (%rax)
// 189: 75 15                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 48 8b 3c 24                   movq    (%rsp), %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 27                         jg      0x1d0 <_JIT_ENTRY+0x1d0>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 2b                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 14                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ff: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 203: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 208: 4d 85 f6                      testq   %r14, %r14
// 20b: 0f 84 11 01 00 00             je      0x322 <_JIT_ENTRY+0x322>
// 211: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 215: 4c 89 30                      movq    %r14, (%rax)
// 218: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 21c: 48 8b 00                      movq    (%rax), %rax
// 21f: 84 c0                         testb   %al, %al
// 221: 74 14                         je      0x237 <_JIT_ENTRY+0x237>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_HandlePending
// 22d: ff d0                         callq   *%rax
// 22f: 85 c0                         testl   %eax, %eax
// 231: 0f 85 e6 00 00 00             jne     0x31d <_JIT_ENTRY+0x31d>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_OPARG
// 241: f7 d0                         notl    %eax
// 243: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 248: 4c 63 e8                      movslq  %eax, %r13
// 24b: 4b 8b 6c ef f0                movq    -0x10(%r15,%r13,8), %rbp
// 250: 4f 8b 74 ef f8                movq    -0x8(%r15,%r13,8), %r14
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  PyObject_DelItem
// 25f: 48 89 ef                      movq    %rbp, %rdi
// 262: 4c 89 f6                      movq    %r14, %rsi
// 265: ff d0                         callq   *%rax
// 267: 89 04 24                      movl    %eax, (%rsp)
// 26a: 48 8b 45 00                   movq    (%rbp), %rax
// 26e: 48 85 c0                      testq   %rax, %rax
// 271: 7f 22                         jg      0x295 <_JIT_ENTRY+0x295>
// 273: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000275:  R_X86_64_64  .rodata.str1.1
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_NegativeRefcount
// 287: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 28c: 48 89 ea                      movq    %rbp, %rdx
// 28f: ff d0                         callq   *%rax
// 291: 48 8b 45 00                   movq    (%rbp), %rax
// 295: 85 c0                         testl   %eax, %eax
// 297: 78 21                         js      0x2ba <_JIT_ENTRY+0x2ba>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a3: ff d0                         callq   *%rax
// 2a5: 48 ff 4d 00                   decq    (%rbp)
// 2a9: 75 0f                         jne     0x2ba <_JIT_ENTRY+0x2ba>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_Dealloc
// 2b5: 48 89 ef                      movq    %rbp, %rdi
// 2b8: ff d0                         callq   *%rax
// 2ba: 49 8b 06                      movq    (%r14), %rax
// 2bd: 48 85 c0                      testq   %rax, %rax
// 2c0: 7f 21                         jg      0x2e3 <_JIT_ENTRY+0x2e3>
// 2c2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c4:  R_X86_64_64  .rodata.str1.1
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _Py_NegativeRefcount
// 2d6: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// 2db: 4c 89 f2                      movq    %r14, %rdx
// 2de: ff d0                         callq   *%rax
// 2e0: 49 8b 06                      movq    (%r14), %rax
// 2e3: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 2e7: 49 83 c7 f0                   addq    $-0x10, %r15
// 2eb: 85 c0                         testl   %eax, %eax
// 2ed: 78 20                         js      0x30f <_JIT_ENTRY+0x30f>
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f9: ff d0                         callq   *%rax
// 2fb: 49 ff 0e                      decq    (%r14)
// 2fe: 75 0f                         jne     0x30f <_JIT_ENTRY+0x30f>
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _Py_Dealloc
// 30a: 4c 89 f7                      movq    %r14, %rdi
// 30d: ff d0                         callq   *%rax
// 30f: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 313: 4d 0f 44 e7                   cmoveq  %r15, %r12
// 317: 74 22                         je      0x33b <_JIT_ENTRY+0x33b>
// 319: 49 83 c4 f0                   addq    $-0x10, %r12
// 31d: 4d 89 e7                      movq    %r12, %r15
// 320: eb 03                         jmp     0x325 <_JIT_ENTRY+0x325>
// 322: 49 89 c7                      movq    %rax, %r15
// 325: 49 29 df                      subq    %rbx, %r15
// 328: 49 83 c7 b8                   addq    $-0x48, %r15
// 32c: 49 c1 ef 03                   shrq    $0x3, %r15
// 330: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 334: 31 c0                         xorl    %eax, %eax
// 336: e9 9c fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 33b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033d:  R_X86_64_64  _JIT_CONTINUE
// 345: 48 89 df                      movq    %rbx, %rdi
// 348: 4c 89 e6                      movq    %r12, %rsi
// 34b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 350: 48 83 c4 18                   addq    $0x18, %rsp
// 354: 5b                            popq    %rbx
// 355: 41 5c                         popq    %r12
// 357: 41 5d                         popq    %r13
// 359: 41 5e                         popq    %r14
// 35b: 41 5f                         popq    %r15
// 35d: 5d                            popq    %rbp
// 35e: ff e0                         jmpq    *%rax
// 360: 
static const unsigned char _CALL_BUILTIN_Oplus_DELETE_SUBSCR_code_body[865] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4c, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x1a, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x4c, 0x8b, 0x34, 0x24, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x34, 0x24, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xef, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x11, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xe6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4b, 0x8b, 0x6c, 0xef, 0xf0, 0x4f, 0x8b, 0x74, 0xef, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf0, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x83, 0x3c, 0x24, 0x00, 0x4d, 0x0f, 0x44, 0xe7, 0x74, 0x22, 0x49, 0x83, 0xc4, 0xf0, 0x4d, 0x89, 0xe7, 0xeb, 0x03, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x9c, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_DELETE_SUBSCR_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_DELETE_SUBSCR_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_DELETE_SUBSCR_data_holes[1];

// _CALL_BUILTIN_Oplus_DICT_MERGE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_DICT_MERGE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 fc                      movq    %r15, %r12
// 112: e9 6a 02 00 00                jmp     0x381 <_JIT_ENTRY+0x381>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13b: 4c 89 f6                      movq    %r14, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 48 8b 3c 24                   movq    (%rsp), %rdi
// 145: ff 47 2c                      incl    0x2c(%rdi)
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 49 8b 06                      movq    (%r14), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 2a                         jg      0x17f <_JIT_ENTRY+0x17f>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16e: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 173: 4c 89 f2                      movq    %r14, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17c: 49 8b 06                      movq    (%r14), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 2f                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 ff 08                      decq    (%rax)
// 19b: 75 15                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 26                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 29                         js      0x20e <_JIT_ENTRY+0x20e>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 13                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 20e: 4d 8d 24 ef                   leaq    (%r15,%rbp,8), %r12
// 212: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 0f 84 61 01 00 00             je      0x381 <_JIT_ENTRY+0x381>
// 220: 49 89 04 24                   movq    %rax, (%r12)
// 224: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 228: 48 8b 00                      movq    (%rax), %rax
// 22b: 84 c0                         testb   %al, %al
// 22d: 74 19                         je      0x248 <_JIT_ENTRY+0x248>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_HandlePending
// 239: ff d0                         callq   *%rax
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 74 09                         je      0x248 <_JIT_ENTRY+0x248>
// 23f: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 243: e9 39 01 00 00                jmp     0x381 <_JIT_ENTRY+0x381>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _JIT_OPARG
// 252: 0f b7 c0                      movzwl  %ax, %eax
// 255: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       # imm = 0xFFFFFFFC
// 25a: 29 c1                         subl    %eax, %ecx
// 25c: f7 d0                         notl    %eax
// 25e: 48 98                         cltq
// 260: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 264: 49 83 c4 f8                   addq    $-0x8, %r12
// 268: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 26d: 48 8d 14 00                   leaq    (%rax,%rax), %rdx
// 271: 49 8b 3c d7                   movq    (%r15,%rdx,8), %rdi
// 275: 48 63 c9                      movslq  %ecx, %rcx
// 278: 48 01 c1                      addq    %rax, %rcx
// 27b: 4d 8b 3c cf                   movq    (%r15,%rcx,8), %r15
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _PyDict_MergeEx
// 289: 4c 89 ee                      movq    %r13, %rsi
// 28c: ba 02 00 00 00                movl    $0x2, %edx
// 291: ff d0                         callq   *%rax
// 293: 85 c0                         testl   %eax, %eax
// 295: 0f 88 80 00 00 00             js      0x31b <_JIT_ENTRY+0x31b>
// 29b: 49 8b 45 00                   movq    (%r13), %rax
// 29f: 48 85 c0                      testq   %rax, %rax
// 2a2: 48 8b 14 24                   movq    (%rsp), %rdx
// 2a6: 7f 26                         jg      0x2ce <_JIT_ENTRY+0x2ce>
// 2a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002aa:  R_X86_64_64  .rodata.str1.1
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// 2c1: 4c 89 ea                      movq    %r13, %rdx
// 2c4: ff d0                         callq   *%rax
// 2c6: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ca: 49 8b 45 00                   movq    (%r13), %rax
// 2ce: 85 c0                         testl   %eax, %eax
// 2d0: 78 29                         js      0x2fb <_JIT_ENTRY+0x2fb>
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2dc: ff d0                         callq   *%rax
// 2de: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e2: 49 ff 4d 00                   decq    (%r13)
// 2e6: 75 13                         jne     0x2fb <_JIT_ENTRY+0x2fb>
// 2e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ea:  R_X86_64_64  _Py_Dealloc
// 2f2: 4c 89 ef                      movq    %r13, %rdi
// 2f5: ff d0                         callq   *%rax
// 2f7: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _JIT_CONTINUE
// 305: 48 89 df                      movq    %rbx, %rdi
// 308: 4c 89 e6                      movq    %r12, %rsi
// 30b: 48 83 c4 18                   addq    $0x18, %rsp
// 30f: 5b                            popq    %rbx
// 310: 41 5c                         popq    %r12
// 312: 41 5d                         popq    %r13
// 314: 41 5e                         popq    %r14
// 316: 41 5f                         popq    %r15
// 318: 5d                            popq    %rbp
// 319: ff e0                         jmpq    *%rax
// 31b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031d:  R_X86_64_64  _PyEval_FormatKwargsError
// 325: 48 8b 3c 24                   movq    (%rsp), %rdi
// 329: 4c 89 fe                      movq    %r15, %rsi
// 32c: 4c 89 ea                      movq    %r13, %rdx
// 32f: ff d0                         callq   *%rax
// 331: 49 8b 45 00                   movq    (%r13), %rax
// 335: 48 85 c0                      testq   %rax, %rax
// 338: 7f 22                         jg      0x35c <_JIT_ENTRY+0x35c>
// 33a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033c:  R_X86_64_64  .rodata.str1.1
// 344: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000346:  R_X86_64_64  _Py_NegativeRefcount
// 34e: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 353: 4c 89 ea                      movq    %r13, %rdx
// 356: ff d0                         callq   *%rax
// 358: 49 8b 45 00                   movq    (%r13), %rax
// 35c: 85 c0                         testl   %eax, %eax
// 35e: 78 21                         js      0x381 <_JIT_ENTRY+0x381>
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 36a: ff d0                         callq   *%rax
// 36c: 49 ff 4d 00                   decq    (%r13)
// 370: 75 0f                         jne     0x381 <_JIT_ENTRY+0x381>
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  _Py_Dealloc
// 37c: 4c 89 ef                      movq    %r13, %rdi
// 37f: ff d0                         callq   *%rax
// 381: 49 29 dc                      subq    %rbx, %r12
// 384: 49 83 c4 b8                   addq    $-0x48, %r12
// 388: 49 c1 ec 03                   shrq    $0x3, %r12
// 38c: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 390: 31 c0                         xorl    %eax, %eax
// 392: e9 47 fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 397: 
static const unsigned char _CALL_BUILTIN_Oplus_DICT_MERGE_code_body[920] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfc, 0xe9, 0x6a, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4d, 0x8d, 0x24, 0xef, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x61, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x24, 0xef, 0xe9, 0x39, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x8d, 0x14, 0x00, 0x49, 0x8b, 0x3c, 0xd7, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x4d, 0x8b, 0x3c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x80, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x14, 0x24, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x47, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_DICT_MERGE_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_DICT_MERGE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_DICT_MERGE_data_holes[1];

// _CALL_BUILTIN_Oplus_DICT_UPDATE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_DICT_UPDATE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x5a
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 fc                      movq    %r15, %r12
// 112: e9 94 02 00 00                jmp     0x3ab <_JIT_ENTRY+0x3ab>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13b: 4c 89 f6                      movq    %r14, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 48 8b 3c 24                   movq    (%rsp), %rdi
// 145: ff 47 2c                      incl    0x2c(%rdi)
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 49 8b 06                      movq    (%r14), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 2a                         jg      0x17f <_JIT_ENTRY+0x17f>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16e: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 173: 4c 89 f2                      movq    %r14, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17c: 49 8b 06                      movq    (%r14), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 2f                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 ff 08                      decq    (%rax)
// 19b: 75 15                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 26                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 29                         js      0x20e <_JIT_ENTRY+0x20e>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 13                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 20e: 4d 8d 24 ef                   leaq    (%r15,%rbp,8), %r12
// 212: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 0f 84 8b 01 00 00             je      0x3ab <_JIT_ENTRY+0x3ab>
// 220: 49 89 04 24                   movq    %rax, (%r12)
// 224: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 228: 48 8b 00                      movq    (%rax), %rax
// 22b: 84 c0                         testb   %al, %al
// 22d: 74 19                         je      0x248 <_JIT_ENTRY+0x248>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_HandlePending
// 239: ff d0                         callq   *%rax
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 74 09                         je      0x248 <_JIT_ENTRY+0x248>
// 23f: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 243: e9 63 01 00 00                jmp     0x3ab <_JIT_ENTRY+0x3ab>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _JIT_OPARG
// 252: f7 d0                         notl    %eax
// 254: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 259: 48 98                         cltq
// 25b: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 25f: 49 83 c4 f8                   addq    $-0x8, %r12
// 263: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 268: 48 01 c0                      addq    %rax, %rax
// 26b: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  PyDict_Update
// 279: 4c 89 ee                      movq    %r13, %rsi
// 27c: ff d0                         callq   *%rax
// 27e: 85 c0                         testl   %eax, %eax
// 280: 0f 88 80 00 00 00             js      0x306 <_JIT_ENTRY+0x306>
// 286: 49 8b 45 00                   movq    (%r13), %rax
// 28a: 48 85 c0                      testq   %rax, %rax
// 28d: 48 8b 14 24                   movq    (%rsp), %rdx
// 291: 7f 26                         jg      0x2b9 <_JIT_ENTRY+0x2b9>
// 293: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000295:  R_X86_64_64  .rodata.str1.1
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_NegativeRefcount
// 2a7: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 2ac: 4c 89 ea                      movq    %r13, %rdx
// 2af: ff d0                         callq   *%rax
// 2b1: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b5: 49 8b 45 00                   movq    (%r13), %rax
// 2b9: 85 c0                         testl   %eax, %eax
// 2bb: 78 29                         js      0x2e6 <_JIT_ENTRY+0x2e6>
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c7: ff d0                         callq   *%rax
// 2c9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2cd: 49 ff 4d 00                   decq    (%r13)
// 2d1: 75 13                         jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _Py_Dealloc
// 2dd: 4c 89 ef                      movq    %r13, %rdi
// 2e0: ff d0                         callq   *%rax
// 2e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _JIT_CONTINUE
// 2f0: 48 89 df                      movq    %rbx, %rdi
// 2f3: 4c 89 e6                      movq    %r12, %rsi
// 2f6: 48 83 c4 18                   addq    $0x18, %rsp
// 2fa: 5b                            popq    %rbx
// 2fb: 41 5c                         popq    %r12
// 2fd: 41 5d                         popq    %r13
// 2ff: 41 5e                         popq    %r14
// 301: 41 5f                         popq    %r15
// 303: 5d                            popq    %rbp
// 304: ff e0                         jmpq    *%rax
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  PyExc_AttributeError
// 310: 48 8b 30                      movq    (%rax), %rsi
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _PyErr_ExceptionMatches
// 31d: 4c 8b 34 24                   movq    (%rsp), %r14
// 321: 4c 89 f7                      movq    %r14, %rdi
// 324: ff d0                         callq   *%rax
// 326: 85 c0                         testl   %eax, %eax
// 328: 74 31                         je      0x35b <_JIT_ENTRY+0x35b>
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  PyExc_TypeError
// 334: 48 8b 30                      movq    (%rax), %rsi
// 337: 49 8b 45 08                   movq    0x8(%r13), %rax
// 33b: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 33f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000341:  R_X86_64_64  .rodata.str1.1+0x39
// 349: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000034b:  R_X86_64_64  _PyErr_Format
// 353: 4c 89 f7                      movq    %r14, %rdi
// 356: 31 c0                         xorl    %eax, %eax
// 358: 41 ff d0                      callq   *%r8
// 35b: 49 8b 45 00                   movq    (%r13), %rax
// 35f: 48 85 c0                      testq   %rax, %rax
// 362: 7f 22                         jg      0x386 <_JIT_ENTRY+0x386>
// 364: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000366:  R_X86_64_64  .rodata.str1.1
// 36e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000370:  R_X86_64_64  _Py_NegativeRefcount
// 378: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 37d: 4c 89 ea                      movq    %r13, %rdx
// 380: ff d0                         callq   *%rax
// 382: 49 8b 45 00                   movq    (%r13), %rax
// 386: 85 c0                         testl   %eax, %eax
// 388: 78 21                         js      0x3ab <_JIT_ENTRY+0x3ab>
// 38a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 394: ff d0                         callq   *%rax
// 396: 49 ff 4d 00                   decq    (%r13)
// 39a: 75 0f                         jne     0x3ab <_JIT_ENTRY+0x3ab>
// 39c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039e:  R_X86_64_64  _Py_Dealloc
// 3a6: 4c 89 ef                      movq    %r13, %rdi
// 3a9: ff d0                         callq   *%rax
// 3ab: 49 29 dc                      subq    %rbx, %r12
// 3ae: 49 83 c4 b8                   addq    $-0x48, %r12
// 3b2: 49 c1 ec 03                   shrq    $0x3, %r12
// 3b6: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 3ba: 31 c0                         xorl    %eax, %eax
// 3bc: e9 1d fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 3c1: 
static const unsigned char _CALL_BUILTIN_Oplus_DICT_UPDATE_code_body[962] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfc, 0xe9, 0x94, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4d, 0x8d, 0x24, 0xef, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8b, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x24, 0xef, 0xe9, 0x63, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x01, 0xc0, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x80, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x14, 0x24, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x34, 0x24, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x1d, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_DICT_UPDATE_code_holes[31] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5a},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x341, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x370, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object is not a mapping\x00 while calling a Python object\x00"
// 79: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_DICT_UPDATE_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_DICT_UPDATE_data_holes[1];

// _CALL_BUILTIN_Oplus_END_SEND
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_END_SEND.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2f 01 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2b                         je      0x238 <_JIT_ENTRY+0x238>
// 20d: 48 89 08                      movq    %rcx, (%rax)
// 210: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: 48 89 d7                      movq    %rdx, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 14 24                   movq    (%rsp), %rdx
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 1f                         je      0x251 <_JIT_ENTRY+0x251>
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: eb 03                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 238: 49 89 c6                      movq    %rax, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: e9 86 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_OPARG
// 25b: f7 d0                         notl    %eax
// 25d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 262: 4c 63 e8                      movslq  %eax, %r13
// 265: 4f 8b 64 ee f0                movq    -0x10(%r14,%r13,8), %r12
// 26a: 4b 8b 6c ee f8                movq    -0x8(%r14,%r13,8), %rbp
// 26f: 49 8b 04 24                   movq    (%r12), %rax
// 273: 48 85 c0                      testq   %rax, %rax
// 276: 7f 26                         jg      0x29e <_JIT_ENTRY+0x29e>
// 278: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027a:  R_X86_64_64  .rodata.str1.1
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_NegativeRefcount
// 28c: be 66 00 00 00                movl    $0x66, %esi
// 291: 4c 89 e2                      movq    %r12, %rdx
// 294: ff d0                         callq   *%rax
// 296: 48 8b 14 24                   movq    (%rsp), %rdx
// 29a: 49 8b 04 24                   movq    (%r12), %rax
// 29e: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 2a2: 49 83 c5 f8                   addq    $-0x8, %r13
// 2a6: 85 c0                         testl   %eax, %eax
// 2a8: 78 29                         js      0x2d3 <_JIT_ENTRY+0x2d3>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b4: ff d0                         callq   *%rax
// 2b6: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ba: 49 ff 0c 24                   decq    (%r12)
// 2be: 75 13                         jne     0x2d3 <_JIT_ENTRY+0x2d3>
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_Dealloc
// 2ca: 4c 89 e7                      movq    %r12, %rdi
// 2cd: ff d0                         callq   *%rax
// 2cf: 48 8b 14 24                   movq    (%rsp), %rdx
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _JIT_OPARG
// 2dd: f7 d0                         notl    %eax
// 2df: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2e4: 48 98                         cltq
// 2e6: 49 89 6c c6 f0                movq    %rbp, -0x10(%r14,%rax,8)
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _JIT_CONTINUE
// 2f5: 48 89 df                      movq    %rbx, %rdi
// 2f8: 4c 89 ee                      movq    %r13, %rsi
// 2fb: 48 83 c4 18                   addq    $0x18, %rsp
// 2ff: 5b                            popq    %rbx
// 300: 41 5c                         popq    %r12
// 302: 41 5d                         popq    %r13
// 304: 41 5e                         popq    %r14
// 306: 41 5f                         popq    %r15
// 308: 5d                            popq    %rbp
// 309: ff e0                         jmpq    *%rax
// 30b: 
static const unsigned char _CALL_BUILTIN_Oplus_END_SEND_code_body[780] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4f, 0x8b, 0x64, 0xee, 0xf0, 0x4b, 0x8b, 0x6c, 0xee, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xee, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_END_SEND_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_END_SEND_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_END_SEND_data_holes[1];

// _CALL_BUILTIN_Oplus_EXIT_INIT_CHECK
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_EXIT_INIT_CHECK.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 de                      subq    %rbx, %r14
// b9: 49 83 c6 b8                   addq    $-0x48, %r14
// bd: 49 c1 ee 03                   shrq    $0x3, %r14
// c1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x65
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 f4                      movq    %r14, %r12
// 112: e9 85 01 00 00                jmp     0x29c <_JIT_ENTRY+0x29c>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 4c 89 fe                      movq    %r15, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 4c 8b 04 24                   movq    (%rsp), %r8
// 145: 41 ff 40 2c                   incl    0x2c(%r8)
// 149: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14e: 49 8b 07                      movq    (%r15), %rax
// 151: 48 85 c0                      testq   %rax, %rax
// 154: 7f 2a                         jg      0x180 <_JIT_ENTRY+0x180>
// 156: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000158:  R_X86_64_64  .rodata.str1.1
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_NegativeRefcount
// 16a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 174: 4c 89 fa                      movq    %r15, %rdx
// 177: ff d0                         callq   *%rax
// 179: 4c 8b 04 24                   movq    (%rsp), %r8
// 17d: 49 8b 07                      movq    (%r15), %rax
// 180: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000182:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18a: 85 c0                         testl   %eax, %eax
// 18c: 78 26                         js      0x1b4 <_JIT_ENTRY+0x1b4>
// 18e: 41 ff d7                      callq   *%r15
// 191: 4c 8b 04 24                   movq    (%rsp), %r8
// 195: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19a: 48 ff 08                      decq    (%rax)
// 19d: 75 15                         jne     0x1b4 <_JIT_ENTRY+0x1b4>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _Py_Dealloc
// 1a9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ae: ff d0                         callq   *%rax
// 1b0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1b4: 49 8b 04 24                   movq    (%r12), %rax
// 1b8: 48 85 c0                      testq   %rax, %rax
// 1bb: 7f 26                         jg      0x1e3 <_JIT_ENTRY+0x1e3>
// 1bd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bf:  R_X86_64_64  .rodata.str1.1
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_NegativeRefcount
// 1d1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d6: 4c 89 e2                      movq    %r12, %rdx
// 1d9: ff d0                         callq   *%rax
// 1db: 4c 8b 04 24                   movq    (%rsp), %r8
// 1df: 49 8b 04 24                   movq    (%r12), %rax
// 1e3: 85 c0                         testl   %eax, %eax
// 1e5: 78 20                         js      0x207 <_JIT_ENTRY+0x207>
// 1e7: 41 ff d7                      callq   *%r15
// 1ea: 4c 8b 04 24                   movq    (%rsp), %r8
// 1ee: 49 ff 0c 24                   decq    (%r12)
// 1f2: 75 13                         jne     0x207 <_JIT_ENTRY+0x207>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_Dealloc
// 1fe: 4c 89 e7                      movq    %r12, %rdi
// 201: ff d0                         callq   *%rax
// 203: 4c 8b 04 24                   movq    (%rsp), %r8
// 207: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 20b: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 210: 48 85 c9                      testq   %rcx, %rcx
// 213: 0f 84 80 00 00 00             je      0x299 <_JIT_ENTRY+0x299>
// 219: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 21d: 48 89 08                      movq    %rcx, (%rax)
// 220: 49 8b 40 10                   movq    0x10(%r8), %rax
// 224: 48 8b 00                      movq    (%rax), %rax
// 227: 84 c0                         testb   %al, %al
// 229: 74 17                         je      0x242 <_JIT_ENTRY+0x242>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_HandlePending
// 235: 4c 89 c7                      movq    %r8, %rdi
// 238: ff d0                         callq   *%rax
// 23a: 4c 8b 04 24                   movq    (%rsp), %r8
// 23e: 85 c0                         testl   %eax, %eax
// 240: 75 5a                         jne     0x29c <_JIT_ENTRY+0x29c>
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _JIT_OPARG
// 24c: f7 d0                         notl    %eax
// 24e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 253: 48 63 c8                      movslq  %eax, %rcx
// 256: 49 8b 44 ce f8                movq    -0x8(%r14,%rcx,8), %rax
// 25b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000025d:  R_X86_64_64  _Py_NoneStruct
// 265: 48 39 d0                      cmpq    %rdx, %rax
// 268: 74 48                         je      0x2b2 <_JIT_ENTRY+0x2b2>
// 26a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026c:  R_X86_64_64  PyExc_TypeError
// 274: 48 8b 39                      movq    (%rcx), %rdi
// 277: 48 8b 40 08                   movq    0x8(%rax), %rax
// 27b: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 27f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000281:  R_X86_64_64  .rodata.str1.1+0x39
// 289: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028b:  R_X86_64_64  PyErr_Format
// 293: 31 c0                         xorl    %eax, %eax
// 295: ff d1                         callq   *%rcx
// 297: eb 03                         jmp     0x29c <_JIT_ENTRY+0x29c>
// 299: 49 89 c4                      movq    %rax, %r12
// 29c: 49 29 dc                      subq    %rbx, %r12
// 29f: 49 83 c4 b8                   addq    $-0x48, %r12
// 2a3: 49 c1 ec 03                   shrq    $0x3, %r12
// 2a7: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2ab: 31 c0                         xorl    %eax, %eax
// 2ad: e9 2c fe ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 2b2: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 2b6: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _JIT_CONTINUE
// 2c4: 48 89 df                      movq    %rbx, %rdi
// 2c7: 4c 89 c2                      movq    %r8, %rdx
// 2ca: 48 83 c4 18                   addq    $0x18, %rsp
// 2ce: 5b                            popq    %rbx
// 2cf: 41 5c                         popq    %r12
// 2d1: 41 5d                         popq    %r13
// 2d3: 41 5e                         popq    %r14
// 2d5: 41 5f                         popq    %r15
// 2d7: 5d                            popq    %rbp
// 2d8: ff e0                         jmpq    *%rax
// 2da: 
static const unsigned char _CALL_BUILTIN_Oplus_EXIT_INIT_CHECK_code_body[731] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf4, 0xe9, 0x85, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x75, 0x5a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc8, 0x49, 0x8b, 0x44, 0xce, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd0, 0x74, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0xeb, 0x03, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x2c, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_EXIT_INIT_CHECK_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x65},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__init__() should return None, not '%.200s'\x00 while calling a Python object\x00"
// 84: 00 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_EXIT_INIT_CHECK_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_EXIT_INIT_CHECK_data_holes[1];

// _CALL_BUILTIN_Oplus_EXIT_TRACE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_EXIT_TRACE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 a6 01 00 00             jne     0x204 <_JIT_ENTRY+0x204>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 83 01 00 00             jne     0x204 <_JIT_ENTRY+0x204>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 74 01 00 00             jne     0x204 <_JIT_ENTRY+0x204>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 5d 01 00 00             jne     0x23e <_JIT_ENTRY+0x23e>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 3c 24                   movq    (%rsp), %rdi
// 10b: ff 47 2c                      incl    0x2c(%rdi)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 3c 24                   movq    (%rsp), %rdi
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 3c 24                   movq    (%rsp), %rdi
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 59                         je      0x23b <_JIT_ENTRY+0x23b>
// 1e2: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 10                         je      0x204 <_JIT_ENTRY+0x204>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: ff d0                         callq   *%rax
// 200: 85 c0                         testl   %eax, %eax
// 202: 75 3a                         jne     0x23e <_JIT_ENTRY+0x23e>
// 204: 49 29 de                      subq    %rbx, %r14
// 207: 49 83 c6 b8                   addq    $-0x48, %r14
// 20b: 49 c1 ee 03                   shrq    $0x3, %r14
// 20f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 213: 48 8b 03                      movq    (%rbx), %rax
// 216: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000218:  R_X86_64_64  _JIT_TARGET
// 220: 89 c9                         movl    %ecx, %ecx
// 222: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 226: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22c: 48 83 c4 18                   addq    $0x18, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: c3                            retq
// 23b: 49 89 c6                      movq    %rax, %r14
// 23e: 49 29 de                      subq    %rbx, %r14
// 241: 49 83 c6 b8                   addq    $-0x48, %r14
// 245: 49 c1 ee 03                   shrq    $0x3, %r14
// 249: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24d: 31 c0                         xorl    %eax, %eax
// 24f: eb db                         jmp     0x22c <_JIT_ENTRY+0x22c>
// 251: 
static const unsigned char _CALL_BUILTIN_Oplus_EXIT_TRACE_code_body[594] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xa6, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x83, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0x74, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x5d, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x59, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x3a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xdb};
static const Hole _CALL_BUILTIN_Oplus_EXIT_TRACE_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_EXIT_TRACE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_EXIT_TRACE_data_holes[1];

// _CALL_BUILTIN_Oplus_FORMAT_SIMPLE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_FORMAT_SIMPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 df                      subq    %rbx, %r15
// b2: 49 83 c7 b8                   addq    $-0x48, %r15
// b6: 49 c1 ef 03                   shrq    $0x3, %r15
// ba: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 fa 01 00 00             jne     0x306 <_JIT_ENTRY+0x306>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12c: 4c 89 f6                      movq    %r14, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 06                      movq    (%r14), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 164: 4c 89 f2                      movq    %r14, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 06                      movq    (%r14), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 0f 84 f2 00 00 00             je      0x303 <_JIT_ENTRY+0x303>
// 211: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 215: 48 89 08                      movq    %rcx, (%rax)
// 218: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 21c: 48 8b 00                      movq    (%rax), %rax
// 21f: 84 c0                         testb   %al, %al
// 221: 74 1f                         je      0x242 <_JIT_ENTRY+0x242>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_HandlePending
// 22d: 48 89 d7                      movq    %rdx, %rdi
// 230: ff d0                         callq   *%rax
// 232: 48 8b 14 24                   movq    (%rsp), %rdx
// 236: 85 c0                         testl   %eax, %eax
// 238: 74 08                         je      0x242 <_JIT_ENTRY+0x242>
// 23a: 4d 89 e7                      movq    %r12, %r15
// 23d: e9 c4 00 00 00                jmp     0x306 <_JIT_ENTRY+0x306>
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _JIT_OPARG
// 24c: f7 d0                         notl    %eax
// 24e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 253: 48 98                         cltq
// 255: 49 8d 2c c7                   leaq    (%r15,%rax,8), %rbp
// 259: 48 83 c5 f8                   addq    $-0x8, %rbp
// 25d: 4d 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %r15
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  PyUnicode_Type
// 26c: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 270: 74 6d                         je      0x2df <_JIT_ENTRY+0x2df>
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  PyObject_Format
// 27c: 4c 89 ff                      movq    %r15, %rdi
// 27f: 31 f6                         xorl    %esi, %esi
// 281: ff d0                         callq   *%rax
// 283: 49 89 c5                      movq    %rax, %r13
// 286: 49 8b 07                      movq    (%r15), %rax
// 289: 48 85 c0                      testq   %rax, %rax
// 28c: 7f 21                         jg      0x2af <_JIT_ENTRY+0x2af>
// 28e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000290:  R_X86_64_64  .rodata.str1.1
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_NegativeRefcount
// 2a2: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// 2a7: 4c 89 fa                      movq    %r15, %rdx
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 8b 07                      movq    (%r15), %rax
// 2af: 85 c0                         testl   %eax, %eax
// 2b1: 78 20                         js      0x2d3 <_JIT_ENTRY+0x2d3>
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bd: ff d0                         callq   *%rax
// 2bf: 49 ff 0f                      decq    (%r15)
// 2c2: 75 0f                         jne     0x2d3 <_JIT_ENTRY+0x2d3>
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_Dealloc
// 2ce: 4c 89 ff                      movq    %r15, %rdi
// 2d1: ff d0                         callq   *%rax
// 2d3: 4d 89 ef                      movq    %r13, %r15
// 2d6: 4d 85 ed                      testq   %r13, %r13
// 2d9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2dd: 74 3d                         je      0x31c <_JIT_ENTRY+0x31c>
// 2df: 4c 89 7d 00                   movq    %r15, (%rbp)
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  _JIT_CONTINUE
// 2ed: 48 89 df                      movq    %rbx, %rdi
// 2f0: 4c 89 e6                      movq    %r12, %rsi
// 2f3: 48 83 c4 18                   addq    $0x18, %rsp
// 2f7: 5b                            popq    %rbx
// 2f8: 41 5c                         popq    %r12
// 2fa: 41 5d                         popq    %r13
// 2fc: 41 5e                         popq    %r14
// 2fe: 41 5f                         popq    %r15
// 300: 5d                            popq    %rbp
// 301: ff e0                         jmpq    *%rax
// 303: 49 89 c7                      movq    %rax, %r15
// 306: 49 29 df                      subq    %rbx, %r15
// 309: 49 83 c7 b8                   addq    $-0x48, %r15
// 30d: 49 c1 ef 03                   shrq    $0x3, %r15
// 311: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 315: 31 c0                         xorl    %eax, %eax
// 317: e9 bb fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 31c: 49 89 ef                      movq    %rbp, %r15
// 31f: eb e5                         jmp     0x306 <_JIT_ENTRY+0x306>
// 321: 
static const unsigned char _CALL_BUILTIN_Oplus_FORMAT_SIMPLE_code_body[802] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xfa, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xf2, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xe7, 0xe9, 0xc4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8d, 0x2c, 0xc7, 0x48, 0x83, 0xc5, 0xf8, 0x4d, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x74, 0x6d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xef, 0x4d, 0x85, 0xed, 0x48, 0x8b, 0x14, 0x24, 0x74, 0x3d, 0x4c, 0x89, 0x7d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xbb, 0xfd, 0xff, 0xff, 0x49, 0x89, 0xef, 0xeb, 0xe5};
static const Hole _CALL_BUILTIN_Oplus_FORMAT_SIMPLE_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_FORMAT_SIMPLE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_FORMAT_SIMPLE_data_holes[1];

// _CALL_BUILTIN_Oplus_FORMAT_WITH_SPEC
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_FORMAT_WITH_SPEC.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4c                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 0c 24                   movq    %rcx, (%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7a                         jne     0x122 <_JIT_ENTRY+0x122>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 75                         jmp     0x124 <_JIT_ENTRY+0x124>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 04 24                   movq    %r8, (%rsp)
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_CheckRecursiveCall
// fe: 48 89 d7                      movq    %rdx, %rdi
// 101: ff d0                         callq   *%rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 0f 85 3a 02 00 00             jne     0x345 <_JIT_ENTRY+0x345>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 04 24                   movq    (%rsp), %r8
// 114: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 118: 48 89 0c 24                   movq    %rcx, (%rsp)
// 11c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 120: 74 86                         je      0xa8 <_JIT_ENTRY+0xa8>
// 122: 31 ff                         xorl    %edi, %edi
// 124: 4c 8b 3c 24                   movq    (%rsp), %r15
// 128: 4c 89 fe                      movq    %r15, %rsi
// 12b: 41 ff d0                      callq   *%r8
// 12e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 133: ff 47 2c                      incl    0x2c(%rdi)
// 136: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13b: 49 8b 07                      movq    (%r15), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7f 2a                         jg      0x16d <_JIT_ENTRY+0x16d>
// 143: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 160: 4c 89 fa                      movq    %r15, %rdx
// 163: ff d0                         callq   *%rax
// 165: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16a: 49 8b 07                      movq    (%r15), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 2f                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 8b 04 24                   movq    (%rsp), %rax
// 186: 48 ff 08                      decq    (%rax)
// 189: 75 15                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 48 8b 3c 24                   movq    (%rsp), %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 27                         jg      0x1d0 <_JIT_ENTRY+0x1d0>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 2b                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 14                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 208: 4d 85 ff                      testq   %r15, %r15
// 20b: 0f 84 31 01 00 00             je      0x342 <_JIT_ENTRY+0x342>
// 211: 4c 89 38                      movq    %r15, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 19                         je      0x238 <_JIT_ENTRY+0x238>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 74 09                         je      0x238 <_JIT_ENTRY+0x238>
// 22f: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 233: e9 0d 01 00 00                jmp     0x345 <_JIT_ENTRY+0x345>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_OPARG
// 242: f7 d0                         notl    %eax
// 244: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 249: 4c 63 e0                      movslq  %eax, %r12
// 24c: 4b 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %rbp
// 251: 4f 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %r13
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  PyObject_Format
// 260: 48 89 ef                      movq    %rbp, %rdi
// 263: 4c 89 ee                      movq    %r13, %rsi
// 266: ff d0                         callq   *%rax
// 268: 48 89 04 24                   movq    %rax, (%rsp)
// 26c: 48 8b 45 00                   movq    (%rbp), %rax
// 270: 48 85 c0                      testq   %rax, %rax
// 273: 7f 22                         jg      0x297 <_JIT_ENTRY+0x297>
// 275: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000277:  R_X86_64_64  .rodata.str1.1
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_NegativeRefcount
// 289: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 28e: 48 89 ea                      movq    %rbp, %rdx
// 291: ff d0                         callq   *%rax
// 293: 48 8b 45 00                   movq    (%rbp), %rax
// 297: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000299:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a1: 85 c0                         testl   %eax, %eax
// 2a3: 78 18                         js      0x2bd <_JIT_ENTRY+0x2bd>
// 2a5: 41 ff d7                      callq   *%r15
// 2a8: 48 ff 4d 00                   decq    (%rbp)
// 2ac: 75 0f                         jne     0x2bd <_JIT_ENTRY+0x2bd>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_Dealloc
// 2b8: 48 89 ef                      movq    %rbp, %rdi
// 2bb: ff d0                         callq   *%rax
// 2bd: 49 8b 45 00                   movq    (%r13), %rax
// 2c1: 48 85 c0                      testq   %rax, %rax
// 2c4: 7f 22                         jg      0x2e8 <_JIT_ENTRY+0x2e8>
// 2c6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c8:  R_X86_64_64  .rodata.str1.1
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_NegativeRefcount
// 2da: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// 2df: 4c 89 ea                      movq    %r13, %rdx
// 2e2: ff d0                         callq   *%rax
// 2e4: 49 8b 45 00                   movq    (%r13), %rax
// 2e8: 85 c0                         testl   %eax, %eax
// 2ea: 78 18                         js      0x304 <_JIT_ENTRY+0x304>
// 2ec: 41 ff d7                      callq   *%r15
// 2ef: 49 ff 4d 00                   decq    (%r13)
// 2f3: 75 0f                         jne     0x304 <_JIT_ENTRY+0x304>
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_Dealloc
// 2ff: 4c 89 ef                      movq    %r13, %rdi
// 302: ff d0                         callq   *%rax
// 304: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 308: 48 83 c0 f0                   addq    $-0x10, %rax
// 30c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 310: 48 85 c9                      testq   %rcx, %rcx
// 313: 74 2d                         je      0x342 <_JIT_ENTRY+0x342>
// 315: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 319: 48 83 c6 f8                   addq    $-0x8, %rsi
// 31d: 48 89 08                      movq    %rcx, (%rax)
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _JIT_CONTINUE
// 32a: 48 89 df                      movq    %rbx, %rdi
// 32d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 332: 48 83 c4 18                   addq    $0x18, %rsp
// 336: 5b                            popq    %rbx
// 337: 41 5c                         popq    %r12
// 339: 41 5d                         popq    %r13
// 33b: 41 5e                         popq    %r14
// 33d: 41 5f                         popq    %r15
// 33f: 5d                            popq    %rbp
// 340: ff e0                         jmpq    *%rax
// 342: 49 89 c6                      movq    %rax, %r14
// 345: 49 29 de                      subq    %rbx, %r14
// 348: 49 83 c6 b8                   addq    $-0x48, %r14
// 34c: 49 c1 ee 03                   shrq    $0x3, %r14
// 350: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 354: 31 c0                         xorl    %eax, %eax
// 356: e9 7c fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 35b: 
static const unsigned char _CALL_BUILTIN_Oplus_FORMAT_WITH_SPEC_code_body[860] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4c, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x3a, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xee, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x31, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf0, 0x4f, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x7c, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_FORMAT_WITH_SPEC_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_FORMAT_WITH_SPEC_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_FORMAT_WITH_SPEC_data_holes[1];

// _CALL_BUILTIN_Oplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_FOR_ITER_TIER_TWO.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 d0 02 00 00             jne     0x32e <_JIT_ENTRY+0x32e>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 ad 02 00 00             jne     0x32e <_JIT_ENTRY+0x32e>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 9e 02 00 00             jne     0x32e <_JIT_ENTRY+0x32e>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 4a                         jne     0xfe <_JIT_ENTRY+0xfe>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 45                         jmp     0x100 <_JIT_ENTRY+0x100>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 74 08                         je      0xe5 <_JIT_ENTRY+0xe5>
// dd: 4d 89 f5                      movq    %r14, %r13
// e0: e9 98 01 00 00                jmp     0x27d <_JIT_ENTRY+0x27d>
// e5: 49 8b 44 24 10                movq    0x10(%r12), %rax
// ea: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// ef: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// f3: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f8: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// fc: 74 b6                         je      0xb4 <_JIT_ENTRY+0xb4>
// fe: 31 ff                         xorl    %edi, %edi
// 100: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 105: 4c 89 fe                      movq    %r15, %rsi
// 108: 41 ff d0                      callq   *%r8
// 10b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 10f: ff 47 2c                      incl    0x2c(%rdi)
// 112: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 117: 49 8b 07                      movq    (%r15), %rax
// 11a: 48 85 c0                      testq   %rax, %rax
// 11d: 7f 2a                         jg      0x149 <_JIT_ENTRY+0x149>
// 11f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000121:  R_X86_64_64  .rodata.str1.1
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_NegativeRefcount
// 133: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 138: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13d: 4c 89 fa                      movq    %r15, %rdx
// 140: ff d0                         callq   *%rax
// 142: 48 8b 3c 24                   movq    (%rsp), %rdi
// 146: 49 8b 07                      movq    (%r15), %rax
// 149: 85 c0                         testl   %eax, %eax
// 14b: 78 2f                         js      0x17c <_JIT_ENTRY+0x17c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 157: ff d0                         callq   *%rax
// 159: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 162: 48 ff 08                      decq    (%rax)
// 165: 75 15                         jne     0x17c <_JIT_ENTRY+0x17c>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_Dealloc
// 171: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 176: ff d0                         callq   *%rax
// 178: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17c: 49 8b 04 24                   movq    (%r12), %rax
// 180: 48 85 c0                      testq   %rax, %rax
// 183: 7f 26                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 185: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000187:  R_X86_64_64  .rodata.str1.1
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NegativeRefcount
// 199: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19e: 4c 89 e2                      movq    %r12, %rdx
// 1a1: ff d0                         callq   *%rax
// 1a3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 29                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1bf: 49 ff 0c 24                   decq    (%r12)
// 1c3: 75 13                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_Dealloc
// 1cf: 4c 89 e7                      movq    %r12, %rdi
// 1d2: ff d0                         callq   *%rax
// 1d4: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d8: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1dc: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1e1: 48 85 c9                      testq   %rcx, %rcx
// 1e4: 0f 84 90 00 00 00             je      0x27a <_JIT_ENTRY+0x27a>
// 1ea: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 1ee: 48 89 08                      movq    %rcx, (%rax)
// 1f1: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1f5: 48 8b 00                      movq    (%rax), %rax
// 1f8: 84 c0                         testb   %al, %al
// 1fa: 74 10                         je      0x20c <_JIT_ENTRY+0x20c>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_HandlePending
// 206: ff d0                         callq   *%rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 75 71                         jne     0x27d <_JIT_ENTRY+0x27d>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _JIT_OPARG
// 216: f7 d0                         notl    %eax
// 218: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21d: 48 63 e8                      movslq  %eax, %rbp
// 220: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 225: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 22a: 4c 89 e7                      movq    %r12, %rdi
// 22d: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// 233: 48 85 c0                      testq   %rax, %rax
// 236: 74 5b                         je      0x293 <_JIT_ENTRY+0x293>
// 238: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023a:  R_X86_64_64  _JIT_OPARG
// 242: f7 d1                         notl    %ecx
// 244: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 24a: 48 63 c9                      movslq  %ecx, %rcx
// 24d: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 251: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 255: 48 83 c6 08                   addq    $0x8, %rsi
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_CONTINUE
// 263: 48 89 df                      movq    %rbx, %rdi
// 266: 48 8b 14 24                   movq    (%rsp), %rdx
// 26a: 48 83 c4 18                   addq    $0x18, %rsp
// 26e: 5b                            popq    %rbx
// 26f: 41 5c                         popq    %r12
// 271: 41 5d                         popq    %r13
// 273: 41 5e                         popq    %r14
// 275: 41 5f                         popq    %r15
// 277: 5d                            popq    %rbp
// 278: ff e0                         jmpq    *%rax
// 27a: 49 89 c5                      movq    %rax, %r13
// 27d: 49 29 dd                      subq    %rbx, %r13
// 280: 49 83 c5 b8                   addq    $-0x48, %r13
// 284: 49 c1 ed 03                   shrq    $0x3, %r13
// 288: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 28c: 31 c0                         xorl    %eax, %eax
// 28e: e9 c3 00 00 00                jmp     0x356 <_JIT_ENTRY+0x356>
// 293: 4c 8b 3c 24                   movq    (%rsp), %r15
// 297: 49 8b 47 68                   movq    0x68(%r15), %rax
// 29b: 48 85 c0                      testq   %rax, %rax
// 29e: 74 36                         je      0x2d6 <_JIT_ENTRY+0x2d6>
// 2a0: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2a5: 74 2f                         je      0x2d6 <_JIT_ENTRY+0x2d6>
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  PyExc_StopIteration
// 2b1: 48 8b 30                      movq    (%rax), %rsi
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _PyErr_ExceptionMatches
// 2be: 4c 89 ff                      movq    %r15, %rdi
// 2c1: ff d0                         callq   *%rax
// 2c3: 85 c0                         testl   %eax, %eax
// 2c5: 74 b6                         je      0x27d <_JIT_ENTRY+0x27d>
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _PyErr_Clear
// 2d1: 4c 89 ff                      movq    %r15, %rdi
// 2d4: ff d0                         callq   *%rax
// 2d6: 49 8b 04 24                   movq    (%r12), %rax
// 2da: 48 85 c0                      testq   %rax, %rax
// 2dd: 7f 22                         jg      0x301 <_JIT_ENTRY+0x301>
// 2df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e1:  R_X86_64_64  .rodata.str1.1
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _Py_NegativeRefcount
// 2f3: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// 2f8: 4c 89 e2                      movq    %r12, %rdx
// 2fb: ff d0                         callq   *%rax
// 2fd: 49 8b 04 24                   movq    (%r12), %rax
// 301: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 305: 49 83 c6 f8                   addq    $-0x8, %r14
// 309: 85 c0                         testl   %eax, %eax
// 30b: 78 21                         js      0x32e <_JIT_ENTRY+0x32e>
// 30d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 317: ff d0                         callq   *%rax
// 319: 49 ff 0c 24                   decq    (%r12)
// 31d: 75 0f                         jne     0x32e <_JIT_ENTRY+0x32e>
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _Py_Dealloc
// 329: 4c 89 e7                      movq    %r12, %rdi
// 32c: ff d0                         callq   *%rax
// 32e: 49 29 de                      subq    %rbx, %r14
// 331: 49 83 c6 b8                   addq    $-0x48, %r14
// 335: 49 c1 ee 03                   shrq    $0x3, %r14
// 339: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 33d: 48 8b 03                      movq    (%rbx), %rax
// 340: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000342:  R_X86_64_64  _JIT_TARGET
// 34a: 89 c9                         movl    %ecx, %ecx
// 34c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 350: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 356: 48 83 c4 18                   addq    $0x18, %rsp
// 35a: 5b                            popq    %rbx
// 35b: 41 5c                         popq    %r12
// 35d: 41 5d                         popq    %r13
// 35f: 41 5e                         popq    %r14
// 361: 41 5f                         popq    %r15
// 363: 5d                            popq    %rbp
// 364: c3                            retq
// 365: 
static const unsigned char _CALL_BUILTIN_Oplus_FOR_ITER_TIER_TWO_code_body[870] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xd0, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xad, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0x9e, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x4a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x45, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf5, 0xe9, 0x98, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xb6, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x71, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x5b, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xc3, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0xb6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_FOR_ITER_TIER_TWO_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x342, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_FOR_ITER_TIER_TWO_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_FOR_ITER_TIER_TWO_data_holes[1];

// _CALL_BUILTIN_Oplus_GET_AITER
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GET_AITER.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0xd2
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4c 89 fd                      movq    %r15, %rbp
// 112: e9 0f 03 00 00                jmp     0x426 <_JIT_ENTRY+0x426>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13b: 4c 89 f6                      movq    %r14, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 48 8b 3c 24                   movq    (%rsp), %rdi
// 145: ff 47 2c                      incl    0x2c(%rdi)
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 49 8b 06                      movq    (%r14), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 2a                         jg      0x17f <_JIT_ENTRY+0x17f>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16e: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 173: 4c 89 f2                      movq    %r14, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17c: 49 8b 06                      movq    (%r14), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 2f                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 ff 08                      decq    (%rax)
// 19b: 75 15                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 26                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 29                         js      0x20e <_JIT_ENTRY+0x20e>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 13                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 20e: 49 8d 2c ef                   leaq    (%r15,%rbp,8), %rbp
// 212: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 0f 84 06 02 00 00             je      0x426 <_JIT_ENTRY+0x426>
// 220: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 224: 48 89 45 00                   movq    %rax, (%rbp)
// 228: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 22c: 48 8b 00                      movq    (%rax), %rax
// 22f: 84 c0                         testb   %al, %al
// 231: 74 1c                         je      0x24f <_JIT_ENTRY+0x24f>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_HandlePending
// 23d: ff d0                         callq   *%rax
// 23f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 243: 85 c0                         testl   %eax, %eax
// 245: 74 08                         je      0x24f <_JIT_ENTRY+0x24f>
// 247: 4c 89 e5                      movq    %r12, %rbp
// 24a: e9 d7 01 00 00                jmp     0x426 <_JIT_ENTRY+0x426>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _JIT_OPARG
// 259: f7 d0                         notl    %eax
// 25b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 260: 48 98                         cltq
// 262: 49 8d 2c c7                   leaq    (%r15,%rax,8), %rbp
// 266: 48 83 c5 f8                   addq    $-0x8, %rbp
// 26a: 4d 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %r15
// 26f: 49 8b 47 08                   movq    0x8(%r15), %rax
// 273: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 277: 48 85 c9                      testq   %rcx, %rcx
// 27a: 0f 84 af 00 00 00             je      0x32f <_JIT_ENTRY+0x32f>
// 280: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 284: 48 85 c9                      testq   %rcx, %rcx
// 287: 0f 84 a2 00 00 00             je      0x32f <_JIT_ENTRY+0x32f>
// 28d: 4c 89 ff                      movq    %r15, %rdi
// 290: ff d1                         callq   *%rcx
// 292: 49 89 c5                      movq    %rax, %r13
// 295: 49 8b 07                      movq    (%r15), %rax
// 298: 48 85 c0                      testq   %rax, %rax
// 29b: 7f 21                         jg      0x2be <_JIT_ENTRY+0x2be>
// 29d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029f:  R_X86_64_64  .rodata.str1.1
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_NegativeRefcount
// 2b1: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 2b6: 4c 89 fa                      movq    %r15, %rdx
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 8b 07                      movq    (%r15), %rax
// 2be: 85 c0                         testl   %eax, %eax
// 2c0: 78 20                         js      0x2e2 <_JIT_ENTRY+0x2e2>
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 ff 0f                      decq    (%r15)
// 2d1: 75 0f                         jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _Py_Dealloc
// 2dd: 4c 89 ff                      movq    %r15, %rdi
// 2e0: ff d0                         callq   *%rax
// 2e2: 4d 85 ed                      testq   %r13, %r13
// 2e5: 0f 84 3b 01 00 00             je      0x426 <_JIT_ENTRY+0x426>
// 2eb: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2ef: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 2f3: 48 85 c9                      testq   %rcx, %rcx
// 2f6: 0f 84 b4 00 00 00             je      0x3b0 <_JIT_ENTRY+0x3b0>
// 2fc: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 301: 0f 84 a9 00 00 00             je      0x3b0 <_JIT_ENTRY+0x3b0>
// 307: 4c 89 6d 00                   movq    %r13, (%rbp)
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _JIT_CONTINUE
// 315: 48 89 df                      movq    %rbx, %rdi
// 318: 4c 89 e6                      movq    %r12, %rsi
// 31b: 48 8b 14 24                   movq    (%rsp), %rdx
// 31f: 48 83 c4 18                   addq    $0x18, %rsp
// 323: 5b                            popq    %rbx
// 324: 41 5c                         popq    %r12
// 326: 41 5d                         popq    %r13
// 328: 41 5e                         popq    %r14
// 32a: 41 5f                         popq    %r15
// 32c: 5d                            popq    %rbp
// 32d: ff e0                         jmpq    *%rax
// 32f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000331:  R_X86_64_64  PyExc_TypeError
// 339: 48 8b 31                      movq    (%rcx), %rsi
// 33c: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 340: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000342:  R_X86_64_64  .rodata.str1.1+0x39
// 34a: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000034c:  R_X86_64_64  _PyErr_Format
// 354: 31 c0                         xorl    %eax, %eax
// 356: 41 ff d0                      callq   *%r8
// 359: 49 8b 07                      movq    (%r15), %rax
// 35c: 48 85 c0                      testq   %rax, %rax
// 35f: 7f 21                         jg      0x382 <_JIT_ENTRY+0x382>
// 361: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000363:  R_X86_64_64  .rodata.str1.1
// 36b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036d:  R_X86_64_64  _Py_NegativeRefcount
// 375: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 37a: 4c 89 fa                      movq    %r15, %rdx
// 37d: ff d0                         callq   *%rax
// 37f: 49 8b 07                      movq    (%r15), %rax
// 382: 85 c0                         testl   %eax, %eax
// 384: 0f 88 9c 00 00 00             js      0x426 <_JIT_ENTRY+0x426>
// 38a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 394: ff d0                         callq   *%rax
// 396: 49 ff 0f                      decq    (%r15)
// 399: 0f 85 87 00 00 00             jne     0x426 <_JIT_ENTRY+0x426>
// 39f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a1:  R_X86_64_64  _Py_Dealloc
// 3a9: 4c 89 ff                      movq    %r15, %rdi
// 3ac: ff d0                         callq   *%rax
// 3ae: eb 76                         jmp     0x426 <_JIT_ENTRY+0x426>
// 3b0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003b2:  R_X86_64_64  PyExc_TypeError
// 3ba: 48 8b 31                      movq    (%rcx), %rsi
// 3bd: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 3c1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000003c3:  R_X86_64_64  .rodata.str1.1+0x7a
// 3cb: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000003cd:  R_X86_64_64  _PyErr_Format
// 3d5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3d9: 31 c0                         xorl    %eax, %eax
// 3db: 41 ff d0                      callq   *%r8
// 3de: 49 8b 45 00                   movq    (%r13), %rax
// 3e2: 48 85 c0                      testq   %rax, %rax
// 3e5: 7f 22                         jg      0x409 <_JIT_ENTRY+0x409>
// 3e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003e9:  R_X86_64_64  .rodata.str1.1
// 3f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f3:  R_X86_64_64  _Py_NegativeRefcount
// 3fb: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 400: 4c 89 ea                      movq    %r13, %rdx
// 403: ff d0                         callq   *%rax
// 405: 49 8b 45 00                   movq    (%r13), %rax
// 409: 85 c0                         testl   %eax, %eax
// 40b: 78 19                         js      0x426 <_JIT_ENTRY+0x426>
// 40d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 417: ff d0                         callq   *%rax
// 419: 49 ff 4d 00                   decq    (%r13)
// 41d: 4d 89 ef                      movq    %r13, %r15
// 420: 0f 84 79 ff ff ff             je      0x39f <_JIT_ENTRY+0x39f>
// 426: 48 29 dd                      subq    %rbx, %rbp
// 429: 48 83 c5 b8                   addq    $-0x48, %rbp
// 42d: 48 c1 ed 03                   shrq    $0x3, %rbp
// 431: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 434: 31 c0                         xorl    %eax, %eax
// 436: e9 a3 fc ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 43b: 
static const unsigned char _CALL_BUILTIN_Oplus_GET_AITER_code_body[1084] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4c, 0x89, 0xfd, 0xe9, 0x0f, 0x03, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xef, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x06, 0x02, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x89, 0x45, 0x00, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x74, 0x08, 0x4c, 0x89, 0xe5, 0xe9, 0xd7, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8d, 0x2c, 0xc7, 0x48, 0x83, 0xc5, 0xf8, 0x4d, 0x8b, 0x7c, 0xc7, 0xf8, 0x49, 0x8b, 0x47, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd1, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x3b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x87, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x76, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x4d, 0x89, 0xef, 0x0f, 0x84, 0x79, 0xff, 0xff, 0xff, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xa3, 0xfc, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_GET_AITER_code_holes[34] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd2},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x342, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x363, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x36d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x3c3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x3cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x3e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x40f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00 while calling a Python object\x00"
// f1: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_GET_AITER_data_body[249] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GET_AITER_data_holes[1];

// _CALL_BUILTIN_Oplus_GET_ANEXT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GET_ANEXT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0xba
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4c 89 fd                      movq    %r15, %rbp
// 112: e9 ca 02 00 00                jmp     0x3e1 <_JIT_ENTRY+0x3e1>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13b: 4c 89 f6                      movq    %r14, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 4c 8b 0c 24                   movq    (%rsp), %r9
// 145: 41 ff 41 2c                   incl    0x2c(%r9)
// 149: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14e: 49 8b 06                      movq    (%r14), %rax
// 151: 48 85 c0                      testq   %rax, %rax
// 154: 7f 2a                         jg      0x180 <_JIT_ENTRY+0x180>
// 156: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000158:  R_X86_64_64  .rodata.str1.1
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_NegativeRefcount
// 16a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16f: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 174: 4c 89 f2                      movq    %r14, %rdx
// 177: ff d0                         callq   *%rax
// 179: 4c 8b 0c 24                   movq    (%rsp), %r9
// 17d: 49 8b 06                      movq    (%r14), %rax
// 180: 85 c0                         testl   %eax, %eax
// 182: 78 2f                         js      0x1b3 <_JIT_ENTRY+0x1b3>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18e: ff d0                         callq   *%rax
// 190: 4c 8b 0c 24                   movq    (%rsp), %r9
// 194: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 199: 48 ff 08                      decq    (%rax)
// 19c: 75 15                         jne     0x1b3 <_JIT_ENTRY+0x1b3>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_Dealloc
// 1a8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 0c 24                   movq    (%rsp), %r9
// 1b3: 49 8b 04 24                   movq    (%r12), %rax
// 1b7: 48 85 c0                      testq   %rax, %rax
// 1ba: 7f 26                         jg      0x1e2 <_JIT_ENTRY+0x1e2>
// 1bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001be:  R_X86_64_64  .rodata.str1.1
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_NegativeRefcount
// 1d0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d5: 4c 89 e2                      movq    %r12, %rdx
// 1d8: ff d0                         callq   *%rax
// 1da: 4c 8b 0c 24                   movq    (%rsp), %r9
// 1de: 49 8b 04 24                   movq    (%r12), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 29                         js      0x20f <_JIT_ENTRY+0x20f>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 4c 8b 0c 24                   movq    (%rsp), %r9
// 1f6: 49 ff 0c 24                   decq    (%r12)
// 1fa: 75 13                         jne     0x20f <_JIT_ENTRY+0x20f>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_Dealloc
// 206: 4c 89 e7                      movq    %r12, %rdi
// 209: ff d0                         callq   *%rax
// 20b: 4c 8b 0c 24                   movq    (%rsp), %r9
// 20f: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 213: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 218: 4d 85 f6                      testq   %r14, %r14
// 21b: 0f 84 f1 00 00 00             je      0x312 <_JIT_ENTRY+0x312>
// 221: 4b 8d 2c ef                   leaq    (%r15,%r13,8), %rbp
// 225: 4c 89 30                      movq    %r14, (%rax)
// 228: 49 8b 41 10                   movq    0x10(%r9), %rax
// 22c: 48 8b 00                      movq    (%rax), %rax
// 22f: 84 c0                         testb   %al, %al
// 231: 74 1b                         je      0x24e <_JIT_ENTRY+0x24e>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_HandlePending
// 23d: 4c 89 cf                      movq    %r9, %rdi
// 240: ff d0                         callq   *%rax
// 242: 4c 8b 0c 24                   movq    (%rsp), %r9
// 246: 85 c0                         testl   %eax, %eax
// 248: 0f 85 93 01 00 00             jne     0x3e1 <_JIT_ENTRY+0x3e1>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _JIT_OPARG
// 258: f7 d0                         notl    %eax
// 25a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25f: 48 98                         cltq
// 261: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// 266: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 26a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026c:  R_X86_64_64  PyAsyncGen_Type
// 274: 48 39 c8                      cmpq    %rcx, %rax
// 277: 0f 84 cf 00 00 00             je      0x34c <_JIT_ENTRY+0x34c>
// 27d: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 281: 48 85 c9                      testq   %rcx, %rcx
// 284: 0f 84 90 00 00 00             je      0x31a <_JIT_ENTRY+0x31a>
// 28a: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 28e: 48 85 c9                      testq   %rcx, %rcx
// 291: 0f 84 83 00 00 00             je      0x31a <_JIT_ENTRY+0x31a>
// 297: ff d1                         callq   *%rcx
// 299: 48 85 c0                      testq   %rax, %rax
// 29c: 0f 84 3f 01 00 00             je      0x3e1 <_JIT_ENTRY+0x3e1>
// 2a2: 49 89 c4                      movq    %rax, %r12
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 2af: 4c 89 e7                      movq    %r12, %rdi
// 2b2: ff d0                         callq   *%rax
// 2b4: 48 85 c0                      testq   %rax, %rax
// 2b7: 0f 84 e2 00 00 00             je      0x39f <_JIT_ENTRY+0x39f>
// 2bd: 49 89 c5                      movq    %rax, %r13
// 2c0: 49 8b 04 24                   movq    (%r12), %rax
// 2c4: 48 85 c0                      testq   %rax, %rax
// 2c7: 7f 22                         jg      0x2eb <_JIT_ENTRY+0x2eb>
// 2c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cb:  R_X86_64_64  .rodata.str1.1
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _Py_NegativeRefcount
// 2dd: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 2e2: 4c 89 e2                      movq    %r12, %rdx
// 2e5: ff d0                         callq   *%rax
// 2e7: 49 8b 04 24                   movq    (%r12), %rax
// 2eb: 85 c0                         testl   %eax, %eax
// 2ed: 78 70                         js      0x35f <_JIT_ENTRY+0x35f>
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f9: ff d0                         callq   *%rax
// 2fb: 49 ff 0c 24                   decq    (%r12)
// 2ff: 75 5e                         jne     0x35f <_JIT_ENTRY+0x35f>
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _Py_Dealloc
// 30b: 4c 89 e7                      movq    %r12, %rdi
// 30e: ff d0                         callq   *%rax
// 310: eb 4d                         jmp     0x35f <_JIT_ENTRY+0x35f>
// 312: 48 89 c5                      movq    %rax, %rbp
// 315: e9 c7 00 00 00                jmp     0x3e1 <_JIT_ENTRY+0x3e1>
// 31a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000031c:  R_X86_64_64  PyExc_TypeError
// 324: 48 8b 31                      movq    (%rcx), %rsi
// 327: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 32b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000032d:  R_X86_64_64  .rodata.str1.1+0x39
// 335: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000337:  R_X86_64_64  _PyErr_Format
// 33f: 4c 89 cf                      movq    %r9, %rdi
// 342: 31 c0                         xorl    %eax, %eax
// 344: 41 ff d0                      callq   *%r8
// 347: e9 95 00 00 00                jmp     0x3e1 <_JIT_ENTRY+0x3e1>
// 34c: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 350: ff 50 10                      callq   *0x10(%rax)
// 353: 49 89 c5                      movq    %rax, %r13
// 356: 48 85 c0                      testq   %rax, %rax
// 359: 0f 84 82 00 00 00             je      0x3e1 <_JIT_ENTRY+0x3e1>
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  _JIT_OPARG
// 369: f7 d0                         notl    %eax
// 36b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 370: 48 98                         cltq
// 372: 4d 89 2c c7                   movq    %r13, (%r15,%rax,8)
// 376: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 37a: 48 83 c6 08                   addq    $0x8, %rsi
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _JIT_CONTINUE
// 388: 48 89 df                      movq    %rbx, %rdi
// 38b: 48 8b 14 24                   movq    (%rsp), %rdx
// 38f: 48 83 c4 18                   addq    $0x18, %rsp
// 393: 5b                            popq    %rbx
// 394: 41 5c                         popq    %r12
// 396: 41 5d                         popq    %r13
// 398: 41 5e                         popq    %r14
// 39a: 41 5f                         popq    %r15
// 39c: 5d                            popq    %rbp
// 39d: ff e0                         jmpq    *%rax
// 39f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a1:  R_X86_64_64  PyExc_TypeError
// 3a9: 48 8b 38                      movq    (%rax), %rdi
// 3ac: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 3b1: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 3b5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003b7:  R_X86_64_64  .rodata.str1.1+0x7c
// 3bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003c1:  R_X86_64_64  _PyErr_FormatFromCause
// 3c9: 31 c0                         xorl    %eax, %eax
// 3cb: ff d1                         callq   *%rcx
// 3cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cf:  R_X86_64_64  .text+0x400
// 3d7: bf f8 02 00 00                movl    $0x2f8, %edi            # imm = 0x2F8
// 3dc: 4c 89 e6                      movq    %r12, %rsi
// 3df: ff d0                         callq   *%rax
// 3e1: 48 29 dd                      subq    %rbx, %rbp
// 3e4: 48 83 c5 b8                   addq    $-0x48, %rbp
// 3e8: 48 c1 ed 03                   shrq    $0x3, %rbp
// 3ec: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 3ef: 31 c0                         xorl    %eax, %eax
// 3f1: e9 e8 fc ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 3f6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 
// 0000000000000400 <Py_DECREF>:
// 400: 53                            pushq   %rbx
// 401: 48 89 f3                      movq    %rsi, %rbx
// 404: 48 8b 06                      movq    (%rsi), %rax
// 407: 48 85 c0                      testq   %rax, %rax
// 40a: 7e 06                         jle     0x412 <Py_DECREF+0x12>
// 40c: 85 c0                         testl   %eax, %eax
// 40e: 79 24                         jns     0x434 <Py_DECREF+0x34>
// 410: eb 33                         jmp     0x445 <Py_DECREF+0x45>
// 412: 89 fe                         movl    %edi, %esi
// 414: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000416:  R_X86_64_64  .rodata.str1.1
// 41e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000420:  R_X86_64_64  _Py_NegativeRefcount
// 428: 48 89 da                      movq    %rbx, %rdx
// 42b: ff d0                         callq   *%rax
// 42d: 48 8b 03                      movq    (%rbx), %rax
// 430: 85 c0                         testl   %eax, %eax
// 432: 78 11                         js      0x445 <Py_DECREF+0x45>
// 434: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000436:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 43e: ff d0                         callq   *%rax
// 440: 48 ff 0b                      decq    (%rbx)
// 443: 74 02                         je      0x447 <Py_DECREF+0x47>
// 445: 5b                            popq    %rbx
// 446: c3                            retq
// 447: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000449:  R_X86_64_64  _Py_Dealloc
// 451: 48 89 df                      movq    %rbx, %rdi
// 454: 5b                            popq    %rbx
// 455: ff e0                         jmpq    *%rax
// 457: 
static const unsigned char _CALL_BUILTIN_Oplus_GET_ANEXT_code_body[1112] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4c, 0x89, 0xfd, 0xe9, 0xca, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x41, 0xff, 0x41, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xf1, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xef, 0x4c, 0x89, 0x30, 0x49, 0x8b, 0x41, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xcf, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0x93, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x3f, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe2, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x5e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x4d, 0x48, 0x89, 0xc5, 0xe9, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xcf, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0x95, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x50, 0xff, 0x50, 0x10, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xe8, 0xfc, 0xff, 0xff, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_GET_ANEXT_code_holes[35] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xba},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x337, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x3b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x3c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x3cf, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x400},
    {0x416, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x420, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x436, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x449, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00 while calling a Python object\x00"
// d9: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_GET_ANEXT_data_body[225] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GET_ANEXT_data_holes[1];

// _CALL_BUILTIN_Oplus_GET_AWAITABLE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GET_AWAITABLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 48 63 ee                      movslq  %esi, %rbp
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 e9                   movzwl  %cx, %r13d
// 3f: 4c 89 e9                      movq    %r13, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d5                      notq    %r13
// 50: 4c 0f 44 e9                   cmoveq  %rcx, %r13
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 51                         jne     0xab <_JIT_ENTRY+0xab>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 4c 63 f9                      movslq  %ecx, %r15
// 64: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 32                         jne     0xab <_JIT_ENTRY+0xab>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 27                         jne     0xab <_JIT_ENTRY+0xab>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 48                         jle     0xe2 <_JIT_ENTRY+0xe2>
// 9a: 4f 8b 2c ee                   movq    (%r14,%r13,8), %r13
// 9e: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a2: 75 78                         jne     0x11c <_JIT_ENTRY+0x11c>
// a4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a9: eb 73                         jmp     0x11e <_JIT_ENTRY+0x11e>
// ab: 49 29 de                      subq    %rbx, %r14
// ae: 49 83 c6 b8                   addq    $-0x48, %r14
// b2: 49 c1 ee 03                   shrq    $0x3, %r14
// b6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// ba: 48 8b 03                      movq    (%rbx), %rax
// bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bf:  R_X86_64_64  _JIT_TARGET
// c7: 89 c9                         movl    %ecx, %ecx
// c9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cd: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d3: 48 83 c4 18                   addq    $0x18, %rsp
// d7: 5b                            popq    %rbx
// d8: 41 5c                         popq    %r12
// da: 41 5d                         popq    %r13
// dc: 41 5e                         popq    %r14
// de: 41 5f                         popq    %r15
// e0: 5d                            popq    %rbp
// e1: c3                            retq
// e2: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1+0x5c
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_CheckRecursiveCall
// fb: 48 89 d7                      movq    %rdx, %rdi
// fe: ff d0                         callq   *%rax
// 100: 85 c0                         testl   %eax, %eax
// 102: 0f 85 33 03 00 00             jne     0x43b <_JIT_ENTRY+0x43b>
// 108: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10d: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 112: 4f 8b 2c ee                   movq    (%r14,%r13,8), %r13
// 116: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11a: 74 88                         je      0xa4 <_JIT_ENTRY+0xa4>
// 11c: 31 ff                         xorl    %edi, %edi
// 11e: 4c 89 ee                      movq    %r13, %rsi
// 121: 41 ff d0                      callq   *%r8
// 124: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 129: ff 47 2c                      incl    0x2c(%rdi)
// 12c: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 27                         jg      0x161 <_JIT_ENTRY+0x161>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 153: 4c 89 ea                      movq    %r13, %rdx
// 156: ff d0                         callq   *%rax
// 158: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 15d: 49 8b 45 00                   movq    (%r13), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 2b                         js      0x190 <_JIT_ENTRY+0x190>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 176: 49 ff 4d 00                   decq    (%r13)
// 17a: 75 14                         jne     0x190 <_JIT_ENTRY+0x190>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: 4c 89 ef                      movq    %r13, %rdi
// 189: ff d0                         callq   *%rax
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: 49 8b 04 24                   movq    (%r12), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7f 27                         jg      0x1c0 <_JIT_ENTRY+0x1c0>
// 199: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019b:  R_X86_64_64  .rodata.str1.1
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_NegativeRefcount
// 1ad: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b2: 4c 89 e2                      movq    %r12, %rdx
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1bc: 49 8b 04 24                   movq    (%r12), %rax
// 1c0: 85 c0                         testl   %eax, %eax
// 1c2: 78 2b                         js      0x1ef <_JIT_ENTRY+0x1ef>
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d5: 49 ff 0c 24                   decq    (%r12)
// 1d9: 75 14                         jne     0x1ef <_JIT_ENTRY+0x1ef>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: 4c 89 e7                      movq    %r12, %rdi
// 1e8: ff d0                         callq   *%rax
// 1ea: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ef: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f3: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f8: 48 85 c9                      testq   %rcx, %rcx
// 1fb: 74 71                         je      0x26e <_JIT_ENTRY+0x26e>
// 1fd: 4d 8d 2c ee                   leaq    (%r14,%rbp,8), %r13
// 201: 48 89 08                      movq    %rcx, (%rax)
// 204: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 208: 48 8b 00                      movq    (%rax), %rax
// 20b: 84 c0                         testb   %al, %al
// 20d: 74 18                         je      0x227 <_JIT_ENTRY+0x227>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_HandlePending
// 219: ff d0                         callq   *%rax
// 21b: 85 c0                         testl   %eax, %eax
// 21d: 74 08                         je      0x227 <_JIT_ENTRY+0x227>
// 21f: 4d 89 ee                      movq    %r13, %r14
// 222: e9 14 02 00 00                jmp     0x43b <_JIT_ENTRY+0x43b>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_OPARG
// 231: f7 d0                         notl    %eax
// 233: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 238: 4c 63 f8                      movslq  %eax, %r15
// 23b: 4b 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %rbp
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 24a: 48 89 ef                      movq    %rbp, %rdi
// 24d: ff d0                         callq   *%rax
// 24f: 49 89 c4                      movq    %rax, %r12
// 252: 48 85 c0                      testq   %rax, %rax
// 255: 74 1f                         je      0x276 <_JIT_ENTRY+0x276>
// 257: 48 8b 45 00                   movq    (%rbp), %rax
// 25b: 48 85 c0                      testq   %rax, %rax
// 25e: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 263: 7e 41                         jle     0x2a6 <_JIT_ENTRY+0x2a6>
// 265: 85 c0                         testl   %eax, %eax
// 267: 79 68                         jns     0x2d1 <_JIT_ENTRY+0x2d1>
// 269: e9 8e 00 00 00                jmp     0x2fc <_JIT_ENTRY+0x2fc>
// 26e: 49 89 c6                      movq    %rax, %r14
// 271: e9 c5 01 00 00                jmp     0x43b <_JIT_ENTRY+0x43b>
// 276: 48 8b 75 08                   movq    0x8(%rbp), %rsi
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _JIT_OPARG
// 284: 0f b7 d0                      movzwl  %ax, %edx
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _PyEval_FormatAwaitableError
// 291: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 296: ff d0                         callq   *%rax
// 298: 48 8b 45 00                   movq    (%rbp), %rax
// 29c: 48 85 c0                      testq   %rax, %rax
// 29f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2a4: 7f bf                         jg      0x265 <_JIT_ENTRY+0x265>
// 2a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a8:  R_X86_64_64  .rodata.str1.1
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_NegativeRefcount
// 2ba: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 2bf: 48 89 ea                      movq    %rbp, %rdx
// 2c2: ff d0                         callq   *%rax
// 2c4: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2c9: 48 8b 45 00                   movq    (%rbp), %rax
// 2cd: 85 c0                         testl   %eax, %eax
// 2cf: 78 2b                         js      0x2fc <_JIT_ENTRY+0x2fc>
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2db: ff d0                         callq   *%rax
// 2dd: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2e2: 48 ff 4d 00                   decq    (%rbp)
// 2e6: 75 14                         jne     0x2fc <_JIT_ENTRY+0x2fc>
// 2e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ea:  R_X86_64_64  _Py_Dealloc
// 2f2: 48 89 ef                      movq    %rbp, %rdi
// 2f5: ff d0                         callq   *%rax
// 2f7: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2fc: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 300: 49 83 c6 f8                   addq    $-0x8, %r14
// 304: 4d 85 e4                      testq   %r12, %r12
// 307: 0f 84 2e 01 00 00             je      0x43b <_JIT_ENTRY+0x43b>
// 30d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030f:  R_X86_64_64  PyCoro_Type
// 317: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 31c: 74 26                         je      0x344 <_JIT_ENTRY+0x344>
// 31e: 4d 89 26                      movq    %r12, (%r14)
// 321: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000323:  R_X86_64_64  _JIT_CONTINUE
// 32b: 48 89 df                      movq    %rbx, %rdi
// 32e: 4c 89 ee                      movq    %r13, %rsi
// 331: 48 89 ca                      movq    %rcx, %rdx
// 334: 48 83 c4 18                   addq    $0x18, %rsp
// 338: 5b                            popq    %rbx
// 339: 41 5c                         popq    %r12
// 33b: 41 5d                         popq    %r13
// 33d: 41 5e                         popq    %r14
// 33f: 41 5f                         popq    %r15
// 341: 5d                            popq    %rbp
// 342: ff e0                         jmpq    *%rax
// 344: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000346:  R_X86_64_64  _PyGen_yf
// 34e: 4c 89 e7                      movq    %r12, %rdi
// 351: ff d0                         callq   *%rax
// 353: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 358: 48 85 c0                      testq   %rax, %rax
// 35b: 74 c1                         je      0x31e <_JIT_ENTRY+0x31e>
// 35d: 48 89 c5                      movq    %rax, %rbp
// 360: 48 8b 00                      movq    (%rax), %rax
// 363: 48 85 c0                      testq   %rax, %rax
// 366: 7f 27                         jg      0x38f <_JIT_ENTRY+0x38f>
// 368: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000036a:  R_X86_64_64  .rodata.str1.1
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  _Py_NegativeRefcount
// 37c: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 381: 48 89 ea                      movq    %rbp, %rdx
// 384: ff d0                         callq   *%rax
// 386: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 38b: 48 8b 45 00                   movq    (%rbp), %rax
// 38f: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000391:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 399: 85 c0                         testl   %eax, %eax
// 39b: 78 22                         js      0x3bf <_JIT_ENTRY+0x3bf>
// 39d: 41 ff d7                      callq   *%r15
// 3a0: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 3a5: 48 ff 4d 00                   decq    (%rbp)
// 3a9: 75 14                         jne     0x3bf <_JIT_ENTRY+0x3bf>
// 3ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ad:  R_X86_64_64  _Py_Dealloc
// 3b5: 48 89 ef                      movq    %rbp, %rdi
// 3b8: ff d0                         callq   *%rax
// 3ba: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 3bf: 49 8b 04 24                   movq    (%r12), %rax
// 3c3: 48 85 c0                      testq   %rax, %rax
// 3c6: 7f 27                         jg      0x3ef <_JIT_ENTRY+0x3ef>
// 3c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003ca:  R_X86_64_64  .rodata.str1.1
// 3d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d4:  R_X86_64_64  _Py_NegativeRefcount
// 3dc: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 3e1: 4c 89 e2                      movq    %r12, %rdx
// 3e4: ff d0                         callq   *%rax
// 3e6: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 3eb: 49 8b 04 24                   movq    (%r12), %rax
// 3ef: 85 c0                         testl   %eax, %eax
// 3f1: 78 22                         js      0x415 <_JIT_ENTRY+0x415>
// 3f3: 41 ff d7                      callq   *%r15
// 3f6: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 3fb: 49 ff 0c 24                   decq    (%r12)
// 3ff: 75 14                         jne     0x415 <_JIT_ENTRY+0x415>
// 401: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000403:  R_X86_64_64  _Py_Dealloc
// 40b: 4c 89 e7                      movq    %r12, %rdi
// 40e: ff d0                         callq   *%rax
// 410: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 415: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000417:  R_X86_64_64  PyExc_RuntimeError
// 41f: 48 8b 30                      movq    (%rax), %rsi
// 422: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000424:  R_X86_64_64  .rodata.str1.1+0x39
// 42c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000042e:  R_X86_64_64  _PyErr_SetString
// 436: 48 89 cf                      movq    %rcx, %rdi
// 439: ff d0                         callq   *%rax
// 43b: 49 29 de                      subq    %rbx, %r14
// 43e: 49 83 c6 b8                   addq    $-0x48, %r14
// 442: 49 c1 ee 03                   shrq    $0x3, %r14
// 446: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44a: 31 c0                         xorl    %eax, %eax
// 44c: e9 82 fc ff ff                jmp     0xd3 <_JIT_ENTRY+0xd3>
// 451: 
static const unsigned char _CALL_BUILTIN_Oplus_GET_AWAITABLE_code_body[1106] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x48, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xe9, 0x4c, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd5, 0x4c, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x48, 0x4f, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x78, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x73, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x33, 0x03, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x4f, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x88, 0x31, 0xff, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x71, 0x4d, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xee, 0xe9, 0x14, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x85, 0xc0, 0x74, 0x1f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x7e, 0x41, 0x85, 0xc0, 0x79, 0x68, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xe9, 0xc5, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x7f, 0xbf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x2e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x26, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xca, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0xc1, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x22, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x22, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x82, 0xfc, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_GET_AWAITABLE_code_holes[36] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5c},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x391, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x403, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x417, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x424, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x42e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00 while calling a Python object\x00'
// 7b: 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_GET_AWAITABLE_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GET_AWAITABLE_data_holes[1];

// _CALL_BUILTIN_Oplus_GET_ITER
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GET_ITER.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4c                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 0c 24                   movq    %rcx, (%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7a                         jne     0x122 <_JIT_ENTRY+0x122>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 75                         jmp     0x124 <_JIT_ENTRY+0x124>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 04 24                   movq    %r8, (%rsp)
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_CheckRecursiveCall
// fe: 48 89 d7                      movq    %rdx, %rdi
// 101: ff d0                         callq   *%rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 0f 85 e9 01 00 00             jne     0x2f4 <_JIT_ENTRY+0x2f4>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 04 24                   movq    (%rsp), %r8
// 114: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 118: 48 89 0c 24                   movq    %rcx, (%rsp)
// 11c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 120: 74 86                         je      0xa8 <_JIT_ENTRY+0xa8>
// 122: 31 ff                         xorl    %edi, %edi
// 124: 4c 8b 3c 24                   movq    (%rsp), %r15
// 128: 4c 89 fe                      movq    %r15, %rsi
// 12b: 41 ff d0                      callq   *%r8
// 12e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 133: ff 47 2c                      incl    0x2c(%rdi)
// 136: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13b: 49 8b 07                      movq    (%r15), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7f 2a                         jg      0x16d <_JIT_ENTRY+0x16d>
// 143: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 160: 4c 89 fa                      movq    %r15, %rdx
// 163: ff d0                         callq   *%rax
// 165: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16a: 49 8b 07                      movq    (%r15), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 2f                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 8b 04 24                   movq    (%rsp), %rax
// 186: 48 ff 08                      decq    (%rax)
// 189: 75 15                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 48 8b 3c 24                   movq    (%rsp), %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 27                         jg      0x1d0 <_JIT_ENTRY+0x1d0>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 2b                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 14                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2a                         je      0x237 <_JIT_ENTRY+0x237>
// 20d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 20                         je      0x23f <_JIT_ENTRY+0x23f>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 74 10                         je      0x23f <_JIT_ENTRY+0x23f>
// 22f: 4d 89 e6                      movq    %r12, %r14
// 232: e9 bd 00 00 00                jmp     0x2f4 <_JIT_ENTRY+0x2f4>
// 237: 49 89 c6                      movq    %rax, %r14
// 23a: e9 b5 00 00 00                jmp     0x2f4 <_JIT_ENTRY+0x2f4>
// 23f: 4c 89 24 24                   movq    %r12, (%rsp)
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_OPARG
// 24d: f7 d0                         notl    %eax
// 24f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 254: 4c 63 e0                      movslq  %eax, %r12
// 257: 4b 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %rbp
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  PyObject_GetIter
// 266: 48 89 ef                      movq    %rbp, %rdi
// 269: ff d0                         callq   *%rax
// 26b: 49 89 c5                      movq    %rax, %r13
// 26e: 48 8b 45 00                   movq    (%rbp), %rax
// 272: 48 85 c0                      testq   %rax, %rax
// 275: 7f 22                         jg      0x299 <_JIT_ENTRY+0x299>
// 277: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000279:  R_X86_64_64  .rodata.str1.1
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_NegativeRefcount
// 28b: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 290: 48 89 ea                      movq    %rbp, %rdx
// 293: ff d0                         callq   *%rax
// 295: 48 8b 45 00                   movq    (%rbp), %rax
// 299: 85 c0                         testl   %eax, %eax
// 29b: 78 21                         js      0x2be <_JIT_ENTRY+0x2be>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a7: ff d0                         callq   *%rax
// 2a9: 48 ff 4d 00                   decq    (%rbp)
// 2ad: 75 0f                         jne     0x2be <_JIT_ENTRY+0x2be>
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_Dealloc
// 2b9: 48 89 ef                      movq    %rbp, %rdi
// 2bc: ff d0                         callq   *%rax
// 2be: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 2c2: 49 83 c6 f8                   addq    $-0x8, %r14
// 2c6: 4d 85 ed                      testq   %r13, %r13
// 2c9: 74 29                         je      0x2f4 <_JIT_ENTRY+0x2f4>
// 2cb: 4d 89 2e                      movq    %r13, (%r14)
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _JIT_CONTINUE
// 2d8: 48 89 df                      movq    %rbx, %rdi
// 2db: 48 8b 34 24                   movq    (%rsp), %rsi
// 2df: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2e4: 48 83 c4 18                   addq    $0x18, %rsp
// 2e8: 5b                            popq    %rbx
// 2e9: 41 5c                         popq    %r12
// 2eb: 41 5d                         popq    %r13
// 2ed: 41 5e                         popq    %r14
// 2ef: 41 5f                         popq    %r15
// 2f1: 5d                            popq    %rbp
// 2f2: ff e0                         jmpq    *%rax
// 2f4: 49 29 de                      subq    %rbx, %r14
// 2f7: 49 83 c6 b8                   addq    $-0x48, %r14
// 2fb: 49 c1 ee 03                   shrq    $0x3, %r14
// 2ff: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 303: 31 c0                         xorl    %eax, %eax
// 305: e9 cd fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 30a: 
static const unsigned char _CALL_BUILTIN_Oplus_GET_ITER_code_body[779] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4c, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xe9, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x10, 0x4d, 0x89, 0xe6, 0xe9, 0xbd, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xe9, 0xb5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x24, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x85, 0xed, 0x74, 0x29, 0x4d, 0x89, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xcd, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_GET_ITER_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GET_ITER_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GET_ITER_data_holes[1];

// _CALL_BUILTIN_Oplus_GET_LEN
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GET_LEN.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 de                      subq    %rbx, %r14
// b9: 49 83 c6 b8                   addq    $-0x48, %r14
// bd: 49 c1 ee 03                   shrq    $0x3, %r14
// c1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 f4                      movq    %r14, %r12
// 112: e9 b1 01 00 00                jmp     0x2c8 <_JIT_ENTRY+0x2c8>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 4c 89 fe                      movq    %r15, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 48 8b 3c 24                   movq    (%rsp), %rdi
// 145: ff 47 2c                      incl    0x2c(%rdi)
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 49 8b 07                      movq    (%r15), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 2a                         jg      0x17f <_JIT_ENTRY+0x17f>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16e: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 173: 4c 89 fa                      movq    %r15, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17c: 49 8b 07                      movq    (%r15), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 2f                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 ff 08                      decq    (%rax)
// 19b: 75 15                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 26                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 29                         js      0x20e <_JIT_ENTRY+0x20e>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 13                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 20e: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 212: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 217: 48 85 c9                      testq   %rcx, %rcx
// 21a: 0f 84 a5 00 00 00             je      0x2c5 <_JIT_ENTRY+0x2c5>
// 220: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 224: 48 89 08                      movq    %rcx, (%rax)
// 227: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 22b: 48 8b 00                      movq    (%rax), %rax
// 22e: 84 c0                         testb   %al, %al
// 230: 74 14                         je      0x246 <_JIT_ENTRY+0x246>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_HandlePending
// 23c: ff d0                         callq   *%rax
// 23e: 85 c0                         testl   %eax, %eax
// 240: 0f 85 82 00 00 00             jne     0x2c8 <_JIT_ENTRY+0x2c8>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _JIT_OPARG
// 250: f7 d0                         notl    %eax
// 252: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 257: 48 98                         cltq
// 259: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  PyObject_Size
// 268: ff d0                         callq   *%rax
// 26a: 48 85 c0                      testq   %rax, %rax
// 26d: 78 59                         js      0x2c8 <_JIT_ENTRY+0x2c8>
// 26f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000271:  R_X86_64_64  PyLong_FromSsize_t
// 279: 48 89 c7                      movq    %rax, %rdi
// 27c: ff d1                         callq   *%rcx
// 27e: 48 85 c0                      testq   %rax, %rax
// 281: 74 45                         je      0x2c8 <_JIT_ENTRY+0x2c8>
// 283: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000285:  R_X86_64_64  _JIT_OPARG
// 28d: f7 d1                         notl    %ecx
// 28f: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 295: 48 63 c9                      movslq  %ecx, %rcx
// 298: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 29c: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 2a0: 48 83 c6 08                   addq    $0x8, %rsi
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _JIT_CONTINUE
// 2ae: 48 89 df                      movq    %rbx, %rdi
// 2b1: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b5: 48 83 c4 18                   addq    $0x18, %rsp
// 2b9: 5b                            popq    %rbx
// 2ba: 41 5c                         popq    %r12
// 2bc: 41 5d                         popq    %r13
// 2be: 41 5e                         popq    %r14
// 2c0: 41 5f                         popq    %r15
// 2c2: 5d                            popq    %rbp
// 2c3: ff e0                         jmpq    *%rax
// 2c5: 49 89 c4                      movq    %rax, %r12
// 2c8: 49 29 dc                      subq    %rbx, %r12
// 2cb: 49 83 c4 b8                   addq    $-0x48, %r12
// 2cf: 49 c1 ec 03                   shrq    $0x3, %r12
// 2d3: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2d7: 31 c0                         xorl    %eax, %eax
// 2d9: e9 00 fe ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 2de: 
static const unsigned char _CALL_BUILTIN_Oplus_GET_LEN_code_body[735] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf4, 0xe9, 0xb1, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x82, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0x59, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x00, 0xfe, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_GET_LEN_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GET_LEN_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GET_LEN_data_holes[1];

// _CALL_BUILTIN_Oplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GET_YIELD_FROM_ITER.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x7d
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 fc                      movq    %r15, %r12
// 112: e9 ec 01 00 00                jmp     0x303 <_JIT_ENTRY+0x303>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13b: 4c 89 f6                      movq    %r14, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 4c 8b 04 24                   movq    (%rsp), %r8
// 145: 41 ff 40 2c                   incl    0x2c(%r8)
// 149: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14e: 49 8b 06                      movq    (%r14), %rax
// 151: 48 85 c0                      testq   %rax, %rax
// 154: 7f 2a                         jg      0x180 <_JIT_ENTRY+0x180>
// 156: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000158:  R_X86_64_64  .rodata.str1.1
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_NegativeRefcount
// 16a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16f: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 174: 4c 89 f2                      movq    %r14, %rdx
// 177: ff d0                         callq   *%rax
// 179: 4c 8b 04 24                   movq    (%rsp), %r8
// 17d: 49 8b 06                      movq    (%r14), %rax
// 180: 85 c0                         testl   %eax, %eax
// 182: 78 2f                         js      0x1b3 <_JIT_ENTRY+0x1b3>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18e: ff d0                         callq   *%rax
// 190: 4c 8b 04 24                   movq    (%rsp), %r8
// 194: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 199: 48 ff 08                      decq    (%rax)
// 19c: 75 15                         jne     0x1b3 <_JIT_ENTRY+0x1b3>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_Dealloc
// 1a8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 04 24                   movq    (%rsp), %r8
// 1b3: 49 8b 04 24                   movq    (%r12), %rax
// 1b7: 48 85 c0                      testq   %rax, %rax
// 1ba: 7f 26                         jg      0x1e2 <_JIT_ENTRY+0x1e2>
// 1bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001be:  R_X86_64_64  .rodata.str1.1
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_NegativeRefcount
// 1d0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d5: 4c 89 e2                      movq    %r12, %rdx
// 1d8: ff d0                         callq   *%rax
// 1da: 4c 8b 04 24                   movq    (%rsp), %r8
// 1de: 49 8b 04 24                   movq    (%r12), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 29                         js      0x20f <_JIT_ENTRY+0x20f>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 4c 8b 04 24                   movq    (%rsp), %r8
// 1f6: 49 ff 0c 24                   decq    (%r12)
// 1fa: 75 13                         jne     0x20f <_JIT_ENTRY+0x20f>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_Dealloc
// 206: 4c 89 e7                      movq    %r12, %rdi
// 209: ff d0                         callq   *%rax
// 20b: 4c 8b 04 24                   movq    (%rsp), %r8
// 20f: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 213: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 218: 48 85 c9                      testq   %rcx, %rcx
// 21b: 0f 84 df 00 00 00             je      0x300 <_JIT_ENTRY+0x300>
// 221: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 225: 48 89 08                      movq    %rcx, (%rax)
// 228: 49 8b 40 10                   movq    0x10(%r8), %rax
// 22c: 48 8b 00                      movq    (%rax), %rax
// 22f: 84 c0                         testb   %al, %al
// 231: 74 1b                         je      0x24e <_JIT_ENTRY+0x24e>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_HandlePending
// 23d: 4c 89 c7                      movq    %r8, %rdi
// 240: ff d0                         callq   *%rax
// 242: 4c 8b 04 24                   movq    (%rsp), %r8
// 246: 85 c0                         testl   %eax, %eax
// 248: 0f 85 b5 00 00 00             jne     0x303 <_JIT_ENTRY+0x303>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _JIT_OPARG
// 258: f7 d0                         notl    %eax
// 25a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25f: 48 98                         cltq
// 261: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 266: 49 8b 45 08                   movq    0x8(%r13), %rax
// 26a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026c:  R_X86_64_64  PyCoro_Type
// 274: 48 39 c8                      cmpq    %rcx, %rax
// 277: 0f 84 9c 00 00 00             je      0x319 <_JIT_ENTRY+0x319>
// 27d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027f:  R_X86_64_64  PyGen_Type
// 287: 48 39 c8                      cmpq    %rcx, %rax
// 28a: 0f 84 97 00 00 00             je      0x327 <_JIT_ENTRY+0x327>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  PyObject_GetIter
// 29a: 4c 89 ef                      movq    %r13, %rdi
// 29d: ff d0                         callq   *%rax
// 29f: 48 85 c0                      testq   %rax, %rax
// 2a2: 74 5f                         je      0x303 <_JIT_ENTRY+0x303>
// 2a4: 48 89 c5                      movq    %rax, %rbp
// 2a7: 49 8b 45 00                   movq    (%r13), %rax
// 2ab: 48 85 c0                      testq   %rax, %rax
// 2ae: 7f 22                         jg      0x2d2 <_JIT_ENTRY+0x2d2>
// 2b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b2:  R_X86_64_64  .rodata.str1.1
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_NegativeRefcount
// 2c4: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 2c9: 4c 89 ea                      movq    %r13, %rdx
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 8b 45 00                   movq    (%r13), %rax
// 2d2: 85 c0                         testl   %eax, %eax
// 2d4: 78 21                         js      0x2f7 <_JIT_ENTRY+0x2f7>
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e0: ff d0                         callq   *%rax
// 2e2: 49 ff 4d 00                   decq    (%r13)
// 2e6: 75 0f                         jne     0x2f7 <_JIT_ENTRY+0x2f7>
// 2e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ea:  R_X86_64_64  _Py_Dealloc
// 2f2: 4c 89 ef                      movq    %r13, %rdi
// 2f5: ff d0                         callq   *%rax
// 2f7: 49 89 ed                      movq    %rbp, %r13
// 2fa: 4c 8b 04 24                   movq    (%rsp), %r8
// 2fe: eb 27                         jmp     0x327 <_JIT_ENTRY+0x327>
// 300: 49 89 c4                      movq    %rax, %r12
// 303: 49 29 dc                      subq    %rbx, %r12
// 306: 49 83 c4 b8                   addq    $-0x48, %r12
// 30a: 49 c1 ec 03                   shrq    $0x3, %r12
// 30e: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 312: 31 c0                         xorl    %eax, %eax
// 314: e9 c5 fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 319: 48 8b 03                      movq    (%rbx), %rax
// 31c: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// 320: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// 325: 74 3b                         je      0x362 <_JIT_ENTRY+0x362>
// 327: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000329:  R_X86_64_64  _JIT_OPARG
// 331: f7 d0                         notl    %eax
// 333: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 338: 48 98                         cltq
// 33a: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 33f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000341:  R_X86_64_64  _JIT_CONTINUE
// 349: 48 89 df                      movq    %rbx, %rdi
// 34c: 4c 89 e6                      movq    %r12, %rsi
// 34f: 4c 89 c2                      movq    %r8, %rdx
// 352: 48 83 c4 18                   addq    $0x18, %rsp
// 356: 5b                            popq    %rbx
// 357: 41 5c                         popq    %r12
// 359: 41 5d                         popq    %r13
// 35b: 41 5e                         popq    %r14
// 35d: 41 5f                         popq    %r15
// 35f: 5d                            popq    %rbp
// 360: ff e0                         jmpq    *%rax
// 362: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000364:  R_X86_64_64  PyExc_TypeError
// 36c: 48 8b 30                      movq    (%rax), %rsi
// 36f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000371:  R_X86_64_64  .rodata.str1.1+0x39
// 379: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037b:  R_X86_64_64  _PyErr_SetString
// 383: 4c 89 c7                      movq    %r8, %rdi
// 386: ff d0                         callq   *%rax
// 388: e9 76 ff ff ff                jmp     0x303 <_JIT_ENTRY+0x303>
// 38d: 
static const unsigned char _CALL_BUILTIN_Oplus_GET_YIELD_FROM_ITER_code_body[910] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfc, 0xe9, 0xec, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xdf, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0xb5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x5f, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xed, 0x4c, 0x8b, 0x04, 0x24, 0xeb, 0x27, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xc5, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x03, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0xe9, 0x76, 0xff, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_GET_YIELD_FROM_ITER_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7d},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x341, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x371, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00 while calling a Python object\x00"
// 9c: 00 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_GET_YIELD_FROM_ITER_data_body[161] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GET_YIELD_FROM_ITER_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_BOTH_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 13 02 00 00             jne     0x271 <_JIT_ENTRY+0x271>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 f0 01 00 00             jne     0x271 <_JIT_ENTRY+0x271>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 e1 01 00 00             jne     0x271 <_JIT_ENTRY+0x271>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 32 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 2e                         je      0x210 <_JIT_ENTRY+0x210>
// 1e2: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 32                         je      0x226 <_JIT_ENTRY+0x226>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 1b                         je      0x226 <_JIT_ENTRY+0x226>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: eb 03                         jmp     0x213 <_JIT_ENTRY+0x213>
// 210: 49 89 c6                      movq    %rax, %r14
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: eb 73                         jmp     0x299 <_JIT_ENTRY+0x299>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: f7 d0                         notl    %eax
// 232: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 237: 48 98                         cltq
// 239: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  PyFloat_Type
// 248: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 24c: 75 20                         jne     0x26e <_JIT_ENTRY+0x26e>
// 24e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000250:  R_X86_64_64  _JIT_OPARG
// 258: f7 d1                         notl    %ecx
// 25a: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 260: 48 63 c9                      movslq  %ecx, %rcx
// 263: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 268: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 26c: 74 3a                         je      0x2a8 <_JIT_ENTRY+0x2a8>
// 26e: 4d 89 e6                      movq    %r12, %r14
// 271: 49 29 de                      subq    %rbx, %r14
// 274: 49 83 c6 b8                   addq    $-0x48, %r14
// 278: 49 c1 ee 03                   shrq    $0x3, %r14
// 27c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 280: 48 8b 03                      movq    (%rbx), %rax
// 283: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000285:  R_X86_64_64  _JIT_TARGET
// 28d: 89 c9                         movl    %ecx, %ecx
// 28f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 293: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 299: 48 83 c4 18                   addq    $0x18, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: c3                            retq
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _JIT_CONTINUE
// 2b2: 48 89 df                      movq    %rbx, %rdi
// 2b5: 4c 89 e6                      movq    %r12, %rsi
// 2b8: 48 83 c4 18                   addq    $0x18, %rsp
// 2bc: 5b                            popq    %rbx
// 2bd: 41 5c                         popq    %r12
// 2bf: 41 5d                         popq    %r13
// 2c1: 41 5e                         popq    %r14
// 2c3: 41 5f                         popq    %r15
// 2c5: 5d                            popq    %rbp
// 2c6: ff e0                         jmpq    *%rax
// 2c8: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_BOTH_FLOAT_code_body[713] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x13, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf0, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xe1, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_GUARD_BOTH_FLOAT_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_BOTH_FLOAT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_BOTH_FLOAT_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_BOTH_INT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_BOTH_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 13 02 00 00             jne     0x271 <_JIT_ENTRY+0x271>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 f0 01 00 00             jne     0x271 <_JIT_ENTRY+0x271>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 e1 01 00 00             jne     0x271 <_JIT_ENTRY+0x271>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 32 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 2e                         je      0x210 <_JIT_ENTRY+0x210>
// 1e2: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 32                         je      0x226 <_JIT_ENTRY+0x226>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 1b                         je      0x226 <_JIT_ENTRY+0x226>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: eb 03                         jmp     0x213 <_JIT_ENTRY+0x213>
// 210: 49 89 c6                      movq    %rax, %r14
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: eb 73                         jmp     0x299 <_JIT_ENTRY+0x299>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: f7 d0                         notl    %eax
// 232: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 237: 48 98                         cltq
// 239: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  PyLong_Type
// 248: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 24c: 75 20                         jne     0x26e <_JIT_ENTRY+0x26e>
// 24e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000250:  R_X86_64_64  _JIT_OPARG
// 258: f7 d1                         notl    %ecx
// 25a: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 260: 48 63 c9                      movslq  %ecx, %rcx
// 263: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 268: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 26c: 74 3a                         je      0x2a8 <_JIT_ENTRY+0x2a8>
// 26e: 4d 89 e6                      movq    %r12, %r14
// 271: 49 29 de                      subq    %rbx, %r14
// 274: 49 83 c6 b8                   addq    $-0x48, %r14
// 278: 49 c1 ee 03                   shrq    $0x3, %r14
// 27c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 280: 48 8b 03                      movq    (%rbx), %rax
// 283: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000285:  R_X86_64_64  _JIT_TARGET
// 28d: 89 c9                         movl    %ecx, %ecx
// 28f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 293: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 299: 48 83 c4 18                   addq    $0x18, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: c3                            retq
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _JIT_CONTINUE
// 2b2: 48 89 df                      movq    %rbx, %rdi
// 2b5: 4c 89 e6                      movq    %r12, %rsi
// 2b8: 48 83 c4 18                   addq    $0x18, %rsp
// 2bc: 5b                            popq    %rbx
// 2bd: 41 5c                         popq    %r12
// 2bf: 41 5d                         popq    %r13
// 2c1: 41 5e                         popq    %r14
// 2c3: 41 5f                         popq    %r15
// 2c5: 5d                            popq    %rbp
// 2c6: ff e0                         jmpq    *%rax
// 2c8: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_BOTH_INT_code_body[713] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x13, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf0, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xe1, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_GUARD_BOTH_INT_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_BOTH_INT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_BOTH_INT_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_BOTH_UNICODE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 13 02 00 00             jne     0x271 <_JIT_ENTRY+0x271>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 f0 01 00 00             jne     0x271 <_JIT_ENTRY+0x271>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 e1 01 00 00             jne     0x271 <_JIT_ENTRY+0x271>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 32 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 2e                         je      0x210 <_JIT_ENTRY+0x210>
// 1e2: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 32                         je      0x226 <_JIT_ENTRY+0x226>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 1b                         je      0x226 <_JIT_ENTRY+0x226>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: eb 03                         jmp     0x213 <_JIT_ENTRY+0x213>
// 210: 49 89 c6                      movq    %rax, %r14
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: eb 73                         jmp     0x299 <_JIT_ENTRY+0x299>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: f7 d0                         notl    %eax
// 232: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 237: 48 98                         cltq
// 239: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  PyUnicode_Type
// 248: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 24c: 75 20                         jne     0x26e <_JIT_ENTRY+0x26e>
// 24e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000250:  R_X86_64_64  _JIT_OPARG
// 258: f7 d1                         notl    %ecx
// 25a: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 260: 48 63 c9                      movslq  %ecx, %rcx
// 263: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 268: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 26c: 74 3a                         je      0x2a8 <_JIT_ENTRY+0x2a8>
// 26e: 4d 89 e6                      movq    %r12, %r14
// 271: 49 29 de                      subq    %rbx, %r14
// 274: 49 83 c6 b8                   addq    $-0x48, %r14
// 278: 49 c1 ee 03                   shrq    $0x3, %r14
// 27c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 280: 48 8b 03                      movq    (%rbx), %rax
// 283: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000285:  R_X86_64_64  _JIT_TARGET
// 28d: 89 c9                         movl    %ecx, %ecx
// 28f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 293: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 299: 48 83 c4 18                   addq    $0x18, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: c3                            retq
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _JIT_CONTINUE
// 2b2: 48 89 df                      movq    %rbx, %rdi
// 2b5: 4c 89 e6                      movq    %r12, %rsi
// 2b8: 48 83 c4 18                   addq    $0x18, %rsp
// 2bc: 5b                            popq    %rbx
// 2bd: 41 5c                         popq    %r12
// 2bf: 41 5d                         popq    %r13
// 2c1: 41 5e                         popq    %r14
// 2c3: 41 5f                         popq    %r15
// 2c5: 5d                            popq    %rbp
// 2c6: ff e0                         jmpq    *%rax
// 2c8: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_BOTH_UNICODE_code_body[713] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x13, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf0, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xe1, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_GUARD_BOTH_UNICODE_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_BOTH_UNICODE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_BOTH_UNICODE_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_BUILTINS_VERSION.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 f7 01 00 00             jne     0x255 <_JIT_ENTRY+0x255>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 d4 01 00 00             jne     0x255 <_JIT_ENTRY+0x255>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 c5 01 00 00             jne     0x255 <_JIT_ENTRY+0x255>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 ae 01 00 00             jne     0x28f <_JIT_ENTRY+0x28f>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 26                         js      0x179 <_JIT_ENTRY+0x179>
// 153: 41 ff d7                      callq   *%r15
// 156: 48 8b 14 24                   movq    (%rsp), %rdx
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 48 8b 14 24                   movq    (%rsp), %rdx
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 20                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ac: 41 ff d7                      callq   *%r15
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 13                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 0f 84 ae 00 00 00             je      0x28c <_JIT_ENTRY+0x28c>
// 1de: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1e2: 48 89 08                      movq    %rcx, (%rax)
// 1e5: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1e9: 48 8b 00                      movq    (%rax), %rax
// 1ec: 84 c0                         testb   %al, %al
// 1ee: 74 1b                         je      0x20b <_JIT_ENTRY+0x20b>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_HandlePending
// 1fa: 48 89 d7                      movq    %rdx, %rdi
// 1fd: ff d0                         callq   *%rax
// 1ff: 48 8b 14 24                   movq    (%rsp), %rdx
// 203: 85 c0                         testl   %eax, %eax
// 205: 0f 85 84 00 00 00             jne     0x28f <_JIT_ENTRY+0x28f>
// 20b: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 20f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000211:  R_X86_64_64  PyDict_Type
// 219: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 21d: 75 36                         jne     0x255 <_JIT_ENTRY+0x255>
// 21f: 48 8b 40 20                   movq    0x20(%rax), %rax
// 223: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000225:  R_X86_64_64  _JIT_OPERAND
// 22d: 0f b7 c9                      movzwl  %cx, %ecx
// 230: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 233: 75 20                         jne     0x255 <_JIT_ENTRY+0x255>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_CONTINUE
// 23f: 48 89 df                      movq    %rbx, %rdi
// 242: 4c 89 f6                      movq    %r14, %rsi
// 245: 48 83 c4 18                   addq    $0x18, %rsp
// 249: 5b                            popq    %rbx
// 24a: 41 5c                         popq    %r12
// 24c: 41 5d                         popq    %r13
// 24e: 41 5e                         popq    %r14
// 250: 41 5f                         popq    %r15
// 252: 5d                            popq    %rbp
// 253: ff e0                         jmpq    *%rax
// 255: 49 29 de                      subq    %rbx, %r14
// 258: 49 83 c6 b8                   addq    $-0x48, %r14
// 25c: 49 c1 ee 03                   shrq    $0x3, %r14
// 260: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 264: 48 8b 03                      movq    (%rbx), %rax
// 267: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000269:  R_X86_64_64  _JIT_TARGET
// 271: 89 c9                         movl    %ecx, %ecx
// 273: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 277: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27d: 48 83 c4 18                   addq    $0x18, %rsp
// 281: 5b                            popq    %rbx
// 282: 41 5c                         popq    %r12
// 284: 41 5d                         popq    %r13
// 286: 41 5e                         popq    %r14
// 288: 41 5f                         popq    %r15
// 28a: 5d                            popq    %rbp
// 28b: c3                            retq
// 28c: 49 89 c6                      movq    %rax, %r14
// 28f: 49 29 de                      subq    %rbx, %r14
// 292: 49 83 c6 b8                   addq    $-0x48, %r14
// 296: 49 c1 ee 03                   shrq    $0x3, %r14
// 29a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 29e: 31 c0                         xorl    %eax, %eax
// 2a0: eb db                         jmp     0x27d <_JIT_ENTRY+0x27d>
// 2a2: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_BUILTINS_VERSION_code_body[675] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xf7, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xd4, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xc5, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xae, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x43, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x36, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xdb};
static const Hole _CALL_BUILTIN_Oplus_GUARD_BUILTINS_VERSION_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_BUILTINS_VERSION_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_DORV_VALUES
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_DORV_VALUES.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 e9 01 00 00             jne     0x247 <_JIT_ENTRY+0x247>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 c6 01 00 00             jne     0x247 <_JIT_ENTRY+0x247>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 b7 01 00 00             jne     0x247 <_JIT_ENTRY+0x247>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 32 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 2e                         je      0x210 <_JIT_ENTRY+0x210>
// 1e2: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 32                         je      0x226 <_JIT_ENTRY+0x226>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 1b                         je      0x226 <_JIT_ENTRY+0x226>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: eb 03                         jmp     0x213 <_JIT_ENTRY+0x213>
// 210: 49 89 c6                      movq    %rax, %r14
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: eb 49                         jmp     0x26f <_JIT_ENTRY+0x26f>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: f7 d0                         notl    %eax
// 232: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 237: 48 98                         cltq
// 239: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 23e: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// 242: 75 3a                         jne     0x27e <_JIT_ENTRY+0x27e>
// 244: 4d 89 e6                      movq    %r12, %r14
// 247: 49 29 de                      subq    %rbx, %r14
// 24a: 49 83 c6 b8                   addq    $-0x48, %r14
// 24e: 49 c1 ee 03                   shrq    $0x3, %r14
// 252: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 256: 48 8b 03                      movq    (%rbx), %rax
// 259: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025b:  R_X86_64_64  _JIT_TARGET
// 263: 89 c9                         movl    %ecx, %ecx
// 265: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 269: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 26f: 48 83 c4 18                   addq    $0x18, %rsp
// 273: 5b                            popq    %rbx
// 274: 41 5c                         popq    %r12
// 276: 41 5d                         popq    %r13
// 278: 41 5e                         popq    %r14
// 27a: 41 5f                         popq    %r15
// 27c: 5d                            popq    %rbp
// 27d: c3                            retq
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _JIT_CONTINUE
// 288: 48 89 df                      movq    %rbx, %rdi
// 28b: 4c 89 e6                      movq    %r12, %rsi
// 28e: 48 83 c4 18                   addq    $0x18, %rsp
// 292: 5b                            popq    %rbx
// 293: 41 5c                         popq    %r12
// 295: 41 5d                         popq    %r13
// 297: 41 5e                         popq    %r14
// 299: 41 5f                         popq    %r15
// 29b: 5d                            popq    %rbp
// 29c: ff e0                         jmpq    *%rax
// 29e: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_DORV_VALUES_code_body[671] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xe9, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xc6, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xb7, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x49, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0xf6, 0x40, 0xe8, 0x01, 0x75, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_GUARD_DORV_VALUES_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_DORV_VALUES_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_DORV_VALUES_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 24 02 00 00             jne     0x282 <_JIT_ENTRY+0x282>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 01 02 00 00             jne     0x282 <_JIT_ENTRY+0x282>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 f2 01 00 00             jne     0x282 <_JIT_ENTRY+0x282>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 32 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 2e                         je      0x210 <_JIT_ENTRY+0x210>
// 1e2: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 35                         je      0x229 <_JIT_ENTRY+0x229>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 1e                         je      0x229 <_JIT_ENTRY+0x229>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: eb 03                         jmp     0x213 <_JIT_ENTRY+0x213>
// 210: 49 89 c6                      movq    %rax, %r14
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: e9 81 00 00 00                jmp     0x2aa <_JIT_ENTRY+0x2aa>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 98                         cltq
// 23c: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 241: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 245: 75 18                         jne     0x25f <_JIT_ENTRY+0x25f>
// 247: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 255: ff d0                         callq   *%rax
// 257: 48 8b 14 24                   movq    (%rsp), %rdx
// 25b: 84 c0                         testb   %al, %al
// 25d: 74 20                         je      0x27f <_JIT_ENTRY+0x27f>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _JIT_CONTINUE
// 269: 48 89 df                      movq    %rbx, %rdi
// 26c: 4c 89 e6                      movq    %r12, %rsi
// 26f: 48 83 c4 18                   addq    $0x18, %rsp
// 273: 5b                            popq    %rbx
// 274: 41 5c                         popq    %r12
// 276: 41 5d                         popq    %r13
// 278: 41 5e                         popq    %r14
// 27a: 41 5f                         popq    %r15
// 27c: 5d                            popq    %rbp
// 27d: ff e0                         jmpq    *%rax
// 27f: 4d 89 e6                      movq    %r12, %r14
// 282: 49 29 de                      subq    %rbx, %r14
// 285: 49 83 c6 b8                   addq    $-0x48, %r14
// 289: 49 c1 ee 03                   shrq    $0x3, %r14
// 28d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 291: 48 8b 03                      movq    (%rbx), %rax
// 294: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000296:  R_X86_64_64  _JIT_TARGET
// 29e: 89 c9                         movl    %ecx, %ecx
// 2a0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2a4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2aa: 48 83 c4 18                   addq    $0x18, %rsp
// 2ae: 5b                            popq    %rbx
// 2af: 41 5c                         popq    %r12
// 2b1: 41 5d                         popq    %r13
// 2b3: 41 5e                         popq    %r14
// 2b5: 41 5f                         popq    %r15
// 2b7: 5d                            popq    %rbp
// 2b8: c3                            retq
// 2b9: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[698] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x24, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x01, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xf2, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x18, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_GLOBALS_VERSION.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 f7 01 00 00             jne     0x255 <_JIT_ENTRY+0x255>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 d4 01 00 00             jne     0x255 <_JIT_ENTRY+0x255>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 c5 01 00 00             jne     0x255 <_JIT_ENTRY+0x255>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 ae 01 00 00             jne     0x28f <_JIT_ENTRY+0x28f>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 26                         js      0x179 <_JIT_ENTRY+0x179>
// 153: 41 ff d7                      callq   *%r15
// 156: 48 8b 14 24                   movq    (%rsp), %rdx
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 48 8b 14 24                   movq    (%rsp), %rdx
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 20                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ac: 41 ff d7                      callq   *%r15
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 13                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 0f 84 ae 00 00 00             je      0x28c <_JIT_ENTRY+0x28c>
// 1de: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1e2: 48 89 08                      movq    %rcx, (%rax)
// 1e5: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1e9: 48 8b 00                      movq    (%rax), %rax
// 1ec: 84 c0                         testb   %al, %al
// 1ee: 74 1b                         je      0x20b <_JIT_ENTRY+0x20b>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_HandlePending
// 1fa: 48 89 d7                      movq    %rdx, %rdi
// 1fd: ff d0                         callq   *%rax
// 1ff: 48 8b 14 24                   movq    (%rsp), %rdx
// 203: 85 c0                         testl   %eax, %eax
// 205: 0f 85 84 00 00 00             jne     0x28f <_JIT_ENTRY+0x28f>
// 20b: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 20f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000211:  R_X86_64_64  PyDict_Type
// 219: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 21d: 75 36                         jne     0x255 <_JIT_ENTRY+0x255>
// 21f: 48 8b 40 20                   movq    0x20(%rax), %rax
// 223: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000225:  R_X86_64_64  _JIT_OPERAND
// 22d: 0f b7 c9                      movzwl  %cx, %ecx
// 230: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 233: 75 20                         jne     0x255 <_JIT_ENTRY+0x255>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_CONTINUE
// 23f: 48 89 df                      movq    %rbx, %rdi
// 242: 4c 89 f6                      movq    %r14, %rsi
// 245: 48 83 c4 18                   addq    $0x18, %rsp
// 249: 5b                            popq    %rbx
// 24a: 41 5c                         popq    %r12
// 24c: 41 5d                         popq    %r13
// 24e: 41 5e                         popq    %r14
// 250: 41 5f                         popq    %r15
// 252: 5d                            popq    %rbp
// 253: ff e0                         jmpq    *%rax
// 255: 49 29 de                      subq    %rbx, %r14
// 258: 49 83 c6 b8                   addq    $-0x48, %r14
// 25c: 49 c1 ee 03                   shrq    $0x3, %r14
// 260: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 264: 48 8b 03                      movq    (%rbx), %rax
// 267: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000269:  R_X86_64_64  _JIT_TARGET
// 271: 89 c9                         movl    %ecx, %ecx
// 273: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 277: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27d: 48 83 c4 18                   addq    $0x18, %rsp
// 281: 5b                            popq    %rbx
// 282: 41 5c                         popq    %r12
// 284: 41 5d                         popq    %r13
// 286: 41 5e                         popq    %r14
// 288: 41 5f                         popq    %r15
// 28a: 5d                            popq    %rbp
// 28b: c3                            retq
// 28c: 49 89 c6                      movq    %rax, %r14
// 28f: 49 29 de                      subq    %rbx, %r14
// 292: 49 83 c6 b8                   addq    $-0x48, %r14
// 296: 49 c1 ee 03                   shrq    $0x3, %r14
// 29a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 29e: 31 c0                         xorl    %eax, %eax
// 2a0: eb db                         jmp     0x27d <_JIT_ENTRY+0x27d>
// 2a2: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_GLOBALS_VERSION_code_body[675] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xf7, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xd4, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xc5, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xae, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x43, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x36, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xdb};
static const Hole _CALL_BUILTIN_Oplus_GUARD_GLOBALS_VERSION_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_GLOBALS_VERSION_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_IS_FALSE_POP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 59                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3a                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2f                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 80 00 00 00             jne     0x12c <_JIT_ENTRY+0x12c>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: eb 7b                         jmp     0x12e <_JIT_ENTRY+0x12e>
// b3: 4d 89 f7                      movq    %r14, %r15
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 0f 85 35 01 00 00             jne     0x248 <_JIT_ENTRY+0x248>
// 113: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 118: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 11d: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 121: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 126: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12a: 74 80                         je      0xac <_JIT_ENTRY+0xac>
// 12c: 31 ff                         xorl    %edi, %edi
// 12e: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 133: 4c 89 fe                      movq    %r15, %rsi
// 136: 41 ff d0                      callq   *%r8
// 139: 48 8b 14 24                   movq    (%rsp), %rdx
// 13d: ff 42 2c                      incl    0x2c(%rdx)
// 140: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 145: 49 8b 07                      movq    (%r15), %rax
// 148: 48 85 c0                      testq   %rax, %rax
// 14b: 7f 2a                         jg      0x177 <_JIT_ENTRY+0x177>
// 14d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014f:  R_X86_64_64  .rodata.str1.1
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _Py_NegativeRefcount
// 161: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 166: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 16b: 4c 89 fa                      movq    %r15, %rdx
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 14 24                   movq    (%rsp), %rdx
// 174: 49 8b 07                      movq    (%r15), %rax
// 177: 85 c0                         testl   %eax, %eax
// 179: 78 2f                         js      0x1aa <_JIT_ENTRY+0x1aa>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 185: ff d0                         callq   *%rax
// 187: 48 8b 14 24                   movq    (%rsp), %rdx
// 18b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 190: 48 ff 08                      decq    (%rax)
// 193: 75 15                         jne     0x1aa <_JIT_ENTRY+0x1aa>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 14 24                   movq    (%rsp), %rdx
// 1aa: 49 8b 04 24                   movq    (%r12), %rax
// 1ae: 48 85 c0                      testq   %rax, %rax
// 1b1: 7f 26                         jg      0x1d9 <_JIT_ENTRY+0x1d9>
// 1b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b5:  R_X86_64_64  .rodata.str1.1
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_NegativeRefcount
// 1c7: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1cc: 4c 89 e2                      movq    %r12, %rdx
// 1cf: ff d0                         callq   *%rax
// 1d1: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d5: 49 8b 04 24                   movq    (%r12), %rax
// 1d9: 85 c0                         testl   %eax, %eax
// 1db: 78 29                         js      0x206 <_JIT_ENTRY+0x206>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ed: 49 ff 0c 24                   decq    (%r12)
// 1f1: 75 13                         jne     0x206 <_JIT_ENTRY+0x206>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_Dealloc
// 1fd: 4c 89 e7                      movq    %r12, %rdi
// 200: ff d0                         callq   *%rax
// 202: 48 8b 14 24                   movq    (%rsp), %rdx
// 206: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 20a: 48 83 7c 24 10 00             cmpq    $0x0, 0x10(%rsp)
// 210: 74 33                         je      0x245 <_JIT_ENTRY+0x245>
// 212: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 216: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 21b: 48 89 08                      movq    %rcx, (%rax)
// 21e: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 222: 48 8b 00                      movq    (%rax), %rax
// 225: 84 c0                         testb   %al, %al
// 227: 74 35                         je      0x25e <_JIT_ENTRY+0x25e>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_HandlePending
// 233: 48 89 d7                      movq    %rdx, %rdi
// 236: ff d0                         callq   *%rax
// 238: 48 8b 14 24                   movq    (%rsp), %rdx
// 23c: 85 c0                         testl   %eax, %eax
// 23e: 74 1e                         je      0x25e <_JIT_ENTRY+0x25e>
// 240: 4d 89 fe                      movq    %r15, %r14
// 243: eb 03                         jmp     0x248 <_JIT_ENTRY+0x248>
// 245: 49 89 c6                      movq    %rax, %r14
// 248: 49 29 de                      subq    %rbx, %r14
// 24b: 49 83 c6 b8                   addq    $-0x48, %r14
// 24f: 49 c1 ee 03                   shrq    $0x3, %r14
// 253: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 257: 31 c0                         xorl    %eax, %eax
// 259: e9 80 fe ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _JIT_OPARG
// 268: f7 d0                         notl    %eax
// 26a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 26f: 48 98                         cltq
// 271: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000273:  R_X86_64_64  _Py_TrueStruct
// 27b: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 280: 0f 84 30 fe ff ff             je      0xb6 <_JIT_ENTRY+0xb6>
// 286: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 28a: 48 83 c6 f8                   addq    $-0x8, %rsi
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _JIT_CONTINUE
// 298: 48 89 df                      movq    %rbx, %rdi
// 29b: 48 83 c4 18                   addq    $0x18, %rsp
// 29f: 5b                            popq    %rbx
// 2a0: 41 5c                         popq    %r12
// 2a2: 41 5d                         popq    %r13
// 2a4: 41 5e                         popq    %r14
// 2a6: 41 5f                         popq    %r15
// 2a8: 5d                            popq    %rbp
// 2a9: ff e0                         jmpq    *%rax
// 2ab: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_IS_FALSE_POP_code_body[684] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x59, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3a, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2f, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x80, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x7b, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x35, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x80, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x74, 0x33, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xfe, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x80, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x0f, 0x84, 0x30, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_GUARD_IS_FALSE_POP_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_IS_FALSE_POP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_IS_FALSE_POP_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_IS_NONE_POP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_IS_NONE_POP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 59                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3a                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2f                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 80 00 00 00             jne     0x12c <_JIT_ENTRY+0x12c>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: eb 7b                         jmp     0x12e <_JIT_ENTRY+0x12e>
// b3: 4d 89 f7                      movq    %r14, %r15
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 0f 85 2a 01 00 00             jne     0x23d <_JIT_ENTRY+0x23d>
// 113: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 118: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 11d: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 121: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 126: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12a: 74 80                         je      0xac <_JIT_ENTRY+0xac>
// 12c: 31 ff                         xorl    %edi, %edi
// 12e: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 133: 4c 89 fe                      movq    %r15, %rsi
// 136: 41 ff d0                      callq   *%r8
// 139: 48 8b 14 24                   movq    (%rsp), %rdx
// 13d: ff 42 2c                      incl    0x2c(%rdx)
// 140: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 145: 49 8b 07                      movq    (%r15), %rax
// 148: 48 85 c0                      testq   %rax, %rax
// 14b: 7f 2a                         jg      0x177 <_JIT_ENTRY+0x177>
// 14d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014f:  R_X86_64_64  .rodata.str1.1
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _Py_NegativeRefcount
// 161: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 166: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 16b: 4c 89 fa                      movq    %r15, %rdx
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 14 24                   movq    (%rsp), %rdx
// 174: 49 8b 07                      movq    (%r15), %rax
// 177: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: 85 c0                         testl   %eax, %eax
// 183: 78 26                         js      0x1ab <_JIT_ENTRY+0x1ab>
// 185: 41 ff d7                      callq   *%r15
// 188: 48 8b 14 24                   movq    (%rsp), %rdx
// 18c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 191: 48 ff 08                      decq    (%rax)
// 194: 75 15                         jne     0x1ab <_JIT_ENTRY+0x1ab>
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _Py_Dealloc
// 1a0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a5: ff d0                         callq   *%rax
// 1a7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ab: 49 8b 04 24                   movq    (%r12), %rax
// 1af: 48 85 c0                      testq   %rax, %rax
// 1b2: 7f 26                         jg      0x1da <_JIT_ENTRY+0x1da>
// 1b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b6:  R_X86_64_64  .rodata.str1.1
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_NegativeRefcount
// 1c8: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1cd: 4c 89 e2                      movq    %r12, %rdx
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d6: 49 8b 04 24                   movq    (%r12), %rax
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 20                         js      0x1fe <_JIT_ENTRY+0x1fe>
// 1de: 41 ff d7                      callq   *%r15
// 1e1: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 13                         jne     0x1fe <_JIT_ENTRY+0x1fe>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 14 24                   movq    (%rsp), %rdx
// 1fe: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 202: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 207: 48 85 c9                      testq   %rcx, %rcx
// 20a: 74 2e                         je      0x23a <_JIT_ENTRY+0x23a>
// 20c: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 210: 48 89 08                      movq    %rcx, (%rax)
// 213: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 217: 48 8b 00                      movq    (%rax), %rax
// 21a: 84 c0                         testb   %al, %al
// 21c: 74 35                         je      0x253 <_JIT_ENTRY+0x253>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_HandlePending
// 228: 48 89 d7                      movq    %rdx, %rdi
// 22b: ff d0                         callq   *%rax
// 22d: 48 8b 14 24                   movq    (%rsp), %rdx
// 231: 85 c0                         testl   %eax, %eax
// 233: 74 1e                         je      0x253 <_JIT_ENTRY+0x253>
// 235: 4d 89 fe                      movq    %r15, %r14
// 238: eb 03                         jmp     0x23d <_JIT_ENTRY+0x23d>
// 23a: 49 89 c6                      movq    %rax, %r14
// 23d: 49 29 de                      subq    %rbx, %r14
// 240: 49 83 c6 b8                   addq    $-0x48, %r14
// 244: 49 c1 ee 03                   shrq    $0x3, %r14
// 248: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24c: 31 c0                         xorl    %eax, %eax
// 24e: e9 8b fe ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _JIT_OPARG
// 25d: f7 d0                         notl    %eax
// 25f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 264: 48 98                         cltq
// 266: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000268:  R_X86_64_64  _Py_NoneStruct
// 270: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 275: 0f 85 3b fe ff ff             jne     0xb6 <_JIT_ENTRY+0xb6>
// 27b: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 27f: 48 83 c6 f8                   addq    $-0x8, %rsi
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_CONTINUE
// 28d: 48 89 df                      movq    %rbx, %rdi
// 290: 48 83 c4 18                   addq    $0x18, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: ff e0                         jmpq    *%rax
// 2a0: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_IS_NONE_POP_code_body[673] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x59, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3a, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2f, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x80, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x7b, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x80, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xfe, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x8b, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x0f, 0x85, 0x3b, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_GUARD_IS_NONE_POP_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_IS_NONE_POP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_IS_NONE_POP_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_IS_NOT_NONE_POP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 59                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3a                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2f                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 80 00 00 00             jne     0x12c <_JIT_ENTRY+0x12c>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: eb 7b                         jmp     0x12e <_JIT_ENTRY+0x12e>
// b3: 4d 89 fe                      movq    %r15, %r14
// b6: 49 29 de                      subq    %rbx, %r14
// b9: 49 83 c6 b8                   addq    $-0x48, %r14
// bd: 49 c1 ee 03                   shrq    $0x3, %r14
// c1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 0f 85 ec 01 00 00             jne     0x2ff <_JIT_ENTRY+0x2ff>
// 113: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 118: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 11d: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 121: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 126: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12a: 74 80                         je      0xac <_JIT_ENTRY+0xac>
// 12c: 31 ff                         xorl    %edi, %edi
// 12e: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 133: 4c 89 f6                      movq    %r14, %rsi
// 136: 41 ff d0                      callq   *%r8
// 139: 48 8b 14 24                   movq    (%rsp), %rdx
// 13d: ff 42 2c                      incl    0x2c(%rdx)
// 140: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 145: 49 8b 06                      movq    (%r14), %rax
// 148: 48 85 c0                      testq   %rax, %rax
// 14b: 7f 2a                         jg      0x177 <_JIT_ENTRY+0x177>
// 14d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014f:  R_X86_64_64  .rodata.str1.1
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _Py_NegativeRefcount
// 161: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 166: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 16b: 4c 89 f2                      movq    %r14, %rdx
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 14 24                   movq    (%rsp), %rdx
// 174: 49 8b 06                      movq    (%r14), %rax
// 177: 85 c0                         testl   %eax, %eax
// 179: 78 2f                         js      0x1aa <_JIT_ENTRY+0x1aa>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 185: ff d0                         callq   *%rax
// 187: 48 8b 14 24                   movq    (%rsp), %rdx
// 18b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 190: 48 ff 08                      decq    (%rax)
// 193: 75 15                         jne     0x1aa <_JIT_ENTRY+0x1aa>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 14 24                   movq    (%rsp), %rdx
// 1aa: 49 8b 04 24                   movq    (%r12), %rax
// 1ae: 48 85 c0                      testq   %rax, %rax
// 1b1: 7f 26                         jg      0x1d9 <_JIT_ENTRY+0x1d9>
// 1b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b5:  R_X86_64_64  .rodata.str1.1
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_NegativeRefcount
// 1c7: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1cc: 4c 89 e2                      movq    %r12, %rdx
// 1cf: ff d0                         callq   *%rax
// 1d1: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d5: 49 8b 04 24                   movq    (%r12), %rax
// 1d9: 85 c0                         testl   %eax, %eax
// 1db: 78 29                         js      0x206 <_JIT_ENTRY+0x206>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ed: 49 ff 0c 24                   decq    (%r12)
// 1f1: 75 13                         jne     0x206 <_JIT_ENTRY+0x206>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_Dealloc
// 1fd: 4c 89 e7                      movq    %r12, %rdi
// 200: ff d0                         callq   *%rax
// 202: 48 8b 14 24                   movq    (%rsp), %rdx
// 206: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 20a: 48 83 7c 24 10 00             cmpq    $0x0, 0x10(%rsp)
// 210: 0f 84 e6 00 00 00             je      0x2fc <_JIT_ENTRY+0x2fc>
// 216: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 21a: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 21f: 48 89 08                      movq    %rcx, (%rax)
// 222: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 226: 48 8b 00                      movq    (%rax), %rax
// 229: 84 c0                         testb   %al, %al
// 22b: 74 1f                         je      0x24c <_JIT_ENTRY+0x24c>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_HandlePending
// 237: 48 89 d7                      movq    %rdx, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 48 8b 14 24                   movq    (%rsp), %rdx
// 240: 85 c0                         testl   %eax, %eax
// 242: 74 08                         je      0x24c <_JIT_ENTRY+0x24c>
// 244: 4d 89 f7                      movq    %r14, %r15
// 247: e9 b3 00 00 00                jmp     0x2ff <_JIT_ENTRY+0x2ff>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _JIT_OPARG
// 256: f7 d0                         notl    %eax
// 258: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25d: 4c 63 e8                      movslq  %eax, %r13
// 260: 4f 8b 64 ef f8                movq    -0x8(%r15,%r13,8), %r12
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_NoneStruct
// 26f: 49 39 c4                      cmpq    %rax, %r12
// 272: 0f 84 3e fe ff ff             je      0xb6 <_JIT_ENTRY+0xb6>
// 278: 49 8b 04 24                   movq    (%r12), %rax
// 27c: 48 85 c0                      testq   %rax, %rax
// 27f: 7f 26                         jg      0x2a7 <_JIT_ENTRY+0x2a7>
// 281: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000283:  R_X86_64_64  .rodata.str1.1
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_NegativeRefcount
// 295: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 29a: 4c 89 e2                      movq    %r12, %rdx
// 29d: ff d0                         callq   *%rax
// 29f: 48 8b 14 24                   movq    (%rsp), %rdx
// 2a3: 49 8b 04 24                   movq    (%r12), %rax
// 2a7: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 2ab: 49 83 c7 f8                   addq    $-0x8, %r15
// 2af: 85 c0                         testl   %eax, %eax
// 2b1: 78 29                         js      0x2dc <_JIT_ENTRY+0x2dc>
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bd: ff d0                         callq   *%rax
// 2bf: 48 8b 14 24                   movq    (%rsp), %rdx
// 2c3: 49 ff 0c 24                   decq    (%r12)
// 2c7: 75 13                         jne     0x2dc <_JIT_ENTRY+0x2dc>
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_Dealloc
// 2d3: 4c 89 e7                      movq    %r12, %rdi
// 2d6: ff d0                         callq   *%rax
// 2d8: 48 8b 14 24                   movq    (%rsp), %rdx
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _JIT_CONTINUE
// 2e6: 48 89 df                      movq    %rbx, %rdi
// 2e9: 4c 89 fe                      movq    %r15, %rsi
// 2ec: 48 83 c4 18                   addq    $0x18, %rsp
// 2f0: 5b                            popq    %rbx
// 2f1: 41 5c                         popq    %r12
// 2f3: 41 5d                         popq    %r13
// 2f5: 41 5e                         popq    %r14
// 2f7: 41 5f                         popq    %r15
// 2f9: 5d                            popq    %rbp
// 2fa: ff e0                         jmpq    *%rax
// 2fc: 49 89 c7                      movq    %rax, %r15
// 2ff: 49 29 df                      subq    %rbx, %r15
// 302: 49 83 c7 b8                   addq    $-0x48, %r15
// 306: 49 c1 ef 03                   shrq    $0x3, %r15
// 30a: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 30e: 31 c0                         xorl    %eax, %eax
// 310: e9 c9 fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 315: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_IS_NOT_NONE_POP_code_body[790] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x59, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3a, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2f, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x80, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x7b, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xec, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x80, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x0f, 0x84, 0xe6, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf7, 0xe9, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4f, 0x8b, 0x64, 0xef, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x0f, 0x84, 0x3e, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xc9, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_GUARD_IS_NOT_NONE_POP_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_IS_NOT_NONE_POP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_IS_TRUE_POP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 59                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3a                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2f                         jne     0xb3 <_JIT_ENTRY+0xb3>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 80 00 00 00             jne     0x12c <_JIT_ENTRY+0x12c>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: eb 7b                         jmp     0x12e <_JIT_ENTRY+0x12e>
// b3: 4d 89 f7                      movq    %r14, %r15
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 0f 85 35 01 00 00             jne     0x248 <_JIT_ENTRY+0x248>
// 113: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 118: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 11d: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 121: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 126: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12a: 74 80                         je      0xac <_JIT_ENTRY+0xac>
// 12c: 31 ff                         xorl    %edi, %edi
// 12e: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 133: 4c 89 fe                      movq    %r15, %rsi
// 136: 41 ff d0                      callq   *%r8
// 139: 48 8b 14 24                   movq    (%rsp), %rdx
// 13d: ff 42 2c                      incl    0x2c(%rdx)
// 140: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 145: 49 8b 07                      movq    (%r15), %rax
// 148: 48 85 c0                      testq   %rax, %rax
// 14b: 7f 2a                         jg      0x177 <_JIT_ENTRY+0x177>
// 14d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014f:  R_X86_64_64  .rodata.str1.1
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _Py_NegativeRefcount
// 161: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 166: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 16b: 4c 89 fa                      movq    %r15, %rdx
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 14 24                   movq    (%rsp), %rdx
// 174: 49 8b 07                      movq    (%r15), %rax
// 177: 85 c0                         testl   %eax, %eax
// 179: 78 2f                         js      0x1aa <_JIT_ENTRY+0x1aa>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 185: ff d0                         callq   *%rax
// 187: 48 8b 14 24                   movq    (%rsp), %rdx
// 18b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 190: 48 ff 08                      decq    (%rax)
// 193: 75 15                         jne     0x1aa <_JIT_ENTRY+0x1aa>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 14 24                   movq    (%rsp), %rdx
// 1aa: 49 8b 04 24                   movq    (%r12), %rax
// 1ae: 48 85 c0                      testq   %rax, %rax
// 1b1: 7f 26                         jg      0x1d9 <_JIT_ENTRY+0x1d9>
// 1b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b5:  R_X86_64_64  .rodata.str1.1
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_NegativeRefcount
// 1c7: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1cc: 4c 89 e2                      movq    %r12, %rdx
// 1cf: ff d0                         callq   *%rax
// 1d1: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d5: 49 8b 04 24                   movq    (%r12), %rax
// 1d9: 85 c0                         testl   %eax, %eax
// 1db: 78 29                         js      0x206 <_JIT_ENTRY+0x206>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ed: 49 ff 0c 24                   decq    (%r12)
// 1f1: 75 13                         jne     0x206 <_JIT_ENTRY+0x206>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_Dealloc
// 1fd: 4c 89 e7                      movq    %r12, %rdi
// 200: ff d0                         callq   *%rax
// 202: 48 8b 14 24                   movq    (%rsp), %rdx
// 206: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 20a: 48 83 7c 24 10 00             cmpq    $0x0, 0x10(%rsp)
// 210: 74 33                         je      0x245 <_JIT_ENTRY+0x245>
// 212: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 216: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 21b: 48 89 08                      movq    %rcx, (%rax)
// 21e: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 222: 48 8b 00                      movq    (%rax), %rax
// 225: 84 c0                         testb   %al, %al
// 227: 74 35                         je      0x25e <_JIT_ENTRY+0x25e>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_HandlePending
// 233: 48 89 d7                      movq    %rdx, %rdi
// 236: ff d0                         callq   *%rax
// 238: 48 8b 14 24                   movq    (%rsp), %rdx
// 23c: 85 c0                         testl   %eax, %eax
// 23e: 74 1e                         je      0x25e <_JIT_ENTRY+0x25e>
// 240: 4d 89 fe                      movq    %r15, %r14
// 243: eb 03                         jmp     0x248 <_JIT_ENTRY+0x248>
// 245: 49 89 c6                      movq    %rax, %r14
// 248: 49 29 de                      subq    %rbx, %r14
// 24b: 49 83 c6 b8                   addq    $-0x48, %r14
// 24f: 49 c1 ee 03                   shrq    $0x3, %r14
// 253: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 257: 31 c0                         xorl    %eax, %eax
// 259: e9 80 fe ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _JIT_OPARG
// 268: f7 d0                         notl    %eax
// 26a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 26f: 48 98                         cltq
// 271: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000273:  R_X86_64_64  _Py_FalseStruct
// 27b: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 280: 0f 84 30 fe ff ff             je      0xb6 <_JIT_ENTRY+0xb6>
// 286: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 28a: 48 83 c6 f8                   addq    $-0x8, %rsi
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _JIT_CONTINUE
// 298: 48 89 df                      movq    %rbx, %rdi
// 29b: 48 83 c4 18                   addq    $0x18, %rsp
// 29f: 5b                            popq    %rbx
// 2a0: 41 5c                         popq    %r12
// 2a2: 41 5d                         popq    %r13
// 2a4: 41 5e                         popq    %r14
// 2a6: 41 5f                         popq    %r15
// 2a8: 5d                            popq    %rbp
// 2a9: ff e0                         jmpq    *%rax
// 2ab: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_IS_TRUE_POP_code_body[684] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x59, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3a, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2f, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x80, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x7b, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x35, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x80, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x74, 0x33, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xfe, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x80, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x0f, 0x84, 0x30, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_GUARD_IS_TRUE_POP_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_IS_TRUE_POP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_IS_TRUE_POP_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_KEYS_VERSION
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_KEYS_VERSION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 1d 02 00 00             jne     0x27b <_JIT_ENTRY+0x27b>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 fa 01 00 00             jne     0x27b <_JIT_ENTRY+0x27b>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 eb 01 00 00             jne     0x27b <_JIT_ENTRY+0x27b>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 32 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 2e                         je      0x210 <_JIT_ENTRY+0x210>
// 1e2: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 32                         je      0x226 <_JIT_ENTRY+0x226>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 1b                         je      0x226 <_JIT_ENTRY+0x226>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: eb 03                         jmp     0x213 <_JIT_ENTRY+0x213>
// 210: 49 89 c6                      movq    %rax, %r14
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: eb 7d                         jmp     0x2a3 <_JIT_ENTRY+0x2a3>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: f7 d0                         notl    %eax
// 232: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 237: 48 98                         cltq
// 239: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 23e: 48 8b 40 08                   movq    0x8(%rax), %rax
// 242: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// 249: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024b:  R_X86_64_64  _JIT_OPERAND
// 253: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 256: 75 20                         jne     0x278 <_JIT_ENTRY+0x278>
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _JIT_CONTINUE
// 262: 48 89 df                      movq    %rbx, %rdi
// 265: 4c 89 e6                      movq    %r12, %rsi
// 268: 48 83 c4 18                   addq    $0x18, %rsp
// 26c: 5b                            popq    %rbx
// 26d: 41 5c                         popq    %r12
// 26f: 41 5d                         popq    %r13
// 271: 41 5e                         popq    %r14
// 273: 41 5f                         popq    %r15
// 275: 5d                            popq    %rbp
// 276: ff e0                         jmpq    *%rax
// 278: 4d 89 e6                      movq    %r12, %r14
// 27b: 49 29 de                      subq    %rbx, %r14
// 27e: 49 83 c6 b8                   addq    $-0x48, %r14
// 282: 49 c1 ee 03                   shrq    $0x3, %r14
// 286: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 28a: 48 8b 03                      movq    (%rbx), %rax
// 28d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028f:  R_X86_64_64  _JIT_TARGET
// 297: 89 c9                         movl    %ecx, %ecx
// 299: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 29d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2a3: 48 83 c4 18                   addq    $0x18, %rsp
// 2a7: 5b                            popq    %rbx
// 2a8: 41 5c                         popq    %r12
// 2aa: 41 5d                         popq    %r13
// 2ac: 41 5e                         popq    %r14
// 2ae: 41 5f                         popq    %r15
// 2b0: 5d                            popq    %rbp
// 2b1: c3                            retq
// 2b2: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_KEYS_VERSION_code_body[691] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x1d, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xfa, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xeb, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_GUARD_KEYS_VERSION_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_KEYS_VERSION_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_KEYS_VERSION_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_LIST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 16 02 00 00             jne     0x274 <_JIT_ENTRY+0x274>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 f3 01 00 00             jne     0x274 <_JIT_ENTRY+0x274>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 e4 01 00 00             jne     0x274 <_JIT_ENTRY+0x274>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 32 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 2e                         je      0x210 <_JIT_ENTRY+0x210>
// 1e2: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 32                         je      0x226 <_JIT_ENTRY+0x226>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 1b                         je      0x226 <_JIT_ENTRY+0x226>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: eb 03                         jmp     0x213 <_JIT_ENTRY+0x213>
// 210: 49 89 c6                      movq    %rax, %r14
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: eb 76                         jmp     0x29c <_JIT_ENTRY+0x29c>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: f7 d0                         notl    %eax
// 232: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 237: 48 98                         cltq
// 239: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 23e: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 242: 48 85 c9                      testq   %rcx, %rcx
// 245: 74 2a                         je      0x271 <_JIT_ENTRY+0x271>
// 247: 48 8b 40 10                   movq    0x10(%rax), %rax
// 24b: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 24f: 7d 20                         jge     0x271 <_JIT_ENTRY+0x271>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_CONTINUE
// 25b: 48 89 df                      movq    %rbx, %rdi
// 25e: 4c 89 e6                      movq    %r12, %rsi
// 261: 48 83 c4 18                   addq    $0x18, %rsp
// 265: 5b                            popq    %rbx
// 266: 41 5c                         popq    %r12
// 268: 41 5d                         popq    %r13
// 26a: 41 5e                         popq    %r14
// 26c: 41 5f                         popq    %r15
// 26e: 5d                            popq    %rbp
// 26f: ff e0                         jmpq    *%rax
// 271: 4d 89 e6                      movq    %r12, %r14
// 274: 49 29 de                      subq    %rbx, %r14
// 277: 49 83 c6 b8                   addq    $-0x48, %r14
// 27b: 49 c1 ee 03                   shrq    $0x3, %r14
// 27f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 283: 48 8b 03                      movq    (%rbx), %rax
// 286: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000288:  R_X86_64_64  _JIT_TARGET
// 290: 89 c9                         movl    %ecx, %ecx
// 292: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 296: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 29c: 48 83 c4 18                   addq    $0x18, %rsp
// 2a0: 5b                            popq    %rbx
// 2a1: 41 5c                         popq    %r12
// 2a3: 41 5d                         popq    %r13
// 2a5: 41 5e                         popq    %r14
// 2a7: 41 5f                         popq    %r15
// 2a9: 5d                            popq    %rbp
// 2aa: c3                            retq
// 2ab: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_LIST_code_body[684] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x16, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf3, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xe4, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x76, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_LIST_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_RANGE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 0a 02 00 00             jne     0x268 <_JIT_ENTRY+0x268>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 e7 01 00 00             jne     0x268 <_JIT_ENTRY+0x268>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 d8 01 00 00             jne     0x268 <_JIT_ENTRY+0x268>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 32 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 2e                         je      0x210 <_JIT_ENTRY+0x210>
// 1e2: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 32                         je      0x226 <_JIT_ENTRY+0x226>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 1b                         je      0x226 <_JIT_ENTRY+0x226>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: eb 03                         jmp     0x213 <_JIT_ENTRY+0x213>
// 210: 49 89 c6                      movq    %rax, %r14
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: eb 6a                         jmp     0x290 <_JIT_ENTRY+0x290>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: f7 d0                         notl    %eax
// 232: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 237: 48 98                         cltq
// 239: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 23e: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// 243: 7e 20                         jle     0x265 <_JIT_ENTRY+0x265>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_CONTINUE
// 24f: 48 89 df                      movq    %rbx, %rdi
// 252: 4c 89 e6                      movq    %r12, %rsi
// 255: 48 83 c4 18                   addq    $0x18, %rsp
// 259: 5b                            popq    %rbx
// 25a: 41 5c                         popq    %r12
// 25c: 41 5d                         popq    %r13
// 25e: 41 5e                         popq    %r14
// 260: 41 5f                         popq    %r15
// 262: 5d                            popq    %rbp
// 263: ff e0                         jmpq    *%rax
// 265: 4d 89 e6                      movq    %r12, %r14
// 268: 49 29 de                      subq    %rbx, %r14
// 26b: 49 83 c6 b8                   addq    $-0x48, %r14
// 26f: 49 c1 ee 03                   shrq    $0x3, %r14
// 273: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 277: 48 8b 03                      movq    (%rbx), %rax
// 27a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027c:  R_X86_64_64  _JIT_TARGET
// 284: 89 c9                         movl    %ecx, %ecx
// 286: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 28a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 290: 48 83 c4 18                   addq    $0x18, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: c3                            retq
// 29f: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[672] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x0a, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xe7, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xd8, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x6a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 16 02 00 00             jne     0x274 <_JIT_ENTRY+0x274>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 f3 01 00 00             jne     0x274 <_JIT_ENTRY+0x274>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 e4 01 00 00             jne     0x274 <_JIT_ENTRY+0x274>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 32 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 2e                         je      0x210 <_JIT_ENTRY+0x210>
// 1e2: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 32                         je      0x226 <_JIT_ENTRY+0x226>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 1b                         je      0x226 <_JIT_ENTRY+0x226>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: eb 03                         jmp     0x213 <_JIT_ENTRY+0x213>
// 210: 49 89 c6                      movq    %rax, %r14
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: eb 76                         jmp     0x29c <_JIT_ENTRY+0x29c>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: f7 d0                         notl    %eax
// 232: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 237: 48 98                         cltq
// 239: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 23e: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 242: 48 85 c9                      testq   %rcx, %rcx
// 245: 74 2a                         je      0x271 <_JIT_ENTRY+0x271>
// 247: 48 8b 40 10                   movq    0x10(%rax), %rax
// 24b: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 24f: 7d 20                         jge     0x271 <_JIT_ENTRY+0x271>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_CONTINUE
// 25b: 48 89 df                      movq    %rbx, %rdi
// 25e: 4c 89 e6                      movq    %r12, %rsi
// 261: 48 83 c4 18                   addq    $0x18, %rsp
// 265: 5b                            popq    %rbx
// 266: 41 5c                         popq    %r12
// 268: 41 5d                         popq    %r13
// 26a: 41 5e                         popq    %r14
// 26c: 41 5f                         popq    %r15
// 26e: 5d                            popq    %rbp
// 26f: ff e0                         jmpq    *%rax
// 271: 4d 89 e6                      movq    %r12, %r14
// 274: 49 29 de                      subq    %rbx, %r14
// 277: 49 83 c6 b8                   addq    $-0x48, %r14
// 27b: 49 c1 ee 03                   shrq    $0x3, %r14
// 27f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 283: 48 8b 03                      movq    (%rbx), %rax
// 286: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000288:  R_X86_64_64  _JIT_TARGET
// 290: 89 c9                         movl    %ecx, %ecx
// 292: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 296: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 29c: 48 83 c4 18                   addq    $0x18, %rsp
// 2a0: 5b                            popq    %rbx
// 2a1: 41 5c                         popq    %r12
// 2a3: 41 5d                         popq    %r13
// 2a5: 41 5e                         popq    %r14
// 2a7: 41 5f                         popq    %r15
// 2a9: 5d                            popq    %rbp
// 2aa: c3                            retq
// 2ab: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[684] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x16, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf3, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xe4, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x76, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _CALL_BUILTIN_Oplus_GUARD_TYPE_VERSION
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_GUARD_TYPE_VERSION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 19 02 00 00             jne     0x277 <_JIT_ENTRY+0x277>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 f6 01 00 00             jne     0x277 <_JIT_ENTRY+0x277>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 e7 01 00 00             jne     0x277 <_JIT_ENTRY+0x277>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 32 01 00 00             jne     0x213 <_JIT_ENTRY+0x213>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 2e                         je      0x210 <_JIT_ENTRY+0x210>
// 1e2: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 32                         je      0x226 <_JIT_ENTRY+0x226>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 1b                         je      0x226 <_JIT_ENTRY+0x226>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: eb 03                         jmp     0x213 <_JIT_ENTRY+0x213>
// 210: 49 89 c6                      movq    %rax, %r14
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: eb 79                         jmp     0x29f <_JIT_ENTRY+0x29f>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: f7 d0                         notl    %eax
// 232: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 237: 48 98                         cltq
// 239: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 23e: 48 8b 40 08                   movq    0x8(%rax), %rax
// 242: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000244:  R_X86_64_64  _JIT_OPERAND
// 24c: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 252: 75 20                         jne     0x274 <_JIT_ENTRY+0x274>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_CONTINUE
// 25e: 48 89 df                      movq    %rbx, %rdi
// 261: 4c 89 e6                      movq    %r12, %rsi
// 264: 48 83 c4 18                   addq    $0x18, %rsp
// 268: 5b                            popq    %rbx
// 269: 41 5c                         popq    %r12
// 26b: 41 5d                         popq    %r13
// 26d: 41 5e                         popq    %r14
// 26f: 41 5f                         popq    %r15
// 271: 5d                            popq    %rbp
// 272: ff e0                         jmpq    *%rax
// 274: 4d 89 e6                      movq    %r12, %r14
// 277: 49 29 de                      subq    %rbx, %r14
// 27a: 49 83 c6 b8                   addq    $-0x48, %r14
// 27e: 49 c1 ee 03                   shrq    $0x3, %r14
// 282: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 286: 48 8b 03                      movq    (%rbx), %rax
// 289: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028b:  R_X86_64_64  _JIT_TARGET
// 293: 89 c9                         movl    %ecx, %ecx
// 295: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 299: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 29f: 48 83 c4 18                   addq    $0x18, %rsp
// 2a3: 5b                            popq    %rbx
// 2a4: 41 5c                         popq    %r12
// 2a6: 41 5d                         popq    %r13
// 2a8: 41 5e                         popq    %r14
// 2aa: 41 5f                         popq    %r15
// 2ac: 5d                            popq    %rbp
// 2ad: c3                            retq
// 2ae: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_TYPE_VERSION_code_body[687] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x19, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf6, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xe7, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x79, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_GUARD_TYPE_VERSION_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_GUARD_TYPE_VERSION_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_GUARD_TYPE_VERSION_data_holes[1];

// _CALL_BUILTIN_Oplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 32 01 00 00             jne     0x23e <_JIT_ENTRY+0x23e>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2e                         je      0x23b <_JIT_ENTRY+0x23b>
// 20d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 35                         je      0x254 <_JIT_ENTRY+0x254>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: 48 89 d7                      movq    %rdx, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 14 24                   movq    (%rsp), %rdx
// 232: 85 c0                         testl   %eax, %eax
// 234: 74 1e                         je      0x254 <_JIT_ENTRY+0x254>
// 236: 4d 89 e6                      movq    %r12, %r14
// 239: eb 03                         jmp     0x23e <_JIT_ENTRY+0x23e>
// 23b: 49 89 c6                      movq    %rax, %r14
// 23e: 49 29 de                      subq    %rbx, %r14
// 241: 49 83 c6 b8                   addq    $-0x48, %r14
// 245: 49 c1 ee 03                   shrq    $0x3, %r14
// 249: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24d: 31 c0                         xorl    %eax, %eax
// 24f: e9 83 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 254: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_OPARG
// 263: 0f b7 c0                      movzwl  %ax, %eax
// 266: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 26b: 29 c1                         subl    %eax, %ecx
// 26d: 48 63 c9                      movslq  %ecx, %rcx
// 270: f7 d0                         notl    %eax
// 272: 48 98                         cltq
// 274: 48 01 c8                      addq    %rcx, %rax
// 277: 4d 8b 2c c6                   movq    (%r14,%rax,8), %r13
// 27b: 49 8b 6d 18                   movq    0x18(%r13), %rbp
// 27f: 8b 45 00                      movl    (%rbp), %eax
// 282: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000284:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 28c: ff c0                         incl    %eax
// 28e: 74 0a                         je      0x29a <_JIT_ENTRY+0x29a>
// 290: 89 45 00                      movl    %eax, (%rbp)
// 293: 41 ff d7                      callq   *%r15
// 296: 48 8b 14 24                   movq    (%rsp), %rdx
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _JIT_OPARG
// 2a4: f7 d0                         notl    %eax
// 2a6: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2ab: 48 98                         cltq
// 2ad: 48 01 c0                      addq    %rax, %rax
// 2b0: 49 89 2c c6                   movq    %rbp, (%r14,%rax,8)
// 2b4: 4d 8b 65 10                   movq    0x10(%r13), %r12
// 2b8: 41 8b 04 24                   movl    (%r12), %eax
// 2bc: ff c0                         incl    %eax
// 2be: 74 0b                         je      0x2cb <_JIT_ENTRY+0x2cb>
// 2c0: 41 89 04 24                   movl    %eax, (%r12)
// 2c4: 41 ff d7                      callq   *%r15
// 2c7: 48 8b 14 24                   movq    (%rsp), %rdx
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _JIT_OPARG
// 2d5: 0f b7 c0                      movzwl  %ax, %eax
// 2d8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 2dd: 29 c1                         subl    %eax, %ecx
// 2df: 48 63 c9                      movslq  %ecx, %rcx
// 2e2: f7 d0                         notl    %eax
// 2e4: 48 98                         cltq
// 2e6: 48 01 c8                      addq    %rcx, %rax
// 2e9: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 2ed: 49 8b 45 00                   movq    (%r13), %rax
// 2f1: 48 85 c0                      testq   %rax, %rax
// 2f4: 7f 26                         jg      0x31c <_JIT_ENTRY+0x31c>
// 2f6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f8:  R_X86_64_64  .rodata.str1.1
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _Py_NegativeRefcount
// 30a: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 30f: 4c 89 ea                      movq    %r13, %rdx
// 312: ff d0                         callq   *%rax
// 314: 48 8b 14 24                   movq    (%rsp), %rdx
// 318: 49 8b 45 00                   movq    (%r13), %rax
// 31c: 85 c0                         testl   %eax, %eax
// 31e: 78 29                         js      0x349 <_JIT_ENTRY+0x349>
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 32a: ff d0                         callq   *%rax
// 32c: 48 8b 14 24                   movq    (%rsp), %rdx
// 330: 49 ff 4d 00                   decq    (%r13)
// 334: 75 13                         jne     0x349 <_JIT_ENTRY+0x349>
// 336: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000338:  R_X86_64_64  _Py_Dealloc
// 340: 4c 89 ef                      movq    %r13, %rdi
// 343: ff d0                         callq   *%rax
// 345: 48 8b 14 24                   movq    (%rsp), %rdx
// 349: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034b:  R_X86_64_64  _JIT_OPARG
// 353: 0f b7 c0                      movzwl  %ax, %eax
// 356: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 35b: 29 c1                         subl    %eax, %ecx
// 35d: 48 63 c9                      movslq  %ecx, %rcx
// 360: f7 d0                         notl    %eax
// 362: 48 98                         cltq
// 364: 48 01 c1                      addq    %rax, %rcx
// 367: 4d 89 24 ce                   movq    %r12, (%r14,%rcx,8)
// 36b: 48 01 c0                      addq    %rax, %rax
// 36e: 49 89 2c c6                   movq    %rbp, (%r14,%rax,8)
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  _JIT_CONTINUE
// 37c: 48 89 df                      movq    %rbx, %rdi
// 37f: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 384: 48 83 c4 18                   addq    $0x18, %rsp
// 388: 5b                            popq    %rbx
// 389: 41 5c                         popq    %r12
// 38b: 41 5d                         popq    %r13
// 38d: 41 5e                         popq    %r14
// 38f: 41 5f                         popq    %r15
// 391: 5d                            popq    %rbp
// 392: ff e0                         jmpq    *%rax
// 394: 
static const unsigned char _CALL_BUILTIN_Oplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[917] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x83, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x64, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x8b, 0x2c, 0xc6, 0x49, 0x8b, 0x6d, 0x18, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x0a, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc0, 0x49, 0x89, 0x2c, 0xc6, 0x4d, 0x8b, 0x65, 0x10, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x0b, 0x41, 0x89, 0x04, 0x24, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc1, 0x4d, 0x89, 0x24, 0xce, 0x48, 0x01, 0xc0, 0x49, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x338, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _CALL_BUILTIN_Oplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_INIT_CALL_PY_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 48                         jle     0xe1 <_JIT_ENTRY+0xe1>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 78                         jne     0x11b <_JIT_ENTRY+0x11b>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 73                         jmp     0x11d <_JIT_ENTRY+0x11d>
// aa: 49 29 de                      subq    %rbx, %r14
// ad: 49 83 c6 b8                   addq    $-0x48, %r14
// b1: 49 c1 ee 03                   shrq    $0x3, %r14
// b5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b9: 48 8b 03                      movq    (%rbx), %rax
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_TARGET
// c6: 89 c9                         movl    %ecx, %ecx
// c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d2: 48 83 c4 18                   addq    $0x18, %rsp
// d6: 5b                            popq    %rbx
// d7: 41 5c                         popq    %r12
// d9: 41 5d                         popq    %r13
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: 5d                            popq    %rbp
// e0: c3                            retq
// e1: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1+0x39
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_CheckRecursiveCall
// fa: 48 89 d7                      movq    %rdx, %rdi
// fd: ff d0                         callq   *%rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 0f 85 68 02 00 00             jne     0x36f <_JIT_ENTRY+0x36f>
// 107: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10c: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 111: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 115: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 119: 74 88                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11b: 31 ff                         xorl    %edi, %edi
// 11d: 48 89 ee                      movq    %rbp, %rsi
// 120: 41 ff d0                      callq   *%r8
// 123: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 128: 41 ff 41 2c                   incl    0x2c(%r9)
// 12c: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 131: 48 8b 45 00                   movq    (%rbp), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 27                         jg      0x161 <_JIT_ENTRY+0x161>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 153: 48 89 ea                      movq    %rbp, %rdx
// 156: ff d0                         callq   *%rax
// 158: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 15d: 48 8b 45 00                   movq    (%rbp), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 2b                         js      0x190 <_JIT_ENTRY+0x190>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 176: 48 ff 4d 00                   decq    (%rbp)
// 17a: 75 14                         jne     0x190 <_JIT_ENTRY+0x190>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: 48 89 ef                      movq    %rbp, %rdi
// 189: ff d0                         callq   *%rax
// 18b: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 190: 49 8b 04 24                   movq    (%r12), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7f 27                         jg      0x1c0 <_JIT_ENTRY+0x1c0>
// 199: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019b:  R_X86_64_64  .rodata.str1.1
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_NegativeRefcount
// 1ad: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b2: 4c 89 e2                      movq    %r12, %rdx
// 1b5: ff d0                         callq   *%rax
// 1b7: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 1bc: 49 8b 04 24                   movq    (%r12), %rax
// 1c0: 85 c0                         testl   %eax, %eax
// 1c2: 78 2b                         js      0x1ef <_JIT_ENTRY+0x1ef>
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ce: ff d0                         callq   *%rax
// 1d0: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 1d5: 49 ff 0c 24                   decq    (%r12)
// 1d9: 75 14                         jne     0x1ef <_JIT_ENTRY+0x1ef>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: 4c 89 e7                      movq    %r12, %rdi
// 1e8: ff d0                         callq   *%rax
// 1ea: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 1ef: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f3: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f8: 48 85 c9                      testq   %rcx, %rcx
// 1fb: 0f 84 6b 01 00 00             je      0x36c <_JIT_ENTRY+0x36c>
// 201: 4b 8d 2c ee                   leaq    (%r14,%r13,8), %rbp
// 205: 48 89 08                      movq    %rcx, (%rax)
// 208: 49 8b 41 10                   movq    0x10(%r9), %rax
// 20c: 48 8b 00                      movq    (%rax), %rax
// 20f: 84 c0                         testb   %al, %al
// 211: 74 20                         je      0x233 <_JIT_ENTRY+0x233>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_HandlePending
// 21d: 4c 89 cf                      movq    %r9, %rdi
// 220: ff d0                         callq   *%rax
// 222: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 227: 85 c0                         testl   %eax, %eax
// 229: 74 08                         je      0x233 <_JIT_ENTRY+0x233>
// 22b: 49 89 ee                      movq    %rbp, %r14
// 22e: e9 3c 01 00 00                jmp     0x36f <_JIT_ENTRY+0x36f>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: 0f b7 c0                      movzwl  %ax, %eax
// 240: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 245: 29 c1                         subl    %eax, %ecx
// 247: f7 d0                         notl    %eax
// 249: 48 63 d0                      movslq  %eax, %rdx
// 24c: 48 63 c1                      movslq  %ecx, %rax
// 24f: 48 01 d0                      addq    %rdx, %rax
// 252: 48 01 d2                      addq    %rdx, %rdx
// 255: 4d 8b 24 c6                   movq    (%r14,%rax,8), %r12
// 259: 49 8b 0c d6                   movq    (%r14,%rdx,8), %rcx
// 25d: 4d 8b 7c 24 30                movq    0x30(%r12), %r15
// 262: 4d 8b a9 00 01 00 00          movq    0x100(%r9), %r13
// 269: 49 63 47 4c                   movslq  0x4c(%r15), %rax
// 26d: 49 8d 44 c5 00                leaq    (%r13,%rax,8), %rax
// 272: 49 89 81 00 01 00 00          movq    %rax, 0x100(%r9)
// 279: 4d 89 65 10                   movq    %r12, 0x10(%r13)
// 27d: 41 8b 07                      movl    (%r15), %eax
// 280: ff c0                         incl    %eax
// 282: 49 8d 14 d6                   leaq    (%r14,%rdx,8), %rdx
// 286: 48 85 c9                      testq   %rcx, %rcx
// 289: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 28e: 0f 84 f1 00 00 00             je      0x385 <_JIT_ENTRY+0x385>
// 294: 85 c0                         testl   %eax, %eax
// 296: 74 14                         je      0x2ac <_JIT_ENTRY+0x2ac>
// 298: 41 89 07                      movl    %eax, (%r15)
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2a5: ff d0                         callq   *%rax
// 2a7: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 2ac: 4d 89 7d 00                   movq    %r15, (%r13)
// 2b0: 41 0f 10 44 24 10             movups  0x10(%r12), %xmm0
// 2b6: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 2bb: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 2c3: 41 8b 4f 48                   movl    0x48(%r15), %ecx
// 2c7: 41 89 4d 40                   movl    %ecx, 0x40(%r13)
// 2cb: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 2d3: 49 81 c7 c8 00 00 00          addq    $0xc8, %r15
// 2da: 4d 89 7d 38                   movq    %r15, 0x38(%r13)
// 2de: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 2e5: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _JIT_OPARG
// 2f4: 44 0f b7 f8                   movzwl  %ax, %r15d
// 2f8: 41 ff c7                      incl    %r15d
// 2fb: 45 85 ff                      testl   %r15d, %r15d
// 2fe: 0f 9f c2                      setg    %dl
// 301: 44 39 f9                      cmpl    %r15d, %ecx
// 304: 0f 8e 2f 01 00 00             jle     0x439 <_JIT_ENTRY+0x439>
// 30a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000030c:  R_X86_64_64  _JIT_OPARG
// 314: 44 0f b7 e5                   movzwl  %bp, %r12d
// 318: 45 8d 7c 24 01                leal    0x1(%r12), %r15d
// 31d: 4a 8d 3c fd 48 00 00 00       leaq    0x48(,%r15,8), %rdi
// 325: 4c 01 ef                      addq    %r13, %rdi
// 328: 44 89 f8                      movl    %r15d, %eax
// 32b: f7 d0                         notl    %eax
// 32d: 01 c1                         addl    %eax, %ecx
// 32f: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  memset
// 341: 31 f6                         xorl    %esi, %esi
// 343: ff d0                         callq   *%rax
// 345: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 34a: 45 85 ff                      testl   %r15d, %r15d
// 34d: 0f 8e c7 01 00 00             jle     0x51a <_JIT_ENTRY+0x51a>
// 353: 0f b7 c5                      movzwl  %bp, %eax
// 356: 41 f7 d4                      notl    %r12d
// 359: 49 63 cc                      movslq  %r12d, %rcx
// 35c: 48 29 c1                      subq    %rax, %rcx
// 35f: 49 8d 04 ce                   leaq    (%r14,%rcx,8), %rax
// 363: 48 83 c0 f8                   addq    $-0x8, %rax
// 367: e9 f6 00 00 00                jmp     0x462 <_JIT_ENTRY+0x462>
// 36c: 49 89 c6                      movq    %rax, %r14
// 36f: 49 29 de                      subq    %rbx, %r14
// 372: 49 83 c6 b8                   addq    $-0x48, %r14
// 376: 49 c1 ee 03                   shrq    $0x3, %r14
// 37a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 37e: 31 c0                         xorl    %eax, %eax
// 380: e9 4d fd ff ff                jmp     0xd2 <_JIT_ENTRY+0xd2>
// 385: 85 c0                         testl   %eax, %eax
// 387: 74 0f                         je      0x398 <_JIT_ENTRY+0x398>
// 389: 41 89 07                      movl    %eax, (%r15)
// 38c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 396: ff d0                         callq   *%rax
// 398: 4d 89 7d 00                   movq    %r15, (%r13)
// 39c: 41 0f 10 44 24 10             movups  0x10(%r12), %xmm0
// 3a2: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 3a7: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 3af: 41 8b 47 48                   movl    0x48(%r15), %eax
// 3b3: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 3b7: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 3bf: 49 81 c7 c8 00 00 00          addq    $0xc8, %r15
// 3c6: 4d 89 7d 38                   movq    %r15, 0x38(%r13)
// 3ca: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 3d1: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 3d6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003d8:  R_X86_64_64  _JIT_OPARG
// 3e0: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3e4: 45 85 ff                      testl   %r15d, %r15d
// 3e7: 0f 9f c2                      setg    %dl
// 3ea: 44 39 f8                      cmpl    %r15d, %eax
// 3ed: 7e 54                         jle     0x443 <_JIT_ENTRY+0x443>
// 3ef: 44 0f b7 e1                   movzwl  %cx, %r12d
// 3f3: 4a 8d 3c e5 48 00 00 00       leaq    0x48(,%r12,8), %rdi
// 3fb: 4c 01 ef                      addq    %r13, %rdi
// 3fe: 44 0f b7 f9                   movzwl  %cx, %r15d
// 402: 44 89 fd                      movl    %r15d, %ebp
// 405: f7 d5                         notl    %ebp
// 407: 01 e8                         addl    %ebp, %eax
// 409: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 411: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000413:  R_X86_64_64  memset
// 41b: 31 f6                         xorl    %esi, %esi
// 41d: ff d0                         callq   *%rax
// 41f: 45 85 ff                      testl   %r15d, %r15d
// 422: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 427: 0f 8e ed 00 00 00             jle     0x51a <_JIT_ENTRY+0x51a>
// 42d: 48 63 c5                      movslq  %ebp, %rax
// 430: 4c 29 e0                      subq    %r12, %rax
// 433: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 437: eb 29                         jmp     0x462 <_JIT_ENTRY+0x462>
// 439: f7 d0                         notl    %eax
// 43b: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 441: eb 0b                         jmp     0x44e <_JIT_ENTRY+0x44e>
// 443: 0f b7 c1                      movzwl  %cx, %eax
// 446: 48 f7 d8                      negq    %rax
// 449: 4c 8b 4c 24 08                movq    0x8(%rsp), %r9
// 44e: f6 c2 01                      testb   $0x1, %dl
// 451: 0f 84 c3 00 00 00             je      0x51a <_JIT_ENTRY+0x51a>
// 457: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
// 45f: 48 01 e8                      addq    %rbp, %rax
// 462: 41 83 ff 02                   cmpl    $0x2, %r15d
// 466: b9 01 00 00 00                movl    $0x1, %ecx
// 46b: 41 0f 4d cf                   cmovgel %r15d, %ecx
// 46f: 83 f9 08                      cmpl    $0x8, %ecx
// 472: 72 10                         jb      0x484 <_JIT_ENTRY+0x484>
// 474: 4c 89 ea                      movq    %r13, %rdx
// 477: 48 29 c2                      subq    %rax, %rdx
// 47a: 48 83 c2 48                   addq    $0x48, %rdx
// 47e: 48 83 fa 20                   cmpq    $0x20, %rdx
// 482: 73 65                         jae     0x4e9 <_JIT_ENTRY+0x4e9>
// 484: 31 d2                         xorl    %edx, %edx
// 486: 48 89 d6                      movq    %rdx, %rsi
// 489: 48 f7 d6                      notq    %rsi
// 48c: 48 01 ce                      addq    %rcx, %rsi
// 48f: 48 89 cf                      movq    %rcx, %rdi
// 492: 48 83 e7 03                   andq    $0x3, %rdi
// 496: 74 19                         je      0x4b1 <_JIT_ENTRY+0x4b1>
// 498: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 4a0: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 4a4: 4d 89 44 d5 48                movq    %r8, 0x48(%r13,%rdx,8)
// 4a9: 48 ff c2                      incq    %rdx
// 4ac: 48 ff cf                      decq    %rdi
// 4af: 75 ef                         jne     0x4a0 <_JIT_ENTRY+0x4a0>
// 4b1: 48 83 fe 03                   cmpq    $0x3, %rsi
// 4b5: 72 63                         jb      0x51a <_JIT_ENTRY+0x51a>
// 4b7: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 4bb: 49 89 74 d5 48                movq    %rsi, 0x48(%r13,%rdx,8)
// 4c0: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 4c5: 49 89 74 d5 50                movq    %rsi, 0x50(%r13,%rdx,8)
// 4ca: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 4cf: 49 89 74 d5 58                movq    %rsi, 0x58(%r13,%rdx,8)
// 4d4: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 4d9: 49 89 74 d5 60                movq    %rsi, 0x60(%r13,%rdx,8)
// 4de: 48 83 c2 04                   addq    $0x4, %rdx
// 4e2: 48 39 d1                      cmpq    %rdx, %rcx
// 4e5: 75 d0                         jne     0x4b7 <_JIT_ENTRY+0x4b7>
// 4e7: eb 31                         jmp     0x51a <_JIT_ENTRY+0x51a>
// 4e9: 89 ca                         movl    %ecx, %edx
// 4eb: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 4f1: 31 f6                         xorl    %esi, %esi
// 4f3: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 4f7: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 4fc: 41 0f 11 44 f5 48             movups  %xmm0, 0x48(%r13,%rsi,8)
// 502: 41 0f 11 4c f5 58             movups  %xmm1, 0x58(%r13,%rsi,8)
// 508: 48 83 c6 04                   addq    $0x4, %rsi
// 50c: 48 39 f2                      cmpq    %rsi, %rdx
// 50f: 75 e2                         jne     0x4f3 <_JIT_ENTRY+0x4f3>
// 511: 48 39 ca                      cmpq    %rcx, %rdx
// 514: 0f 85 6c ff ff ff             jne     0x486 <_JIT_ENTRY+0x486>
// 51a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000051c:  R_X86_64_64  _JIT_OPARG
// 524: 0f b7 c0                      movzwl  %ax, %eax
// 527: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 52c: 29 c1                         subl    %eax, %ecx
// 52e: 48 63 c9                      movslq  %ecx, %rcx
// 531: f7 d0                         notl    %eax
// 533: 48 98                         cltq
// 535: 48 01 c8                      addq    %rcx, %rax
// 538: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 53c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000053e:  R_X86_64_64  _JIT_CONTINUE
// 546: 48 89 df                      movq    %rbx, %rdi
// 549: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 54e: 4c 89 ca                      movq    %r9, %rdx
// 551: 48 83 c4 18                   addq    $0x18, %rsp
// 555: 5b                            popq    %rbx
// 556: 41 5c                         popq    %r12
// 558: 41 5d                         popq    %r13
// 55a: 41 5e                         popq    %r14
// 55c: 41 5f                         popq    %r15
// 55e: 5d                            popq    %rbp
// 55f: ff e0                         jmpq    *%rax
// 561: 
static const unsigned char _CALL_BUILTIN_Oplus_INIT_CALL_PY_EXACT_ARGS_code_body[1378] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x78, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x73, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x68, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x88, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x41, 0xff, 0x41, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x6b, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x41, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xcf, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x85, 0xc0, 0x74, 0x08, 0x49, 0x89, 0xee, 0xe9, 0x3c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x48, 0x63, 0xc1, 0x48, 0x01, 0xd0, 0x48, 0x01, 0xd2, 0x4d, 0x8b, 0x24, 0xc6, 0x49, 0x8b, 0x0c, 0xd6, 0x4d, 0x8b, 0x7c, 0x24, 0x30, 0x4d, 0x8b, 0xa9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x63, 0x47, 0x4c, 0x49, 0x8d, 0x44, 0xc5, 0x00, 0x49, 0x89, 0x81, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x10, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x49, 0x8d, 0x14, 0xd6, 0x48, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x10, 0x0f, 0x84, 0xf1, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x89, 0x7d, 0x00, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x4f, 0x48, 0x41, 0x89, 0x4d, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc7, 0xc8, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x7d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x41, 0xff, 0xc7, 0x45, 0x85, 0xff, 0x0f, 0x9f, 0xc2, 0x44, 0x39, 0xf9, 0x0f, 0x8e, 0x2f, 0x01, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe5, 0x45, 0x8d, 0x7c, 0x24, 0x01, 0x4a, 0x8d, 0x3c, 0xfd, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x44, 0x89, 0xf8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x45, 0x85, 0xff, 0x0f, 0x8e, 0xc7, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xc5, 0x41, 0xf7, 0xd4, 0x49, 0x63, 0xcc, 0x48, 0x29, 0xc1, 0x49, 0x8d, 0x04, 0xce, 0x48, 0x83, 0xc0, 0xf8, 0xe9, 0xf6, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x4d, 0xfd, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x7d, 0x00, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x47, 0x48, 0x41, 0x89, 0x45, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc7, 0xc8, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x7d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf9, 0x45, 0x85, 0xff, 0x0f, 0x9f, 0xc2, 0x44, 0x39, 0xf8, 0x7e, 0x54, 0x44, 0x0f, 0xb7, 0xe1, 0x4a, 0x8d, 0x3c, 0xe5, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x44, 0x0f, 0xb7, 0xf9, 0x44, 0x89, 0xfd, 0xf7, 0xd5, 0x01, 0xe8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x45, 0x85, 0xff, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0x0f, 0x8e, 0xed, 0x00, 0x00, 0x00, 0x48, 0x63, 0xc5, 0x4c, 0x29, 0xe0, 0x49, 0x8d, 0x04, 0xc6, 0xeb, 0x29, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x0b, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x4c, 0x24, 0x08, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe8, 0x41, 0x83, 0xff, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x4d, 0xcf, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x4c, 0x89, 0xea, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x73, 0x65, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x48, 0x89, 0xcf, 0x48, 0x83, 0xe7, 0x03, 0x74, 0x19, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x04, 0xd0, 0x4d, 0x89, 0x44, 0xd5, 0x48, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xcf, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x63, 0x48, 0x8b, 0x34, 0xd0, 0x49, 0x89, 0x74, 0xd5, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x49, 0x89, 0x74, 0xd5, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x49, 0x89, 0x74, 0xd5, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x49, 0x89, 0x74, 0xd5, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x31, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf5, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf5, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe2, 0x48, 0x39, 0xca, 0x0f, 0x85, 0x6c, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x89, 0xca, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_INIT_CALL_PY_EXACT_ARGS_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x38e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x3d8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x413, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x51c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_INIT_CALL_PY_EXACT_ARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _CALL_BUILTIN_Oplus_INSERT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_INSERT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 32 01 00 00             jne     0x23e <_JIT_ENTRY+0x23e>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 0c 24                   movq    (%rsp), %rcx
// 136: ff 41 2c                      incl    0x2c(%rcx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 0c 24                   movq    (%rsp), %rcx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 208: 48 85 d2                      testq   %rdx, %rdx
// 20b: 74 2e                         je      0x23b <_JIT_ENTRY+0x23b>
// 20d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 211: 48 89 10                      movq    %rdx, (%rax)
// 214: 48 8b 41 10                   movq    0x10(%rcx), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 35                         je      0x254 <_JIT_ENTRY+0x254>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: 48 89 cf                      movq    %rcx, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 0c 24                   movq    (%rsp), %rcx
// 232: 85 c0                         testl   %eax, %eax
// 234: 74 1e                         je      0x254 <_JIT_ENTRY+0x254>
// 236: 4d 89 e6                      movq    %r12, %r14
// 239: eb 03                         jmp     0x23e <_JIT_ENTRY+0x23e>
// 23b: 49 89 c6                      movq    %rax, %r14
// 23e: 49 29 de                      subq    %rbx, %r14
// 241: 49 83 c6 b8                   addq    $-0x48, %r14
// 245: 49 c1 ee 03                   shrq    $0x3, %r14
// 249: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24d: 31 c0                         xorl    %eax, %eax
// 24f: e9 83 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_OPARG
// 25e: 0f b7 d0                      movzwl  %ax, %edx
// 261: f7 d0                         notl    %eax
// 263: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 268: 48 98                         cltq
// 26a: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 26f: 4c 8d 2c 00                   leaq    (%rax,%rax), %r13
// 273: 4b 8d 3c ee                   leaq    (%r14,%r13,8), %rdi
// 277: 48 29 d0                      subq    %rdx, %rax
// 27a: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 27e: 48 c1 e2 03                   shlq    $0x3, %rdx
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  memmove
// 28c: 48 89 cd                      movq    %rcx, %rbp
// 28f: ff d0                         callq   *%rax
// 291: 4f 89 3c ee                   movq    %r15, (%r14,%r13,8)
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _JIT_CONTINUE
// 29f: 48 89 df                      movq    %rbx, %rdi
// 2a2: 4c 89 e6                      movq    %r12, %rsi
// 2a5: 48 89 ea                      movq    %rbp, %rdx
// 2a8: 48 83 c4 18                   addq    $0x18, %rsp
// 2ac: 5b                            popq    %rbx
// 2ad: 41 5c                         popq    %r12
// 2af: 41 5d                         popq    %r13
// 2b1: 41 5e                         popq    %r14
// 2b3: 41 5f                         popq    %r15
// 2b5: 5d                            popq    %rbp
// 2b6: ff e0                         jmpq    *%rax
// 2b8: 
static const unsigned char _CALL_BUILTIN_Oplus_INSERT_code_body[697] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0xff, 0x41, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x41, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x83, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x4c, 0x8d, 0x2c, 0x00, 0x4b, 0x8d, 0x3c, 0xee, 0x48, 0x29, 0xd0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcd, 0xff, 0xd0, 0x4f, 0x89, 0x3c, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_INSERT_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_INSERT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_INSERT_data_holes[1];

// _CALL_BUILTIN_Oplus_IS_NONE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_IS_NONE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 c4 01 00 00             jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 0f 84 bc 00 00 00             je      0x2cd <_JIT_ENTRY+0x2cd>
// 211: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 215: 48 89 08                      movq    %rcx, (%rax)
// 218: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 21c: 48 8b 00                      movq    (%rax), %rax
// 21f: 84 c0                         testb   %al, %al
// 221: 74 1f                         je      0x242 <_JIT_ENTRY+0x242>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_HandlePending
// 22d: 48 89 d7                      movq    %rdx, %rdi
// 230: ff d0                         callq   *%rax
// 232: 48 8b 14 24                   movq    (%rsp), %rdx
// 236: 85 c0                         testl   %eax, %eax
// 238: 74 08                         je      0x242 <_JIT_ENTRY+0x242>
// 23a: 4d 89 e6                      movq    %r12, %r14
// 23d: e9 8e 00 00 00                jmp     0x2d0 <_JIT_ENTRY+0x2d0>
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _JIT_OPARG
// 24c: f7 d0                         notl    %eax
// 24e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 253: 48 98                         cltq
// 255: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_NoneStruct
// 264: 49 39 c5                      cmpq    %rax, %r13
// 267: 74 7d                         je      0x2e6 <_JIT_ENTRY+0x2e6>
// 269: 49 8b 45 00                   movq    (%r13), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 7f 26                         jg      0x298 <_JIT_ENTRY+0x298>
// 272: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000274:  R_X86_64_64  .rodata.str1.1
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_NegativeRefcount
// 286: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 28b: 4c 89 ea                      movq    %r13, %rdx
// 28e: ff d0                         callq   *%rax
// 290: 48 8b 14 24                   movq    (%rsp), %rdx
// 294: 49 8b 45 00                   movq    (%r13), %rax
// 298: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000029a:  R_X86_64_64  _Py_FalseStruct
// 2a2: 85 c0                         testl   %eax, %eax
// 2a4: 78 4a                         js      0x2f0 <_JIT_ENTRY+0x2f0>
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b0: ff d0                         callq   *%rax
// 2b2: 49 ff 4d 00                   decq    (%r13)
// 2b6: 75 0f                         jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_Dealloc
// 2c2: 4c 89 ef                      movq    %r13, %rdi
// 2c5: ff d0                         callq   *%rax
// 2c7: 48 8b 14 24                   movq    (%rsp), %rdx
// 2cb: eb 23                         jmp     0x2f0 <_JIT_ENTRY+0x2f0>
// 2cd: 49 89 c6                      movq    %rax, %r14
// 2d0: 49 29 de                      subq    %rbx, %r14
// 2d3: 49 83 c6 b8                   addq    $-0x48, %r14
// 2d7: 49 c1 ee 03                   shrq    $0x3, %r14
// 2db: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2df: 31 c0                         xorl    %eax, %eax
// 2e1: e9 f1 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 2e6: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000002e8:  R_X86_64_64  _Py_TrueStruct
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _JIT_OPARG
// 2fa: f7 d0                         notl    %eax
// 2fc: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 301: 48 98                         cltq
// 303: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _JIT_CONTINUE
// 312: 48 89 df                      movq    %rbx, %rdi
// 315: 4c 89 e6                      movq    %r12, %rsi
// 318: 48 83 c4 18                   addq    $0x18, %rsp
// 31c: 5b                            popq    %rbx
// 31d: 41 5c                         popq    %r12
// 31f: 41 5d                         popq    %r13
// 321: 41 5e                         popq    %r14
// 323: 41 5f                         popq    %r15
// 325: 5d                            popq    %rbp
// 326: ff e0                         jmpq    *%rax
// 328: 
static const unsigned char _CALL_BUILTIN_Oplus_IS_NONE_code_body[809] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xc4, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc5, 0x74, 0x7d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xeb, 0x23, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xf1, 0xfd, 0xff, 0xff, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_IS_NONE_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_IS_NONE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_IS_NONE_data_holes[1];

// _CALL_BUILTIN_Oplus_IS_OP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_IS_OP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 30 01 00 00             jne     0x23c <_JIT_ENTRY+0x23c>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 4c 8b 04 24                   movq    (%rsp), %r8
// 136: 41 ff 40 2c                   incl    0x2c(%r8)
// 13a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13f: 49 8b 07                      movq    (%r15), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 7f 2a                         jg      0x171 <_JIT_ENTRY+0x171>
// 147: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 160: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 165: 4c 89 fa                      movq    %r15, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 4c 8b 04 24                   movq    (%rsp), %r8
// 16e: 49 8b 07                      movq    (%r15), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 2f                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 4c 8b 04 24                   movq    (%rsp), %r8
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 4c 8b 04 24                   movq    (%rsp), %r8
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 29                         js      0x200 <_JIT_ENTRY+0x200>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 4c 8b 04 24                   movq    (%rsp), %r8
// 1e7: 49 ff 0c 24                   decq    (%r12)
// 1eb: 75 13                         jne     0x200 <_JIT_ENTRY+0x200>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_Dealloc
// 1f7: 4c 89 e7                      movq    %r12, %rdi
// 1fa: ff d0                         callq   *%rax
// 1fc: 4c 8b 04 24                   movq    (%rsp), %r8
// 200: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 204: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 209: 48 85 c9                      testq   %rcx, %rcx
// 20c: 74 2b                         je      0x239 <_JIT_ENTRY+0x239>
// 20e: 48 89 08                      movq    %rcx, (%rax)
// 211: 49 8b 40 10                   movq    0x10(%r8), %rax
// 215: 48 8b 00                      movq    (%rax), %rax
// 218: 84 c0                         testb   %al, %al
// 21a: 74 36                         je      0x252 <_JIT_ENTRY+0x252>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_HandlePending
// 226: 4c 89 c7                      movq    %r8, %rdi
// 229: ff d0                         callq   *%rax
// 22b: 4c 8b 04 24                   movq    (%rsp), %r8
// 22f: 85 c0                         testl   %eax, %eax
// 231: 74 1f                         je      0x252 <_JIT_ENTRY+0x252>
// 233: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 237: eb 03                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 239: 49 89 c6                      movq    %rax, %r14
// 23c: 49 29 de                      subq    %rbx, %r14
// 23f: 49 83 c6 b8                   addq    $-0x48, %r14
// 243: 49 c1 ee 03                   shrq    $0x3, %r14
// 247: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24b: 31 c0                         xorl    %eax, %eax
// 24d: e9 85 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _JIT_OPARG
// 25c: f7 d0                         notl    %eax
// 25e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 263: 48 63 e8                      movslq  %eax, %rbp
// 266: 4d 8b 64 ee f0                movq    -0x10(%r14,%rbp,8), %r12
// 26b: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// 270: 49 8b 04 24                   movq    (%r12), %rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 7f 26                         jg      0x29f <_JIT_ENTRY+0x29f>
// 279: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027b:  R_X86_64_64  .rodata.str1.1
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_NegativeRefcount
// 28d: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 292: 4c 89 e2                      movq    %r12, %rdx
// 295: ff d0                         callq   *%rax
// 297: 4c 8b 04 24                   movq    (%rsp), %r8
// 29b: 49 8b 04 24                   movq    (%r12), %rax
// 29f: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000002a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a9: 85 c0                         testl   %eax, %eax
// 2ab: 78 20                         js      0x2cd <_JIT_ENTRY+0x2cd>
// 2ad: 41 ff d7                      callq   *%r15
// 2b0: 4c 8b 04 24                   movq    (%rsp), %r8
// 2b4: 49 ff 0c 24                   decq    (%r12)
// 2b8: 75 13                         jne     0x2cd <_JIT_ENTRY+0x2cd>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_Dealloc
// 2c4: 4c 89 e7                      movq    %r12, %rdi
// 2c7: ff d0                         callq   *%rax
// 2c9: 4c 8b 04 24                   movq    (%rsp), %r8
// 2cd: 49 8b 45 00                   movq    (%r13), %rax
// 2d1: 48 85 c0                      testq   %rax, %rax
// 2d4: 7f 26                         jg      0x2fc <_JIT_ENTRY+0x2fc>
// 2d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d8:  R_X86_64_64  .rodata.str1.1
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_NegativeRefcount
// 2ea: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// 2ef: 4c 89 ea                      movq    %r13, %rdx
// 2f2: ff d0                         callq   *%rax
// 2f4: 4c 8b 04 24                   movq    (%rsp), %r8
// 2f8: 49 8b 45 00                   movq    (%r13), %rax
// 2fc: 49 8d 2c ee                   leaq    (%r14,%rbp,8), %rbp
// 300: 48 83 c5 f8                   addq    $-0x8, %rbp
// 304: 85 c0                         testl   %eax, %eax
// 306: 78 20                         js      0x328 <_JIT_ENTRY+0x328>
// 308: 41 ff d7                      callq   *%r15
// 30b: 4c 8b 04 24                   movq    (%rsp), %r8
// 30f: 49 ff 4d 00                   decq    (%r13)
// 313: 75 13                         jne     0x328 <_JIT_ENTRY+0x328>
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _Py_Dealloc
// 31f: 4c 89 ef                      movq    %r13, %rdi
// 322: ff d0                         callq   *%rax
// 324: 4c 8b 04 24                   movq    (%rsp), %r8
// 328: 31 c0                         xorl    %eax, %eax
// 32a: 4d 39 ec                      cmpq    %r13, %r12
// 32d: 0f 94 c0                      sete    %al
// 330: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000332:  R_X86_64_64  _JIT_OPARG
// 33a: 66 39 c8                      cmpw    %cx, %ax
// 33d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033f:  R_X86_64_64  _Py_FalseStruct
// 347: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000349:  R_X86_64_64  _Py_TrueStruct
// 351: 48 0f 44 d0                   cmoveq  %rax, %rdx
// 355: f7 d1                         notl    %ecx
// 357: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 35d: 48 63 c1                      movslq  %ecx, %rax
// 360: 49 89 54 c6 f0                movq    %rdx, -0x10(%r14,%rax,8)
// 365: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000367:  R_X86_64_64  _JIT_CONTINUE
// 36f: 48 89 df                      movq    %rbx, %rdi
// 372: 48 89 ee                      movq    %rbp, %rsi
// 375: 4c 89 c2                      movq    %r8, %rdx
// 378: 48 83 c4 18                   addq    $0x18, %rsp
// 37c: 5b                            popq    %rbx
// 37d: 41 5c                         popq    %r12
// 37f: 41 5d                         popq    %r13
// 381: 41 5e                         popq    %r14
// 383: 41 5f                         popq    %r15
// 385: 5d                            popq    %rbp
// 386: ff e0                         jmpq    *%rax
// 388: 
static const unsigned char _CALL_BUILTIN_Oplus_IS_OP_code_body[905] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x30, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x85, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x64, 0xee, 0xf0, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x2c, 0xee, 0x48, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x31, 0xc0, 0x4d, 0x39, 0xec, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd0, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x54, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_IS_OP_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x349, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x367, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_IS_OP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_IS_OP_data_holes[1];

// _CALL_BUILTIN_Oplus_ITER_CHECK_LIST
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_ITER_CHECK_LIST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 eb 01 00 00             jne     0x249 <_JIT_ENTRY+0x249>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 c8 01 00 00             jne     0x249 <_JIT_ENTRY+0x249>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 b9 01 00 00             jne     0x249 <_JIT_ENTRY+0x249>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 2a 01 00 00             jne     0x20b <_JIT_ENTRY+0x20b>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 26                         js      0x179 <_JIT_ENTRY+0x179>
// 153: 41 ff d7                      callq   *%r15
// 156: 48 8b 14 24                   movq    (%rsp), %rdx
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 48 8b 14 24                   movq    (%rsp), %rdx
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 20                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ac: 41 ff d7                      callq   *%r15
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 13                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 2e                         je      0x208 <_JIT_ENTRY+0x208>
// 1da: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1de: 48 89 08                      movq    %rcx, (%rax)
// 1e1: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1e5: 48 8b 00                      movq    (%rax), %rax
// 1e8: 84 c0                         testb   %al, %al
// 1ea: 74 32                         je      0x21e <_JIT_ENTRY+0x21e>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_HandlePending
// 1f6: 48 89 d7                      movq    %rdx, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 74 1b                         je      0x21e <_JIT_ENTRY+0x21e>
// 203: 4d 89 e6                      movq    %r12, %r14
// 206: eb 03                         jmp     0x20b <_JIT_ENTRY+0x20b>
// 208: 49 89 c6                      movq    %rax, %r14
// 20b: 49 29 de                      subq    %rbx, %r14
// 20e: 49 83 c6 b8                   addq    $-0x48, %r14
// 212: 49 c1 ee 03                   shrq    $0x3, %r14
// 216: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21a: 31 c0                         xorl    %eax, %eax
// 21c: eb 53                         jmp     0x271 <_JIT_ENTRY+0x271>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_OPARG
// 228: f7 d0                         notl    %eax
// 22a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22f: 48 98                         cltq
// 231: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 236: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000238:  R_X86_64_64  PyListIter_Type
// 240: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 244: 74 3a                         je      0x280 <_JIT_ENTRY+0x280>
// 246: 4d 89 e6                      movq    %r12, %r14
// 249: 49 29 de                      subq    %rbx, %r14
// 24c: 49 83 c6 b8                   addq    $-0x48, %r14
// 250: 49 c1 ee 03                   shrq    $0x3, %r14
// 254: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 258: 48 8b 03                      movq    (%rbx), %rax
// 25b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025d:  R_X86_64_64  _JIT_TARGET
// 265: 89 c9                         movl    %ecx, %ecx
// 267: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 26b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 271: 48 83 c4 18                   addq    $0x18, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: c3                            retq
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_CONTINUE
// 28a: 48 89 df                      movq    %rbx, %rdi
// 28d: 4c 89 e6                      movq    %r12, %rsi
// 290: 48 83 c4 18                   addq    $0x18, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: ff e0                         jmpq    *%rax
// 2a0: 
static const unsigned char _CALL_BUILTIN_Oplus_ITER_CHECK_LIST_code_body[673] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xeb, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xc8, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xb9, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_ITER_CHECK_LIST_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_ITER_CHECK_LIST_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_ITER_CHECK_LIST_data_holes[1];

// _CALL_BUILTIN_Oplus_ITER_CHECK_RANGE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_ITER_CHECK_RANGE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 eb 01 00 00             jne     0x249 <_JIT_ENTRY+0x249>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 c8 01 00 00             jne     0x249 <_JIT_ENTRY+0x249>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 b9 01 00 00             jne     0x249 <_JIT_ENTRY+0x249>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 2a 01 00 00             jne     0x20b <_JIT_ENTRY+0x20b>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 26                         js      0x179 <_JIT_ENTRY+0x179>
// 153: 41 ff d7                      callq   *%r15
// 156: 48 8b 14 24                   movq    (%rsp), %rdx
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 48 8b 14 24                   movq    (%rsp), %rdx
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 20                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ac: 41 ff d7                      callq   *%r15
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 13                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 2e                         je      0x208 <_JIT_ENTRY+0x208>
// 1da: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1de: 48 89 08                      movq    %rcx, (%rax)
// 1e1: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1e5: 48 8b 00                      movq    (%rax), %rax
// 1e8: 84 c0                         testb   %al, %al
// 1ea: 74 32                         je      0x21e <_JIT_ENTRY+0x21e>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_HandlePending
// 1f6: 48 89 d7                      movq    %rdx, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 74 1b                         je      0x21e <_JIT_ENTRY+0x21e>
// 203: 4d 89 e6                      movq    %r12, %r14
// 206: eb 03                         jmp     0x20b <_JIT_ENTRY+0x20b>
// 208: 49 89 c6                      movq    %rax, %r14
// 20b: 49 29 de                      subq    %rbx, %r14
// 20e: 49 83 c6 b8                   addq    $-0x48, %r14
// 212: 49 c1 ee 03                   shrq    $0x3, %r14
// 216: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21a: 31 c0                         xorl    %eax, %eax
// 21c: eb 53                         jmp     0x271 <_JIT_ENTRY+0x271>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_OPARG
// 228: f7 d0                         notl    %eax
// 22a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22f: 48 98                         cltq
// 231: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 236: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000238:  R_X86_64_64  PyRangeIter_Type
// 240: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 244: 74 3a                         je      0x280 <_JIT_ENTRY+0x280>
// 246: 4d 89 e6                      movq    %r12, %r14
// 249: 49 29 de                      subq    %rbx, %r14
// 24c: 49 83 c6 b8                   addq    $-0x48, %r14
// 250: 49 c1 ee 03                   shrq    $0x3, %r14
// 254: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 258: 48 8b 03                      movq    (%rbx), %rax
// 25b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025d:  R_X86_64_64  _JIT_TARGET
// 265: 89 c9                         movl    %ecx, %ecx
// 267: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 26b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 271: 48 83 c4 18                   addq    $0x18, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: c3                            retq
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_CONTINUE
// 28a: 48 89 df                      movq    %rbx, %rdi
// 28d: 4c 89 e6                      movq    %r12, %rsi
// 290: 48 83 c4 18                   addq    $0x18, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: ff e0                         jmpq    *%rax
// 2a0: 
static const unsigned char _CALL_BUILTIN_Oplus_ITER_CHECK_RANGE_code_body[673] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xeb, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xc8, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xb9, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_ITER_CHECK_RANGE_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_ITER_CHECK_RANGE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_ITER_CHECK_RANGE_data_holes[1];

// _CALL_BUILTIN_Oplus_ITER_CHECK_TUPLE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_ITER_CHECK_TUPLE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 eb 01 00 00             jne     0x249 <_JIT_ENTRY+0x249>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 c8 01 00 00             jne     0x249 <_JIT_ENTRY+0x249>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 b9 01 00 00             jne     0x249 <_JIT_ENTRY+0x249>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 2a 01 00 00             jne     0x20b <_JIT_ENTRY+0x20b>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 26                         js      0x179 <_JIT_ENTRY+0x179>
// 153: 41 ff d7                      callq   *%r15
// 156: 48 8b 14 24                   movq    (%rsp), %rdx
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 48 8b 14 24                   movq    (%rsp), %rdx
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 20                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ac: 41 ff d7                      callq   *%r15
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 13                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 2e                         je      0x208 <_JIT_ENTRY+0x208>
// 1da: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1de: 48 89 08                      movq    %rcx, (%rax)
// 1e1: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1e5: 48 8b 00                      movq    (%rax), %rax
// 1e8: 84 c0                         testb   %al, %al
// 1ea: 74 32                         je      0x21e <_JIT_ENTRY+0x21e>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_HandlePending
// 1f6: 48 89 d7                      movq    %rdx, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 74 1b                         je      0x21e <_JIT_ENTRY+0x21e>
// 203: 4d 89 e6                      movq    %r12, %r14
// 206: eb 03                         jmp     0x20b <_JIT_ENTRY+0x20b>
// 208: 49 89 c6                      movq    %rax, %r14
// 20b: 49 29 de                      subq    %rbx, %r14
// 20e: 49 83 c6 b8                   addq    $-0x48, %r14
// 212: 49 c1 ee 03                   shrq    $0x3, %r14
// 216: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21a: 31 c0                         xorl    %eax, %eax
// 21c: eb 53                         jmp     0x271 <_JIT_ENTRY+0x271>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_OPARG
// 228: f7 d0                         notl    %eax
// 22a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22f: 48 98                         cltq
// 231: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 236: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000238:  R_X86_64_64  PyTupleIter_Type
// 240: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 244: 74 3a                         je      0x280 <_JIT_ENTRY+0x280>
// 246: 4d 89 e6                      movq    %r12, %r14
// 249: 49 29 de                      subq    %rbx, %r14
// 24c: 49 83 c6 b8                   addq    $-0x48, %r14
// 250: 49 c1 ee 03                   shrq    $0x3, %r14
// 254: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 258: 48 8b 03                      movq    (%rbx), %rax
// 25b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025d:  R_X86_64_64  _JIT_TARGET
// 265: 89 c9                         movl    %ecx, %ecx
// 267: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 26b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 271: 48 83 c4 18                   addq    $0x18, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: c3                            retq
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_CONTINUE
// 28a: 48 89 df                      movq    %rbx, %rdi
// 28d: 4c 89 e6                      movq    %r12, %rsi
// 290: 48 83 c4 18                   addq    $0x18, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: ff e0                         jmpq    *%rax
// 2a0: 
static const unsigned char _CALL_BUILTIN_Oplus_ITER_CHECK_TUPLE_code_body[673] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xeb, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xc8, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xb9, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_ITER_CHECK_TUPLE_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_ITER_CHECK_TUPLE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_ITER_CHECK_TUPLE_data_holes[1];

// _CALL_BUILTIN_Oplus_ITER_NEXT_LIST
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_ITER_NEXT_LIST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 30 01 00 00             jne     0x23c <_JIT_ENTRY+0x23c>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 4c 8b 04 24                   movq    (%rsp), %r8
// 136: 41 ff 40 2c                   incl    0x2c(%r8)
// 13a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13f: 49 8b 07                      movq    (%r15), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 7f 2a                         jg      0x171 <_JIT_ENTRY+0x171>
// 147: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 160: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 165: 4c 89 fa                      movq    %r15, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 4c 8b 04 24                   movq    (%rsp), %r8
// 16e: 49 8b 07                      movq    (%r15), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 2f                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 4c 8b 04 24                   movq    (%rsp), %r8
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b0: 7f 26                         jg      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b4:  R_X86_64_64  .rodata.str1.1
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_NegativeRefcount
// 1c6: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1cb: 4c 89 e2                      movq    %r12, %rdx
// 1ce: ff d0                         callq   *%rax
// 1d0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1d4: 49 8b 04 24                   movq    (%r12), %rax
// 1d8: 85 c0                         testl   %eax, %eax
// 1da: 78 29                         js      0x205 <_JIT_ENTRY+0x205>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e6: ff d0                         callq   *%rax
// 1e8: 4c 8b 04 24                   movq    (%rsp), %r8
// 1ec: 49 ff 0c 24                   decq    (%r12)
// 1f0: 75 13                         jne     0x205 <_JIT_ENTRY+0x205>
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_Dealloc
// 1fc: 4c 89 e7                      movq    %r12, %rdi
// 1ff: ff d0                         callq   *%rax
// 201: 4c 8b 04 24                   movq    (%rsp), %r8
// 205: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 209: 4d 85 ff                      testq   %r15, %r15
// 20c: 74 2b                         je      0x239 <_JIT_ENTRY+0x239>
// 20e: 4c 89 38                      movq    %r15, (%rax)
// 211: 49 8b 40 10                   movq    0x10(%r8), %rax
// 215: 48 8b 00                      movq    (%rax), %rax
// 218: 84 c0                         testb   %al, %al
// 21a: 74 36                         je      0x252 <_JIT_ENTRY+0x252>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_HandlePending
// 226: 4c 89 c7                      movq    %r8, %rdi
// 229: ff d0                         callq   *%rax
// 22b: 4c 8b 04 24                   movq    (%rsp), %r8
// 22f: 85 c0                         testl   %eax, %eax
// 231: 74 1f                         je      0x252 <_JIT_ENTRY+0x252>
// 233: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 237: eb 03                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 239: 49 89 c6                      movq    %rax, %r14
// 23c: 49 29 de                      subq    %rbx, %r14
// 23f: 49 83 c6 b8                   addq    $-0x48, %r14
// 243: 49 c1 ee 03                   shrq    $0x3, %r14
// 247: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24b: 31 c0                         xorl    %eax, %eax
// 24d: e9 85 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _JIT_OPARG
// 25c: f7 d0                         notl    %eax
// 25e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 263: 48 98                         cltq
// 265: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 26a: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 26e: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 272: 48 8b 52 18                   movq    0x18(%rdx), %rdx
// 276: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 27a: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 27e: 4c 8b 3c ca                   movq    (%rdx,%rcx,8), %r15
// 282: 41 8b 07                      movl    (%r15), %eax
// 285: ff c0                         incl    %eax
// 287: 74 13                         je      0x29c <_JIT_ENTRY+0x29c>
// 289: 41 89 07                      movl    %eax, (%r15)
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 296: ff d0                         callq   *%rax
// 298: 4c 8b 04 24                   movq    (%rsp), %r8
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _JIT_OPARG
// 2a6: f7 d0                         notl    %eax
// 2a8: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2ad: 48 98                         cltq
// 2af: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 2b3: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2b7: 48 83 c6 08                   addq    $0x8, %rsi
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _JIT_CONTINUE
// 2c5: 48 89 df                      movq    %rbx, %rdi
// 2c8: 4c 89 c2                      movq    %r8, %rdx
// 2cb: 48 83 c4 18                   addq    $0x18, %rsp
// 2cf: 5b                            popq    %rbx
// 2d0: 41 5c                         popq    %r12
// 2d2: 41 5d                         popq    %r13
// 2d4: 41 5e                         popq    %r14
// 2d6: 41 5f                         popq    %r15
// 2d8: 5d                            popq    %rbp
// 2d9: ff e0                         jmpq    *%rax
// 2db: 
static const unsigned char _CALL_BUILTIN_Oplus_ITER_NEXT_LIST_code_body[732] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x30, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x4d, 0x85, 0xff, 0x74, 0x2b, 0x4c, 0x89, 0x38, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x85, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x3c, 0xca, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x13, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_ITER_NEXT_LIST_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_ITER_NEXT_LIST_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_ITER_NEXT_LIST_data_holes[1];

// _CALL_BUILTIN_Oplus_ITER_NEXT_RANGE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_ITER_NEXT_RANGE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 de                      subq    %rbx, %r14
// b9: 49 83 c6 b8                   addq    $-0x48, %r14
// bd: 49 c1 ee 03                   shrq    $0x3, %r14
// c1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 f7                      movq    %r14, %r15
// 112: e9 b3 01 00 00                jmp     0x2ca <_JIT_ENTRY+0x2ca>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 4c 89 fe                      movq    %r15, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 48 8b 3c 24                   movq    (%rsp), %rdi
// 145: ff 47 2c                      incl    0x2c(%rdi)
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 49 8b 07                      movq    (%r15), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 2a                         jg      0x17f <_JIT_ENTRY+0x17f>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16e: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 173: 4c 89 fa                      movq    %r15, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17c: 49 8b 07                      movq    (%r15), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 2f                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 ff 08                      decq    (%rax)
// 19b: 75 15                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 26                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 29                         js      0x20e <_JIT_ENTRY+0x20e>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 13                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 20e: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 212: 48 83 7c 24 10 00             cmpq    $0x0, 0x10(%rsp)
// 218: 0f 84 a9 00 00 00             je      0x2c7 <_JIT_ENTRY+0x2c7>
// 21e: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 222: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 227: 48 89 08                      movq    %rcx, (%rax)
// 22a: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 22e: 48 8b 00                      movq    (%rax), %rax
// 231: 84 c0                         testb   %al, %al
// 233: 74 14                         je      0x249 <_JIT_ENTRY+0x249>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_HandlePending
// 23f: ff d0                         callq   *%rax
// 241: 85 c0                         testl   %eax, %eax
// 243: 0f 85 81 00 00 00             jne     0x2ca <_JIT_ENTRY+0x2ca>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 8b 78 10                   movq    0x10(%rax), %rdi
// 265: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 269: 48 01 f9                      addq    %rdi, %rcx
// 26c: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 270: 48 ff 48 20                   decq    0x20(%rax)
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  PyLong_FromLong
// 27e: ff d0                         callq   *%rax
// 280: 48 85 c0                      testq   %rax, %rax
// 283: 74 45                         je      0x2ca <_JIT_ENTRY+0x2ca>
// 285: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000287:  R_X86_64_64  _JIT_OPARG
// 28f: f7 d1                         notl    %ecx
// 291: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 297: 48 63 c9                      movslq  %ecx, %rcx
// 29a: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 29e: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 2a2: 48 83 c6 08                   addq    $0x8, %rsi
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _JIT_CONTINUE
// 2b0: 48 89 df                      movq    %rbx, %rdi
// 2b3: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b7: 48 83 c4 18                   addq    $0x18, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: ff e0                         jmpq    *%rax
// 2c7: 49 89 c7                      movq    %rax, %r15
// 2ca: 49 29 df                      subq    %rbx, %r15
// 2cd: 49 83 c7 b8                   addq    $-0x48, %r15
// 2d1: 49 c1 ef 03                   shrq    $0x3, %r15
// 2d5: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2d9: 31 c0                         xorl    %eax, %eax
// 2db: e9 fe fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 2e0: 
static const unsigned char _CALL_BUILTIN_Oplus_ITER_NEXT_RANGE_code_body[737] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf7, 0xe9, 0xb3, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x01, 0xf9, 0x48, 0x89, 0x48, 0x10, 0x48, 0xff, 0x48, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xfe, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_ITER_NEXT_RANGE_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_ITER_NEXT_RANGE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_ITER_NEXT_RANGE_data_holes[1];

// _CALL_BUILTIN_Oplus_ITER_NEXT_TUPLE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_ITER_NEXT_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 30 01 00 00             jne     0x23c <_JIT_ENTRY+0x23c>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 4c 8b 04 24                   movq    (%rsp), %r8
// 136: 41 ff 40 2c                   incl    0x2c(%r8)
// 13a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13f: 49 8b 07                      movq    (%r15), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 7f 2a                         jg      0x171 <_JIT_ENTRY+0x171>
// 147: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 160: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 165: 4c 89 fa                      movq    %r15, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 4c 8b 04 24                   movq    (%rsp), %r8
// 16e: 49 8b 07                      movq    (%r15), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 2f                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 4c 8b 04 24                   movq    (%rsp), %r8
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b0: 7f 26                         jg      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b4:  R_X86_64_64  .rodata.str1.1
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_NegativeRefcount
// 1c6: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1cb: 4c 89 e2                      movq    %r12, %rdx
// 1ce: ff d0                         callq   *%rax
// 1d0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1d4: 49 8b 04 24                   movq    (%r12), %rax
// 1d8: 85 c0                         testl   %eax, %eax
// 1da: 78 29                         js      0x205 <_JIT_ENTRY+0x205>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e6: ff d0                         callq   *%rax
// 1e8: 4c 8b 04 24                   movq    (%rsp), %r8
// 1ec: 49 ff 0c 24                   decq    (%r12)
// 1f0: 75 13                         jne     0x205 <_JIT_ENTRY+0x205>
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_Dealloc
// 1fc: 4c 89 e7                      movq    %r12, %rdi
// 1ff: ff d0                         callq   *%rax
// 201: 4c 8b 04 24                   movq    (%rsp), %r8
// 205: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 209: 4d 85 ff                      testq   %r15, %r15
// 20c: 74 2b                         je      0x239 <_JIT_ENTRY+0x239>
// 20e: 4c 89 38                      movq    %r15, (%rax)
// 211: 49 8b 40 10                   movq    0x10(%r8), %rax
// 215: 48 8b 00                      movq    (%rax), %rax
// 218: 84 c0                         testb   %al, %al
// 21a: 74 36                         je      0x252 <_JIT_ENTRY+0x252>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_HandlePending
// 226: 4c 89 c7                      movq    %r8, %rdi
// 229: ff d0                         callq   *%rax
// 22b: 4c 8b 04 24                   movq    (%rsp), %r8
// 22f: 85 c0                         testl   %eax, %eax
// 231: 74 1f                         je      0x252 <_JIT_ENTRY+0x252>
// 233: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 237: eb 03                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 239: 49 89 c6                      movq    %rax, %r14
// 23c: 49 29 de                      subq    %rbx, %r14
// 23f: 49 83 c6 b8                   addq    $-0x48, %r14
// 243: 49 c1 ee 03                   shrq    $0x3, %r14
// 247: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24b: 31 c0                         xorl    %eax, %eax
// 24d: e9 85 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _JIT_OPARG
// 25c: f7 d0                         notl    %eax
// 25e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 263: 48 98                         cltq
// 265: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 26a: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 26e: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 272: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 276: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 27a: 4c 8b 7c ca 18                movq    0x18(%rdx,%rcx,8), %r15
// 27f: 41 8b 07                      movl    (%r15), %eax
// 282: ff c0                         incl    %eax
// 284: 74 13                         je      0x299 <_JIT_ENTRY+0x299>
// 286: 41 89 07                      movl    %eax, (%r15)
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 293: ff d0                         callq   *%rax
// 295: 4c 8b 04 24                   movq    (%rsp), %r8
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_OPARG
// 2a3: f7 d0                         notl    %eax
// 2a5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2aa: 48 98                         cltq
// 2ac: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 2b0: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2b4: 48 83 c6 08                   addq    $0x8, %rsi
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _JIT_CONTINUE
// 2c2: 48 89 df                      movq    %rbx, %rdi
// 2c5: 4c 89 c2                      movq    %r8, %rdx
// 2c8: 48 83 c4 18                   addq    $0x18, %rsp
// 2cc: 5b                            popq    %rbx
// 2cd: 41 5c                         popq    %r12
// 2cf: 41 5d                         popq    %r13
// 2d1: 41 5e                         popq    %r14
// 2d3: 41 5f                         popq    %r15
// 2d5: 5d                            popq    %rbp
// 2d6: ff e0                         jmpq    *%rax
// 2d8: 
static const unsigned char _CALL_BUILTIN_Oplus_ITER_NEXT_TUPLE_code_body[729] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x30, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x4d, 0x85, 0xff, 0x74, 0x2b, 0x4c, 0x89, 0x38, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x85, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x7c, 0xca, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x13, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_ITER_NEXT_TUPLE_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_ITER_NEXT_TUPLE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_ITER_NEXT_TUPLE_data_holes[1];

// _CALL_BUILTIN_Oplus_JUMP_TO_TOP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_JUMP_TO_TOP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 6a 01 00 00             jne     0x276 <_JIT_ENTRY+0x276>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000172:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 26                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 17e: 41 ff d7                      callq   *%r15
// 181: 48 8b 14 24                   movq    (%rsp), %rdx
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 20                         js      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d7: 41 ff d7                      callq   *%r15
// 1da: 48 8b 14 24                   movq    (%rsp), %rdx
// 1de: 49 ff 0c 24                   decq    (%r12)
// 1e2: 75 13                         jne     0x1f7 <_JIT_ENTRY+0x1f7>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_Dealloc
// 1ee: 4c 89 e7                      movq    %r12, %rdi
// 1f1: ff d0                         callq   *%rax
// 1f3: 48 8b 14 24                   movq    (%rsp), %rdx
// 1f7: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1fb: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 200: 48 85 c9                      testq   %rcx, %rcx
// 203: 74 6e                         je      0x273 <_JIT_ENTRY+0x273>
// 205: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 209: 48 89 08                      movq    %rcx, (%rax)
// 20c: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 210: 48 8b 08                      movq    (%rax), %rcx
// 213: 84 c9                         testb   %cl, %cl
// 215: 74 1e                         je      0x235 <_JIT_ENTRY+0x235>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_HandlePending
// 221: 48 89 d7                      movq    %rdx, %rdi
// 224: 49 89 d4                      movq    %rdx, %r12
// 227: ff d0                         callq   *%rax
// 229: 85 c0                         testl   %eax, %eax
// 22b: 75 49                         jne     0x276 <_JIT_ENTRY+0x276>
// 22d: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 232: 4c 89 e2                      movq    %r12, %rdx
// 235: 48 8b 00                      movq    (%rax), %rax
// 238: 84 c0                         testb   %al, %al
// 23a: 74 17                         je      0x253 <_JIT_ENTRY+0x253>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_HandlePending
// 246: 48 89 d7                      movq    %rdx, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 48 8b 14 24                   movq    (%rsp), %rdx
// 24f: 85 c0                         testl   %eax, %eax
// 251: 75 23                         jne     0x276 <_JIT_ENTRY+0x276>
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _JIT_CONTINUE
// 25d: 48 89 df                      movq    %rbx, %rdi
// 260: 4c 89 f6                      movq    %r14, %rsi
// 263: 48 83 c4 18                   addq    $0x18, %rsp
// 267: 5b                            popq    %rbx
// 268: 41 5c                         popq    %r12
// 26a: 41 5d                         popq    %r13
// 26c: 41 5e                         popq    %r14
// 26e: 41 5f                         popq    %r15
// 270: 5d                            popq    %rbp
// 271: ff e0                         jmpq    *%rax
// 273: 49 89 c6                      movq    %rax, %r14
// 276: 49 29 de                      subq    %rbx, %r14
// 279: 49 83 c6 b8                   addq    $-0x48, %r14
// 27d: 49 c1 ee 03                   shrq    $0x3, %r14
// 281: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 285: 31 c0                         xorl    %eax, %eax
// 287: e9 4b fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 28c: 
static const unsigned char _CALL_BUILTIN_Oplus_JUMP_TO_TOP_code_body[653] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x6a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x6e, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x08, 0x84, 0xc9, 0x74, 0x1e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x49, 0x89, 0xd4, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x89, 0xe2, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x4b, 0xfe, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_JUMP_TO_TOP_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_JUMP_TO_TOP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_JUMP_TO_TOP_data_holes[1];

// _CALL_BUILTIN_Oplus_LIST_APPEND
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LIST_APPEND.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2f 01 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2b                         je      0x238 <_JIT_ENTRY+0x238>
// 20d: 48 89 08                      movq    %rcx, (%rax)
// 210: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: 48 89 d7                      movq    %rdx, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 14 24                   movq    (%rsp), %rdx
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 1f                         je      0x251 <_JIT_ENTRY+0x251>
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: eb 03                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 238: 49 89 c6                      movq    %rax, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: e9 86 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_OPARG
// 25b: f7 d0                         notl    %eax
// 25d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 262: 48 98                         cltq
// 264: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 268: 49 83 c4 f8                   addq    $-0x8, %r12
// 26c: 49 8b 74 c6 f8                movq    -0x8(%r14,%rax,8), %rsi
// 271: 48 01 c0                      addq    %rax, %rax
// 274: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 278: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 27c: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
// 280: 7e 11                         jle     0x293 <_JIT_ENTRY+0x293>
// 282: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
// 286: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
// 28a: 48 ff c0                      incq    %rax
// 28d: 48 89 47 10                   movq    %rax, 0x10(%rdi)
// 291: eb 14                         jmp     0x2a7 <_JIT_ENTRY+0x2a7>
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _PyList_AppendTakeRefListResize
// 29d: ff d0                         callq   *%rax
// 29f: 48 8b 14 24                   movq    (%rsp), %rdx
// 2a3: 85 c0                         testl   %eax, %eax
// 2a5: 78 20                         js      0x2c7 <_JIT_ENTRY+0x2c7>
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _JIT_CONTINUE
// 2b1: 48 89 df                      movq    %rbx, %rdi
// 2b4: 4c 89 e6                      movq    %r12, %rsi
// 2b7: 48 83 c4 18                   addq    $0x18, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: ff e0                         jmpq    *%rax
// 2c7: 4d 89 e6                      movq    %r12, %r14
// 2ca: e9 6c ff ff ff                jmp     0x23b <_JIT_ENTRY+0x23b>
// 2cf: 
static const unsigned char _CALL_BUILTIN_Oplus_LIST_APPEND_code_body[720] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x74, 0xc6, 0xf8, 0x48, 0x01, 0xc0, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x11, 0x48, 0x8b, 0x4f, 0x18, 0x48, 0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0x6c, 0xff, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_LIST_APPEND_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LIST_APPEND_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LIST_APPEND_data_holes[1];

// _CALL_BUILTIN_Oplus_LIST_EXTEND
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LIST_EXTEND.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x67
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 fc                      movq    %r15, %r12
// 112: e9 bc 02 00 00                jmp     0x3d3 <_JIT_ENTRY+0x3d3>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13b: 4c 89 f6                      movq    %r14, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 48 8b 3c 24                   movq    (%rsp), %rdi
// 145: ff 47 2c                      incl    0x2c(%rdi)
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 49 8b 06                      movq    (%r14), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 2a                         jg      0x17f <_JIT_ENTRY+0x17f>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16e: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 173: 4c 89 f2                      movq    %r14, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17c: 49 8b 06                      movq    (%r14), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 2f                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 ff 08                      decq    (%rax)
// 19b: 75 15                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 26                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 29                         js      0x20e <_JIT_ENTRY+0x20e>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 13                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 20e: 4d 8d 24 ef                   leaq    (%r15,%rbp,8), %r12
// 212: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 0f 84 b3 01 00 00             je      0x3d3 <_JIT_ENTRY+0x3d3>
// 220: 49 89 04 24                   movq    %rax, (%r12)
// 224: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 228: 48 8b 00                      movq    (%rax), %rax
// 22b: 84 c0                         testb   %al, %al
// 22d: 74 19                         je      0x248 <_JIT_ENTRY+0x248>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_HandlePending
// 239: ff d0                         callq   *%rax
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 74 09                         je      0x248 <_JIT_ENTRY+0x248>
// 23f: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 243: e9 8b 01 00 00                jmp     0x3d3 <_JIT_ENTRY+0x3d3>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _JIT_OPARG
// 252: f7 d0                         notl    %eax
// 254: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 259: 48 98                         cltq
// 25b: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 25f: 49 83 c4 f8                   addq    $-0x8, %r12
// 263: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 268: 48 01 c0                      addq    %rax, %rax
// 26b: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _PyList_Extend
// 279: 4c 89 ee                      movq    %r13, %rsi
// 27c: ff d0                         callq   *%rax
// 27e: 48 85 c0                      testq   %rax, %rax
// 281: 0f 84 80 00 00 00             je      0x307 <_JIT_ENTRY+0x307>
// 287: 49 8b 45 00                   movq    (%r13), %rax
// 28b: 48 85 c0                      testq   %rax, %rax
// 28e: 48 8b 14 24                   movq    (%rsp), %rdx
// 292: 7f 26                         jg      0x2ba <_JIT_ENTRY+0x2ba>
// 294: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000296:  R_X86_64_64  .rodata.str1.1
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _Py_NegativeRefcount
// 2a8: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 2ad: 4c 89 ea                      movq    %r13, %rdx
// 2b0: ff d0                         callq   *%rax
// 2b2: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b6: 49 8b 45 00                   movq    (%r13), %rax
// 2ba: 85 c0                         testl   %eax, %eax
// 2bc: 78 29                         js      0x2e7 <_JIT_ENTRY+0x2e7>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c8: ff d0                         callq   *%rax
// 2ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ce: 49 ff 4d 00                   decq    (%r13)
// 2d2: 75 13                         jne     0x2e7 <_JIT_ENTRY+0x2e7>
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _Py_Dealloc
// 2de: 4c 89 ef                      movq    %r13, %rdi
// 2e1: ff d0                         callq   *%rax
// 2e3: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _JIT_CONTINUE
// 2f1: 48 89 df                      movq    %rbx, %rdi
// 2f4: 4c 89 e6                      movq    %r12, %rsi
// 2f7: 48 83 c4 18                   addq    $0x18, %rsp
// 2fb: 5b                            popq    %rbx
// 2fc: 41 5c                         popq    %r12
// 2fe: 41 5d                         popq    %r13
// 300: 41 5e                         popq    %r14
// 302: 41 5f                         popq    %r15
// 304: 5d                            popq    %rbp
// 305: ff e0                         jmpq    *%rax
// 307: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000309:  R_X86_64_64  PyExc_TypeError
// 311: 49 8b 37                      movq    (%r15), %rsi
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _PyErr_ExceptionMatches
// 31e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 322: ff d0                         callq   *%rax
// 324: 85 c0                         testl   %eax, %eax
// 326: 74 5b                         je      0x383 <_JIT_ENTRY+0x383>
// 328: 49 8b 45 08                   movq    0x8(%r13), %rax
// 32c: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// 334: 75 4d                         jne     0x383 <_JIT_ENTRY+0x383>
// 336: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000338:  R_X86_64_64  PySequence_Check
// 340: 4c 89 ef                      movq    %r13, %rdi
// 343: ff d0                         callq   *%rax
// 345: 85 c0                         testl   %eax, %eax
// 347: 75 3a                         jne     0x383 <_JIT_ENTRY+0x383>
// 349: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034b:  R_X86_64_64  _PyErr_Clear
// 353: 4c 8b 34 24                   movq    (%rsp), %r14
// 357: 4c 89 f7                      movq    %r14, %rdi
// 35a: ff d0                         callq   *%rax
// 35c: 49 8b 37                      movq    (%r15), %rsi
// 35f: 49 8b 45 08                   movq    0x8(%r13), %rax
// 363: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 367: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000369:  R_X86_64_64  .rodata.str1.1+0x39
// 371: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000373:  R_X86_64_64  _PyErr_Format
// 37b: 4c 89 f7                      movq    %r14, %rdi
// 37e: 31 c0                         xorl    %eax, %eax
// 380: 41 ff d0                      callq   *%r8
// 383: 49 8b 45 00                   movq    (%r13), %rax
// 387: 48 85 c0                      testq   %rax, %rax
// 38a: 7f 22                         jg      0x3ae <_JIT_ENTRY+0x3ae>
// 38c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000038e:  R_X86_64_64  .rodata.str1.1
// 396: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000398:  R_X86_64_64  _Py_NegativeRefcount
// 3a0: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 3a5: 4c 89 ea                      movq    %r13, %rdx
// 3a8: ff d0                         callq   *%rax
// 3aa: 49 8b 45 00                   movq    (%r13), %rax
// 3ae: 85 c0                         testl   %eax, %eax
// 3b0: 78 21                         js      0x3d3 <_JIT_ENTRY+0x3d3>
// 3b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3bc: ff d0                         callq   *%rax
// 3be: 49 ff 4d 00                   decq    (%r13)
// 3c2: 75 0f                         jne     0x3d3 <_JIT_ENTRY+0x3d3>
// 3c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c6:  R_X86_64_64  _Py_Dealloc
// 3ce: 4c 89 ef                      movq    %r13, %rdi
// 3d1: ff d0                         callq   *%rax
// 3d3: 49 29 dc                      subq    %rbx, %r12
// 3d6: 49 83 c4 b8                   addq    $-0x48, %r12
// 3da: 49 c1 ec 03                   shrq    $0x3, %r12
// 3de: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 3e2: 31 c0                         xorl    %eax, %eax
// 3e4: e9 f5 fc ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 3e9: 
static const unsigned char _CALL_BUILTIN_Oplus_LIST_EXTEND_code_body[1002] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfc, 0xe9, 0xbc, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4d, 0x8d, 0x24, 0xef, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xb3, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x24, 0xef, 0xe9, 0x8b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x01, 0xc0, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x14, 0x24, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x5b, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x34, 0x24, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x37, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xf5, 0xfc, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_LIST_EXTEND_code_holes[32] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x67},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x338, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x369, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x373, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x38e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x398, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00 while calling a Python object\x00'
// 86: 00 00
static const unsigned char _CALL_BUILTIN_Oplus_LIST_EXTEND_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LIST_EXTEND_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_ASSERTION_ERROR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2f 01 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2b                         je      0x238 <_JIT_ENTRY+0x238>
// 20d: 48 89 08                      movq    %rcx, (%rax)
// 210: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: 48 89 d7                      movq    %rdx, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 14 24                   movq    (%rsp), %rdx
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 1f                         je      0x251 <_JIT_ENTRY+0x251>
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: eb 03                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 238: 49 89 c6                      movq    %rax, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: e9 86 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  PyExc_AssertionError
// 25b: 4c 8b 20                      movq    (%rax), %r12
// 25e: 41 8b 04 24                   movl    (%r12), %eax
// 262: ff c0                         incl    %eax
// 264: 74 14                         je      0x27a <_JIT_ENTRY+0x27a>
// 266: 41 89 04 24                   movl    %eax, (%r12)
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 274: ff d0                         callq   *%rax
// 276: 48 8b 14 24                   movq    (%rsp), %rdx
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _JIT_OPARG
// 284: f7 d0                         notl    %eax
// 286: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 28b: 48 98                         cltq
// 28d: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 291: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 295: 48 83 c6 08                   addq    $0x8, %rsi
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 48 89 df                      movq    %rbx, %rdi
// 2a6: 48 83 c4 18                   addq    $0x18, %rsp
// 2aa: 5b                            popq    %rbx
// 2ab: 41 5c                         popq    %r12
// 2ad: 41 5d                         popq    %r13
// 2af: 41 5e                         popq    %r14
// 2b1: 41 5f                         popq    %r15
// 2b3: 5d                            popq    %rbp
// 2b4: ff e0                         jmpq    *%rax
// 2b6: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ASSERTION_ERROR_code_body[695] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ASSERTION_ERROR_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ASSERTION_ERROR_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_ATTR
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_ATTR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 50                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 31                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 26                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 14 24                   movq    %rdx, (%rsp)
// 96: 7e 48                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 98: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a0: 75 7c                         jne     0x11e <_JIT_ENTRY+0x11e>
// a2: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a7: eb 77                         jmp     0x120 <_JIT_ENTRY+0x120>
// a9: 49 29 de                      subq    %rbx, %r14
// ac: 49 83 c6 b8                   addq    $-0x48, %r14
// b0: 49 c1 ee 03                   shrq    $0x3, %r14
// b4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b8: 48 8b 03                      movq    (%rbx), %rax
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _JIT_TARGET
// c5: 89 c9                         movl    %ecx, %ecx
// c7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d1: 48 83 c4 18                   addq    $0x18, %rsp
// d5: 5b                            popq    %rbx
// d6: 41 5c                         popq    %r12
// d8: 41 5d                         popq    %r13
// da: 41 5e                         popq    %r14
// dc: 41 5f                         popq    %r15
// de: 5d                            popq    %rbp
// df: c3                            retq
// e0: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e7:  R_X86_64_64  .rodata.str1.1+0x39
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_CheckRecursiveCall
// f9: 48 89 d7                      movq    %rdx, %rdi
// fc: ff d0                         callq   *%rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 74 08                         je      0x10a <_JIT_ENTRY+0x10a>
// 102: 4c 89 f5                      movq    %r14, %rbp
// 105: e9 b8 02 00 00                jmp     0x3c2 <_JIT_ENTRY+0x3c2>
// 10a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10f: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 114: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 118: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11c: 74 84                         je      0xa2 <_JIT_ENTRY+0xa2>
// 11e: 31 ff                         xorl    %edi, %edi
// 120: 48 89 ee                      movq    %rbp, %rsi
// 123: 41 ff d0                      callq   *%r8
// 126: 48 8b 3c 24                   movq    (%rsp), %rdi
// 12a: ff 47 2c                      incl    0x2c(%rdi)
// 12d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 132: 48 8b 45 00                   movq    (%rbp), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 26                         jg      0x161 <_JIT_ENTRY+0x161>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 154: 48 89 ea                      movq    %rbp, %rdx
// 157: ff d0                         callq   *%rax
// 159: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15d: 48 8b 45 00                   movq    (%rbp), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 29                         js      0x18e <_JIT_ENTRY+0x18e>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 48 8b 3c 24                   movq    (%rsp), %rdi
// 175: 48 ff 4d 00                   decq    (%rbp)
// 179: 75 13                         jne     0x18e <_JIT_ENTRY+0x18e>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: 48 89 ef                      movq    %rbp, %rdi
// 188: ff d0                         callq   *%rax
// 18a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18e: 49 8b 04 24                   movq    (%r12), %rax
// 192: 48 85 c0                      testq   %rax, %rax
// 195: 7f 26                         jg      0x1bd <_JIT_ENTRY+0x1bd>
// 197: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000199:  R_X86_64_64  .rodata.str1.1
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NegativeRefcount
// 1ab: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b0: 4c 89 e2                      movq    %r12, %rdx
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b9: 49 8b 04 24                   movq    (%r12), %rax
// 1bd: 85 c0                         testl   %eax, %eax
// 1bf: 78 29                         js      0x1ea <_JIT_ENTRY+0x1ea>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cb: ff d0                         callq   *%rax
// 1cd: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d1: 49 ff 0c 24                   decq    (%r12)
// 1d5: 75 13                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_Dealloc
// 1e1: 4c 89 e7                      movq    %r12, %rdi
// 1e4: ff d0                         callq   *%rax
// 1e6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ea: 4b 8d 2c fe                   leaq    (%r14,%r15,8), %rbp
// 1ee: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1f3: 48 85 c0                      testq   %rax, %rax
// 1f6: 0f 84 c6 01 00 00             je      0x3c2 <_JIT_ENTRY+0x3c2>
// 1fc: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 200: 48 89 45 00                   movq    %rax, (%rbp)
// 204: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 208: 48 8b 00                      movq    (%rax), %rax
// 20b: 84 c0                         testb   %al, %al
// 20d: 74 18                         je      0x227 <_JIT_ENTRY+0x227>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_HandlePending
// 219: ff d0                         callq   *%rax
// 21b: 85 c0                         testl   %eax, %eax
// 21d: 74 08                         je      0x227 <_JIT_ENTRY+0x227>
// 21f: 4c 89 ed                      movq    %r13, %rbp
// 222: e9 9b 01 00 00                jmp     0x3c2 <_JIT_ENTRY+0x3c2>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_OPARG
// 231: 89 c1                         movl    %eax, %ecx
// 233: f7 d1                         notl    %ecx
// 235: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 23b: 48 63 c9                      movslq  %ecx, %rcx
// 23e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 242: 48 83 c5 f8                   addq    $-0x8, %rbp
// 246: 4d 8b 64 ce f8                movq    -0x8(%r14,%rcx,8), %r12
// 24b: 48 8b 0b                      movq    (%rbx), %rcx
// 24e: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 252: 89 c2                         movl    %eax, %edx
// 254: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// 25a: 48 8b 74 91 18                movq    0x18(%rcx,%rdx,4), %rsi
// 25f: a8 01                         testb   $0x1, %al
// 261: 74 30                         je      0x293 <_JIT_ENTRY+0x293>
// 263: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _PyObject_GetMethod
// 276: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 27b: 4c 89 e7                      movq    %r12, %rdi
// 27e: ff d0                         callq   *%rax
// 280: 85 c0                         testl   %eax, %eax
// 282: 0f 84 cc 00 00 00             je      0x354 <_JIT_ENTRY+0x354>
// 288: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 28d: 48 8b 14 24                   movq    (%rsp), %rdx
// 291: eb 79                         jmp     0x30c <_JIT_ENTRY+0x30c>
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  PyObject_GetAttr
// 29d: 4c 89 e7                      movq    %r12, %rdi
// 2a0: ff d0                         callq   *%rax
// 2a2: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2a7: 49 8b 04 24                   movq    (%r12), %rax
// 2ab: 48 85 c0                      testq   %rax, %rax
// 2ae: 7f 22                         jg      0x2d2 <_JIT_ENTRY+0x2d2>
// 2b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b2:  R_X86_64_64  .rodata.str1.1
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_NegativeRefcount
// 2c4: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 2c9: 4c 89 e2                      movq    %r12, %rdx
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 8b 04 24                   movq    (%r12), %rax
// 2d2: 85 c0                         testl   %eax, %eax
// 2d4: 78 21                         js      0x2f7 <_JIT_ENTRY+0x2f7>
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e0: ff d0                         callq   *%rax
// 2e2: 49 ff 0c 24                   decq    (%r12)
// 2e6: 75 0f                         jne     0x2f7 <_JIT_ENTRY+0x2f7>
// 2e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ea:  R_X86_64_64  _Py_Dealloc
// 2f2: 4c 89 e7                      movq    %r12, %rdi
// 2f5: ff d0                         callq   *%rax
// 2f7: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2fc: 48 85 c0                      testq   %rax, %rax
// 2ff: 48 8b 14 24                   movq    (%rsp), %rdx
// 303: 0f 84 b9 00 00 00             je      0x3c2 <_JIT_ENTRY+0x3c2>
// 309: 45 31 e4                      xorl    %r12d, %r12d
// 30c: 48 89 45 00                   movq    %rax, (%rbp)
// 310: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000312:  R_X86_64_64  _JIT_OPARG
// 31a: a8 01                         testb   $0x1, %al
// 31c: 74 04                         je      0x322 <_JIT_ENTRY+0x322>
// 31e: 4d 89 65 00                   movq    %r12, (%r13)
// 322: 89 c1                         movl    %eax, %ecx
// 324: 83 e1 01                      andl    $0x1, %ecx
// 327: f7 d0                         notl    %eax
// 329: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 32e: 48 98                         cltq
// 330: 48 01 c8                      addq    %rcx, %rax
// 333: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _JIT_CONTINUE
// 341: 48 89 df                      movq    %rbx, %rdi
// 344: 48 83 c4 18                   addq    $0x18, %rsp
// 348: 5b                            popq    %rbx
// 349: 41 5c                         popq    %r12
// 34b: 41 5d                         popq    %r13
// 34d: 41 5e                         popq    %r14
// 34f: 41 5f                         popq    %r15
// 351: 5d                            popq    %rbp
// 352: ff e0                         jmpq    *%rax
// 354: 49 8b 04 24                   movq    (%r12), %rax
// 358: 48 85 c0                      testq   %rax, %rax
// 35b: 48 8b 14 24                   movq    (%rsp), %rdx
// 35f: 7f 26                         jg      0x387 <_JIT_ENTRY+0x387>
// 361: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000363:  R_X86_64_64  .rodata.str1.1
// 36b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036d:  R_X86_64_64  _Py_NegativeRefcount
// 375: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 37a: 4c 89 e2                      movq    %r12, %rdx
// 37d: ff d0                         callq   *%rax
// 37f: 48 8b 14 24                   movq    (%rsp), %rdx
// 383: 49 8b 04 24                   movq    (%r12), %rax
// 387: 85 c0                         testl   %eax, %eax
// 389: 78 29                         js      0x3b4 <_JIT_ENTRY+0x3b4>
// 38b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 395: ff d0                         callq   *%rax
// 397: 48 8b 14 24                   movq    (%rsp), %rdx
// 39b: 49 ff 0c 24                   decq    (%r12)
// 39f: 75 13                         jne     0x3b4 <_JIT_ENTRY+0x3b4>
// 3a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a3:  R_X86_64_64  _Py_Dealloc
// 3ab: 4c 89 e7                      movq    %r12, %rdi
// 3ae: ff d0                         callq   *%rax
// 3b0: 48 8b 14 24                   movq    (%rsp), %rdx
// 3b4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 3b9: 48 85 c0                      testq   %rax, %rax
// 3bc: 0f 85 47 ff ff ff             jne     0x309 <_JIT_ENTRY+0x309>
// 3c2: 48 29 dd                      subq    %rbx, %rbp
// 3c5: 48 83 c5 b8                   addq    $-0x48, %rbp
// 3c9: 48 c1 ed 03                   shrq    $0x3, %rbp
// 3cd: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 3d0: 31 c0                         xorl    %eax, %eax
// 3d2: e9 fa fc ff ff                jmp     0xd1 <_JIT_ENTRY+0xd1>
// 3d7: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_code_body[984] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x50, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x31, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x26, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7c, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x77, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4c, 0x89, 0xf5, 0xe9, 0xb8, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x84, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x2c, 0xfe, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc6, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x45, 0x00, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4c, 0x89, 0xed, 0xe9, 0x9b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x83, 0xc5, 0xf8, 0x4d, 0x8b, 0x64, 0xce, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x20, 0x89, 0xc2, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x91, 0x18, 0xa8, 0x01, 0x74, 0x30, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x14, 0x24, 0xeb, 0x79, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x14, 0x24, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x45, 0x31, 0xe4, 0x48, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x04, 0x4d, 0x89, 0x65, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x14, 0x24, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x47, 0xff, 0xff, 0xff, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfc, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x363, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x36d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x38d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_ATTR_CLASS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_ATTR_CLASS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 32 01 00 00             jne     0x23e <_JIT_ENTRY+0x23e>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2e                         je      0x23b <_JIT_ENTRY+0x23b>
// 20d: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 35                         je      0x254 <_JIT_ENTRY+0x254>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: 48 89 d7                      movq    %rdx, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 14 24                   movq    (%rsp), %rdx
// 232: 85 c0                         testl   %eax, %eax
// 234: 74 1e                         je      0x254 <_JIT_ENTRY+0x254>
// 236: 4d 89 ee                      movq    %r13, %r14
// 239: eb 03                         jmp     0x23e <_JIT_ENTRY+0x23e>
// 23b: 49 89 c6                      movq    %rax, %r14
// 23e: 49 29 de                      subq    %rbx, %r14
// 241: 49 83 c6 b8                   addq    $-0x48, %r14
// 245: 49 c1 ee 03                   shrq    $0x3, %r14
// 249: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24d: 31 c0                         xorl    %eax, %eax
// 24f: e9 83 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_OPARG
// 25e: f7 d0                         notl    %eax
// 260: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 265: 48 98                         cltq
// 267: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 26c: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000026e:  R_X86_64_64  _JIT_OPERAND
// 276: 8b 45 00                      movl    (%rbp), %eax
// 279: ff c0                         incl    %eax
// 27b: 75 0f                         jne     0x28c <_JIT_ENTRY+0x28c>
// 27d: 49 8b 04 24                   movq    (%r12), %rax
// 281: 48 85 c0                      testq   %rax, %rax
// 284: 7e 22                         jle     0x2a8 <_JIT_ENTRY+0x2a8>
// 286: 85 c0                         testl   %eax, %eax
// 288: 79 48                         jns     0x2d2 <_JIT_ENTRY+0x2d2>
// 28a: eb 6f                         jmp     0x2fb <_JIT_ENTRY+0x2fb>
// 28c: 89 45 00                      movl    %eax, (%rbp)
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 299: ff d0                         callq   *%rax
// 29b: 48 8b 14 24                   movq    (%rsp), %rdx
// 29f: 49 8b 04 24                   movq    (%r12), %rax
// 2a3: 48 85 c0                      testq   %rax, %rax
// 2a6: 7f de                         jg      0x286 <_JIT_ENTRY+0x286>
// 2a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002aa:  R_X86_64_64  .rodata.str1.1
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 2c1: 4c 89 e2                      movq    %r12, %rdx
// 2c4: ff d0                         callq   *%rax
// 2c6: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ca: 49 8b 04 24                   movq    (%r12), %rax
// 2ce: 85 c0                         testl   %eax, %eax
// 2d0: 78 29                         js      0x2fb <_JIT_ENTRY+0x2fb>
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2dc: ff d0                         callq   *%rax
// 2de: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e2: 49 ff 0c 24                   decq    (%r12)
// 2e6: 75 13                         jne     0x2fb <_JIT_ENTRY+0x2fb>
// 2e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ea:  R_X86_64_64  _Py_Dealloc
// 2f2: 4c 89 e7                      movq    %r12, %rdi
// 2f5: ff d0                         callq   *%rax
// 2f7: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _JIT_OPARG
// 305: 89 c1                         movl    %eax, %ecx
// 307: f7 d1                         notl    %ecx
// 309: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 30f: 48 63 c9                      movslq  %ecx, %rcx
// 312: 49 89 6c ce f8                movq    %rbp, -0x8(%r14,%rcx,8)
// 317: a8 01                         testb   $0x1, %al
// 319: 74 08                         je      0x323 <_JIT_ENTRY+0x323>
// 31b: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 323: 89 c1                         movl    %eax, %ecx
// 325: 83 e1 01                      andl    $0x1, %ecx
// 328: f7 d0                         notl    %eax
// 32a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 32f: 48 98                         cltq
// 331: 48 01 c8                      addq    %rcx, %rax
// 334: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  _JIT_CONTINUE
// 342: 48 89 df                      movq    %rbx, %rdi
// 345: 48 83 c4 18                   addq    $0x18, %rsp
// 349: 5b                            popq    %rbx
// 34a: 41 5c                         popq    %r12
// 34c: 41 5d                         popq    %r13
// 34e: 41 5e                         popq    %r14
// 350: 41 5f                         popq    %r15
// 352: 5d                            popq    %rbp
// 353: ff e0                         jmpq    *%rax
// 355: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_CLASS_code_body[854] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x83, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x85, 0xc0, 0x79, 0x48, 0xeb, 0x6f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x6c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_CLASS_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_CLASS_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_ATTR_INSTANCE_VALUE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 1c 02 00 00             jne     0x27a <_JIT_ENTRY+0x27a>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 f9 01 00 00             jne     0x27a <_JIT_ENTRY+0x27a>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 ea 01 00 00             jne     0x27a <_JIT_ENTRY+0x27a>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 83 01 00 00             jne     0x264 <_JIT_ENTRY+0x264>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 7f                         je      0x261 <_JIT_ENTRY+0x261>
// 1e2: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 1c                         je      0x210 <_JIT_ENTRY+0x210>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 05                         je      0x210 <_JIT_ENTRY+0x210>
// 20b: 4d 89 ee                      movq    %r13, %r14
// 20e: eb 54                         jmp     0x264 <_JIT_ENTRY+0x264>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _JIT_OPARG
// 21a: f7 d0                         notl    %eax
// 21c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 221: 48 98                         cltq
// 223: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 228: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 22d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022f:  R_X86_64_64  _JIT_OPERAND
// 237: 0f b7 c9                      movzwl  %cx, %ecx
// 23a: 48 8b 6c c8 01                movq    0x1(%rax,%rcx,8), %rbp
// 23f: 48 85 ed                      testq   %rbp, %rbp
// 242: 74 33                         je      0x277 <_JIT_ENTRY+0x277>
// 244: 8b 45 00                      movl    (%rbp), %eax
// 247: ff c0                         incl    %eax
// 249: 75 66                         jne     0x2b1 <_JIT_ENTRY+0x2b1>
// 24b: 49 8b 04 24                   movq    (%r12), %rax
// 24f: 48 85 c0                      testq   %rax, %rax
// 252: 7e 79                         jle     0x2cd <_JIT_ENTRY+0x2cd>
// 254: 85 c0                         testl   %eax, %eax
// 256: 0f 89 9b 00 00 00             jns     0x2f7 <_JIT_ENTRY+0x2f7>
// 25c: e9 bf 00 00 00                jmp     0x320 <_JIT_ENTRY+0x320>
// 261: 49 89 c6                      movq    %rax, %r14
// 264: 49 29 de                      subq    %rbx, %r14
// 267: 49 83 c6 b8                   addq    $-0x48, %r14
// 26b: 49 c1 ee 03                   shrq    $0x3, %r14
// 26f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 273: 31 c0                         xorl    %eax, %eax
// 275: eb 2b                         jmp     0x2a2 <_JIT_ENTRY+0x2a2>
// 277: 4d 89 ee                      movq    %r13, %r14
// 27a: 49 29 de                      subq    %rbx, %r14
// 27d: 49 83 c6 b8                   addq    $-0x48, %r14
// 281: 49 c1 ee 03                   shrq    $0x3, %r14
// 285: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 289: 48 8b 03                      movq    (%rbx), %rax
// 28c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028e:  R_X86_64_64  _JIT_TARGET
// 296: 89 c9                         movl    %ecx, %ecx
// 298: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 29c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2a2: 48 83 c4 18                   addq    $0x18, %rsp
// 2a6: 5b                            popq    %rbx
// 2a7: 41 5c                         popq    %r12
// 2a9: 41 5d                         popq    %r13
// 2ab: 41 5e                         popq    %r14
// 2ad: 41 5f                         popq    %r15
// 2af: 5d                            popq    %rbp
// 2b0: c3                            retq
// 2b1: 89 45 00                      movl    %eax, (%rbp)
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2be: ff d0                         callq   *%rax
// 2c0: 48 8b 14 24                   movq    (%rsp), %rdx
// 2c4: 49 8b 04 24                   movq    (%r12), %rax
// 2c8: 48 85 c0                      testq   %rax, %rax
// 2cb: 7f 87                         jg      0x254 <_JIT_ENTRY+0x254>
// 2cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cf:  R_X86_64_64  .rodata.str1.1
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_NegativeRefcount
// 2e1: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// 2e6: 4c 89 e2                      movq    %r12, %rdx
// 2e9: ff d0                         callq   *%rax
// 2eb: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ef: 49 8b 04 24                   movq    (%r12), %rax
// 2f3: 85 c0                         testl   %eax, %eax
// 2f5: 78 29                         js      0x320 <_JIT_ENTRY+0x320>
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 301: ff d0                         callq   *%rax
// 303: 48 8b 14 24                   movq    (%rsp), %rdx
// 307: 49 ff 0c 24                   decq    (%r12)
// 30b: 75 13                         jne     0x320 <_JIT_ENTRY+0x320>
// 30d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030f:  R_X86_64_64  _Py_Dealloc
// 317: 4c 89 e7                      movq    %r12, %rdi
// 31a: ff d0                         callq   *%rax
// 31c: 48 8b 14 24                   movq    (%rsp), %rdx
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _JIT_OPARG
// 32a: 89 c1                         movl    %eax, %ecx
// 32c: f7 d1                         notl    %ecx
// 32e: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 334: 48 63 c9                      movslq  %ecx, %rcx
// 337: 49 89 6c ce f8                movq    %rbp, -0x8(%r14,%rcx,8)
// 33c: a8 01                         testb   $0x1, %al
// 33e: 74 08                         je      0x348 <_JIT_ENTRY+0x348>
// 340: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 348: 89 c1                         movl    %eax, %ecx
// 34a: 83 e1 01                      andl    $0x1, %ecx
// 34d: f7 d0                         notl    %eax
// 34f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 354: 48 98                         cltq
// 356: 48 01 c8                      addq    %rcx, %rax
// 359: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 35d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035f:  R_X86_64_64  _JIT_CONTINUE
// 367: 48 89 df                      movq    %rbx, %rdi
// 36a: 48 83 c4 18                   addq    $0x18, %rsp
// 36e: 5b                            popq    %rbx
// 36f: 41 5c                         popq    %r12
// 371: 41 5d                         popq    %r13
// 373: 41 5e                         popq    %r14
// 375: 41 5f                         popq    %r15
// 377: 5d                            popq    %rbp
// 378: ff e0                         jmpq    *%rax
// 37a: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_INSTANCE_VALUE_code_body[891] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x1c, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf9, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xea, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x83, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x7f, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x05, 0x4d, 0x89, 0xee, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x6c, 0xc8, 0x01, 0x48, 0x85, 0xed, 0x74, 0x33, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x9b, 0x00, 0x00, 0x00, 0xe9, 0xbf, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x6c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x35f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_INSTANCE_VALUE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_LAZY_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2f 01 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2b                         je      0x238 <_JIT_ENTRY+0x238>
// 20d: 48 89 08                      movq    %rcx, (%rax)
// 210: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: 48 89 d7                      movq    %rdx, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 14 24                   movq    (%rsp), %rdx
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 1f                         je      0x251 <_JIT_ENTRY+0x251>
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: eb 03                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 238: 49 89 c6                      movq    %rax, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: e9 86 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_OPARG
// 25b: f7 d0                         notl    %eax
// 25d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 262: 48 98                         cltq
// 264: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 269: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000026b:  R_X86_64_64  _JIT_OPERAND
// 273: 41 8b 04 24                   movl    (%r12), %eax
// 277: ff c0                         incl    %eax
// 279: 74 14                         je      0x28f <_JIT_ENTRY+0x28f>
// 27b: 41 89 04 24                   movl    %eax, (%r12)
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 289: ff d0                         callq   *%rax
// 28b: 48 8b 14 24                   movq    (%rsp), %rdx
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _JIT_OPARG
// 299: f7 d0                         notl    %eax
// 29b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2a0: 48 98                         cltq
// 2a2: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 2a7: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 2ab: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2af: 48 83 c6 08                   addq    $0x8, %rsi
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _JIT_CONTINUE
// 2bd: 48 89 df                      movq    %rbx, %rdi
// 2c0: 48 83 c4 18                   addq    $0x18, %rsp
// 2c4: 5b                            popq    %rbx
// 2c5: 41 5c                         popq    %r12
// 2c7: 41 5d                         popq    %r13
// 2c9: 41 5e                         popq    %r14
// 2cb: 41 5f                         popq    %r15
// 2cd: 5d                            popq    %rbp
// 2ce: ff e0                         jmpq    *%rax
// 2d0: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[721] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x4d, 0x89, 0x2c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_NO_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2f 01 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2b                         je      0x238 <_JIT_ENTRY+0x238>
// 20d: 48 89 08                      movq    %rcx, (%rax)
// 210: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: 48 89 d7                      movq    %rdx, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 14 24                   movq    (%rsp), %rdx
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 1f                         je      0x251 <_JIT_ENTRY+0x251>
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: eb 03                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 238: 49 89 c6                      movq    %rax, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: e9 86 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_OPARG
// 25b: f7 d0                         notl    %eax
// 25d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 262: 48 98                         cltq
// 264: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 269: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000026b:  R_X86_64_64  _JIT_OPERAND
// 273: 41 8b 04 24                   movl    (%r12), %eax
// 277: ff c0                         incl    %eax
// 279: 74 14                         je      0x28f <_JIT_ENTRY+0x28f>
// 27b: 41 89 04 24                   movl    %eax, (%r12)
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 289: ff d0                         callq   *%rax
// 28b: 48 8b 14 24                   movq    (%rsp), %rdx
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _JIT_OPARG
// 299: f7 d0                         notl    %eax
// 29b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2a0: 48 98                         cltq
// 2a2: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 2a7: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 2ab: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2af: 48 83 c6 08                   addq    $0x8, %rsi
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _JIT_CONTINUE
// 2bd: 48 89 df                      movq    %rbx, %rdi
// 2c0: 48 83 c4 18                   addq    $0x18, %rsp
// 2c4: 5b                            popq    %rbx
// 2c5: 41 5c                         popq    %r12
// 2c7: 41 5d                         popq    %r13
// 2c9: 41 5e                         popq    %r14
// 2cb: 41 5f                         popq    %r15
// 2cd: 5d                            popq    %rbp
// 2ce: ff e0                         jmpq    *%rax
// 2d0: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_NO_DICT_code_body[721] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x4d, 0x89, 0x2c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_NO_DICT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_WITH_VALUES.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2f 01 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2b                         je      0x238 <_JIT_ENTRY+0x238>
// 20d: 48 89 08                      movq    %rcx, (%rax)
// 210: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: 48 89 d7                      movq    %rdx, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 14 24                   movq    (%rsp), %rdx
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 1f                         je      0x251 <_JIT_ENTRY+0x251>
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: eb 03                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 238: 49 89 c6                      movq    %rax, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: e9 86 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_OPARG
// 25b: f7 d0                         notl    %eax
// 25d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 262: 48 98                         cltq
// 264: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 269: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000026b:  R_X86_64_64  _JIT_OPERAND
// 273: 41 8b 04 24                   movl    (%r12), %eax
// 277: ff c0                         incl    %eax
// 279: 74 14                         je      0x28f <_JIT_ENTRY+0x28f>
// 27b: 41 89 04 24                   movl    %eax, (%r12)
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 289: ff d0                         callq   *%rax
// 28b: 48 8b 14 24                   movq    (%rsp), %rdx
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _JIT_OPARG
// 299: f7 d0                         notl    %eax
// 29b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2a0: 48 98                         cltq
// 2a2: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 2a7: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 2ab: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2af: 48 83 c6 08                   addq    $0x8, %rsi
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _JIT_CONTINUE
// 2bd: 48 89 df                      movq    %rbx, %rdi
// 2c0: 48 83 c4 18                   addq    $0x18, %rsp
// 2c4: 5b                            popq    %rbx
// 2c5: 41 5c                         popq    %r12
// 2c7: 41 5d                         popq    %r13
// 2c9: 41 5e                         popq    %r14
// 2cb: 41 5f                         popq    %r15
// 2cd: 5d                            popq    %rbp
// 2ce: ff e0                         jmpq    *%rax
// 2d0: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[721] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x4d, 0x89, 0x2c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_ATTR_MODULE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_ATTR_MODULE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 38 02 00 00             jne     0x296 <_JIT_ENTRY+0x296>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 15 02 00 00             jne     0x296 <_JIT_ENTRY+0x296>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 06 02 00 00             jne     0x296 <_JIT_ENTRY+0x296>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 9f 01 00 00             jne     0x280 <_JIT_ENTRY+0x280>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 4c 8b 04 24                   movq    (%rsp), %r8
// 10b: 41 ff 40 2c                   incl    0x2c(%r8)
// 10f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 114: 49 8b 07                      movq    (%r15), %rax
// 117: 48 85 c0                      testq   %rax, %rax
// 11a: 7f 2a                         jg      0x146 <_JIT_ENTRY+0x146>
// 11c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011e:  R_X86_64_64  .rodata.str1.1
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _Py_NegativeRefcount
// 130: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 135: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13a: 4c 89 fa                      movq    %r15, %rdx
// 13d: ff d0                         callq   *%rax
// 13f: 4c 8b 04 24                   movq    (%rsp), %r8
// 143: 49 8b 07                      movq    (%r15), %rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 78 2f                         js      0x179 <_JIT_ENTRY+0x179>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 154: ff d0                         callq   *%rax
// 156: 4c 8b 04 24                   movq    (%rsp), %r8
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 4c 8b 04 24                   movq    (%rsp), %r8
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 29                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b6: ff d0                         callq   *%rax
// 1b8: 4c 8b 04 24                   movq    (%rsp), %r8
// 1bc: 49 ff 0c 24                   decq    (%r12)
// 1c0: 75 13                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_Dealloc
// 1cc: 4c 89 e7                      movq    %r12, %rdi
// 1cf: ff d0                         callq   *%rax
// 1d1: 4c 8b 04 24                   movq    (%rsp), %r8
// 1d5: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d9: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1de: 48 85 c9                      testq   %rcx, %rcx
// 1e1: 0f 84 96 00 00 00             je      0x27d <_JIT_ENTRY+0x27d>
// 1e7: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 1eb: 48 89 08                      movq    %rcx, (%rax)
// 1ee: 49 8b 40 10                   movq    0x10(%r8), %rax
// 1f2: 48 8b 00                      movq    (%rax), %rax
// 1f5: 84 c0                         testb   %al, %al
// 1f7: 74 1c                         je      0x215 <_JIT_ENTRY+0x215>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_HandlePending
// 203: 4c 89 c7                      movq    %r8, %rdi
// 206: ff d0                         callq   *%rax
// 208: 4c 8b 04 24                   movq    (%rsp), %r8
// 20c: 85 c0                         testl   %eax, %eax
// 20e: 74 05                         je      0x215 <_JIT_ENTRY+0x215>
// 210: 4d 89 ee                      movq    %r13, %r14
// 213: eb 6b                         jmp     0x280 <_JIT_ENTRY+0x280>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_OPARG
// 21f: f7 d0                         notl    %eax
// 221: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 226: 48 98                         cltq
// 228: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 22d: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 232: 48 8b 40 20                   movq    0x20(%rax), %rax
// 236: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 23a: ba 01 00 00 00                movl    $0x1, %edx
// 23f: 48 d3 e2                      shlq    %cl, %rdx
// 242: 48 01 c2                      addq    %rax, %rdx
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_OPERAND
// 24f: 0f b7 c0                      movzwl  %ax, %eax
// 252: 48 c1 e0 04                   shlq    $0x4, %rax
// 256: 48 8b 6c 10 28                movq    0x28(%rax,%rdx), %rbp
// 25b: 48 85 ed                      testq   %rbp, %rbp
// 25e: 74 33                         je      0x293 <_JIT_ENTRY+0x293>
// 260: 8b 45 00                      movl    (%rbp), %eax
// 263: ff c0                         incl    %eax
// 265: 75 66                         jne     0x2cd <_JIT_ENTRY+0x2cd>
// 267: 49 8b 04 24                   movq    (%r12), %rax
// 26b: 48 85 c0                      testq   %rax, %rax
// 26e: 7e 79                         jle     0x2e9 <_JIT_ENTRY+0x2e9>
// 270: 85 c0                         testl   %eax, %eax
// 272: 0f 89 9b 00 00 00             jns     0x313 <_JIT_ENTRY+0x313>
// 278: e9 bf 00 00 00                jmp     0x33c <_JIT_ENTRY+0x33c>
// 27d: 49 89 c6                      movq    %rax, %r14
// 280: 49 29 de                      subq    %rbx, %r14
// 283: 49 83 c6 b8                   addq    $-0x48, %r14
// 287: 49 c1 ee 03                   shrq    $0x3, %r14
// 28b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 28f: 31 c0                         xorl    %eax, %eax
// 291: eb 2b                         jmp     0x2be <_JIT_ENTRY+0x2be>
// 293: 4d 89 ee                      movq    %r13, %r14
// 296: 49 29 de                      subq    %rbx, %r14
// 299: 49 83 c6 b8                   addq    $-0x48, %r14
// 29d: 49 c1 ee 03                   shrq    $0x3, %r14
// 2a1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2a5: 48 8b 03                      movq    (%rbx), %rax
// 2a8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002aa:  R_X86_64_64  _JIT_TARGET
// 2b2: 89 c9                         movl    %ecx, %ecx
// 2b4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2b8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2be: 48 83 c4 18                   addq    $0x18, %rsp
// 2c2: 5b                            popq    %rbx
// 2c3: 41 5c                         popq    %r12
// 2c5: 41 5d                         popq    %r13
// 2c7: 41 5e                         popq    %r14
// 2c9: 41 5f                         popq    %r15
// 2cb: 5d                            popq    %rbp
// 2cc: c3                            retq
// 2cd: 89 45 00                      movl    %eax, (%rbp)
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2da: ff d0                         callq   *%rax
// 2dc: 4c 8b 04 24                   movq    (%rsp), %r8
// 2e0: 49 8b 04 24                   movq    (%r12), %rax
// 2e4: 48 85 c0                      testq   %rax, %rax
// 2e7: 7f 87                         jg      0x270 <_JIT_ENTRY+0x270>
// 2e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002eb:  R_X86_64_64  .rodata.str1.1
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _Py_NegativeRefcount
// 2fd: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 302: 4c 89 e2                      movq    %r12, %rdx
// 305: ff d0                         callq   *%rax
// 307: 4c 8b 04 24                   movq    (%rsp), %r8
// 30b: 49 8b 04 24                   movq    (%r12), %rax
// 30f: 85 c0                         testl   %eax, %eax
// 311: 78 29                         js      0x33c <_JIT_ENTRY+0x33c>
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31d: ff d0                         callq   *%rax
// 31f: 4c 8b 04 24                   movq    (%rsp), %r8
// 323: 49 ff 0c 24                   decq    (%r12)
// 327: 75 13                         jne     0x33c <_JIT_ENTRY+0x33c>
// 329: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032b:  R_X86_64_64  _Py_Dealloc
// 333: 4c 89 e7                      movq    %r12, %rdi
// 336: ff d0                         callq   *%rax
// 338: 4c 8b 04 24                   movq    (%rsp), %r8
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _JIT_OPARG
// 346: 89 c1                         movl    %eax, %ecx
// 348: f7 d1                         notl    %ecx
// 34a: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 350: 48 63 c9                      movslq  %ecx, %rcx
// 353: 49 89 6c ce f8                movq    %rbp, -0x8(%r14,%rcx,8)
// 358: a8 01                         testb   $0x1, %al
// 35a: 74 08                         je      0x364 <_JIT_ENTRY+0x364>
// 35c: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 364: 89 c1                         movl    %eax, %ecx
// 366: 83 e1 01                      andl    $0x1, %ecx
// 369: f7 d0                         notl    %eax
// 36b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 370: 48 98                         cltq
// 372: 48 01 c8                      addq    %rcx, %rax
// 375: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 379: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037b:  R_X86_64_64  _JIT_CONTINUE
// 383: 48 89 df                      movq    %rbx, %rdi
// 386: 4c 89 c2                      movq    %r8, %rdx
// 389: 48 83 c4 18                   addq    $0x18, %rsp
// 38d: 5b                            popq    %rbx
// 38e: 41 5c                         popq    %r12
// 390: 41 5d                         popq    %r13
// 392: 41 5e                         popq    %r14
// 394: 41 5f                         popq    %r15
// 396: 5d                            popq    %rbp
// 397: ff e0                         jmpq    *%rax
// 399: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_MODULE_code_body[922] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x38, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x15, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0x06, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x9f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x05, 0x4d, 0x89, 0xee, 0xeb, 0x6b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0x8b, 0x6c, 0x10, 0x28, 0x48, 0x85, 0xed, 0x74, 0x33, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x9b, 0x00, 0x00, 0x00, 0xe9, 0xbf, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x6c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_MODULE_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_MODULE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_MODULE_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 32 01 00 00             jne     0x23e <_JIT_ENTRY+0x23e>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2e                         je      0x23b <_JIT_ENTRY+0x23b>
// 20d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 35                         je      0x254 <_JIT_ENTRY+0x254>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: 48 89 d7                      movq    %rdx, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 14 24                   movq    (%rsp), %rdx
// 232: 85 c0                         testl   %eax, %eax
// 234: 74 1e                         je      0x254 <_JIT_ENTRY+0x254>
// 236: 4d 89 e6                      movq    %r12, %r14
// 239: eb 03                         jmp     0x23e <_JIT_ENTRY+0x23e>
// 23b: 49 89 c6                      movq    %rax, %r14
// 23e: 49 29 de                      subq    %rbx, %r14
// 241: 49 83 c6 b8                   addq    $-0x48, %r14
// 245: 49 c1 ee 03                   shrq    $0x3, %r14
// 249: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24d: 31 c0                         xorl    %eax, %eax
// 24f: e9 83 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_OPARG
// 25e: f7 d0                         notl    %eax
// 260: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 265: 48 98                         cltq
// 267: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 26c: 49 8b 45 00                   movq    (%r13), %rax
// 270: 48 85 c0                      testq   %rax, %rax
// 273: 7f 26                         jg      0x29b <_JIT_ENTRY+0x29b>
// 275: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000277:  R_X86_64_64  .rodata.str1.1
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_NegativeRefcount
// 289: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 28e: 4c 89 ea                      movq    %r13, %rdx
// 291: ff d0                         callq   *%rax
// 293: 48 8b 14 24                   movq    (%rsp), %rdx
// 297: 49 8b 45 00                   movq    (%r13), %rax
// 29b: 85 c0                         testl   %eax, %eax
// 29d: 78 29                         js      0x2c8 <_JIT_ENTRY+0x2c8>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a9: ff d0                         callq   *%rax
// 2ab: 48 8b 14 24                   movq    (%rsp), %rdx
// 2af: 49 ff 4d 00                   decq    (%r13)
// 2b3: 75 13                         jne     0x2c8 <_JIT_ENTRY+0x2c8>
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _Py_Dealloc
// 2bf: 4c 89 ef                      movq    %r13, %rdi
// 2c2: ff d0                         callq   *%rax
// 2c4: 48 8b 14 24                   movq    (%rsp), %rdx
// 2c8: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000002ca:  R_X86_64_64  _JIT_OPERAND
// 2d2: 41 8b 45 00                   movl    (%r13), %eax
// 2d6: ff c0                         incl    %eax
// 2d8: 74 14                         je      0x2ee <_JIT_ENTRY+0x2ee>
// 2da: 41 89 45 00                   movl    %eax, (%r13)
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2e8: ff d0                         callq   *%rax
// 2ea: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _JIT_OPARG
// 2f8: f7 d0                         notl    %eax
// 2fa: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2ff: 48 98                         cltq
// 301: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _JIT_CONTINUE
// 310: 48 89 df                      movq    %rbx, %rdi
// 313: 4c 89 e6                      movq    %r12, %rsi
// 316: 48 83 c4 18                   addq    $0x18, %rsp
// 31a: 5b                            popq    %rbx
// 31b: 41 5c                         popq    %r12
// 31d: 41 5d                         popq    %r13
// 31f: 41 5e                         popq    %r14
// 321: 41 5f                         popq    %r15
// 323: 5d                            popq    %rbp
// 324: ff e0                         jmpq    *%rax
// 326: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[807] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x83, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 32 01 00 00             jne     0x23e <_JIT_ENTRY+0x23e>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2e                         je      0x23b <_JIT_ENTRY+0x23b>
// 20d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 35                         je      0x254 <_JIT_ENTRY+0x254>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: 48 89 d7                      movq    %rdx, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 14 24                   movq    (%rsp), %rdx
// 232: 85 c0                         testl   %eax, %eax
// 234: 74 1e                         je      0x254 <_JIT_ENTRY+0x254>
// 236: 4d 89 e6                      movq    %r12, %r14
// 239: eb 03                         jmp     0x23e <_JIT_ENTRY+0x23e>
// 23b: 49 89 c6                      movq    %rax, %r14
// 23e: 49 29 de                      subq    %rbx, %r14
// 241: 49 83 c6 b8                   addq    $-0x48, %r14
// 245: 49 c1 ee 03                   shrq    $0x3, %r14
// 249: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24d: 31 c0                         xorl    %eax, %eax
// 24f: e9 83 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_OPARG
// 25e: f7 d0                         notl    %eax
// 260: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 265: 48 98                         cltq
// 267: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 26c: 49 8b 45 00                   movq    (%r13), %rax
// 270: 48 85 c0                      testq   %rax, %rax
// 273: 7f 26                         jg      0x29b <_JIT_ENTRY+0x29b>
// 275: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000277:  R_X86_64_64  .rodata.str1.1
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_NegativeRefcount
// 289: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 28e: 4c 89 ea                      movq    %r13, %rdx
// 291: ff d0                         callq   *%rax
// 293: 48 8b 14 24                   movq    (%rsp), %rdx
// 297: 49 8b 45 00                   movq    (%r13), %rax
// 29b: 85 c0                         testl   %eax, %eax
// 29d: 78 29                         js      0x2c8 <_JIT_ENTRY+0x2c8>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a9: ff d0                         callq   *%rax
// 2ab: 48 8b 14 24                   movq    (%rsp), %rdx
// 2af: 49 ff 4d 00                   decq    (%r13)
// 2b3: 75 13                         jne     0x2c8 <_JIT_ENTRY+0x2c8>
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _Py_Dealloc
// 2bf: 4c 89 ef                      movq    %r13, %rdi
// 2c2: ff d0                         callq   *%rax
// 2c4: 48 8b 14 24                   movq    (%rsp), %rdx
// 2c8: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000002ca:  R_X86_64_64  _JIT_OPERAND
// 2d2: 41 8b 45 00                   movl    (%r13), %eax
// 2d6: ff c0                         incl    %eax
// 2d8: 74 14                         je      0x2ee <_JIT_ENTRY+0x2ee>
// 2da: 41 89 45 00                   movl    %eax, (%r13)
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2e8: ff d0                         callq   *%rax
// 2ea: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _JIT_OPARG
// 2f8: f7 d0                         notl    %eax
// 2fa: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2ff: 48 98                         cltq
// 301: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _JIT_CONTINUE
// 310: 48 89 df                      movq    %rbx, %rdi
// 313: 4c 89 e6                      movq    %r12, %rsi
// 316: 48 83 c4 18                   addq    $0x18, %rsp
// 31a: 5b                            popq    %rbx
// 31b: 41 5c                         popq    %r12
// 31d: 41 5d                         popq    %r13
// 31f: 41 5e                         popq    %r14
// 321: 41 5f                         popq    %r15
// 323: 5d                            popq    %rbp
// 324: ff e0                         jmpq    *%rax
// 326: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[807] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x83, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_ATTR_SLOT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_ATTR_SLOT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 16 02 00 00             jne     0x274 <_JIT_ENTRY+0x274>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 f3 01 00 00             jne     0x274 <_JIT_ENTRY+0x274>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 e4 01 00 00             jne     0x274 <_JIT_ENTRY+0x274>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 7d 01 00 00             jne     0x25e <_JIT_ENTRY+0x25e>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 74 79                         je      0x25b <_JIT_ENTRY+0x25b>
// 1e2: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 1e6: 48 89 08                      movq    %rcx, (%rax)
// 1e9: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 1c                         je      0x210 <_JIT_ENTRY+0x210>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 48 89 d7                      movq    %rdx, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 05                         je      0x210 <_JIT_ENTRY+0x210>
// 20b: 4d 89 ee                      movq    %r13, %r14
// 20e: eb 4e                         jmp     0x25e <_JIT_ENTRY+0x25e>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _JIT_OPARG
// 21a: f7 d0                         notl    %eax
// 21c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 221: 48 98                         cltq
// 223: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _JIT_OPERAND
// 232: 0f b7 c0                      movzwl  %ax, %eax
// 235: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 239: 48 85 ed                      testq   %rbp, %rbp
// 23c: 74 33                         je      0x271 <_JIT_ENTRY+0x271>
// 23e: 8b 45 00                      movl    (%rbp), %eax
// 241: ff c0                         incl    %eax
// 243: 75 66                         jne     0x2ab <_JIT_ENTRY+0x2ab>
// 245: 49 8b 04 24                   movq    (%r12), %rax
// 249: 48 85 c0                      testq   %rax, %rax
// 24c: 7e 79                         jle     0x2c7 <_JIT_ENTRY+0x2c7>
// 24e: 85 c0                         testl   %eax, %eax
// 250: 0f 89 9b 00 00 00             jns     0x2f1 <_JIT_ENTRY+0x2f1>
// 256: e9 bf 00 00 00                jmp     0x31a <_JIT_ENTRY+0x31a>
// 25b: 49 89 c6                      movq    %rax, %r14
// 25e: 49 29 de                      subq    %rbx, %r14
// 261: 49 83 c6 b8                   addq    $-0x48, %r14
// 265: 49 c1 ee 03                   shrq    $0x3, %r14
// 269: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 26d: 31 c0                         xorl    %eax, %eax
// 26f: eb 2b                         jmp     0x29c <_JIT_ENTRY+0x29c>
// 271: 4d 89 ee                      movq    %r13, %r14
// 274: 49 29 de                      subq    %rbx, %r14
// 277: 49 83 c6 b8                   addq    $-0x48, %r14
// 27b: 49 c1 ee 03                   shrq    $0x3, %r14
// 27f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 283: 48 8b 03                      movq    (%rbx), %rax
// 286: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000288:  R_X86_64_64  _JIT_TARGET
// 290: 89 c9                         movl    %ecx, %ecx
// 292: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 296: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 29c: 48 83 c4 18                   addq    $0x18, %rsp
// 2a0: 5b                            popq    %rbx
// 2a1: 41 5c                         popq    %r12
// 2a3: 41 5d                         popq    %r13
// 2a5: 41 5e                         popq    %r14
// 2a7: 41 5f                         popq    %r15
// 2a9: 5d                            popq    %rbp
// 2aa: c3                            retq
// 2ab: 89 45 00                      movl    %eax, (%rbp)
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2b8: ff d0                         callq   *%rax
// 2ba: 48 8b 14 24                   movq    (%rsp), %rdx
// 2be: 49 8b 04 24                   movq    (%r12), %rax
// 2c2: 48 85 c0                      testq   %rax, %rax
// 2c5: 7f 87                         jg      0x24e <_JIT_ENTRY+0x24e>
// 2c7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c9:  R_X86_64_64  .rodata.str1.1
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _Py_NegativeRefcount
// 2db: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 2e0: 4c 89 e2                      movq    %r12, %rdx
// 2e3: ff d0                         callq   *%rax
// 2e5: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e9: 49 8b 04 24                   movq    (%r12), %rax
// 2ed: 85 c0                         testl   %eax, %eax
// 2ef: 78 29                         js      0x31a <_JIT_ENTRY+0x31a>
// 2f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2fb: ff d0                         callq   *%rax
// 2fd: 48 8b 14 24                   movq    (%rsp), %rdx
// 301: 49 ff 0c 24                   decq    (%r12)
// 305: 75 13                         jne     0x31a <_JIT_ENTRY+0x31a>
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _Py_Dealloc
// 311: 4c 89 e7                      movq    %r12, %rdi
// 314: ff d0                         callq   *%rax
// 316: 48 8b 14 24                   movq    (%rsp), %rdx
// 31a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031c:  R_X86_64_64  _JIT_OPARG
// 324: 89 c1                         movl    %eax, %ecx
// 326: f7 d1                         notl    %ecx
// 328: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 32e: 48 63 c9                      movslq  %ecx, %rcx
// 331: 49 89 6c ce f8                movq    %rbp, -0x8(%r14,%rcx,8)
// 336: a8 01                         testb   $0x1, %al
// 338: 74 08                         je      0x342 <_JIT_ENTRY+0x342>
// 33a: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 342: 89 c1                         movl    %eax, %ecx
// 344: 83 e1 01                      andl    $0x1, %ecx
// 347: f7 d0                         notl    %eax
// 349: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 34e: 48 98                         cltq
// 350: 48 01 c8                      addq    %rcx, %rax
// 353: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  _JIT_CONTINUE
// 361: 48 89 df                      movq    %rbx, %rdi
// 364: 48 83 c4 18                   addq    $0x18, %rsp
// 368: 5b                            popq    %rbx
// 369: 41 5c                         popq    %r12
// 36b: 41 5d                         popq    %r13
// 36d: 41 5e                         popq    %r14
// 36f: 41 5f                         popq    %r15
// 371: 5d                            popq    %rbp
// 372: ff e0                         jmpq    *%rax
// 374: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_SLOT_code_body[885] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x16, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf3, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xe4, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x7d, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x79, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x05, 0x4d, 0x89, 0xee, 0xeb, 0x4e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x33, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x9b, 0x00, 0x00, 0x00, 0xe9, 0xbf, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x6c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_SLOT_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_SLOT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_SLOT_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_ATTR_WITH_HINT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 0f 85 a9 02 00 00             jne     0x306 <_JIT_ENTRY+0x306>
// 5d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 62: 29 c1                         subl    %eax, %ecx
// 64: 4c 63 f9                      movslq  %ecx, %r15
// 67: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  PyCFunction_Type
// 75: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7a: 0f 85 86 02 00 00             jne     0x306 <_JIT_ENTRY+0x306>
// 80: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 85: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 89: 0f 85 77 02 00 00             jne     0x306 <_JIT_ENTRY+0x306>
// 8f: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 93: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 96: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 99: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9c: 85 c9                         testl   %ecx, %ecx
// 9e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// a3: 7e 11                         jle     0xb6 <_JIT_ENTRY+0xb6>
// a5: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// a9: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ad: 75 41                         jne     0xf0 <_JIT_ENTRY+0xf0>
// af: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b4: eb 3c                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// b6: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// bb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000bd:  R_X86_64_64  .rodata.str1.1+0x39
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_CheckRecursiveCall
// cf: 48 89 d7                      movq    %rdx, %rdi
// d2: ff d0                         callq   *%rax
// d4: 85 c0                         testl   %eax, %eax
// d6: 0f 85 cb 01 00 00             jne     0x2a7 <_JIT_ENTRY+0x2a7>
// dc: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e1: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// e6: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// ea: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ee: 74 bf                         je      0xaf <_JIT_ENTRY+0xaf>
// f0: 31 ff                         xorl    %edi, %edi
// f2: 48 89 ee                      movq    %rbp, %rsi
// f5: 41 ff d0                      callq   *%r8
// f8: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// fd: 41 ff 40 2c                   incl    0x2c(%r8)
// 101: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 106: 48 8b 45 00                   movq    (%rbp), %rax
// 10a: 48 85 c0                      testq   %rax, %rax
// 10d: 7f 27                         jg      0x136 <_JIT_ENTRY+0x136>
// 10f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000111:  R_X86_64_64  .rodata.str1.1
// 119: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011b:  R_X86_64_64  _Py_NegativeRefcount
// 123: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 128: 48 89 ea                      movq    %rbp, %rdx
// 12b: ff d0                         callq   *%rax
// 12d: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 132: 48 8b 45 00                   movq    (%rbp), %rax
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 2b                         js      0x165 <_JIT_ENTRY+0x165>
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 144: ff d0                         callq   *%rax
// 146: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 14b: 48 ff 4d 00                   decq    (%rbp)
// 14f: 75 14                         jne     0x165 <_JIT_ENTRY+0x165>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_Dealloc
// 15b: 48 89 ef                      movq    %rbp, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 165: 49 8b 04 24                   movq    (%r12), %rax
// 169: 48 85 c0                      testq   %rax, %rax
// 16c: 7f 27                         jg      0x195 <_JIT_ENTRY+0x195>
// 16e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000170:  R_X86_64_64  .rodata.str1.1
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _Py_NegativeRefcount
// 182: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 187: 4c 89 e2                      movq    %r12, %rdx
// 18a: ff d0                         callq   *%rax
// 18c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 191: 49 8b 04 24                   movq    (%r12), %rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 78 2b                         js      0x1c4 <_JIT_ENTRY+0x1c4>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a3: ff d0                         callq   *%rax
// 1a5: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1aa: 49 ff 0c 24                   decq    (%r12)
// 1ae: 75 14                         jne     0x1c4 <_JIT_ENTRY+0x1c4>
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_Dealloc
// 1ba: 4c 89 e7                      movq    %r12, %rdi
// 1bd: ff d0                         callq   *%rax
// 1bf: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1c4: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1c8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1cd: 48 85 c9                      testq   %rcx, %rcx
// 1d0: 0f 84 ce 00 00 00             je      0x2a4 <_JIT_ENTRY+0x2a4>
// 1d6: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 1da: 48 89 08                      movq    %rcx, (%rax)
// 1dd: 49 8b 40 10                   movq    0x10(%r8), %rax
// 1e1: 48 8b 00                      movq    (%rax), %rax
// 1e4: 84 c0                         testb   %al, %al
// 1e6: 74 20                         je      0x208 <_JIT_ENTRY+0x208>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_HandlePending
// 1f2: 4c 89 c7                      movq    %r8, %rdi
// 1f5: ff d0                         callq   *%rax
// 1f7: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1fc: 85 c0                         testl   %eax, %eax
// 1fe: 74 08                         je      0x208 <_JIT_ENTRY+0x208>
// 200: 4d 89 ee                      movq    %r13, %r14
// 203: e9 9f 00 00 00                jmp     0x2a7 <_JIT_ENTRY+0x2a7>
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _JIT_OPARG
// 212: f7 d0                         notl    %eax
// 214: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 219: 48 98                         cltq
// 21b: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 220: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 225: 48 8b 40 20                   movq    0x20(%rax), %rax
// 229: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022b:  R_X86_64_64  _JIT_OPERAND
// 233: 0f b7 c9                      movzwl  %cx, %ecx
// 236: 48 39 48 18                   cmpq    %rcx, 0x18(%rax)
// 23a: 0f 86 c3 00 00 00             jbe     0x303 <_JIT_ENTRY+0x303>
// 240: 48 8b 0b                      movq    (%rbx), %rcx
// 243: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// 247: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000249:  R_X86_64_64  _JIT_OPARG
// 251: 81 e6 fe ff 00 00             andl    $0xfffe, %esi           # imm = 0xFFFE
// 257: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 25b: bf 01 00 00 00                movl    $0x1, %edi
// 260: 48 d3 e7                      shlq    %cl, %rdi
// 263: 48 8b 4c b2 18                movq    0x18(%rdx,%rsi,4), %rcx
// 268: 80 78 0a 00                   cmpb    $0x0, 0xa(%rax)
// 26c: 48 8d 44 38 20                leaq    0x20(%rax,%rdi), %rax
// 271: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000273:  R_X86_64_64  _JIT_OPERAND
// 27b: 0f b7 d2                      movzwl  %dx, %edx
// 27e: 74 3a                         je      0x2ba <_JIT_ENTRY+0x2ba>
// 280: 48 c1 e2 04                   shlq    $0x4, %rdx
// 284: 48 39 0c 10                   cmpq    %rcx, (%rax,%rdx)
// 288: 75 79                         jne     0x303 <_JIT_ENTRY+0x303>
// 28a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028c:  R_X86_64_64  _JIT_OPERAND
// 294: 0f b7 c9                      movzwl  %cx, %ecx
// 297: 48 c1 e1 04                   shlq    $0x4, %rcx
// 29b: 48 01 c8                      addq    %rcx, %rax
// 29e: 48 83 c0 08                   addq    $0x8, %rax
// 2a2: eb 3a                         jmp     0x2de <_JIT_ENTRY+0x2de>
// 2a4: 49 89 c6                      movq    %rax, %r14
// 2a7: 49 29 de                      subq    %rbx, %r14
// 2aa: 49 83 c6 b8                   addq    $-0x48, %r14
// 2ae: 49 c1 ee 03                   shrq    $0x3, %r14
// 2b2: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2b6: 31 c0                         xorl    %eax, %eax
// 2b8: eb 74                         jmp     0x32e <_JIT_ENTRY+0x32e>
// 2ba: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 2be: 48 39 4c d0 08                cmpq    %rcx, 0x8(%rax,%rdx,8)
// 2c3: 75 3e                         jne     0x303 <_JIT_ENTRY+0x303>
// 2c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c7:  R_X86_64_64  _JIT_OPERAND
// 2cf: 0f b7 c9                      movzwl  %cx, %ecx
// 2d2: 48 8d 0c 49                   leaq    (%rcx,%rcx,2), %rcx
// 2d6: 48 8d 04 c8                   leaq    (%rax,%rcx,8), %rax
// 2da: 48 83 c0 10                   addq    $0x10, %rax
// 2de: 4c 8b 38                      movq    (%rax), %r15
// 2e1: 4d 85 ff                      testq   %r15, %r15
// 2e4: 74 1d                         je      0x303 <_JIT_ENTRY+0x303>
// 2e6: 41 8b 07                      movl    (%r15), %eax
// 2e9: ff c0                         incl    %eax
// 2eb: 75 50                         jne     0x33d <_JIT_ENTRY+0x33d>
// 2ed: 49 8b 04 24                   movq    (%r12), %rax
// 2f1: 48 85 c0                      testq   %rax, %rax
// 2f4: 7e 64                         jle     0x35a <_JIT_ENTRY+0x35a>
// 2f6: 85 c0                         testl   %eax, %eax
// 2f8: 0f 89 87 00 00 00             jns     0x385 <_JIT_ENTRY+0x385>
// 2fe: e9 ad 00 00 00                jmp     0x3b0 <_JIT_ENTRY+0x3b0>
// 303: 4d 89 ee                      movq    %r13, %r14
// 306: 49 29 de                      subq    %rbx, %r14
// 309: 49 83 c6 b8                   addq    $-0x48, %r14
// 30d: 49 c1 ee 03                   shrq    $0x3, %r14
// 311: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 315: 48 8b 03                      movq    (%rbx), %rax
// 318: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000031a:  R_X86_64_64  _JIT_TARGET
// 322: 89 c9                         movl    %ecx, %ecx
// 324: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 328: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 32e: 48 83 c4 18                   addq    $0x18, %rsp
// 332: 5b                            popq    %rbx
// 333: 41 5c                         popq    %r12
// 335: 41 5d                         popq    %r13
// 337: 41 5e                         popq    %r14
// 339: 41 5f                         popq    %r15
// 33b: 5d                            popq    %rbp
// 33c: c3                            retq
// 33d: 41 89 07                      movl    %eax, (%r15)
// 340: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000342:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 34a: ff d0                         callq   *%rax
// 34c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 351: 49 8b 04 24                   movq    (%r12), %rax
// 355: 48 85 c0                      testq   %rax, %rax
// 358: 7f 9c                         jg      0x2f6 <_JIT_ENTRY+0x2f6>
// 35a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035c:  R_X86_64_64  .rodata.str1.1
// 364: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000366:  R_X86_64_64  _Py_NegativeRefcount
// 36e: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 373: 4c 89 e2                      movq    %r12, %rdx
// 376: ff d0                         callq   *%rax
// 378: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 37d: 49 8b 04 24                   movq    (%r12), %rax
// 381: 85 c0                         testl   %eax, %eax
// 383: 78 2b                         js      0x3b0 <_JIT_ENTRY+0x3b0>
// 385: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000387:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38f: ff d0                         callq   *%rax
// 391: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 396: 49 ff 0c 24                   decq    (%r12)
// 39a: 75 14                         jne     0x3b0 <_JIT_ENTRY+0x3b0>
// 39c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039e:  R_X86_64_64  _Py_Dealloc
// 3a6: 4c 89 e7                      movq    %r12, %rdi
// 3a9: ff d0                         callq   *%rax
// 3ab: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 3b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b2:  R_X86_64_64  _JIT_OPARG
// 3ba: 89 c1                         movl    %eax, %ecx
// 3bc: f7 d1                         notl    %ecx
// 3be: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 3c4: 48 63 c9                      movslq  %ecx, %rcx
// 3c7: 4d 89 7c ce f8                movq    %r15, -0x8(%r14,%rcx,8)
// 3cc: a8 01                         testb   $0x1, %al
// 3ce: 74 08                         je      0x3d8 <_JIT_ENTRY+0x3d8>
// 3d0: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 3d8: 89 c1                         movl    %eax, %ecx
// 3da: 83 e1 01                      andl    $0x1, %ecx
// 3dd: f7 d0                         notl    %eax
// 3df: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3e4: 48 98                         cltq
// 3e6: 48 01 c8                      addq    %rcx, %rax
// 3e9: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 3ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ef:  R_X86_64_64  _JIT_CONTINUE
// 3f7: 48 89 df                      movq    %rbx, %rdi
// 3fa: 4c 89 c2                      movq    %r8, %rdx
// 3fd: 48 83 c4 18                   addq    $0x18, %rsp
// 401: 5b                            popq    %rbx
// 402: 41 5c                         popq    %r12
// 404: 41 5d                         popq    %r13
// 406: 41 5e                         popq    %r14
// 408: 41 5f                         popq    %r15
// 40a: 5d                            popq    %rbp
// 40b: ff e0                         jmpq    *%rax
// 40d: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_WITH_HINT_code_body[1038] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xa9, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x86, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0x77, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x11, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x41, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x3c, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xcb, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xbf, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xee, 0xe9, 0x9f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x18, 0x0f, 0x86, 0xc3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x51, 0x20, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe6, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x48, 0x09, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe7, 0x48, 0x8b, 0x4c, 0xb2, 0x18, 0x80, 0x78, 0x0a, 0x00, 0x48, 0x8d, 0x44, 0x38, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x3a, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x0c, 0x10, 0x75, 0x79, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0x01, 0xc8, 0x48, 0x83, 0xc0, 0x08, 0xeb, 0x3a, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x74, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x4c, 0xd0, 0x08, 0x75, 0x3e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x0c, 0x49, 0x48, 0x8d, 0x04, 0xc8, 0x48, 0x83, 0xc0, 0x10, 0x4c, 0x8b, 0x38, 0x4d, 0x85, 0xff, 0x74, 0x1d, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x64, 0x85, 0xc0, 0x0f, 0x89, 0x87, 0x00, 0x00, 0x00, 0xe9, 0xad, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x9c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x7c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_WITH_HINT_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x342, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x387, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3ef, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_ATTR_WITH_HINT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_BUILD_CLASS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_BUILD_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5d                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3e                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 33                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 54                         jle     0xee <_JIT_ENTRY+0xee>
// 9a: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9e: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// a3: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a7: 0f 85 88 00 00 00             jne     0x135 <_JIT_ENTRY+0x135>
// ad: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b2: e9 80 00 00 00                jmp     0x137 <_JIT_ENTRY+0x137>
// b7: 49 29 df                      subq    %rbx, %r15
// ba: 49 83 c7 b8                   addq    $-0x48, %r15
// be: 49 c1 ef 03                   shrq    $0x3, %r15
// c2: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c6: 48 8b 03                      movq    (%rbx), %rax
// c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cb:  R_X86_64_64  _JIT_TARGET
// d3: 89 c9                         movl    %ecx, %ecx
// d5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// df: 48 83 c4 28                   addq    $0x28, %rsp
// e3: 5b                            popq    %rbx
// e4: 41 5c                         popq    %r12
// e6: 41 5d                         popq    %r13
// e8: 41 5e                         popq    %r14
// ea: 41 5f                         popq    %r15
// ec: 5d                            popq    %rbp
// ed: c3                            retq
// ee: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// f3: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f5:  R_X86_64_64  .rodata.str1.1+0x53
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_CheckRecursiveCall
// 107: 48 89 d7                      movq    %rdx, %rdi
// 10a: ff d0                         callq   *%rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 74 08                         je      0x118 <_JIT_ENTRY+0x118>
// 110: 4d 89 fc                      movq    %r15, %r12
// 113: e9 ac 01 00 00                jmp     0x2c4 <_JIT_ENTRY+0x2c4>
// 118: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11d: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 122: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 126: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 12b: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12f: 0f 84 78 ff ff ff             je      0xad <_JIT_ENTRY+0xad>
// 135: 31 ff                         xorl    %edi, %edi
// 137: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 13c: 4c 89 f6                      movq    %r14, %rsi
// 13f: 41 ff d0                      callq   *%r8
// 142: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 147: ff 47 2c                      incl    0x2c(%rdi)
// 14a: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 14f: 49 8b 06                      movq    (%r14), %rax
// 152: 48 85 c0                      testq   %rax, %rax
// 155: 7f 2b                         jg      0x182 <_JIT_ENTRY+0x182>
// 157: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000159:  R_X86_64_64  .rodata.str1.1
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_NegativeRefcount
// 16b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 170: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 175: 4c 89 f2                      movq    %r14, %rdx
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 17f: 49 8b 06                      movq    (%r14), %rax
// 182: 85 c0                         testl   %eax, %eax
// 184: 78 31                         js      0x1b7 <_JIT_ENTRY+0x1b7>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 190: ff d0                         callq   *%rax
// 192: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 197: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 19c: 48 ff 08                      decq    (%rax)
// 19f: 75 16                         jne     0x1b7 <_JIT_ENTRY+0x1b7>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_Dealloc
// 1ab: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1b0: ff d0                         callq   *%rax
// 1b2: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1b7: 49 8b 04 24                   movq    (%r12), %rax
// 1bb: 48 85 c0                      testq   %rax, %rax
// 1be: 7f 27                         jg      0x1e7 <_JIT_ENTRY+0x1e7>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _Py_NegativeRefcount
// 1d4: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d9: 4c 89 e2                      movq    %r12, %rdx
// 1dc: ff d0                         callq   *%rax
// 1de: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e3: 49 8b 04 24                   movq    (%r12), %rax
// 1e7: 85 c0                         testl   %eax, %eax
// 1e9: 78 2b                         js      0x216 <_JIT_ENTRY+0x216>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f5: ff d0                         callq   *%rax
// 1f7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1fc: 49 ff 0c 24                   decq    (%r12)
// 200: 75 14                         jne     0x216 <_JIT_ENTRY+0x216>
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_Dealloc
// 20c: 4c 89 e7                      movq    %r12, %rdi
// 20f: ff d0                         callq   *%rax
// 211: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 216: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 21a: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 21f: 48 85 c9                      testq   %rcx, %rcx
// 222: 0f 84 99 00 00 00             je      0x2c1 <_JIT_ENTRY+0x2c1>
// 228: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 22c: 48 89 08                      movq    %rcx, (%rax)
// 22f: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 233: 48 8b 00                      movq    (%rax), %rax
// 236: 84 c0                         testb   %al, %al
// 238: 74 10                         je      0x24a <_JIT_ENTRY+0x24a>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_HandlePending
// 244: ff d0                         callq   *%rax
// 246: 85 c0                         testl   %eax, %eax
// 248: 75 7a                         jne     0x2c4 <_JIT_ENTRY+0x2c4>
// 24a: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  PyMapping_GetOptionalItem
// 258: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000025a:  R_X86_64_64  _PyRuntime
// 262: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// 269: 48 8d 54 24 20                leaq    0x20(%rsp), %rdx
// 26e: ff d0                         callq   *%rax
// 270: 85 c0                         testl   %eax, %eax
// 272: 78 50                         js      0x2c4 <_JIT_ENTRY+0x2c4>
// 274: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 279: 48 85 c0                      testq   %rax, %rax
// 27c: 74 5c                         je      0x2da <_JIT_ENTRY+0x2da>
// 27e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000280:  R_X86_64_64  _JIT_OPARG
// 288: f7 d1                         notl    %ecx
// 28a: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 290: 48 63 c9                      movslq  %ecx, %rcx
// 293: 49 89 04 cf                   movq    %rax, (%r15,%rcx,8)
// 297: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 29b: 48 83 c6 08                   addq    $0x8, %rsi
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _JIT_CONTINUE
// 2a9: 48 89 df                      movq    %rbx, %rdi
// 2ac: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2b1: 48 83 c4 28                   addq    $0x28, %rsp
// 2b5: 5b                            popq    %rbx
// 2b6: 41 5c                         popq    %r12
// 2b8: 41 5d                         popq    %r13
// 2ba: 41 5e                         popq    %r14
// 2bc: 41 5f                         popq    %r15
// 2be: 5d                            popq    %rbp
// 2bf: ff e0                         jmpq    *%rax
// 2c1: 49 89 c4                      movq    %rax, %r12
// 2c4: 49 29 dc                      subq    %rbx, %r12
// 2c7: 49 83 c4 b8                   addq    $-0x48, %r12
// 2cb: 49 c1 ec 03                   shrq    $0x3, %r12
// 2cf: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2d3: 31 c0                         xorl    %eax, %eax
// 2d5: e9 05 fe ff ff                jmp     0xdf <_JIT_ENTRY+0xdf>
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  PyExc_NameError
// 2e4: 48 8b 30                      movq    (%rax), %rsi
// 2e7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002e9:  R_X86_64_64  .rodata.str1.1+0x39
// 2f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f3:  R_X86_64_64  _PyErr_SetString
// 2fb: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 300: ff d0                         callq   *%rax
// 302: eb c0                         jmp     0x2c4 <_JIT_ENTRY+0x2c4>
// 304: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_BUILD_CLASS_code_body[773] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5d, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3e, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x33, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfc, 0xe9, 0xac, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x18, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0xff, 0x08, 0x75, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x7a, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x20, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x50, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x74, 0x5c, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xcf, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x05, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0xeb, 0xc0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_BUILD_CLASS_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x53},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__build_class__ not found\x00 while calling a Python object\x00'
// 72: 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_BUILD_CLASS_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_BUILD_CLASS_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_CONST
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_CONST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2f 01 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2b                         je      0x238 <_JIT_ENTRY+0x238>
// 20d: 48 89 08                      movq    %rcx, (%rax)
// 210: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: 48 89 d7                      movq    %rdx, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 14 24                   movq    (%rsp), %rdx
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 1f                         je      0x251 <_JIT_ENTRY+0x251>
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: eb 03                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 238: 49 89 c6                      movq    %rax, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: e9 86 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 251: 48 8b 03                      movq    (%rbx), %rax
// 254: 48 8b 40 18                   movq    0x18(%rax), %rax
// 258: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025a:  R_X86_64_64  _JIT_OPARG
// 262: 0f b7 c9                      movzwl  %cx, %ecx
// 265: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 26a: 41 8b 04 24                   movl    (%r12), %eax
// 26e: ff c0                         incl    %eax
// 270: 74 14                         je      0x286 <_JIT_ENTRY+0x286>
// 272: 41 89 04 24                   movl    %eax, (%r12)
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 280: ff d0                         callq   *%rax
// 282: 48 8b 14 24                   movq    (%rsp), %rdx
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _JIT_OPARG
// 290: f7 d0                         notl    %eax
// 292: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 297: 48 98                         cltq
// 299: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 29d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2a1: 48 83 c6 08                   addq    $0x8, %rsi
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _JIT_CONTINUE
// 2af: 48 89 df                      movq    %rbx, %rdi
// 2b2: 48 83 c4 18                   addq    $0x18, %rsp
// 2b6: 5b                            popq    %rbx
// 2b7: 41 5c                         popq    %r12
// 2b9: 41 5d                         popq    %r13
// 2bb: 41 5e                         popq    %r14
// 2bd: 41 5f                         popq    %r15
// 2bf: 5d                            popq    %rbp
// 2c0: ff e0                         jmpq    *%rax
// 2c2: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_CONST_code_body[707] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_CONST_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_CONST_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_CONST_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_DEREF
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_DEREF.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 fe                      movq    %r15, %r14
// 112: e9 d3 01 00 00                jmp     0x2ea <_JIT_ENTRY+0x2ea>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13b: 4c 89 f6                      movq    %r14, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 48 8b 0c 24                   movq    (%rsp), %rcx
// 145: ff 41 2c                      incl    0x2c(%rcx)
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 49 8b 06                      movq    (%r14), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 2a                         jg      0x17f <_JIT_ENTRY+0x17f>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16e: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 173: 4c 89 f2                      movq    %r14, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 0c 24                   movq    (%rsp), %rcx
// 17c: 49 8b 06                      movq    (%r14), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 2f                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 ff 08                      decq    (%rax)
// 19b: 75 15                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 26                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 29                         js      0x20e <_JIT_ENTRY+0x20e>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 13                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 20e: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 212: 48 83 7c 24 10 00             cmpq    $0x0, 0x10(%rsp)
// 218: 0f 84 a8 00 00 00             je      0x2c6 <_JIT_ENTRY+0x2c6>
// 21e: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 222: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 227: 48 89 10                      movq    %rdx, (%rax)
// 22a: 48 8b 41 10                   movq    0x10(%rcx), %rax
// 22e: 48 8b 00                      movq    (%rax), %rax
// 231: 84 c0                         testb   %al, %al
// 233: 74 1b                         je      0x250 <_JIT_ENTRY+0x250>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_HandlePending
// 23f: 48 89 cf                      movq    %rcx, %rdi
// 242: ff d0                         callq   *%rax
// 244: 48 8b 0c 24                   movq    (%rsp), %rcx
// 248: 85 c0                         testl   %eax, %eax
// 24a: 0f 85 9a 00 00 00             jne     0x2ea <_JIT_ENTRY+0x2ea>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _JIT_OPARG
// 25a: 0f b7 c0                      movzwl  %ax, %eax
// 25d: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 262: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 266: 4d 85 e4                      testq   %r12, %r12
// 269: 74 60                         je      0x2cb <_JIT_ENTRY+0x2cb>
// 26b: 41 8b 04 24                   movl    (%r12), %eax
// 26f: ff c0                         incl    %eax
// 271: 74 14                         je      0x287 <_JIT_ENTRY+0x287>
// 273: 41 89 04 24                   movl    %eax, (%r12)
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 281: ff d0                         callq   *%rax
// 283: 48 8b 0c 24                   movq    (%rsp), %rcx
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_OPARG
// 291: f7 d0                         notl    %eax
// 293: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 298: 48 98                         cltq
// 29a: 4d 89 24 c7                   movq    %r12, (%r15,%rax,8)
// 29e: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 2a2: 48 83 c6 08                   addq    $0x8, %rsi
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _JIT_CONTINUE
// 2b0: 48 89 df                      movq    %rbx, %rdi
// 2b3: 48 89 ca                      movq    %rcx, %rdx
// 2b6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ba: 5b                            popq    %rbx
// 2bb: 41 5c                         popq    %r12
// 2bd: 41 5d                         popq    %r13
// 2bf: 41 5e                         popq    %r14
// 2c1: 41 5f                         popq    %r15
// 2c3: 5d                            popq    %rbp
// 2c4: ff e0                         jmpq    *%rax
// 2c6: 49 89 c6                      movq    %rax, %r14
// 2c9: eb 1f                         jmp     0x2ea <_JIT_ENTRY+0x2ea>
// 2cb: 48 8b 33                      movq    (%rbx), %rsi
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _JIT_OPARG
// 2d8: 0f b7 d0                      movzwl  %ax, %edx
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _PyEval_FormatExcUnbound
// 2e5: 48 89 cf                      movq    %rcx, %rdi
// 2e8: ff d0                         callq   *%rax
// 2ea: 49 29 de                      subq    %rbx, %r14
// 2ed: 49 83 c6 b8                   addq    $-0x48, %r14
// 2f1: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2f9: 31 c0                         xorl    %eax, %eax
// 2fb: e9 de fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 300: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_DEREF_code_body[769] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfe, 0xe9, 0xd3, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0xff, 0x41, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x41, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0x9a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x60, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xca, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x1f, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xde, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_LOAD_DEREF_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_DEREF_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_DEREF_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_FAST
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2f 01 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2b                         je      0x238 <_JIT_ENTRY+0x238>
// 20d: 48 89 08                      movq    %rcx, (%rax)
// 210: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: 48 89 d7                      movq    %rdx, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 14 24                   movq    (%rsp), %rdx
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 1f                         je      0x251 <_JIT_ENTRY+0x251>
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: eb 03                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 238: 49 89 c6                      movq    %rax, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: e9 86 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_OPARG
// 25b: 0f b7 c0                      movzwl  %ax, %eax
// 25e: 4c 8b 64 c3 48                movq    0x48(%rbx,%rax,8), %r12
// 263: 41 8b 04 24                   movl    (%r12), %eax
// 267: ff c0                         incl    %eax
// 269: 74 14                         je      0x27f <_JIT_ENTRY+0x27f>
// 26b: 41 89 04 24                   movl    %eax, (%r12)
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 279: ff d0                         callq   *%rax
// 27b: 48 8b 14 24                   movq    (%rsp), %rdx
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _JIT_OPARG
// 289: f7 d0                         notl    %eax
// 28b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 290: 48 98                         cltq
// 292: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 296: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 29a: 48 83 c6 08                   addq    $0x8, %rsi
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _JIT_CONTINUE
// 2a8: 48 89 df                      movq    %rbx, %rdi
// 2ab: 48 83 c4 18                   addq    $0x18, %rsp
// 2af: 5b                            popq    %rbx
// 2b0: 41 5c                         popq    %r12
// 2b2: 41 5d                         popq    %r13
// 2b4: 41 5e                         popq    %r14
// 2b6: 41 5f                         popq    %r15
// 2b8: 5d                            popq    %rbp
// 2b9: ff e0                         jmpq    *%rax
// 2bb: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_FAST_code_body[700] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x64, 0xc3, 0x48, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_FAST_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_FAST_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_FAST_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_FAST_AND_CLEAR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 30 01 00 00             jne     0x23c <_JIT_ENTRY+0x23c>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 4c 8b 04 24                   movq    (%rsp), %r8
// 136: 41 ff 40 2c                   incl    0x2c(%r8)
// 13a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13f: 49 8b 07                      movq    (%r15), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 7f 2a                         jg      0x171 <_JIT_ENTRY+0x171>
// 147: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 160: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 165: 4c 89 fa                      movq    %r15, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 4c 8b 04 24                   movq    (%rsp), %r8
// 16e: 49 8b 07                      movq    (%r15), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 2f                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 4c 8b 04 24                   movq    (%rsp), %r8
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 4c 8b 04 24                   movq    (%rsp), %r8
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 29                         js      0x200 <_JIT_ENTRY+0x200>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 4c 8b 04 24                   movq    (%rsp), %r8
// 1e7: 49 ff 0c 24                   decq    (%r12)
// 1eb: 75 13                         jne     0x200 <_JIT_ENTRY+0x200>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_Dealloc
// 1f7: 4c 89 e7                      movq    %r12, %rdi
// 1fa: ff d0                         callq   *%rax
// 1fc: 4c 8b 04 24                   movq    (%rsp), %r8
// 200: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 204: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 209: 48 85 c9                      testq   %rcx, %rcx
// 20c: 74 2b                         je      0x239 <_JIT_ENTRY+0x239>
// 20e: 48 89 08                      movq    %rcx, (%rax)
// 211: 49 8b 40 10                   movq    0x10(%r8), %rax
// 215: 48 8b 00                      movq    (%rax), %rax
// 218: 84 c0                         testb   %al, %al
// 21a: 74 36                         je      0x252 <_JIT_ENTRY+0x252>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_HandlePending
// 226: 4c 89 c7                      movq    %r8, %rdi
// 229: ff d0                         callq   *%rax
// 22b: 4c 8b 04 24                   movq    (%rsp), %r8
// 22f: 85 c0                         testl   %eax, %eax
// 231: 74 1f                         je      0x252 <_JIT_ENTRY+0x252>
// 233: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 237: eb 03                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 239: 49 89 c6                      movq    %rax, %r14
// 23c: 49 29 de                      subq    %rbx, %r14
// 23f: 49 83 c6 b8                   addq    $-0x48, %r14
// 243: 49 c1 ee 03                   shrq    $0x3, %r14
// 247: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24b: 31 c0                         xorl    %eax, %eax
// 24d: e9 85 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _JIT_OPARG
// 25c: 0f b7 c8                      movzwl  %ax, %ecx
// 25f: 48 8b 54 cb 48                movq    0x48(%rbx,%rcx,8), %rdx
// 264: 48 c7 44 cb 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rcx,8)
// 26d: f7 d0                         notl    %eax
// 26f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 274: 48 98                         cltq
// 276: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 27a: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 27e: 48 83 c6 08                   addq    $0x8, %rsi
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_CONTINUE
// 28c: 48 89 df                      movq    %rbx, %rdi
// 28f: 4c 89 c2                      movq    %r8, %rdx
// 292: 48 83 c4 18                   addq    $0x18, %rsp
// 296: 5b                            popq    %rbx
// 297: 41 5c                         popq    %r12
// 299: 41 5d                         popq    %r13
// 29b: 41 5e                         popq    %r14
// 29d: 41 5f                         popq    %r15
// 29f: 5d                            popq    %rbp
// 2a0: ff e0                         jmpq    *%rax
// 2a2: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_FAST_AND_CLEAR_code_body[675] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x30, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x85, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8b, 0x54, 0xcb, 0x48, 0x48, 0xc7, 0x44, 0xcb, 0x48, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_FAST_AND_CLEAR_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_FAST_AND_CLEAR_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_FAST_CHECK
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_FAST_CHECK.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 fc                      movq    %r15, %r12
// 112: e9 fa 01 00 00                jmp     0x311 <_JIT_ENTRY+0x311>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13b: 4c 89 f6                      movq    %r14, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 48 8b 14 24                   movq    (%rsp), %rdx
// 145: ff 42 2c                      incl    0x2c(%rdx)
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 49 8b 06                      movq    (%r14), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 2a                         jg      0x17f <_JIT_ENTRY+0x17f>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16e: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 173: 4c 89 f2                      movq    %r14, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 14 24                   movq    (%rsp), %rdx
// 17c: 49 8b 06                      movq    (%r14), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 2f                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 14 24                   movq    (%rsp), %rdx
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 ff 08                      decq    (%rax)
// 19b: 75 15                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 26                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 14 24                   movq    (%rsp), %rdx
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 29                         js      0x20e <_JIT_ENTRY+0x20e>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 14 24                   movq    (%rsp), %rdx
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 13                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 14 24                   movq    (%rsp), %rdx
// 20e: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 212: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 217: 48 85 c9                      testq   %rcx, %rcx
// 21a: 0f 84 9c 00 00 00             je      0x2bc <_JIT_ENTRY+0x2bc>
// 220: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 224: 48 89 08                      movq    %rcx, (%rax)
// 227: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 22b: 48 8b 00                      movq    (%rax), %rax
// 22e: 84 c0                         testb   %al, %al
// 230: 74 1b                         je      0x24d <_JIT_ENTRY+0x24d>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_HandlePending
// 23c: 48 89 d7                      movq    %rdx, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 48 8b 14 24                   movq    (%rsp), %rdx
// 245: 85 c0                         testl   %eax, %eax
// 247: 0f 85 c4 00 00 00             jne     0x311 <_JIT_ENTRY+0x311>
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _JIT_OPARG
// 257: 0f b7 c0                      movzwl  %ax, %eax
// 25a: 4c 8b 6c c3 48                movq    0x48(%rbx,%rax,8), %r13
// 25f: 4d 85 ed                      testq   %r13, %r13
// 262: 74 5d                         je      0x2c1 <_JIT_ENTRY+0x2c1>
// 264: 41 8b 45 00                   movl    (%r13), %eax
// 268: ff c0                         incl    %eax
// 26a: 74 14                         je      0x280 <_JIT_ENTRY+0x280>
// 26c: 41 89 45 00                   movl    %eax, (%r13)
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 27a: ff d0                         callq   *%rax
// 27c: 48 8b 14 24                   movq    (%rsp), %rdx
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_OPARG
// 28a: f7 d0                         notl    %eax
// 28c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 291: 48 98                         cltq
// 293: 4d 89 2c c7                   movq    %r13, (%r15,%rax,8)
// 297: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 29b: 48 83 c6 08                   addq    $0x8, %rsi
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _JIT_CONTINUE
// 2a9: 48 89 df                      movq    %rbx, %rdi
// 2ac: 48 83 c4 18                   addq    $0x18, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: ff e0                         jmpq    *%rax
// 2bc: 49 89 c4                      movq    %rax, %r12
// 2bf: eb 50                         jmp     0x311 <_JIT_ENTRY+0x311>
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  PyExc_UnboundLocalError
// 2cb: 4c 8b 38                      movq    (%rax), %r15
// 2ce: 48 8b 03                      movq    (%rbx), %rax
// 2d1: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _JIT_OPARG
// 2df: 0f b7 f0                      movzwl  %ax, %esi
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  PyTuple_GetItem
// 2ec: 49 89 d6                      movq    %rdx, %r14
// 2ef: ff d0                         callq   *%rax
// 2f1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002f3:  R_X86_64_64  .rodata.str1.1+0x58
// 2fb: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002fd:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 305: 4c 89 f7                      movq    %r14, %rdi
// 308: 4c 89 fe                      movq    %r15, %rsi
// 30b: 48 89 c1                      movq    %rax, %rcx
// 30e: 41 ff d0                      callq   *%r8
// 311: 49 29 dc                      subq    %rbx, %r12
// 314: 49 83 c4 b8                   addq    $-0x48, %r12
// 318: 49 c1 ec 03                   shrq    $0x3, %r12
// 31c: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 320: 31 c0                         xorl    %eax, %eax
// 322: e9 b7 fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 327: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_FAST_CHECK_code_body[808] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfc, 0xe9, 0xfa, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0xc4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x6c, 0xc3, 0x48, 0x4d, 0x85, 0xed, 0x74, 0x5d, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc4, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x38, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xb7, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_LOAD_FAST_CHECK_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x58},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00cannot access local variable '%s' where it is not associated with a value\x00"
// a2: 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_FAST_CHECK_data_body[169] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_FAST_CHECK_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_DEREF.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5d                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3e                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 33                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 54                         jle     0xee <_JIT_ENTRY+0xee>
// 9a: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9e: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// a3: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a7: 0f 85 88 00 00 00             jne     0x135 <_JIT_ENTRY+0x135>
// ad: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b2: e9 80 00 00 00                jmp     0x137 <_JIT_ENTRY+0x137>
// b7: 49 29 df                      subq    %rbx, %r15
// ba: 49 83 c7 b8                   addq    $-0x48, %r15
// be: 49 c1 ef 03                   shrq    $0x3, %r15
// c2: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c6: 48 8b 03                      movq    (%rbx), %rax
// c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cb:  R_X86_64_64  _JIT_TARGET
// d3: 89 c9                         movl    %ecx, %ecx
// d5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// df: 48 83 c4 28                   addq    $0x28, %rsp
// e3: 5b                            popq    %rbx
// e4: 41 5c                         popq    %r12
// e6: 41 5d                         popq    %r13
// e8: 41 5e                         popq    %r14
// ea: 41 5f                         popq    %r15
// ec: 5d                            popq    %rbp
// ed: c3                            retq
// ee: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// f3: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f5:  R_X86_64_64  .rodata.str1.1+0x39
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_CheckRecursiveCall
// 107: 48 89 d7                      movq    %rdx, %rdi
// 10a: ff d0                         callq   *%rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 74 08                         je      0x118 <_JIT_ENTRY+0x118>
// 110: 4d 89 fc                      movq    %r15, %r12
// 113: e9 2e 02 00 00                jmp     0x346 <_JIT_ENTRY+0x346>
// 118: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11d: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 122: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 126: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 12b: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12f: 0f 84 78 ff ff ff             je      0xad <_JIT_ENTRY+0xad>
// 135: 31 ff                         xorl    %edi, %edi
// 137: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 13c: 4c 89 f6                      movq    %r14, %rsi
// 13f: 41 ff d0                      callq   *%r8
// 142: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 147: ff 47 2c                      incl    0x2c(%rdi)
// 14a: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 14f: 49 8b 06                      movq    (%r14), %rax
// 152: 48 85 c0                      testq   %rax, %rax
// 155: 7f 2b                         jg      0x182 <_JIT_ENTRY+0x182>
// 157: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000159:  R_X86_64_64  .rodata.str1.1
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_NegativeRefcount
// 16b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 170: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 175: 4c 89 f2                      movq    %r14, %rdx
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 17f: 49 8b 06                      movq    (%r14), %rax
// 182: 85 c0                         testl   %eax, %eax
// 184: 78 31                         js      0x1b7 <_JIT_ENTRY+0x1b7>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 190: ff d0                         callq   *%rax
// 192: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 197: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 19c: 48 ff 08                      decq    (%rax)
// 19f: 75 16                         jne     0x1b7 <_JIT_ENTRY+0x1b7>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_Dealloc
// 1ab: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1b0: ff d0                         callq   *%rax
// 1b2: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1b7: 49 8b 04 24                   movq    (%r12), %rax
// 1bb: 48 85 c0                      testq   %rax, %rax
// 1be: 7f 27                         jg      0x1e7 <_JIT_ENTRY+0x1e7>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _Py_NegativeRefcount
// 1d4: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d9: 4c 89 e2                      movq    %r12, %rdx
// 1dc: ff d0                         callq   *%rax
// 1de: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e3: 49 8b 04 24                   movq    (%r12), %rax
// 1e7: 85 c0                         testl   %eax, %eax
// 1e9: 78 2b                         js      0x216 <_JIT_ENTRY+0x216>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f5: ff d0                         callq   *%rax
// 1f7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1fc: 49 ff 0c 24                   decq    (%r12)
// 200: 75 14                         jne     0x216 <_JIT_ENTRY+0x216>
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_Dealloc
// 20c: 4c 89 e7                      movq    %r12, %rdi
// 20f: ff d0                         callq   *%rax
// 211: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 216: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 21a: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 21f: 48 85 c9                      testq   %rcx, %rcx
// 222: 0f 84 1b 01 00 00             je      0x343 <_JIT_ENTRY+0x343>
// 228: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 22c: 48 89 08                      movq    %rcx, (%rax)
// 22f: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 233: 48 8b 00                      movq    (%rax), %rax
// 236: 84 c0                         testb   %al, %al
// 238: 74 14                         je      0x24e <_JIT_ENTRY+0x24e>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_HandlePending
// 244: ff d0                         callq   *%rax
// 246: 85 c0                         testl   %eax, %eax
// 248: 0f 85 f8 00 00 00             jne     0x346 <_JIT_ENTRY+0x346>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _JIT_OPARG
// 258: 0f b7 c8                      movzwl  %ax, %ecx
// 25b: f7 d0                         notl    %eax
// 25d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 262: 48 98                         cltq
// 264: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 269: 48 8b 03                      movq    (%rbx), %rax
// 26c: 48 8b 40 60                   movq    0x60(%rax), %rax
// 270: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  PyMapping_GetOptionalItem
// 27f: 48 8d 54 24 18                leaq    0x18(%rsp), %rdx
// 284: 4c 89 ef                      movq    %r13, %rdi
// 287: ff d0                         callq   *%rax
// 289: 85 c0                         testl   %eax, %eax
// 28b: 0f 88 b5 00 00 00             js      0x346 <_JIT_ENTRY+0x346>
// 291: 48 83 7c 24 18 00             cmpq    $0x0, 0x18(%rsp)
// 297: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 29c: 0f 84 ba 00 00 00             je      0x35c <_JIT_ENTRY+0x35c>
// 2a2: 49 8b 45 00                   movq    (%r13), %rax
// 2a6: 48 85 c0                      testq   %rax, %rax
// 2a9: 7f 27                         jg      0x2d2 <_JIT_ENTRY+0x2d2>
// 2ab: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ad:  R_X86_64_64  .rodata.str1.1
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _Py_NegativeRefcount
// 2bf: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 2c4: 4c 89 ea                      movq    %r13, %rdx
// 2c7: ff d0                         callq   *%rax
// 2c9: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 2ce: 49 8b 45 00                   movq    (%r13), %rax
// 2d2: 85 c0                         testl   %eax, %eax
// 2d4: 78 2b                         js      0x301 <_JIT_ENTRY+0x301>
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e0: ff d0                         callq   *%rax
// 2e2: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 2e7: 49 ff 4d 00                   decq    (%r13)
// 2eb: 75 14                         jne     0x301 <_JIT_ENTRY+0x301>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_Dealloc
// 2f7: 4c 89 ef                      movq    %r13, %rdi
// 2fa: ff d0                         callq   *%rax
// 2fc: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 301: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 306: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000308:  R_X86_64_64  _JIT_OPARG
// 310: f7 d1                         notl    %ecx
// 312: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 318: 48 63 c9                      movslq  %ecx, %rcx
// 31b: 49 89 44 cf f8                movq    %rax, -0x8(%r15,%rcx,8)
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _JIT_CONTINUE
// 32a: 48 89 df                      movq    %rbx, %rdi
// 32d: 4c 89 e6                      movq    %r12, %rsi
// 330: 4c 89 c2                      movq    %r8, %rdx
// 333: 48 83 c4 28                   addq    $0x28, %rsp
// 337: 5b                            popq    %rbx
// 338: 41 5c                         popq    %r12
// 33a: 41 5d                         popq    %r13
// 33c: 41 5e                         popq    %r14
// 33e: 41 5f                         popq    %r15
// 340: 5d                            popq    %rbp
// 341: ff e0                         jmpq    *%rax
// 343: 49 89 c4                      movq    %rax, %r12
// 346: 49 29 dc                      subq    %rbx, %r12
// 349: 49 83 c4 b8                   addq    $-0x48, %r12
// 34d: 49 c1 ec 03                   shrq    $0x3, %r12
// 351: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 355: 31 c0                         xorl    %eax, %eax
// 357: e9 83 fd ff ff                jmp     0xdf <_JIT_ENTRY+0xdf>
// 35c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035e:  R_X86_64_64  _JIT_OPARG
// 366: 0f b7 c0                      movzwl  %ax, %eax
// 369: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 36e: 48 8b 40 10                   movq    0x10(%rax), %rax
// 372: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 377: 48 85 c0                      testq   %rax, %rax
// 37a: 74 22                         je      0x39e <_JIT_ENTRY+0x39e>
// 37c: 8b 08                         movl    (%rax), %ecx
// 37e: ff c1                         incl    %ecx
// 380: 0f 84 1c ff ff ff             je      0x2a2 <_JIT_ENTRY+0x2a2>
// 386: 89 08                         movl    %ecx, (%rax)
// 388: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 392: ff d0                         callq   *%rax
// 394: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 399: e9 04 ff ff ff                jmp     0x2a2 <_JIT_ENTRY+0x2a2>
// 39e: 48 8b 33                      movq    (%rbx), %rsi
// 3a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a3:  R_X86_64_64  _JIT_OPARG
// 3ab: 0f b7 d0                      movzwl  %ax, %edx
// 3ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b0:  R_X86_64_64  _PyEval_FormatExcUnbound
// 3b8: 4c 89 c7                      movq    %r8, %rdi
// 3bb: ff d0                         callq   *%rax
// 3bd: eb 87                         jmp     0x346 <_JIT_ENTRY+0x346>
// 3bf: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_DEREF_code_body[960] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5d, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3e, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x33, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfc, 0xe9, 0x2e, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0xff, 0x08, 0x75, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x1b, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xf8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x60, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x18, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xb5, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x18, 0x00, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xcf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x83, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x74, 0x22, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x1c, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0x04, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0xeb, 0x87};
static const Hole _CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_DEREF_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x35e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x38a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x3a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_DEREF_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_GLOBALS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 50                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f1                      movslq  %ecx, %r14
// 63: 4f 8b 24 f7                   movq    (%r15,%r14,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 31                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 26                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 14 24                   movq    %rdx, (%rsp)
// 96: 7e 48                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 98: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 9c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a0: 75 7c                         jne     0x11e <_JIT_ENTRY+0x11e>
// a2: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a7: eb 77                         jmp     0x120 <_JIT_ENTRY+0x120>
// a9: 49 29 df                      subq    %rbx, %r15
// ac: 49 83 c7 b8                   addq    $-0x48, %r15
// b0: 49 c1 ef 03                   shrq    $0x3, %r15
// b4: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// b8: 48 8b 03                      movq    (%rbx), %rax
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _JIT_TARGET
// c5: 89 c9                         movl    %ecx, %ecx
// c7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d1: 48 83 c4 18                   addq    $0x18, %rsp
// d5: 5b                            popq    %rbx
// d6: 41 5c                         popq    %r12
// d8: 41 5d                         popq    %r13
// da: 41 5e                         popq    %r14
// dc: 41 5f                         popq    %r15
// de: 5d                            popq    %rbp
// df: c3                            retq
// e0: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e7:  R_X86_64_64  .rodata.str1.1+0x56
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_CheckRecursiveCall
// f9: 48 89 d7                      movq    %rdx, %rdi
// fc: ff d0                         callq   *%rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 74 08                         je      0x10a <_JIT_ENTRY+0x10a>
// 102: 4d 89 fc                      movq    %r15, %r12
// 105: e9 01 02 00 00                jmp     0x30b <_JIT_ENTRY+0x30b>
// 10a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10f: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 114: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 118: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11c: 74 84                         je      0xa2 <_JIT_ENTRY+0xa2>
// 11e: 31 ff                         xorl    %edi, %edi
// 120: 48 89 ee                      movq    %rbp, %rsi
// 123: 41 ff d0                      callq   *%r8
// 126: 48 8b 3c 24                   movq    (%rsp), %rdi
// 12a: ff 47 2c                      incl    0x2c(%rdi)
// 12d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 132: 48 8b 45 00                   movq    (%rbp), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 26                         jg      0x161 <_JIT_ENTRY+0x161>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 154: 48 89 ea                      movq    %rbp, %rdx
// 157: ff d0                         callq   *%rax
// 159: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15d: 48 8b 45 00                   movq    (%rbp), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 29                         js      0x18e <_JIT_ENTRY+0x18e>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 48 8b 3c 24                   movq    (%rsp), %rdi
// 175: 48 ff 4d 00                   decq    (%rbp)
// 179: 75 13                         jne     0x18e <_JIT_ENTRY+0x18e>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: 48 89 ef                      movq    %rbp, %rdi
// 188: ff d0                         callq   *%rax
// 18a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18e: 49 8b 04 24                   movq    (%r12), %rax
// 192: 48 85 c0                      testq   %rax, %rax
// 195: 7f 26                         jg      0x1bd <_JIT_ENTRY+0x1bd>
// 197: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000199:  R_X86_64_64  .rodata.str1.1
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NegativeRefcount
// 1ab: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b0: 4c 89 e2                      movq    %r12, %rdx
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b9: 49 8b 04 24                   movq    (%r12), %rax
// 1bd: 85 c0                         testl   %eax, %eax
// 1bf: 78 29                         js      0x1ea <_JIT_ENTRY+0x1ea>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cb: ff d0                         callq   *%rax
// 1cd: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d1: 49 ff 0c 24                   decq    (%r12)
// 1d5: 75 13                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_Dealloc
// 1e1: 4c 89 e7                      movq    %r12, %rdi
// 1e4: ff d0                         callq   *%rax
// 1e6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ea: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 1ee: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f3: 48 85 c9                      testq   %rcx, %rcx
// 1f6: 0f 84 0c 01 00 00             je      0x308 <_JIT_ENTRY+0x308>
// 1fc: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 200: 48 89 08                      movq    %rcx, (%rax)
// 203: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 207: 48 8b 00                      movq    (%rax), %rax
// 20a: 84 c0                         testb   %al, %al
// 20c: 74 14                         je      0x222 <_JIT_ENTRY+0x222>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_HandlePending
// 218: ff d0                         callq   *%rax
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 0f 85 e9 00 00 00             jne     0x30b <_JIT_ENTRY+0x30b>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _JIT_OPARG
// 22c: 0f b7 c8                      movzwl  %ax, %ecx
// 22f: f7 d0                         notl    %eax
// 231: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 236: 48 98                         cltq
// 238: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 23d: 48 8b 03                      movq    (%rbx), %rax
// 240: 48 8b 40 20                   movq    0x20(%rax), %rax
// 244: 48 8b 6c c8 18                movq    0x18(%rax,%rcx,8), %rbp
// 249: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000024b:  R_X86_64_64  PyMapping_GetOptionalItem
// 253: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 258: 4c 89 ef                      movq    %r13, %rdi
// 25b: 48 89 ee                      movq    %rbp, %rsi
// 25e: 41 ff d6                      callq   *%r14
// 261: 85 c0                         testl   %eax, %eax
// 263: 0f 88 a2 00 00 00             js      0x30b <_JIT_ENTRY+0x30b>
// 269: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 26f: 0f 84 ac 00 00 00             je      0x321 <_JIT_ENTRY+0x321>
// 275: 49 8b 45 00                   movq    (%r13), %rax
// 279: 48 85 c0                      testq   %rax, %rax
// 27c: 7f 22                         jg      0x2a0 <_JIT_ENTRY+0x2a0>
// 27e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000280:  R_X86_64_64  .rodata.str1.1
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_NegativeRefcount
// 292: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 297: 4c 89 ea                      movq    %r13, %rdx
// 29a: ff d0                         callq   *%rax
// 29c: 49 8b 45 00                   movq    (%r13), %rax
// 2a0: 85 c0                         testl   %eax, %eax
// 2a2: 78 21                         js      0x2c5 <_JIT_ENTRY+0x2c5>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ae: ff d0                         callq   *%rax
// 2b0: 49 ff 4d 00                   decq    (%r13)
// 2b4: 75 0f                         jne     0x2c5 <_JIT_ENTRY+0x2c5>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_Dealloc
// 2c0: 4c 89 ef                      movq    %r13, %rdi
// 2c3: ff d0                         callq   *%rax
// 2c5: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002cc:  R_X86_64_64  _JIT_OPARG
// 2d4: f7 d1                         notl    %ecx
// 2d6: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2dc: 48 63 c9                      movslq  %ecx, %rcx
// 2df: 49 89 44 cf f8                movq    %rax, -0x8(%r15,%rcx,8)
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _JIT_CONTINUE
// 2ee: 48 89 df                      movq    %rbx, %rdi
// 2f1: 4c 89 e6                      movq    %r12, %rsi
// 2f4: 48 8b 14 24                   movq    (%rsp), %rdx
// 2f8: 48 83 c4 18                   addq    $0x18, %rsp
// 2fc: 5b                            popq    %rbx
// 2fd: 41 5c                         popq    %r12
// 2ff: 41 5d                         popq    %r13
// 301: 41 5e                         popq    %r14
// 303: 41 5f                         popq    %r15
// 305: 5d                            popq    %rbp
// 306: ff e0                         jmpq    *%rax
// 308: 49 89 c4                      movq    %rax, %r12
// 30b: 49 29 dc                      subq    %rbx, %r12
// 30e: 49 83 c4 b8                   addq    $-0x48, %r12
// 312: 49 c1 ec 03                   shrq    $0x3, %r12
// 316: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 31a: 31 c0                         xorl    %eax, %eax
// 31c: e9 b0 fd ff ff                jmp     0xd1 <_JIT_ENTRY+0xd1>
// 321: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  PyDict_GetItemRef
// 32f: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 334: 48 89 ee                      movq    %rbp, %rsi
// 337: ff d0                         callq   *%rax
// 339: 85 c0                         testl   %eax, %eax
// 33b: 78 ce                         js      0x30b <_JIT_ENTRY+0x30b>
// 33d: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 343: 0f 85 2c ff ff ff             jne     0x275 <_JIT_ENTRY+0x275>
// 349: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 34d: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 352: 48 89 ee                      movq    %rbp, %rsi
// 355: 41 ff d6                      callq   *%r14
// 358: 85 c0                         testl   %eax, %eax
// 35a: 78 af                         js      0x30b <_JIT_ENTRY+0x30b>
// 35c: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 362: 0f 85 0d ff ff ff             jne     0x275 <_JIT_ENTRY+0x275>
// 368: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036a:  R_X86_64_64  PyExc_NameError
// 372: 48 8b 30                      movq    (%rax), %rsi
// 375: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000377:  R_X86_64_64  .rodata.str1.1+0x39
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 389: 48 8b 3c 24                   movq    (%rsp), %rdi
// 38d: 48 89 e9                      movq    %rbp, %rcx
// 390: ff d0                         callq   *%rax
// 392: e9 74 ff ff ff                jmp     0x30b <_JIT_ENTRY+0x30b>
// 397: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[920] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x50, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf1, 0x4f, 0x8b, 0x24, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x31, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x26, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7c, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x77, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfc, 0xe9, 0x01, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x84, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x0c, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xe9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x6c, 0xc8, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x0f, 0x88, 0xa2, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xcf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xb0, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xce, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x2c, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x78, 0xaf, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x0d, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xe9, 0xff, 0xd0, 0xe9, 0x74, 0xff, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x381, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00 while calling a Python object\x00"
// 75: 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_GLOBAL
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_GLOBAL.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 50                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f1                      movslq  %ecx, %r14
// 63: 4f 8b 24 f7                   movq    (%r15,%r14,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 31                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 26                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 14 24                   movq    %rdx, (%rsp)
// 96: 7e 48                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 98: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 9c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a0: 75 7c                         jne     0x11e <_JIT_ENTRY+0x11e>
// a2: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a7: eb 77                         jmp     0x120 <_JIT_ENTRY+0x120>
// a9: 49 29 df                      subq    %rbx, %r15
// ac: 49 83 c7 b8                   addq    $-0x48, %r15
// b0: 49 c1 ef 03                   shrq    $0x3, %r15
// b4: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// b8: 48 8b 03                      movq    (%rbx), %rax
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _JIT_TARGET
// c5: 89 c9                         movl    %ecx, %ecx
// c7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d1: 48 83 c4 18                   addq    $0x18, %rsp
// d5: 5b                            popq    %rbx
// d6: 41 5c                         popq    %r12
// d8: 41 5d                         popq    %r13
// da: 41 5e                         popq    %r14
// dc: 41 5f                         popq    %r15
// de: 5d                            popq    %rbp
// df: c3                            retq
// e0: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e7:  R_X86_64_64  .rodata.str1.1+0x56
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_CheckRecursiveCall
// f9: 48 89 d7                      movq    %rdx, %rdi
// fc: ff d0                         callq   *%rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 74 08                         je      0x10a <_JIT_ENTRY+0x10a>
// 102: 4d 89 fd                      movq    %r15, %r13
// 105: e9 e8 01 00 00                jmp     0x2f2 <_JIT_ENTRY+0x2f2>
// 10a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10f: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 114: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 118: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11c: 74 84                         je      0xa2 <_JIT_ENTRY+0xa2>
// 11e: 31 ff                         xorl    %edi, %edi
// 120: 48 89 ee                      movq    %rbp, %rsi
// 123: 41 ff d0                      callq   *%r8
// 126: 48 8b 3c 24                   movq    (%rsp), %rdi
// 12a: ff 47 2c                      incl    0x2c(%rdi)
// 12d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 132: 48 8b 45 00                   movq    (%rbp), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 26                         jg      0x161 <_JIT_ENTRY+0x161>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 154: 48 89 ea                      movq    %rbp, %rdx
// 157: ff d0                         callq   *%rax
// 159: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15d: 48 8b 45 00                   movq    (%rbp), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 29                         js      0x18e <_JIT_ENTRY+0x18e>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 48 8b 3c 24                   movq    (%rsp), %rdi
// 175: 48 ff 4d 00                   decq    (%rbp)
// 179: 75 13                         jne     0x18e <_JIT_ENTRY+0x18e>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: 48 89 ef                      movq    %rbp, %rdi
// 188: ff d0                         callq   *%rax
// 18a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18e: 49 8b 04 24                   movq    (%r12), %rax
// 192: 48 85 c0                      testq   %rax, %rax
// 195: 7f 26                         jg      0x1bd <_JIT_ENTRY+0x1bd>
// 197: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000199:  R_X86_64_64  .rodata.str1.1
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NegativeRefcount
// 1ab: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b0: 4c 89 e2                      movq    %r12, %rdx
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b9: 49 8b 04 24                   movq    (%r12), %rax
// 1bd: 85 c0                         testl   %eax, %eax
// 1bf: 78 29                         js      0x1ea <_JIT_ENTRY+0x1ea>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cb: ff d0                         callq   *%rax
// 1cd: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d1: 49 ff 0c 24                   decq    (%r12)
// 1d5: 75 13                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_Dealloc
// 1e1: 4c 89 e7                      movq    %r12, %rdi
// 1e4: ff d0                         callq   *%rax
// 1e6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ea: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 1ee: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f3: 48 85 c9                      testq   %rcx, %rcx
// 1f6: 0f 84 f3 00 00 00             je      0x2ef <_JIT_ENTRY+0x2ef>
// 1fc: 4f 8d 2c ef                   leaq    (%r15,%r13,8), %r13
// 200: 48 89 08                      movq    %rcx, (%rax)
// 203: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 207: 48 8b 00                      movq    (%rax), %rax
// 20a: 84 c0                         testb   %al, %al
// 20c: 74 14                         je      0x222 <_JIT_ENTRY+0x222>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_HandlePending
// 218: ff d0                         callq   *%rax
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 0f 85 d0 00 00 00             jne     0x2f2 <_JIT_ENTRY+0x2f2>
// 222: 48 8b 03                      movq    (%rbx), %rax
// 225: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 229: 48 8b 40 20                   movq    0x20(%rax), %rax
// 22d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022f:  R_X86_64_64  _JIT_OPARG
// 237: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
// 23d: 4c 8b 64 88 18                movq    0x18(%rax,%rcx,4), %r12
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  PyDict_Type
// 24c: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 250: 75 0e                         jne     0x260 <_JIT_ENTRY+0x260>
// 252: 48 8b 73 20                   movq    0x20(%rbx), %rsi
// 256: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 25a: 0f 84 cb 00 00 00             je      0x32b <_JIT_ENTRY+0x32b>
// 260: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000262:  R_X86_64_64  PyMapping_GetOptionalItem
// 26a: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 26f: 4c 89 e6                      movq    %r12, %rsi
// 272: 41 ff d6                      callq   *%r14
// 275: 85 c0                         testl   %eax, %eax
// 277: 78 79                         js      0x2f2 <_JIT_ENTRY+0x2f2>
// 279: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 27e: 48 85 c0                      testq   %rax, %rax
// 281: 0f 84 81 00 00 00             je      0x308 <_JIT_ENTRY+0x308>
// 287: 49 89 45 00                   movq    %rax, (%r13)
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _JIT_OPARG
// 295: a8 01                         testb   $0x1, %al
// 297: 74 12                         je      0x2ab <_JIT_ENTRY+0x2ab>
// 299: f7 d0                         notl    %eax
// 29b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2a0: 48 98                         cltq
// 2a2: 49 c7 44 c7 08 00 00 00 00    movq    $0x0, 0x8(%r15,%rax,8)
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _JIT_OPARG
// 2b5: 89 c1                         movl    %eax, %ecx
// 2b7: f7 d1                         notl    %ecx
// 2b9: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2bf: 48 63 c9                      movslq  %ecx, %rcx
// 2c2: 83 e0 01                      andl    $0x1, %eax
// 2c5: ff c0                         incl    %eax
// 2c7: 48 01 c8                      addq    %rcx, %rax
// 2ca: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _JIT_CONTINUE
// 2d8: 48 89 df                      movq    %rbx, %rdi
// 2db: 48 8b 14 24                   movq    (%rsp), %rdx
// 2df: 48 83 c4 18                   addq    $0x18, %rsp
// 2e3: 5b                            popq    %rbx
// 2e4: 41 5c                         popq    %r12
// 2e6: 41 5d                         popq    %r13
// 2e8: 41 5e                         popq    %r14
// 2ea: 41 5f                         popq    %r15
// 2ec: 5d                            popq    %rbp
// 2ed: ff e0                         jmpq    *%rax
// 2ef: 49 89 c5                      movq    %rax, %r13
// 2f2: 49 29 dd                      subq    %rbx, %r13
// 2f5: 49 83 c5 b8                   addq    $-0x48, %r13
// 2f9: 49 c1 ed 03                   shrq    $0x3, %r13
// 2fd: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 301: 31 c0                         xorl    %eax, %eax
// 303: e9 c9 fd ff ff                jmp     0xd1 <_JIT_ENTRY+0xd1>
// 308: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 30c: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 311: 4c 89 e6                      movq    %r12, %rsi
// 314: 41 ff d6                      callq   *%r14
// 317: 85 c0                         testl   %eax, %eax
// 319: 78 d7                         js      0x2f2 <_JIT_ENTRY+0x2f2>
// 31b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 320: 48 85 c0                      testq   %rax, %rax
// 323: 0f 85 5e ff ff ff             jne     0x287 <_JIT_ENTRY+0x287>
// 329: eb 53                         jmp     0x37e <_JIT_ENTRY+0x37e>
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  _PyDict_LoadGlobal
// 335: 4c 89 e2                      movq    %r12, %rdx
// 338: ff d0                         callq   *%rax
// 33a: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 33f: 48 85 c0                      testq   %rax, %rax
// 342: 74 22                         je      0x366 <_JIT_ENTRY+0x366>
// 344: 8b 08                         movl    (%rax), %ecx
// 346: ff c1                         incl    %ecx
// 348: 0f 84 39 ff ff ff             je      0x287 <_JIT_ENTRY+0x287>
// 34e: 89 08                         movl    %ecx, (%rax)
// 350: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000352:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 35a: ff d0                         callq   *%rax
// 35c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 361: e9 21 ff ff ff                jmp     0x287 <_JIT_ENTRY+0x287>
// 366: 48 8b 04 24                   movq    (%rsp), %rax
// 36a: 48 8b 40 68                   movq    0x68(%rax), %rax
// 36e: 48 85 c0                      testq   %rax, %rax
// 371: 74 0b                         je      0x37e <_JIT_ENTRY+0x37e>
// 373: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 378: 0f 85 74 ff ff ff             jne     0x2f2 <_JIT_ENTRY+0x2f2>
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  PyExc_NameError
// 388: 48 8b 30                      movq    (%rax), %rsi
// 38b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000038d:  R_X86_64_64  .rodata.str1.1+0x39
// 395: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000397:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 39f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3a3: 4c 89 e1                      movq    %r12, %rcx
// 3a6: ff d0                         callq   *%rax
// 3a8: e9 45 ff ff ff                jmp     0x2f2 <_JIT_ENTRY+0x2f2>
// 3ad: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_GLOBAL_code_body[942] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x50, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf1, 0x4f, 0x8b, 0x24, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x31, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x26, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7c, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x77, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfd, 0xe9, 0xe8, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x84, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xf3, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xef, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xd0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x88, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x48, 0x8b, 0x73, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x78, 0x79, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x12, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x44, 0xc7, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xc9, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x78, 0xd7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x5e, 0xff, 0xff, 0xff, 0xeb, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x22, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x39, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0x21, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x74, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x45, 0xff, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_LOAD_GLOBAL_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x352, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x38d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x397, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00 while calling a Python object\x00"
// 75: 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_GLOBAL_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_GLOBAL_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_GLOBAL_BUILTINS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 88 02 00 00             jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 65 02 00 00             jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 56 02 00 00             jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 33 01 00 00             jne     0x214 <_JIT_ENTRY+0x214>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 4c 8b 04 24                   movq    (%rsp), %r8
// 10b: 41 ff 40 2c                   incl    0x2c(%r8)
// 10f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 114: 49 8b 07                      movq    (%r15), %rax
// 117: 48 85 c0                      testq   %rax, %rax
// 11a: 7f 2a                         jg      0x146 <_JIT_ENTRY+0x146>
// 11c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011e:  R_X86_64_64  .rodata.str1.1
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _Py_NegativeRefcount
// 130: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 135: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13a: 4c 89 fa                      movq    %r15, %rdx
// 13d: ff d0                         callq   *%rax
// 13f: 4c 8b 04 24                   movq    (%rsp), %r8
// 143: 49 8b 07                      movq    (%r15), %rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 78 2f                         js      0x179 <_JIT_ENTRY+0x179>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 154: ff d0                         callq   *%rax
// 156: 4c 8b 04 24                   movq    (%rsp), %r8
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 4c 8b 04 24                   movq    (%rsp), %r8
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 29                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b6: ff d0                         callq   *%rax
// 1b8: 4c 8b 04 24                   movq    (%rsp), %r8
// 1bc: 49 ff 0c 24                   decq    (%r12)
// 1c0: 75 13                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_Dealloc
// 1cc: 4c 89 e7                      movq    %r12, %rdi
// 1cf: ff d0                         callq   *%rax
// 1d1: 4c 8b 04 24                   movq    (%rsp), %r8
// 1d5: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d9: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1de: 48 85 c9                      testq   %rcx, %rcx
// 1e1: 74 2e                         je      0x211 <_JIT_ENTRY+0x211>
// 1e3: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 1e7: 48 89 08                      movq    %rcx, (%rax)
// 1ea: 49 8b 40 10                   movq    0x10(%r8), %rax
// 1ee: 48 8b 00                      movq    (%rax), %rax
// 1f1: 84 c0                         testb   %al, %al
// 1f3: 74 35                         je      0x22a <_JIT_ENTRY+0x22a>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_HandlePending
// 1ff: 4c 89 c7                      movq    %r8, %rdi
// 202: ff d0                         callq   *%rax
// 204: 4c 8b 04 24                   movq    (%rsp), %r8
// 208: 85 c0                         testl   %eax, %eax
// 20a: 74 1e                         je      0x22a <_JIT_ENTRY+0x22a>
// 20c: 4d 89 ee                      movq    %r13, %r14
// 20f: eb 03                         jmp     0x214 <_JIT_ENTRY+0x214>
// 211: 49 89 c6                      movq    %rax, %r14
// 214: 49 29 de                      subq    %rbx, %r14
// 217: 49 83 c6 b8                   addq    $-0x48, %r14
// 21b: 49 c1 ee 03                   shrq    $0x3, %r14
// 21f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 223: 31 c0                         xorl    %eax, %eax
// 225: e9 e4 00 00 00                jmp     0x30e <_JIT_ENTRY+0x30e>
// 22a: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 22e: 48 8b 40 20                   movq    0x20(%rax), %rax
// 232: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 236: ba 01 00 00 00                movl    $0x1, %edx
// 23b: 48 d3 e2                      shlq    %cl, %rdx
// 23e: 48 01 c2                      addq    %rax, %rdx
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_OPERAND
// 24b: 0f b7 c0                      movzwl  %ax, %eax
// 24e: 48 c1 e0 04                   shlq    $0x4, %rax
// 252: 4c 8b 64 10 28                movq    0x28(%rax,%rdx), %r12
// 257: 4d 85 e4                      testq   %r12, %r12
// 25a: 0f 84 83 00 00 00             je      0x2e3 <_JIT_ENTRY+0x2e3>
// 260: 41 8b 04 24                   movl    (%r12), %eax
// 264: ff c0                         incl    %eax
// 266: 74 14                         je      0x27c <_JIT_ENTRY+0x27c>
// 268: 41 89 04 24                   movl    %eax, (%r12)
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 276: ff d0                         callq   *%rax
// 278: 4c 8b 04 24                   movq    (%rsp), %r8
// 27c: 4d 89 65 00                   movq    %r12, (%r13)
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_OPARG
// 28a: a8 01                         testb   $0x1, %al
// 28c: 74 12                         je      0x2a0 <_JIT_ENTRY+0x2a0>
// 28e: f7 d0                         notl    %eax
// 290: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 295: 48 98                         cltq
// 297: 49 c7 44 c6 08 00 00 00 00    movq    $0x0, 0x8(%r14,%rax,8)
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _JIT_OPARG
// 2aa: 89 c1                         movl    %eax, %ecx
// 2ac: f7 d1                         notl    %ecx
// 2ae: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2b4: 48 63 c9                      movslq  %ecx, %rcx
// 2b7: 83 e0 01                      andl    $0x1, %eax
// 2ba: ff c0                         incl    %eax
// 2bc: 48 01 c8                      addq    %rcx, %rax
// 2bf: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _JIT_CONTINUE
// 2cd: 48 89 df                      movq    %rbx, %rdi
// 2d0: 4c 89 c2                      movq    %r8, %rdx
// 2d3: 48 83 c4 18                   addq    $0x18, %rsp
// 2d7: 5b                            popq    %rbx
// 2d8: 41 5c                         popq    %r12
// 2da: 41 5d                         popq    %r13
// 2dc: 41 5e                         popq    %r14
// 2de: 41 5f                         popq    %r15
// 2e0: 5d                            popq    %rbp
// 2e1: ff e0                         jmpq    *%rax
// 2e3: 4d 89 ee                      movq    %r13, %r14
// 2e6: 49 29 de                      subq    %rbx, %r14
// 2e9: 49 83 c6 b8                   addq    $-0x48, %r14
// 2ed: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2f5: 48 8b 03                      movq    (%rbx), %rax
// 2f8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fa:  R_X86_64_64  _JIT_TARGET
// 302: 89 c9                         movl    %ecx, %ecx
// 304: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 308: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 30e: 48 83 c4 18                   addq    $0x18, %rsp
// 312: 5b                            popq    %rbx
// 313: 41 5c                         popq    %r12
// 315: 41 5d                         popq    %r13
// 317: 41 5e                         popq    %r14
// 319: 41 5f                         popq    %r15
// 31b: 5d                            popq    %rbp
// 31c: c3                            retq
// 31d: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_GLOBAL_BUILTINS_code_body[798] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x88, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x65, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0x56, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x33, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xe4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x43, 0x20, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x10, 0x28, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x12, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x44, 0xc6, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_LOAD_GLOBAL_BUILTINS_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_GLOBAL_BUILTINS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_GLOBAL_MODULE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 88 02 00 00             jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 65 02 00 00             jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 56 02 00 00             jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 33 01 00 00             jne     0x214 <_JIT_ENTRY+0x214>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 4c 8b 04 24                   movq    (%rsp), %r8
// 10b: 41 ff 40 2c                   incl    0x2c(%r8)
// 10f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 114: 49 8b 07                      movq    (%r15), %rax
// 117: 48 85 c0                      testq   %rax, %rax
// 11a: 7f 2a                         jg      0x146 <_JIT_ENTRY+0x146>
// 11c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011e:  R_X86_64_64  .rodata.str1.1
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _Py_NegativeRefcount
// 130: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 135: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13a: 4c 89 fa                      movq    %r15, %rdx
// 13d: ff d0                         callq   *%rax
// 13f: 4c 8b 04 24                   movq    (%rsp), %r8
// 143: 49 8b 07                      movq    (%r15), %rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 78 2f                         js      0x179 <_JIT_ENTRY+0x179>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 154: ff d0                         callq   *%rax
// 156: 4c 8b 04 24                   movq    (%rsp), %r8
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 4c 8b 04 24                   movq    (%rsp), %r8
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 29                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b6: ff d0                         callq   *%rax
// 1b8: 4c 8b 04 24                   movq    (%rsp), %r8
// 1bc: 49 ff 0c 24                   decq    (%r12)
// 1c0: 75 13                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_Dealloc
// 1cc: 4c 89 e7                      movq    %r12, %rdi
// 1cf: ff d0                         callq   *%rax
// 1d1: 4c 8b 04 24                   movq    (%rsp), %r8
// 1d5: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d9: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1de: 48 85 c9                      testq   %rcx, %rcx
// 1e1: 74 2e                         je      0x211 <_JIT_ENTRY+0x211>
// 1e3: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 1e7: 48 89 08                      movq    %rcx, (%rax)
// 1ea: 49 8b 40 10                   movq    0x10(%r8), %rax
// 1ee: 48 8b 00                      movq    (%rax), %rax
// 1f1: 84 c0                         testb   %al, %al
// 1f3: 74 35                         je      0x22a <_JIT_ENTRY+0x22a>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_HandlePending
// 1ff: 4c 89 c7                      movq    %r8, %rdi
// 202: ff d0                         callq   *%rax
// 204: 4c 8b 04 24                   movq    (%rsp), %r8
// 208: 85 c0                         testl   %eax, %eax
// 20a: 74 1e                         je      0x22a <_JIT_ENTRY+0x22a>
// 20c: 4d 89 ee                      movq    %r13, %r14
// 20f: eb 03                         jmp     0x214 <_JIT_ENTRY+0x214>
// 211: 49 89 c6                      movq    %rax, %r14
// 214: 49 29 de                      subq    %rbx, %r14
// 217: 49 83 c6 b8                   addq    $-0x48, %r14
// 21b: 49 c1 ee 03                   shrq    $0x3, %r14
// 21f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 223: 31 c0                         xorl    %eax, %eax
// 225: e9 e4 00 00 00                jmp     0x30e <_JIT_ENTRY+0x30e>
// 22a: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 22e: 48 8b 40 20                   movq    0x20(%rax), %rax
// 232: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 236: ba 01 00 00 00                movl    $0x1, %edx
// 23b: 48 d3 e2                      shlq    %cl, %rdx
// 23e: 48 01 c2                      addq    %rax, %rdx
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_OPERAND
// 24b: 0f b7 c0                      movzwl  %ax, %eax
// 24e: 48 c1 e0 04                   shlq    $0x4, %rax
// 252: 4c 8b 64 10 28                movq    0x28(%rax,%rdx), %r12
// 257: 4d 85 e4                      testq   %r12, %r12
// 25a: 0f 84 83 00 00 00             je      0x2e3 <_JIT_ENTRY+0x2e3>
// 260: 41 8b 04 24                   movl    (%r12), %eax
// 264: ff c0                         incl    %eax
// 266: 74 14                         je      0x27c <_JIT_ENTRY+0x27c>
// 268: 41 89 04 24                   movl    %eax, (%r12)
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 276: ff d0                         callq   *%rax
// 278: 4c 8b 04 24                   movq    (%rsp), %r8
// 27c: 4d 89 65 00                   movq    %r12, (%r13)
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_OPARG
// 28a: a8 01                         testb   $0x1, %al
// 28c: 74 12                         je      0x2a0 <_JIT_ENTRY+0x2a0>
// 28e: f7 d0                         notl    %eax
// 290: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 295: 48 98                         cltq
// 297: 49 c7 44 c6 08 00 00 00 00    movq    $0x0, 0x8(%r14,%rax,8)
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _JIT_OPARG
// 2aa: 89 c1                         movl    %eax, %ecx
// 2ac: f7 d1                         notl    %ecx
// 2ae: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2b4: 48 63 c9                      movslq  %ecx, %rcx
// 2b7: 83 e0 01                      andl    $0x1, %eax
// 2ba: ff c0                         incl    %eax
// 2bc: 48 01 c8                      addq    %rcx, %rax
// 2bf: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _JIT_CONTINUE
// 2cd: 48 89 df                      movq    %rbx, %rdi
// 2d0: 4c 89 c2                      movq    %r8, %rdx
// 2d3: 48 83 c4 18                   addq    $0x18, %rsp
// 2d7: 5b                            popq    %rbx
// 2d8: 41 5c                         popq    %r12
// 2da: 41 5d                         popq    %r13
// 2dc: 41 5e                         popq    %r14
// 2de: 41 5f                         popq    %r15
// 2e0: 5d                            popq    %rbp
// 2e1: ff e0                         jmpq    *%rax
// 2e3: 4d 89 ee                      movq    %r13, %r14
// 2e6: 49 29 de                      subq    %rbx, %r14
// 2e9: 49 83 c6 b8                   addq    $-0x48, %r14
// 2ed: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2f5: 48 8b 03                      movq    (%rbx), %rax
// 2f8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fa:  R_X86_64_64  _JIT_TARGET
// 302: 89 c9                         movl    %ecx, %ecx
// 304: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 308: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 30e: 48 83 c4 18                   addq    $0x18, %rsp
// 312: 5b                            popq    %rbx
// 313: 41 5c                         popq    %r12
// 315: 41 5d                         popq    %r13
// 317: 41 5e                         popq    %r14
// 319: 41 5f                         popq    %r15
// 31b: 5d                            popq    %rbp
// 31c: c3                            retq
// 31d: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_GLOBAL_MODULE_code_body[798] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x88, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x65, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0x56, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x33, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xe4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x43, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x10, 0x28, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x12, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x44, 0xc6, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_LOAD_GLOBAL_MODULE_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_GLOBAL_MODULE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_LOCALS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_LOCALS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x49
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 fe                      movq    %r15, %r14
// 112: e9 c8 01 00 00                jmp     0x2df <_JIT_ENTRY+0x2df>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13b: 4c 89 f6                      movq    %r14, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 48 8b 0c 24                   movq    (%rsp), %rcx
// 145: ff 41 2c                      incl    0x2c(%rcx)
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 49 8b 06                      movq    (%r14), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 2a                         jg      0x17f <_JIT_ENTRY+0x17f>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16e: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 173: 4c 89 f2                      movq    %r14, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 0c 24                   movq    (%rsp), %rcx
// 17c: 49 8b 06                      movq    (%r14), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 2f                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 ff 08                      decq    (%rax)
// 19b: 75 15                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 26                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 29                         js      0x20e <_JIT_ENTRY+0x20e>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 13                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 20e: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 212: 48 83 7c 24 10 00             cmpq    $0x0, 0x10(%rsp)
// 218: 0f 84 96 00 00 00             je      0x2b4 <_JIT_ENTRY+0x2b4>
// 21e: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 222: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 227: 48 89 10                      movq    %rdx, (%rax)
// 22a: 48 8b 41 10                   movq    0x10(%rcx), %rax
// 22e: 48 8b 00                      movq    (%rax), %rax
// 231: 84 c0                         testb   %al, %al
// 233: 74 1b                         je      0x250 <_JIT_ENTRY+0x250>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_HandlePending
// 23f: 48 89 cf                      movq    %rcx, %rdi
// 242: ff d0                         callq   *%rax
// 244: 48 8b 0c 24                   movq    (%rsp), %rcx
// 248: 85 c0                         testl   %eax, %eax
// 24a: 0f 85 8f 00 00 00             jne     0x2df <_JIT_ENTRY+0x2df>
// 250: 4c 8b 63 28                   movq    0x28(%rbx), %r12
// 254: 4d 85 e4                      testq   %r12, %r12
// 257: 74 60                         je      0x2b9 <_JIT_ENTRY+0x2b9>
// 259: 41 8b 04 24                   movl    (%r12), %eax
// 25d: ff c0                         incl    %eax
// 25f: 74 14                         je      0x275 <_JIT_ENTRY+0x275>
// 261: 41 89 04 24                   movl    %eax, (%r12)
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 26f: ff d0                         callq   *%rax
// 271: 48 8b 0c 24                   movq    (%rsp), %rcx
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _JIT_OPARG
// 27f: f7 d0                         notl    %eax
// 281: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 286: 48 98                         cltq
// 288: 4d 89 24 c7                   movq    %r12, (%r15,%rax,8)
// 28c: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 290: 48 83 c6 08                   addq    $0x8, %rsi
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _JIT_CONTINUE
// 29e: 48 89 df                      movq    %rbx, %rdi
// 2a1: 48 89 ca                      movq    %rcx, %rdx
// 2a4: 48 83 c4 18                   addq    $0x18, %rsp
// 2a8: 5b                            popq    %rbx
// 2a9: 41 5c                         popq    %r12
// 2ab: 41 5d                         popq    %r13
// 2ad: 41 5e                         popq    %r14
// 2af: 41 5f                         popq    %r15
// 2b1: 5d                            popq    %rbp
// 2b2: ff e0                         jmpq    *%rax
// 2b4: 49 89 c6                      movq    %rax, %r14
// 2b7: eb 26                         jmp     0x2df <_JIT_ENTRY+0x2df>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  PyExc_SystemError
// 2c3: 48 8b 30                      movq    (%rax), %rsi
// 2c6: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002c8:  R_X86_64_64  .rodata.str1.1+0x39
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _PyErr_SetString
// 2da: 48 89 cf                      movq    %rcx, %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: 49 29 de                      subq    %rbx, %r14
// 2e2: 49 83 c6 b8                   addq    $-0x48, %r14
// 2e6: 49 c1 ee 03                   shrq    $0x3, %r14
// 2ea: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2ee: 31 c0                         xorl    %eax, %eax
// 2f0: e9 e9 fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 2f5: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_LOCALS_code_body[758] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfe, 0xe9, 0xc8, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0xff, 0x41, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x41, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0x8f, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x60, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x14, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xca, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xe9, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_LOAD_LOCALS_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x49},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found\x00 while calling a Python object\x00'
// 68: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_LOCALS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_LOCALS_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_NAME
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_NAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5d                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3e                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 33                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 54                         jle     0xee <_JIT_ENTRY+0xee>
// 9a: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9e: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// a3: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a7: 0f 85 88 00 00 00             jne     0x135 <_JIT_ENTRY+0x135>
// ad: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b2: e9 80 00 00 00                jmp     0x137 <_JIT_ENTRY+0x137>
// b7: 49 29 df                      subq    %rbx, %r15
// ba: 49 83 c7 b8                   addq    $-0x48, %r15
// be: 49 c1 ef 03                   shrq    $0x3, %r15
// c2: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c6: 48 8b 03                      movq    (%rbx), %rax
// c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cb:  R_X86_64_64  _JIT_TARGET
// d3: 89 c9                         movl    %ecx, %ecx
// d5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// df: 48 83 c4 28                   addq    $0x28, %rsp
// e3: 5b                            popq    %rbx
// e4: 41 5c                         popq    %r12
// e6: 41 5d                         popq    %r13
// e8: 41 5e                         popq    %r14
// ea: 41 5f                         popq    %r15
// ec: 5d                            popq    %rbp
// ed: c3                            retq
// ee: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// f3: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f5:  R_X86_64_64  .rodata.str1.1+0x66
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_CheckRecursiveCall
// 107: 48 89 d7                      movq    %rdx, %rdi
// 10a: ff d0                         callq   *%rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 74 08                         je      0x118 <_JIT_ENTRY+0x118>
// 110: 4d 89 fd                      movq    %r15, %r13
// 113: e9 f0 01 00 00                jmp     0x308 <_JIT_ENTRY+0x308>
// 118: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11d: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 122: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 126: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 12b: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12f: 0f 84 78 ff ff ff             je      0xad <_JIT_ENTRY+0xad>
// 135: 31 ff                         xorl    %edi, %edi
// 137: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 13c: 4c 89 f6                      movq    %r14, %rsi
// 13f: 41 ff d0                      callq   *%r8
// 142: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 147: ff 41 2c                      incl    0x2c(%rcx)
// 14a: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 14f: 49 8b 06                      movq    (%r14), %rax
// 152: 48 85 c0                      testq   %rax, %rax
// 155: 7f 2b                         jg      0x182 <_JIT_ENTRY+0x182>
// 157: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000159:  R_X86_64_64  .rodata.str1.1
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_NegativeRefcount
// 16b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 170: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 175: 4c 89 f2                      movq    %r14, %rdx
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 17f: 49 8b 06                      movq    (%r14), %rax
// 182: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000184:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18c: 85 c0                         testl   %eax, %eax
// 18e: 78 28                         js      0x1b8 <_JIT_ENTRY+0x1b8>
// 190: 41 ff d6                      callq   *%r14
// 193: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 198: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 19d: 48 ff 08                      decq    (%rax)
// 1a0: 75 16                         jne     0x1b8 <_JIT_ENTRY+0x1b8>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_Dealloc
// 1ac: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1b1: ff d0                         callq   *%rax
// 1b3: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b8: 49 8b 04 24                   movq    (%r12), %rax
// 1bc: 48 85 c0                      testq   %rax, %rax
// 1bf: 7f 27                         jg      0x1e8 <_JIT_ENTRY+0x1e8>
// 1c1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c3:  R_X86_64_64  .rodata.str1.1
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_NegativeRefcount
// 1d5: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1da: 4c 89 e2                      movq    %r12, %rdx
// 1dd: ff d0                         callq   *%rax
// 1df: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e4: 49 8b 04 24                   movq    (%r12), %rax
// 1e8: 85 c0                         testl   %eax, %eax
// 1ea: 78 22                         js      0x20e <_JIT_ENTRY+0x20e>
// 1ec: 41 ff d6                      callq   *%r14
// 1ef: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1f4: 49 ff 0c 24                   decq    (%r12)
// 1f8: 75 14                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_Dealloc
// 204: 4c 89 e7                      movq    %r12, %rdi
// 207: ff d0                         callq   *%rax
// 209: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 20e: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 212: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 217: 48 85 d2                      testq   %rdx, %rdx
// 21a: 0f 84 bd 00 00 00             je      0x2dd <_JIT_ENTRY+0x2dd>
// 220: 4f 8d 2c ef                   leaq    (%r15,%r13,8), %r13
// 224: 48 89 10                      movq    %rdx, (%rax)
// 227: 48 8b 41 10                   movq    0x10(%rcx), %rax
// 22b: 48 8b 00                      movq    (%rax), %rax
// 22e: 84 c0                         testb   %al, %al
// 230: 74 1c                         je      0x24e <_JIT_ENTRY+0x24e>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_HandlePending
// 23c: 48 89 cf                      movq    %rcx, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 246: 85 c0                         testl   %eax, %eax
// 248: 0f 85 ba 00 00 00             jne     0x308 <_JIT_ENTRY+0x308>
// 24e: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 252: 48 85 ff                      testq   %rdi, %rdi
// 255: 0f 84 87 00 00 00             je      0x2e2 <_JIT_ENTRY+0x2e2>
// 25b: 48 8b 03                      movq    (%rbx), %rax
// 25e: 48 8b 40 20                   movq    0x20(%rax), %rax
// 262: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000264:  R_X86_64_64  _JIT_OPARG
// 26c: 0f b7 c9                      movzwl  %cx, %ecx
// 26f: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 274: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000276:  R_X86_64_64  PyMapping_GetOptionalItem
// 27e: 48 8d 54 24 18                leaq    0x18(%rsp), %rdx
// 283: 4c 89 e6                      movq    %r12, %rsi
// 286: ff d5                         callq   *%rbp
// 288: 85 c0                         testl   %eax, %eax
// 28a: 78 7c                         js      0x308 <_JIT_ENTRY+0x308>
// 28c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 291: 48 85 c0                      testq   %rax, %rax
// 294: 0f 84 84 00 00 00             je      0x31e <_JIT_ENTRY+0x31e>
// 29a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029c:  R_X86_64_64  _JIT_OPARG
// 2a4: f7 d1                         notl    %ecx
// 2a6: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2ac: 48 63 c9                      movslq  %ecx, %rcx
// 2af: 49 89 04 cf                   movq    %rax, (%r15,%rcx,8)
// 2b3: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 2b7: 48 83 c6 08                   addq    $0x8, %rsi
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _JIT_CONTINUE
// 2c5: 48 89 df                      movq    %rbx, %rdi
// 2c8: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2cd: 48 83 c4 28                   addq    $0x28, %rsp
// 2d1: 5b                            popq    %rbx
// 2d2: 41 5c                         popq    %r12
// 2d4: 41 5d                         popq    %r13
// 2d6: 41 5e                         popq    %r14
// 2d8: 41 5f                         popq    %r15
// 2da: 5d                            popq    %rbp
// 2db: ff e0                         jmpq    *%rax
// 2dd: 49 89 c5                      movq    %rax, %r13
// 2e0: eb 26                         jmp     0x308 <_JIT_ENTRY+0x308>
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  PyExc_SystemError
// 2ec: 48 8b 30                      movq    (%rax), %rsi
// 2ef: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002f1:  R_X86_64_64  .rodata.str1.1+0x56
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _PyErr_SetString
// 303: 48 89 cf                      movq    %rcx, %rdi
// 306: ff d0                         callq   *%rax
// 308: 49 29 dd                      subq    %rbx, %r13
// 30b: 49 83 c5 b8                   addq    $-0x48, %r13
// 30f: 49 c1 ed 03                   shrq    $0x3, %r13
// 313: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 317: 31 c0                         xorl    %eax, %eax
// 319: e9 c1 fd ff ff                jmp     0xdf <_JIT_ENTRY+0xdf>
// 31e: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  PyDict_GetItemRef
// 32c: 48 8d 54 24 18                leaq    0x18(%rsp), %rdx
// 331: 4c 89 e6                      movq    %r12, %rsi
// 334: ff d0                         callq   *%rax
// 336: 85 c0                         testl   %eax, %eax
// 338: 78 ce                         js      0x308 <_JIT_ENTRY+0x308>
// 33a: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 33f: 48 85 c0                      testq   %rax, %rax
// 342: 0f 85 52 ff ff ff             jne     0x29a <_JIT_ENTRY+0x29a>
// 348: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 34c: 48 8d 54 24 18                leaq    0x18(%rsp), %rdx
// 351: 4c 89 e6                      movq    %r12, %rsi
// 354: ff d5                         callq   *%rbp
// 356: 85 c0                         testl   %eax, %eax
// 358: 78 ae                         js      0x308 <_JIT_ENTRY+0x308>
// 35a: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 35f: 48 85 c0                      testq   %rax, %rax
// 362: 0f 85 32 ff ff ff             jne     0x29a <_JIT_ENTRY+0x29a>
// 368: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036a:  R_X86_64_64  PyExc_NameError
// 372: 48 8b 30                      movq    (%rax), %rsi
// 375: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000377:  R_X86_64_64  .rodata.str1.1+0x39
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 389: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 38e: 4c 89 e1                      movq    %r12, %rcx
// 391: ff d0                         callq   *%rax
// 393: e9 70 ff ff ff                jmp     0x308 <_JIT_ENTRY+0x308>
// 398: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_NAME_code_body[921] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5d, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3e, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x33, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfd, 0xe9, 0xf0, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x10, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0xff, 0x41, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x41, 0xff, 0xd6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0xff, 0x08, 0x75, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x22, 0x41, 0xff, 0xd6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xbd, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xef, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x41, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x85, 0xc0, 0x0f, 0x85, 0xba, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x18, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x7c, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xcf, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc5, 0xeb, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xc1, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x18, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xce, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x52, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x18, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0xae, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x32, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x70, 0xff, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_LOAD_NAME_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x66},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x381, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00no locals found\x00 while calling a Python object\x00"
// 85: 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_NAME_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_NAME_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_ATTR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 4b                         jle     0xe4 <_JIT_ENTRY+0xe4>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 7b                         jne     0x11e <_JIT_ENTRY+0x11e>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 76                         jmp     0x120 <_JIT_ENTRY+0x120>
// aa: 4d 89 f7                      movq    %r14, %r15
// ad: 49 29 df                      subq    %rbx, %r15
// b0: 49 83 c7 b8                   addq    $-0x48, %r15
// b4: 49 c1 ef 03                   shrq    $0x3, %r15
// b8: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// bc: 48 8b 03                      movq    (%rbx), %rax
// bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c1:  R_X86_64_64  _JIT_TARGET
// c9: 89 c9                         movl    %ecx, %ecx
// cb: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cf: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d5: 48 83 c4 18                   addq    $0x18, %rsp
// d9: 5b                            popq    %rbx
// da: 41 5c                         popq    %r12
// dc: 41 5d                         popq    %r13
// de: 41 5e                         popq    %r14
// e0: 41 5f                         popq    %r15
// e2: 5d                            popq    %rbp
// e3: c3                            retq
// e4: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000eb:  R_X86_64_64  .rodata.str1.1+0x39
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_CheckRecursiveCall
// fd: 48 89 d7                      movq    %rdx, %rdi
// 100: ff d0                         callq   *%rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 0f 85 d8 02 00 00             jne     0x3e2 <_JIT_ENTRY+0x3e2>
// 10a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10f: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 114: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 118: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11c: 74 85                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11e: 31 ff                         xorl    %edi, %edi
// 120: 48 89 ee                      movq    %rbp, %rsi
// 123: 41 ff d0                      callq   *%r8
// 126: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 12b: ff 47 2c                      incl    0x2c(%rdi)
// 12e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 27                         jg      0x163 <_JIT_ENTRY+0x163>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 15f: 48 8b 45 00                   movq    (%rbp), %rax
// 163: 85 c0                         testl   %eax, %eax
// 165: 78 2b                         js      0x192 <_JIT_ENTRY+0x192>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 178: 48 ff 4d 00                   decq    (%rbp)
// 17c: 75 14                         jne     0x192 <_JIT_ENTRY+0x192>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_Dealloc
// 188: 48 89 ef                      movq    %rbp, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 192: 49 8b 04 24                   movq    (%r12), %rax
// 196: 48 85 c0                      testq   %rax, %rax
// 199: 7f 27                         jg      0x1c2 <_JIT_ENTRY+0x1c2>
// 19b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019d:  R_X86_64_64  .rodata.str1.1
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_NegativeRefcount
// 1af: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b4: 4c 89 e2                      movq    %r12, %rdx
// 1b7: ff d0                         callq   *%rax
// 1b9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1be: 49 8b 04 24                   movq    (%r12), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 2b                         js      0x1f1 <_JIT_ENTRY+0x1f1>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d7: 49 ff 0c 24                   decq    (%r12)
// 1db: 75 14                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_Dealloc
// 1e7: 4c 89 e7                      movq    %r12, %rdi
// 1ea: ff d0                         callq   *%rax
// 1ec: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f1: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f5: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1fa: 48 85 c9                      testq   %rcx, %rcx
// 1fd: 0f 84 dc 01 00 00             je      0x3df <_JIT_ENTRY+0x3df>
// 203: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 207: 48 89 08                      movq    %rcx, (%rax)
// 20a: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 20e: 48 8b 00                      movq    (%rax), %rax
// 211: 84 c0                         testb   %al, %al
// 213: 74 18                         je      0x22d <_JIT_ENTRY+0x22d>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_HandlePending
// 21f: ff d0                         callq   *%rax
// 221: 85 c0                         testl   %eax, %eax
// 223: 74 08                         je      0x22d <_JIT_ENTRY+0x22d>
// 225: 4d 89 fe                      movq    %r15, %r14
// 228: e9 b5 01 00 00                jmp     0x3e2 <_JIT_ENTRY+0x3e2>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _JIT_OPARG
// 237: f7 d0                         notl    %eax
// 239: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23e: 4c 63 e0                      movslq  %eax, %r12
// 241: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000243:  R_X86_64_64  PySuper_Type
// 24b: 4f 39 6c e6 e8                cmpq    %r13, -0x18(%r14,%r12,8)
// 250: 0f 85 57 fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 256: 4b 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %rbp
// 25b: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 25f: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 266: 0f 84 41 fe ff ff             je      0xad <_JIT_ENTRY+0xad>
// 26c: 4b 8b 74 e6 f8                movq    -0x8(%r14,%r12,8), %rsi
// 271: 48 8b 03                      movq    (%rbx), %rax
// 274: 48 8b 40 20                   movq    0x20(%rax), %rax
// 278: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027a:  R_X86_64_64  _JIT_OPARG
// 282: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 288: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _PySuper_Lookup
// 297: 48 89 ef                      movq    %rbp, %rdi
// 29a: 49 89 f7                      movq    %rsi, %r15
// 29d: 31 c9                         xorl    %ecx, %ecx
// 29f: ff d0                         callq   *%rax
// 2a1: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2a6: 49 8b 45 00                   movq    (%r13), %rax
// 2aa: 48 85 c0                      testq   %rax, %rax
// 2ad: 7f 22                         jg      0x2d1 <_JIT_ENTRY+0x2d1>
// 2af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_NegativeRefcount
// 2c3: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 2c8: 4c 89 ea                      movq    %r13, %rdx
// 2cb: ff d0                         callq   *%rax
// 2cd: 49 8b 45 00                   movq    (%r13), %rax
// 2d1: 85 c0                         testl   %eax, %eax
// 2d3: 78 28                         js      0x2fd <_JIT_ENTRY+0x2fd>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2df: ff d0                         callq   *%rax
// 2e1: 49 ff 4d 00                   decq    (%r13)
// 2e5: 75 16                         jne     0x2fd <_JIT_ENTRY+0x2fd>
// 2e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e9:  R_X86_64_64  PySuper_Type
// 2f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f3:  R_X86_64_64  _Py_Dealloc
// 2fb: ff d0                         callq   *%rax
// 2fd: 48 8b 45 00                   movq    (%rbp), %rax
// 301: 48 85 c0                      testq   %rax, %rax
// 304: 7f 22                         jg      0x328 <_JIT_ENTRY+0x328>
// 306: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000308:  R_X86_64_64  .rodata.str1.1
// 310: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000312:  R_X86_64_64  _Py_NegativeRefcount
// 31a: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 31f: 48 89 ea                      movq    %rbp, %rdx
// 322: ff d0                         callq   *%rax
// 324: 48 8b 45 00                   movq    (%rbp), %rax
// 328: 85 c0                         testl   %eax, %eax
// 32a: 4d 89 fd                      movq    %r15, %r13
// 32d: 78 21                         js      0x350 <_JIT_ENTRY+0x350>
// 32f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000331:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 339: ff d0                         callq   *%rax
// 33b: 48 ff 4d 00                   decq    (%rbp)
// 33f: 75 0f                         jne     0x350 <_JIT_ENTRY+0x350>
// 341: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000343:  R_X86_64_64  _Py_Dealloc
// 34b: 48 89 ef                      movq    %rbp, %rdi
// 34e: ff d0                         callq   *%rax
// 350: 49 8b 45 00                   movq    (%r13), %rax
// 354: 48 85 c0                      testq   %rax, %rax
// 357: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 35c: 7f 22                         jg      0x380 <_JIT_ENTRY+0x380>
// 35e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000360:  R_X86_64_64  .rodata.str1.1
// 368: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036a:  R_X86_64_64  _Py_NegativeRefcount
// 372: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 377: 4c 89 ea                      movq    %r13, %rdx
// 37a: ff d0                         callq   *%rax
// 37c: 49 8b 45 00                   movq    (%r13), %rax
// 380: 85 c0                         testl   %eax, %eax
// 382: 78 21                         js      0x3a5 <_JIT_ENTRY+0x3a5>
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38e: ff d0                         callq   *%rax
// 390: 49 ff 4d 00                   decq    (%r13)
// 394: 75 0f                         jne     0x3a5 <_JIT_ENTRY+0x3a5>
// 396: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000398:  R_X86_64_64  _Py_Dealloc
// 3a0: 4c 89 ef                      movq    %r13, %rdi
// 3a3: ff d0                         callq   *%rax
// 3a5: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 3a9: 48 83 c0 e8                   addq    $-0x18, %rax
// 3ad: 4d 85 ff                      testq   %r15, %r15
// 3b0: 74 2d                         je      0x3df <_JIT_ENTRY+0x3df>
// 3b2: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 3b6: 48 83 c6 f0                   addq    $-0x10, %rsi
// 3ba: 4c 89 38                      movq    %r15, (%rax)
// 3bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bf:  R_X86_64_64  _JIT_CONTINUE
// 3c7: 48 89 df                      movq    %rbx, %rdi
// 3ca: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3cf: 48 83 c4 18                   addq    $0x18, %rsp
// 3d3: 5b                            popq    %rbx
// 3d4: 41 5c                         popq    %r12
// 3d6: 41 5d                         popq    %r13
// 3d8: 41 5e                         popq    %r14
// 3da: 41 5f                         popq    %r15
// 3dc: 5d                            popq    %rbp
// 3dd: ff e0                         jmpq    *%rax
// 3df: 49 89 c6                      movq    %rax, %r14
// 3e2: 49 29 de                      subq    %rbx, %r14
// 3e5: 49 83 c6 b8                   addq    $-0x48, %r14
// 3e9: 49 c1 ee 03                   shrq    $0x3, %r14
// 3ed: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3f1: 31 c0                         xorl    %eax, %eax
// 3f3: e9 dd fc ff ff                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 3f8: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_ATTR_code_body[1017] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4b, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7b, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x76, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xd8, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x85, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xdc, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfe, 0xe9, 0xb5, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x39, 0x6c, 0xe6, 0xe8, 0x0f, 0x85, 0x57, 0xfe, 0xff, 0xff, 0x4b, 0x8b, 0x6c, 0xe6, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x41, 0xfe, 0xff, 0xff, 0x4b, 0x8b, 0x74, 0xe6, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x49, 0x89, 0xf7, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4d, 0x89, 0xfd, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xe8, 0x4d, 0x85, 0xff, 0x74, 0x2d, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xdd, 0xfc, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_ATTR_code_holes[33] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x343, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x360, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x398, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3bf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_ATTR_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_METHOD.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 50                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 31                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 26                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 14 24                   movq    %rdx, (%rsp)
// 96: 7e 4b                         jle     0xe3 <_JIT_ENTRY+0xe3>
// 98: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a0: 75 7b                         jne     0x11d <_JIT_ENTRY+0x11d>
// a2: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a7: eb 76                         jmp     0x11f <_JIT_ENTRY+0x11f>
// a9: 4d 89 f7                      movq    %r14, %r15
// ac: 49 29 df                      subq    %rbx, %r15
// af: 49 83 c7 b8                   addq    $-0x48, %r15
// b3: 49 c1 ef 03                   shrq    $0x3, %r15
// b7: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// bb: 48 8b 03                      movq    (%rbx), %rax
// be: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c0:  R_X86_64_64  _JIT_TARGET
// c8: 89 c9                         movl    %ecx, %ecx
// ca: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ce: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d4: 48 83 c4 18                   addq    $0x18, %rsp
// d8: 5b                            popq    %rbx
// d9: 41 5c                         popq    %r12
// db: 41 5d                         popq    %r13
// dd: 41 5e                         popq    %r14
// df: 41 5f                         popq    %r15
// e1: 5d                            popq    %rbp
// e2: c3                            retq
// e3: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// e8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ea:  R_X86_64_64  .rodata.str1.1+0x39
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_CheckRecursiveCall
// fc: 48 89 d7                      movq    %rdx, %rdi
// ff: ff d0                         callq   *%rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 0f 85 da 02 00 00             jne     0x3e3 <_JIT_ENTRY+0x3e3>
// 109: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10e: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 113: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 117: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11b: 74 85                         je      0xa2 <_JIT_ENTRY+0xa2>
// 11d: 31 ff                         xorl    %edi, %edi
// 11f: 48 89 ee                      movq    %rbp, %rsi
// 122: 41 ff d0                      callq   *%r8
// 125: 48 8b 3c 24                   movq    (%rsp), %rdi
// 129: ff 47 2c                      incl    0x2c(%rdi)
// 12c: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 131: 48 8b 45 00                   movq    (%rbp), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 26                         jg      0x160 <_JIT_ENTRY+0x160>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 153: 48 89 ea                      movq    %rbp, %rdx
// 156: ff d0                         callq   *%rax
// 158: 48 8b 3c 24                   movq    (%rsp), %rdi
// 15c: 48 8b 45 00                   movq    (%rbp), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 29                         js      0x18d <_JIT_ENTRY+0x18d>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 3c 24                   movq    (%rsp), %rdi
// 174: 48 ff 4d 00                   decq    (%rbp)
// 178: 75 13                         jne     0x18d <_JIT_ENTRY+0x18d>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_Dealloc
// 184: 48 89 ef                      movq    %rbp, %rdi
// 187: ff d0                         callq   *%rax
// 189: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18d: 49 8b 04 24                   movq    (%r12), %rax
// 191: 48 85 c0                      testq   %rax, %rax
// 194: 7f 26                         jg      0x1bc <_JIT_ENTRY+0x1bc>
// 196: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000198:  R_X86_64_64  .rodata.str1.1
// 1a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a2:  R_X86_64_64  _Py_NegativeRefcount
// 1aa: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1af: 4c 89 e2                      movq    %r12, %rdx
// 1b2: ff d0                         callq   *%rax
// 1b4: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b8: 49 8b 04 24                   movq    (%r12), %rax
// 1bc: 85 c0                         testl   %eax, %eax
// 1be: 78 29                         js      0x1e9 <_JIT_ENTRY+0x1e9>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ca: ff d0                         callq   *%rax
// 1cc: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d0: 49 ff 0c 24                   decq    (%r12)
// 1d4: 75 13                         jne     0x1e9 <_JIT_ENTRY+0x1e9>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_Dealloc
// 1e0: 4c 89 e7                      movq    %r12, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e9: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1ed: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1f2: 48 85 c9                      testq   %rcx, %rcx
// 1f5: 0f 84 e5 01 00 00             je      0x3e0 <_JIT_ENTRY+0x3e0>
// 1fb: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 1ff: 48 89 08                      movq    %rcx, (%rax)
// 202: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 206: 48 8b 00                      movq    (%rax), %rax
// 209: 84 c0                         testb   %al, %al
// 20b: 74 18                         je      0x225 <_JIT_ENTRY+0x225>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_HandlePending
// 217: ff d0                         callq   *%rax
// 219: 85 c0                         testl   %eax, %eax
// 21b: 74 08                         je      0x225 <_JIT_ENTRY+0x225>
// 21d: 4d 89 fe                      movq    %r15, %r14
// 220: e9 be 01 00 00                jmp     0x3e3 <_JIT_ENTRY+0x3e3>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _JIT_OPARG
// 22f: f7 d0                         notl    %eax
// 231: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 236: 4c 63 e0                      movslq  %eax, %r12
// 239: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000023b:  R_X86_64_64  PySuper_Type
// 243: 4f 39 6c e6 e8                cmpq    %r13, -0x18(%r14,%r12,8)
// 248: 0f 85 5e fe ff ff             jne     0xac <_JIT_ENTRY+0xac>
// 24e: 4b 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %rbp
// 253: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 257: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 25e: 0f 84 48 fe ff ff             je      0xac <_JIT_ENTRY+0xac>
// 264: 4f 8b 7c e6 f8                movq    -0x8(%r14,%r12,8), %r15
// 269: 48 8b 03                      movq    (%rbx), %rax
// 26c: 48 8b 40 20                   movq    0x20(%rax), %rax
// 270: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000272:  R_X86_64_64  _JIT_OPARG
// 27a: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 280: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 285: c7 44 24 14 00 00 00 00       movl    $0x0, 0x14(%rsp)
// 28d: 49 8b 47 08                   movq    0x8(%r15), %rax
// 291: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000293:  R_X86_64_64  PyObject_GenericGetAttr
// 29b: 31 f6                         xorl    %esi, %esi
// 29d: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// 2a4: 48 8d 4c 24 14                leaq    0x14(%rsp), %rcx
// 2a9: 48 0f 45 ce                   cmovneq %rsi, %rcx
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _PySuper_Lookup
// 2b7: 48 89 ef                      movq    %rbp, %rdi
// 2ba: 4c 89 fe                      movq    %r15, %rsi
// 2bd: ff d0                         callq   *%rax
// 2bf: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2c4: 49 8b 45 00                   movq    (%r13), %rax
// 2c8: 48 85 c0                      testq   %rax, %rax
// 2cb: 7f 22                         jg      0x2ef <_JIT_ENTRY+0x2ef>
// 2cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cf:  R_X86_64_64  .rodata.str1.1
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_NegativeRefcount
// 2e1: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 2e6: 4c 89 ea                      movq    %r13, %rdx
// 2e9: ff d0                         callq   *%rax
// 2eb: 49 8b 45 00                   movq    (%r13), %rax
// 2ef: 85 c0                         testl   %eax, %eax
// 2f1: 78 28                         js      0x31b <_JIT_ENTRY+0x31b>
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2fd: ff d0                         callq   *%rax
// 2ff: 49 ff 4d 00                   decq    (%r13)
// 303: 75 16                         jne     0x31b <_JIT_ENTRY+0x31b>
// 305: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000307:  R_X86_64_64  PySuper_Type
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  _Py_Dealloc
// 319: ff d0                         callq   *%rax
// 31b: 48 8b 45 00                   movq    (%rbp), %rax
// 31f: 48 85 c0                      testq   %rax, %rax
// 322: 7f 22                         jg      0x346 <_JIT_ENTRY+0x346>
// 324: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000326:  R_X86_64_64  .rodata.str1.1
// 32e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000330:  R_X86_64_64  _Py_NegativeRefcount
// 338: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 33d: 48 89 ea                      movq    %rbp, %rdx
// 340: ff d0                         callq   *%rax
// 342: 48 8b 45 00                   movq    (%rbp), %rax
// 346: 85 c0                         testl   %eax, %eax
// 348: 78 21                         js      0x36b <_JIT_ENTRY+0x36b>
// 34a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 354: ff d0                         callq   *%rax
// 356: 48 ff 4d 00                   decq    (%rbp)
// 35a: 75 0f                         jne     0x36b <_JIT_ENTRY+0x36b>
// 35c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035e:  R_X86_64_64  _Py_Dealloc
// 366: 48 89 ef                      movq    %rbp, %rdi
// 369: ff d0                         callq   *%rax
// 36b: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 370: 48 85 ed                      testq   %rbp, %rbp
// 373: 0f 84 80 00 00 00             je      0x3f9 <_JIT_ENTRY+0x3f9>
// 379: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 37d: 49 83 c5 f8                   addq    $-0x8, %r13
// 381: 83 7c 24 14 00                cmpl    $0x0, 0x14(%rsp)
// 386: 75 17                         jne     0x39f <_JIT_ENTRY+0x39f>
// 388: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038a:  R_X86_64_64  .text+0x450
// 392: bf 21 06 00 00                movl    $0x621, %edi            # imm = 0x621
// 397: 4c 89 fe                      movq    %r15, %rsi
// 39a: ff d0                         callq   *%rax
// 39c: 45 31 ff                      xorl    %r15d, %r15d
// 39f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a1:  R_X86_64_64  _JIT_OPARG
// 3a9: f7 d0                         notl    %eax
// 3ab: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3b0: 48 98                         cltq
// 3b2: 49 89 6c c6 e8                movq    %rbp, -0x18(%r14,%rax,8)
// 3b7: 4d 89 7c c6 f0                movq    %r15, -0x10(%r14,%rax,8)
// 3bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003be:  R_X86_64_64  _JIT_CONTINUE
// 3c6: 48 89 df                      movq    %rbx, %rdi
// 3c9: 4c 89 ee                      movq    %r13, %rsi
// 3cc: 48 8b 14 24                   movq    (%rsp), %rdx
// 3d0: 48 83 c4 18                   addq    $0x18, %rsp
// 3d4: 5b                            popq    %rbx
// 3d5: 41 5c                         popq    %r12
// 3d7: 41 5d                         popq    %r13
// 3d9: 41 5e                         popq    %r14
// 3db: 41 5f                         popq    %r15
// 3dd: 5d                            popq    %rbp
// 3de: ff e0                         jmpq    *%rax
// 3e0: 49 89 c6                      movq    %rax, %r14
// 3e3: 49 29 de                      subq    %rbx, %r14
// 3e6: 49 83 c6 b8                   addq    $-0x48, %r14
// 3ea: 49 c1 ee 03                   shrq    $0x3, %r14
// 3ee: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3f2: 31 c0                         xorl    %eax, %eax
// 3f4: e9 db fc ff ff                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 3f9: 49 8b 07                      movq    (%r15), %rax
// 3fc: 48 85 c0                      testq   %rax, %rax
// 3ff: 7f 21                         jg      0x422 <_JIT_ENTRY+0x422>
// 401: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000403:  R_X86_64_64  .rodata.str1.1
// 40b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040d:  R_X86_64_64  _Py_NegativeRefcount
// 415: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 41a: 4c 89 fa                      movq    %r15, %rdx
// 41d: ff d0                         callq   *%rax
// 41f: 49 8b 07                      movq    (%r15), %rax
// 422: 85 c0                         testl   %eax, %eax
// 424: 78 20                         js      0x446 <_JIT_ENTRY+0x446>
// 426: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000428:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 430: ff d0                         callq   *%rax
// 432: 49 ff 0f                      decq    (%r15)
// 435: 75 0f                         jne     0x446 <_JIT_ENTRY+0x446>
// 437: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000439:  R_X86_64_64  _Py_Dealloc
// 441: 4c 89 ff                      movq    %r15, %rdi
// 444: ff d0                         callq   *%rax
// 446: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 44a: 49 83 c6 e8                   addq    $-0x18, %r14
// 44e: eb 93                         jmp     0x3e3 <_JIT_ENTRY+0x3e3>
// 
// 0000000000000450 <Py_DECREF>:
// 450: 53                            pushq   %rbx
// 451: 48 89 f3                      movq    %rsi, %rbx
// 454: 48 8b 06                      movq    (%rsi), %rax
// 457: 48 85 c0                      testq   %rax, %rax
// 45a: 7e 06                         jle     0x462 <Py_DECREF+0x12>
// 45c: 85 c0                         testl   %eax, %eax
// 45e: 79 24                         jns     0x484 <Py_DECREF+0x34>
// 460: eb 33                         jmp     0x495 <Py_DECREF+0x45>
// 462: 89 fe                         movl    %edi, %esi
// 464: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000466:  R_X86_64_64  .rodata.str1.1
// 46e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000470:  R_X86_64_64  _Py_NegativeRefcount
// 478: 48 89 da                      movq    %rbx, %rdx
// 47b: ff d0                         callq   *%rax
// 47d: 48 8b 03                      movq    (%rbx), %rax
// 480: 85 c0                         testl   %eax, %eax
// 482: 78 11                         js      0x495 <Py_DECREF+0x45>
// 484: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000486:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 48e: ff d0                         callq   *%rax
// 490: 48 ff 0b                      decq    (%rbx)
// 493: 74 02                         je      0x497 <Py_DECREF+0x47>
// 495: 5b                            popq    %rbx
// 496: c3                            retq
// 497: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000499:  R_X86_64_64  _Py_Dealloc
// 4a1: 48 89 df                      movq    %rbx, %rdi
// 4a4: 5b                            popq    %rbx
// 4a5: ff e0                         jmpq    *%rax
// 4a7: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_METHOD_code_body[1192] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x50, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x31, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x26, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4b, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7b, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x76, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xda, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x85, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xe5, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfe, 0xe9, 0xbe, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x39, 0x6c, 0xe6, 0xe8, 0x0f, 0x85, 0x5e, 0xfe, 0xff, 0xff, 0x4b, 0x8b, 0x6c, 0xe6, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x48, 0xfe, 0xff, 0xff, 0x4f, 0x8b, 0x7c, 0xe6, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x14, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x14, 0x48, 0x0f, 0x45, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xe6, 0x49, 0x83, 0xc5, 0xf8, 0x83, 0x7c, 0x24, 0x14, 0x00, 0x75, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x21, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x45, 0x31, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xe8, 0x4d, 0x89, 0x7c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xdb, 0xfc, 0xff, 0xff, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x83, 0xc6, 0xe8, 0xeb, 0x93, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_METHOD_code_holes[40] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x35e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x38a, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x450},
    {0x3a1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3be, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x403, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x40d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x428, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x439, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x466, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x470, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x486, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x499, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_METHOD_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _CALL_BUILTIN_Oplus_MAKE_CELL
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_MAKE_CELL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 f1 01 00 00             jne     0x2fd <_JIT_ENTRY+0x2fd>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 3c 24                   movq    (%rsp), %rdi
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 0f 84 e9 00 00 00             je      0x2fa <_JIT_ENTRY+0x2fa>
// 211: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 215: 48 89 08                      movq    %rcx, (%rax)
// 218: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 21c: 48 8b 00                      movq    (%rax), %rax
// 21f: 84 c0                         testb   %al, %al
// 221: 74 14                         je      0x237 <_JIT_ENTRY+0x237>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_HandlePending
// 22d: ff d0                         callq   *%rax
// 22f: 85 c0                         testl   %eax, %eax
// 231: 0f 85 c6 00 00 00             jne     0x2fd <_JIT_ENTRY+0x2fd>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_OPARG
// 241: 0f b7 c0                      movzwl  %ax, %eax
// 244: 48 8b 7c c3 48                movq    0x48(%rbx,%rax,8), %rdi
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  PyCell_New
// 253: ff d0                         callq   *%rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 0f 84 9f 00 00 00             je      0x2fd <_JIT_ENTRY+0x2fd>
// 25e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000260:  R_X86_64_64  _JIT_OPARG
// 268: 0f b7 c9                      movzwl  %cx, %ecx
// 26b: 4c 8b 64 cb 48                movq    0x48(%rbx,%rcx,8), %r12
// 270: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 275: 4d 85 e4                      testq   %r12, %r12
// 278: 48 8b 14 24                   movq    (%rsp), %rdx
// 27c: 74 5c                         je      0x2da <_JIT_ENTRY+0x2da>
// 27e: 49 8b 04 24                   movq    (%r12), %rax
// 282: 48 85 c0                      testq   %rax, %rax
// 285: 7f 26                         jg      0x2ad <_JIT_ENTRY+0x2ad>
// 287: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000289:  R_X86_64_64  .rodata.str1.1+0x58
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_NegativeRefcount
// 29b: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 2a0: 4c 89 e2                      movq    %r12, %rdx
// 2a3: ff d0                         callq   *%rax
// 2a5: 48 8b 14 24                   movq    (%rsp), %rdx
// 2a9: 49 8b 04 24                   movq    (%r12), %rax
// 2ad: 85 c0                         testl   %eax, %eax
// 2af: 78 29                         js      0x2da <_JIT_ENTRY+0x2da>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bb: ff d0                         callq   *%rax
// 2bd: 48 8b 14 24                   movq    (%rsp), %rdx
// 2c1: 49 ff 0c 24                   decq    (%r12)
// 2c5: 75 13                         jne     0x2da <_JIT_ENTRY+0x2da>
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_Dealloc
// 2d1: 4c 89 e7                      movq    %r12, %rdi
// 2d4: ff d0                         callq   *%rax
// 2d6: 48 8b 14 24                   movq    (%rsp), %rdx
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _JIT_CONTINUE
// 2e4: 48 89 df                      movq    %rbx, %rdi
// 2e7: 4c 89 f6                      movq    %r14, %rsi
// 2ea: 48 83 c4 18                   addq    $0x18, %rsp
// 2ee: 5b                            popq    %rbx
// 2ef: 41 5c                         popq    %r12
// 2f1: 41 5d                         popq    %r13
// 2f3: 41 5e                         popq    %r14
// 2f5: 41 5f                         popq    %r15
// 2f7: 5d                            popq    %rbp
// 2f8: ff e0                         jmpq    *%rax
// 2fa: 49 89 c6                      movq    %rax, %r14
// 2fd: 49 29 de                      subq    %rbx, %r14
// 300: 49 83 c6 b8                   addq    $-0x48, %r14
// 304: 49 c1 ee 03                   shrq    $0x3, %r14
// 308: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 30c: 31 c0                         xorl    %eax, %eax
// 30e: e9 c4 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 313: 
static const unsigned char _CALL_BUILTIN_Oplus_MAKE_CELL_code_body[788] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xf1, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xe9, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xc6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x7c, 0xc3, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xe4, 0x48, 0x8b, 0x14, 0x24, 0x74, 0x5c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xc4, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_MAKE_CELL_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x58},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 88: 
static const unsigned char _CALL_BUILTIN_Oplus_MAKE_CELL_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00};
static const Hole _CALL_BUILTIN_Oplus_MAKE_CELL_data_holes[1];

// _CALL_BUILTIN_Oplus_MAKE_FUNCTION
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_MAKE_FUNCTION.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 04 02 00 00             jne     0x310 <_JIT_ENTRY+0x310>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 3c 24                   movq    (%rsp), %rdi
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 0f 84 fc 00 00 00             je      0x30d <_JIT_ENTRY+0x30d>
// 211: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 215: 48 89 08                      movq    %rcx, (%rax)
// 218: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 21c: 48 8b 00                      movq    (%rax), %rax
// 21f: 84 c0                         testb   %al, %al
// 221: 74 14                         je      0x237 <_JIT_ENTRY+0x237>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_HandlePending
// 22d: ff d0                         callq   *%rax
// 22f: 85 c0                         testl   %eax, %eax
// 231: 0f 85 d1 00 00 00             jne     0x308 <_JIT_ENTRY+0x308>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_OPARG
// 241: f7 d0                         notl    %eax
// 243: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 248: 48 98                         cltq
// 24a: 49 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %rbp
// 24f: 48 8b 73 18                   movq    0x18(%rbx), %rsi
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  PyFunction_New
// 25d: 48 89 ef                      movq    %rbp, %rdi
// 260: ff d0                         callq   *%rax
// 262: 49 89 c5                      movq    %rax, %r13
// 265: 48 8b 45 00                   movq    (%rbp), %rax
// 269: 48 85 c0                      testq   %rax, %rax
// 26c: 7f 22                         jg      0x290 <_JIT_ENTRY+0x290>
// 26e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000270:  R_X86_64_64  .rodata.str1.1
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_NegativeRefcount
// 282: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 287: 48 89 ea                      movq    %rbp, %rdx
// 28a: ff d0                         callq   *%rax
// 28c: 48 8b 45 00                   movq    (%rbp), %rax
// 290: 85 c0                         testl   %eax, %eax
// 292: 78 21                         js      0x2b5 <_JIT_ENTRY+0x2b5>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29e: ff d0                         callq   *%rax
// 2a0: 48 ff 4d 00                   decq    (%rbp)
// 2a4: 75 0f                         jne     0x2b5 <_JIT_ENTRY+0x2b5>
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_Dealloc
// 2b0: 48 89 ef                      movq    %rbp, %rdi
// 2b3: ff d0                         callq   *%rax
// 2b5: 4d 85 ed                      testq   %r13, %r13
// 2b8: 74 4e                         je      0x308 <_JIT_ENTRY+0x308>
// 2ba: 8b 75 5c                      movl    0x5c(%rbp), %esi
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _PyFunction_SetVersion
// 2c7: 4c 89 ef                      movq    %r13, %rdi
// 2ca: ff d0                         callq   *%rax
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _JIT_OPARG
// 2d6: f7 d0                         notl    %eax
// 2d8: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2dd: 48 98                         cltq
// 2df: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _JIT_CONTINUE
// 2ee: 48 89 df                      movq    %rbx, %rdi
// 2f1: 4c 89 e6                      movq    %r12, %rsi
// 2f4: 48 8b 14 24                   movq    (%rsp), %rdx
// 2f8: 48 83 c4 18                   addq    $0x18, %rsp
// 2fc: 5b                            popq    %rbx
// 2fd: 41 5c                         popq    %r12
// 2ff: 41 5d                         popq    %r13
// 301: 41 5e                         popq    %r14
// 303: 41 5f                         popq    %r15
// 305: 5d                            popq    %rbp
// 306: ff e0                         jmpq    *%rax
// 308: 4d 89 e6                      movq    %r12, %r14
// 30b: eb 03                         jmp     0x310 <_JIT_ENTRY+0x310>
// 30d: 49 89 c6                      movq    %rax, %r14
// 310: 49 29 de                      subq    %rbx, %r14
// 313: 49 83 c6 b8                   addq    $-0x48, %r14
// 317: 49 c1 ee 03                   shrq    $0x3, %r14
// 31b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 31f: 31 c0                         xorl    %eax, %eax
// 321: e9 b1 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 326: 
static const unsigned char _CALL_BUILTIN_Oplus_MAKE_FUNCTION_code_body[807] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x04, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xd1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0x8b, 0x73, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x4e, 0x8b, 0x75, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb1, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_MAKE_FUNCTION_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_MAKE_FUNCTION_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_MAKE_FUNCTION_data_holes[1];

// _CALL_BUILTIN_Oplus_MAP_ADD
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_MAP_ADD.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 6f 01 00 00             jne     0x27b <_JIT_ENTRY+0x27b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000172:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 26                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 17e: 41 ff d7                      callq   *%r15
// 181: 48 8b 3c 24                   movq    (%rsp), %rdi
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 20                         js      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d7: 41 ff d7                      callq   *%r15
// 1da: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1de: 49 ff 0c 24                   decq    (%r12)
// 1e2: 75 13                         jne     0x1f7 <_JIT_ENTRY+0x1f7>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_Dealloc
// 1ee: 4c 89 e7                      movq    %r12, %rdi
// 1f1: ff d0                         callq   *%rax
// 1f3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f7: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1fb: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 200: 48 85 c9                      testq   %rcx, %rcx
// 203: 74 73                         je      0x278 <_JIT_ENTRY+0x278>
// 205: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 209: 48 89 08                      movq    %rcx, (%rax)
// 20c: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 210: 48 8b 00                      movq    (%rax), %rax
// 213: 84 c0                         testb   %al, %al
// 215: 74 10                         je      0x227 <_JIT_ENTRY+0x227>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_HandlePending
// 221: ff d0                         callq   *%rax
// 223: 85 c0                         testl   %eax, %eax
// 225: 75 4c                         jne     0x273 <_JIT_ENTRY+0x273>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_OPARG
// 231: 0f b7 c0                      movzwl  %ax, %eax
// 234: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 239: 29 c1                         subl    %eax, %ecx
// 23b: f7 d0                         notl    %eax
// 23d: 48 98                         cltq
// 23f: 49 8b 74 c6 f0                movq    -0x10(%r14,%rax,8), %rsi
// 244: 49 8b 54 c6 f8                movq    -0x8(%r14,%rax,8), %rdx
// 249: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 24d: 49 83 c5 f0                   addq    $-0x10, %r13
// 251: 48 63 c9                      movslq  %ecx, %rcx
// 254: 48 01 c1                      addq    %rax, %rcx
// 257: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _PyDict_SetItem_Take2
// 265: ff d0                         callq   *%rax
// 267: 85 c0                         testl   %eax, %eax
// 269: 4d 0f 44 e5                   cmoveq  %r13, %r12
// 26d: 74 22                         je      0x291 <_JIT_ENTRY+0x291>
// 26f: 49 83 c4 f0                   addq    $-0x10, %r12
// 273: 4d 89 e6                      movq    %r12, %r14
// 276: eb 03                         jmp     0x27b <_JIT_ENTRY+0x27b>
// 278: 49 89 c6                      movq    %rax, %r14
// 27b: 49 29 de                      subq    %rbx, %r14
// 27e: 49 83 c6 b8                   addq    $-0x48, %r14
// 282: 49 c1 ee 03                   shrq    $0x3, %r14
// 286: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 28a: 31 c0                         xorl    %eax, %eax
// 28c: e9 46 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _JIT_CONTINUE
// 29b: 48 89 df                      movq    %rbx, %rdi
// 29e: 4c 89 e6                      movq    %r12, %rsi
// 2a1: 48 8b 14 24                   movq    (%rsp), %rdx
// 2a5: 48 83 c4 18                   addq    $0x18, %rsp
// 2a9: 5b                            popq    %rbx
// 2aa: 41 5c                         popq    %r12
// 2ac: 41 5d                         popq    %r13
// 2ae: 41 5e                         popq    %r14
// 2b0: 41 5f                         popq    %r15
// 2b2: 5d                            popq    %rbp
// 2b3: ff e0                         jmpq    *%rax
// 2b5: 
static const unsigned char _CALL_BUILTIN_Oplus_MAP_ADD_code_body[694] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x6f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x73, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x4c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x74, 0xc6, 0xf0, 0x49, 0x8b, 0x54, 0xc6, 0xf8, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x83, 0xc5, 0xf0, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x4d, 0x0f, 0x44, 0xe5, 0x74, 0x22, 0x49, 0x83, 0xc4, 0xf0, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x46, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_MAP_ADD_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_MAP_ADD_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_MAP_ADD_data_holes[1];

// _CALL_BUILTIN_Oplus_MATCH_CLASS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_MATCH_CLASS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 48                         jle     0xe1 <_JIT_ENTRY+0xe1>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 78                         jne     0x11b <_JIT_ENTRY+0x11b>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 73                         jmp     0x11d <_JIT_ENTRY+0x11d>
// aa: 49 29 de                      subq    %rbx, %r14
// ad: 49 83 c6 b8                   addq    $-0x48, %r14
// b1: 49 c1 ee 03                   shrq    $0x3, %r14
// b5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b9: 48 8b 03                      movq    (%rbx), %rax
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_TARGET
// c6: 89 c9                         movl    %ecx, %ecx
// c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d2: 48 83 c4 18                   addq    $0x18, %rsp
// d6: 5b                            popq    %rbx
// d7: 41 5c                         popq    %r12
// d9: 41 5d                         popq    %r13
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: 5d                            popq    %rbp
// e0: c3                            retq
// e1: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1+0x39
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_CheckRecursiveCall
// fa: 48 89 d7                      movq    %rdx, %rdi
// fd: ff d0                         callq   *%rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 0f 85 b1 02 00 00             jne     0x3b8 <_JIT_ENTRY+0x3b8>
// 107: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10c: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 111: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 115: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 119: 74 88                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11b: 31 ff                         xorl    %edi, %edi
// 11d: 48 89 ee                      movq    %rbp, %rsi
// 120: 41 ff d0                      callq   *%r8
// 123: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 128: ff 47 2c                      incl    0x2c(%rdi)
// 12b: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 130: 48 8b 45 00                   movq    (%rbp), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 27                         jg      0x160 <_JIT_ENTRY+0x160>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 152: 48 89 ea                      movq    %rbp, %rdx
// 155: ff d0                         callq   *%rax
// 157: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 15c: 48 8b 45 00                   movq    (%rbp), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 2b                         js      0x18f <_JIT_ENTRY+0x18f>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 175: 48 ff 4d 00                   decq    (%rbp)
// 179: 75 14                         jne     0x18f <_JIT_ENTRY+0x18f>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: 48 89 ef                      movq    %rbp, %rdi
// 188: ff d0                         callq   *%rax
// 18a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18f: 49 8b 04 24                   movq    (%r12), %rax
// 193: 48 85 c0                      testq   %rax, %rax
// 196: 7f 27                         jg      0x1bf <_JIT_ENTRY+0x1bf>
// 198: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019a:  R_X86_64_64  .rodata.str1.1
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_NegativeRefcount
// 1ac: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b1: 4c 89 e2                      movq    %r12, %rdx
// 1b4: ff d0                         callq   *%rax
// 1b6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1bb: 49 8b 04 24                   movq    (%r12), %rax
// 1bf: 85 c0                         testl   %eax, %eax
// 1c1: 78 2b                         js      0x1ee <_JIT_ENTRY+0x1ee>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d4: 49 ff 0c 24                   decq    (%r12)
// 1d8: 75 14                         jne     0x1ee <_JIT_ENTRY+0x1ee>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_Dealloc
// 1e4: 4c 89 e7                      movq    %r12, %rdi
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ee: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f2: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f7: 48 85 c9                      testq   %rcx, %rcx
// 1fa: 0f 84 b5 01 00 00             je      0x3b5 <_JIT_ENTRY+0x3b5>
// 200: 48 89 08                      movq    %rcx, (%rax)
// 203: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 207: 48 8b 00                      movq    (%rax), %rax
// 20a: 84 c0                         testb   %al, %al
// 20c: 74 1e                         je      0x22c <_JIT_ENTRY+0x22c>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_HandlePending
// 218: ff d0                         callq   *%rax
// 21a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 21f: 85 c0                         testl   %eax, %eax
// 221: 74 09                         je      0x22c <_JIT_ENTRY+0x22c>
// 223: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 227: e9 8c 01 00 00                jmp     0x3b8 <_JIT_ENTRY+0x3b8>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _JIT_OPARG
// 236: 89 c1                         movl    %eax, %ecx
// 238: f7 d1                         notl    %ecx
// 23a: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 240: 4c 63 e9                      movslq  %ecx, %r13
// 243: 4f 8b 44 ee f8                movq    -0x8(%r14,%r13,8), %r8
// 248: 4f 8b 64 ee e8                movq    -0x18(%r14,%r13,8), %r12
// 24d: 4b 8b 6c ee f0                movq    -0x10(%r14,%r13,8), %rbp
// 252: 0f b7 c8                      movzwl  %ax, %ecx
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _PyEval_MatchClass
// 25f: 4c 89 e6                      movq    %r12, %rsi
// 262: 48 89 ea                      movq    %rbp, %rdx
// 265: 4d 89 c7                      movq    %r8, %r15
// 268: ff d0                         callq   *%rax
// 26a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 26f: 49 8b 04 24                   movq    (%r12), %rax
// 273: 48 85 c0                      testq   %rax, %rax
// 276: 7f 22                         jg      0x29a <_JIT_ENTRY+0x29a>
// 278: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027a:  R_X86_64_64  .rodata.str1.1
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_NegativeRefcount
// 28c: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 291: 4c 89 e2                      movq    %r12, %rdx
// 294: ff d0                         callq   *%rax
// 296: 49 8b 04 24                   movq    (%r12), %rax
// 29a: 85 c0                         testl   %eax, %eax
// 29c: 78 21                         js      0x2bf <_JIT_ENTRY+0x2bf>
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 ff 0c 24                   decq    (%r12)
// 2ae: 75 0f                         jne     0x2bf <_JIT_ENTRY+0x2bf>
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_Dealloc
// 2ba: 4c 89 e7                      movq    %r12, %rdi
// 2bd: ff d0                         callq   *%rax
// 2bf: 48 8b 45 00                   movq    (%rbp), %rax
// 2c3: 48 85 c0                      testq   %rax, %rax
// 2c6: 7f 22                         jg      0x2ea <_JIT_ENTRY+0x2ea>
// 2c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ca:  R_X86_64_64  .rodata.str1.1
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 2e1: 48 89 ea                      movq    %rbp, %rdx
// 2e4: ff d0                         callq   *%rax
// 2e6: 48 8b 45 00                   movq    (%rbp), %rax
// 2ea: 85 c0                         testl   %eax, %eax
// 2ec: 78 21                         js      0x30f <_JIT_ENTRY+0x30f>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f8: ff d0                         callq   *%rax
// 2fa: 48 ff 4d 00                   decq    (%rbp)
// 2fe: 75 0f                         jne     0x30f <_JIT_ENTRY+0x30f>
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _Py_Dealloc
// 30a: 48 89 ef                      movq    %rbp, %rdi
// 30d: ff d0                         callq   *%rax
// 30f: 49 8b 07                      movq    (%r15), %rax
// 312: 48 85 c0                      testq   %rax, %rax
// 315: 7f 21                         jg      0x338 <_JIT_ENTRY+0x338>
// 317: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000319:  R_X86_64_64  .rodata.str1.1
// 321: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000323:  R_X86_64_64  _Py_NegativeRefcount
// 32b: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 330: 4c 89 fa                      movq    %r15, %rdx
// 333: ff d0                         callq   *%rax
// 335: 49 8b 07                      movq    (%r15), %rax
// 338: 85 c0                         testl   %eax, %eax
// 33a: 78 20                         js      0x35c <_JIT_ENTRY+0x35c>
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 346: ff d0                         callq   *%rax
// 348: 49 ff 0f                      decq    (%r15)
// 34b: 75 0f                         jne     0x35c <_JIT_ENTRY+0x35c>
// 34d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034f:  R_X86_64_64  _Py_Dealloc
// 357: 4c 89 ff                      movq    %r15, %rdi
// 35a: ff d0                         callq   *%rax
// 35c: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 360: 48 83 c0 e8                   addq    $-0x18, %rax
// 364: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 369: 4d 85 ff                      testq   %r15, %r15
// 36c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 371: 74 28                         je      0x39b <_JIT_ENTRY+0x39b>
// 373: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 377: 48 83 c6 f0                   addq    $-0x10, %rsi
// 37b: 4c 89 38                      movq    %r15, (%rax)
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _JIT_CONTINUE
// 388: 48 89 df                      movq    %rbx, %rdi
// 38b: 48 83 c4 18                   addq    $0x18, %rsp
// 38f: 5b                            popq    %rbx
// 390: 41 5c                         popq    %r12
// 392: 41 5d                         popq    %r13
// 394: 41 5e                         popq    %r14
// 396: 41 5f                         popq    %r15
// 398: 5d                            popq    %rbp
// 399: ff e0                         jmpq    *%rax
// 39b: 48 8b 4a 68                   movq    0x68(%rdx), %rcx
// 39f: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000003a1:  R_X86_64_64  _Py_NoneStruct
// 3a9: 48 85 c9                      testq   %rcx, %rcx
// 3ac: 74 c5                         je      0x373 <_JIT_ENTRY+0x373>
// 3ae: 48 83 79 08 00                cmpq    $0x0, 0x8(%rcx)
// 3b3: 74 be                         je      0x373 <_JIT_ENTRY+0x373>
// 3b5: 49 89 c6                      movq    %rax, %r14
// 3b8: 49 29 de                      subq    %rbx, %r14
// 3bb: 49 83 c6 b8                   addq    $-0x48, %r14
// 3bf: 49 c1 ee 03                   shrq    $0x3, %r14
// 3c3: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3c7: 31 c0                         xorl    %eax, %eax
// 3c9: e9 04 fd ff ff                jmp     0xd2 <_JIT_ENTRY+0xd2>
// 3ce: 
static const unsigned char _CALL_BUILTIN_Oplus_MATCH_CLASS_code_body[975] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x78, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x73, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xb1, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x88, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb5, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x8c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe9, 0x4f, 0x8b, 0x44, 0xee, 0xf8, 0x4f, 0x8b, 0x64, 0xee, 0xe8, 0x4b, 0x8b, 0x6c, 0xee, 0xf0, 0x0f, 0xb7, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x4d, 0x89, 0xc7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xe8, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4d, 0x85, 0xff, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x74, 0x28, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x4a, 0x68, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x74, 0xc5, 0x48, 0x83, 0x79, 0x08, 0x00, 0x74, 0xbe, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x04, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_MATCH_CLASS_code_holes[31] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_MATCH_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_MATCH_CLASS_data_holes[1];

// _CALL_BUILTIN_Oplus_MATCH_KEYS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_MATCH_KEYS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 de                      subq    %rbx, %r14
// b9: 49 83 c6 b8                   addq    $-0x48, %r14
// bd: 49 c1 ee 03                   shrq    $0x3, %r14
// c1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x39
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 f7                      movq    %r14, %r15
// 112: e9 a7 01 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 4c 89 fe                      movq    %r15, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 48 8b 3c 24                   movq    (%rsp), %rdi
// 145: ff 47 2c                      incl    0x2c(%rdi)
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 49 8b 07                      movq    (%r15), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 2a                         jg      0x17f <_JIT_ENTRY+0x17f>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16e: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 173: 4c 89 fa                      movq    %r15, %rdx
// 176: ff d0                         callq   *%rax
// 178: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17c: 49 8b 07                      movq    (%r15), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 2f                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 48 ff 08                      decq    (%rax)
// 19b: 75 15                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 26                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 29                         js      0x20e <_JIT_ENTRY+0x20e>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 13                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 20e: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 212: 48 83 7c 24 10 00             cmpq    $0x0, 0x10(%rsp)
// 218: 0f 84 9d 00 00 00             je      0x2bb <_JIT_ENTRY+0x2bb>
// 21e: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 222: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 227: 48 89 08                      movq    %rcx, (%rax)
// 22a: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 22e: 48 8b 00                      movq    (%rax), %rax
// 231: 84 c0                         testb   %al, %al
// 233: 74 14                         je      0x249 <_JIT_ENTRY+0x249>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_HandlePending
// 23f: ff d0                         callq   *%rax
// 241: 48 8b 3c 24                   movq    (%rsp), %rdi
// 245: 85 c0                         testl   %eax, %eax
// 247: 75 75                         jne     0x2be <_JIT_ENTRY+0x2be>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 74 c6 f0                movq    -0x10(%r14,%rax,8), %rsi
// 261: 49 8b 54 c6 f8                movq    -0x8(%r14,%rax,8), %rdx
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _PyEval_MatchKeys
// 270: 49 89 fc                      movq    %rdi, %r12
// 273: ff d0                         callq   *%rax
// 275: 48 85 c0                      testq   %rax, %rax
// 278: 74 44                         je      0x2be <_JIT_ENTRY+0x2be>
// 27a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027c:  R_X86_64_64  _JIT_OPARG
// 284: f7 d1                         notl    %ecx
// 286: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 28c: 48 63 c9                      movslq  %ecx, %rcx
// 28f: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 293: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 297: 48 83 c6 08                   addq    $0x8, %rsi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _JIT_CONTINUE
// 2a5: 48 89 df                      movq    %rbx, %rdi
// 2a8: 4c 89 e2                      movq    %r12, %rdx
// 2ab: 48 83 c4 18                   addq    $0x18, %rsp
// 2af: 5b                            popq    %rbx
// 2b0: 41 5c                         popq    %r12
// 2b2: 41 5d                         popq    %r13
// 2b4: 41 5e                         popq    %r14
// 2b6: 41 5f                         popq    %r15
// 2b8: 5d                            popq    %rbp
// 2b9: ff e0                         jmpq    *%rax
// 2bb: 49 89 c7                      movq    %rax, %r15
// 2be: 49 29 df                      subq    %rbx, %r15
// 2c1: 49 83 c7 b8                   addq    $-0x48, %r15
// 2c5: 49 c1 ef 03                   shrq    $0x3, %r15
// 2c9: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2cd: 31 c0                         xorl    %eax, %eax
// 2cf: e9 0a fe ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 2d4: 
static const unsigned char _CALL_BUILTIN_Oplus_MATCH_KEYS_code_body[725] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf7, 0xe9, 0xa7, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x0f, 0x84, 0x9d, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x75, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x74, 0xc6, 0xf0, 0x49, 0x8b, 0x54, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0xfc, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x44, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x0a, 0xfe, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_MATCH_KEYS_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_MATCH_KEYS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_MATCH_KEYS_data_holes[1];

// _CALL_BUILTIN_Oplus_MATCH_MAPPING
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_MATCH_MAPPING.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 30 01 00 00             jne     0x23c <_JIT_ENTRY+0x23c>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 4c 8b 04 24                   movq    (%rsp), %r8
// 136: 41 ff 40 2c                   incl    0x2c(%r8)
// 13a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13f: 49 8b 07                      movq    (%r15), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 7f 2a                         jg      0x171 <_JIT_ENTRY+0x171>
// 147: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 160: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 165: 4c 89 fa                      movq    %r15, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 4c 8b 04 24                   movq    (%rsp), %r8
// 16e: 49 8b 07                      movq    (%r15), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 2f                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 4c 8b 04 24                   movq    (%rsp), %r8
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 4c 8b 04 24                   movq    (%rsp), %r8
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 29                         js      0x200 <_JIT_ENTRY+0x200>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 4c 8b 04 24                   movq    (%rsp), %r8
// 1e7: 49 ff 0c 24                   decq    (%r12)
// 1eb: 75 13                         jne     0x200 <_JIT_ENTRY+0x200>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_Dealloc
// 1f7: 4c 89 e7                      movq    %r12, %rdi
// 1fa: ff d0                         callq   *%rax
// 1fc: 4c 8b 04 24                   movq    (%rsp), %r8
// 200: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 204: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 209: 48 85 c9                      testq   %rcx, %rcx
// 20c: 74 2b                         je      0x239 <_JIT_ENTRY+0x239>
// 20e: 48 89 08                      movq    %rcx, (%rax)
// 211: 49 8b 40 10                   movq    0x10(%r8), %rax
// 215: 48 8b 00                      movq    (%rax), %rax
// 218: 84 c0                         testb   %al, %al
// 21a: 74 36                         je      0x252 <_JIT_ENTRY+0x252>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_HandlePending
// 226: 4c 89 c7                      movq    %r8, %rdi
// 229: ff d0                         callq   *%rax
// 22b: 4c 8b 04 24                   movq    (%rsp), %r8
// 22f: 85 c0                         testl   %eax, %eax
// 231: 74 1f                         je      0x252 <_JIT_ENTRY+0x252>
// 233: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 237: eb 03                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 239: 49 89 c6                      movq    %rax, %r14
// 23c: 49 29 de                      subq    %rbx, %r14
// 23f: 49 83 c6 b8                   addq    $-0x48, %r14
// 243: 49 c1 ee 03                   shrq    $0x3, %r14
// 247: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24b: 31 c0                         xorl    %eax, %eax
// 24d: e9 85 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _JIT_OPARG
// 25c: f7 d0                         notl    %eax
// 25e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 263: 48 98                         cltq
// 265: 49 8b 4c c6 f8                movq    -0x8(%r14,%rax,8), %rcx
// 26a: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 26e: f6 81 a8 00 00 00 40          testb   $0x40, 0xa8(%rcx)
// 275: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000277:  R_X86_64_64  _Py_FalseStruct
// 27f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000281:  R_X86_64_64  _Py_TrueStruct
// 289: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 28d: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 291: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 295: 48 83 c6 08                   addq    $0x8, %rsi
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 48 89 df                      movq    %rbx, %rdi
// 2a6: 4c 89 c2                      movq    %r8, %rdx
// 2a9: 48 83 c4 18                   addq    $0x18, %rsp
// 2ad: 5b                            popq    %rbx
// 2ae: 41 5c                         popq    %r12
// 2b0: 41 5d                         popq    %r13
// 2b2: 41 5e                         popq    %r14
// 2b4: 41 5f                         popq    %r15
// 2b6: 5d                            popq    %rbp
// 2b7: ff e0                         jmpq    *%rax
// 2b9: 
static const unsigned char _CALL_BUILTIN_Oplus_MATCH_MAPPING_code_body[698] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x30, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x85, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_MATCH_MAPPING_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_MATCH_MAPPING_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_MATCH_MAPPING_data_holes[1];

// _CALL_BUILTIN_Oplus_MATCH_SEQUENCE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_MATCH_SEQUENCE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 30 01 00 00             jne     0x23c <_JIT_ENTRY+0x23c>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 4c 8b 04 24                   movq    (%rsp), %r8
// 136: 41 ff 40 2c                   incl    0x2c(%r8)
// 13a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13f: 49 8b 07                      movq    (%r15), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 7f 2a                         jg      0x171 <_JIT_ENTRY+0x171>
// 147: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 160: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 165: 4c 89 fa                      movq    %r15, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 4c 8b 04 24                   movq    (%rsp), %r8
// 16e: 49 8b 07                      movq    (%r15), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 2f                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 4c 8b 04 24                   movq    (%rsp), %r8
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 4c 8b 04 24                   movq    (%rsp), %r8
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 29                         js      0x200 <_JIT_ENTRY+0x200>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 4c 8b 04 24                   movq    (%rsp), %r8
// 1e7: 49 ff 0c 24                   decq    (%r12)
// 1eb: 75 13                         jne     0x200 <_JIT_ENTRY+0x200>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_Dealloc
// 1f7: 4c 89 e7                      movq    %r12, %rdi
// 1fa: ff d0                         callq   *%rax
// 1fc: 4c 8b 04 24                   movq    (%rsp), %r8
// 200: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 204: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 209: 48 85 c9                      testq   %rcx, %rcx
// 20c: 74 2b                         je      0x239 <_JIT_ENTRY+0x239>
// 20e: 48 89 08                      movq    %rcx, (%rax)
// 211: 49 8b 40 10                   movq    0x10(%r8), %rax
// 215: 48 8b 00                      movq    (%rax), %rax
// 218: 84 c0                         testb   %al, %al
// 21a: 74 36                         je      0x252 <_JIT_ENTRY+0x252>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_HandlePending
// 226: 4c 89 c7                      movq    %r8, %rdi
// 229: ff d0                         callq   *%rax
// 22b: 4c 8b 04 24                   movq    (%rsp), %r8
// 22f: 85 c0                         testl   %eax, %eax
// 231: 74 1f                         je      0x252 <_JIT_ENTRY+0x252>
// 233: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 237: eb 03                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 239: 49 89 c6                      movq    %rax, %r14
// 23c: 49 29 de                      subq    %rbx, %r14
// 23f: 49 83 c6 b8                   addq    $-0x48, %r14
// 243: 49 c1 ee 03                   shrq    $0x3, %r14
// 247: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24b: 31 c0                         xorl    %eax, %eax
// 24d: e9 85 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _JIT_OPARG
// 25c: f7 d0                         notl    %eax
// 25e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 263: 48 98                         cltq
// 265: 49 8b 4c c6 f8                movq    -0x8(%r14,%rax,8), %rcx
// 26a: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 26e: f6 81 a8 00 00 00 20          testb   $0x20, 0xa8(%rcx)
// 275: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000277:  R_X86_64_64  _Py_FalseStruct
// 27f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000281:  R_X86_64_64  _Py_TrueStruct
// 289: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 28d: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 291: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 295: 48 83 c6 08                   addq    $0x8, %rsi
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 48 89 df                      movq    %rbx, %rdi
// 2a6: 4c 89 c2                      movq    %r8, %rdx
// 2a9: 48 83 c4 18                   addq    $0x18, %rsp
// 2ad: 5b                            popq    %rbx
// 2ae: 41 5c                         popq    %r12
// 2b0: 41 5d                         popq    %r13
// 2b2: 41 5e                         popq    %r14
// 2b4: 41 5f                         popq    %r15
// 2b6: 5d                            popq    %rbp
// 2b7: ff e0                         jmpq    *%rax
// 2b9: 
static const unsigned char _CALL_BUILTIN_Oplus_MATCH_SEQUENCE_code_body[698] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x30, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x85, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_MATCH_SEQUENCE_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_MATCH_SEQUENCE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_MATCH_SEQUENCE_data_holes[1];

// _CALL_BUILTIN_Oplus_NOP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_NOP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 4d 01 00 00             jne     0x259 <_JIT_ENTRY+0x259>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 49                         je      0x256 <_JIT_ENTRY+0x256>
// 20d: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 17                         je      0x236 <_JIT_ENTRY+0x236>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: 48 89 d7                      movq    %rdx, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 14 24                   movq    (%rsp), %rdx
// 232: 85 c0                         testl   %eax, %eax
// 234: 75 23                         jne     0x259 <_JIT_ENTRY+0x259>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _JIT_CONTINUE
// 240: 48 89 df                      movq    %rbx, %rdi
// 243: 4c 89 f6                      movq    %r14, %rsi
// 246: 48 83 c4 18                   addq    $0x18, %rsp
// 24a: 5b                            popq    %rbx
// 24b: 41 5c                         popq    %r12
// 24d: 41 5d                         popq    %r13
// 24f: 41 5e                         popq    %r14
// 251: 41 5f                         popq    %r15
// 253: 5d                            popq    %rbp
// 254: ff e0                         jmpq    *%rax
// 256: 49 89 c6                      movq    %rax, %r14
// 259: 49 29 de                      subq    %rbx, %r14
// 25c: 49 83 c6 b8                   addq    $-0x48, %r14
// 260: 49 c1 ee 03                   shrq    $0x3, %r14
// 264: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 268: 31 c0                         xorl    %eax, %eax
// 26a: e9 68 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 26f: 
static const unsigned char _CALL_BUILTIN_Oplus_NOP_code_body[624] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x4d, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x49, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x68, 0xfe, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_NOP_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_NOP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_NOP_data_holes[1];

// _CALL_BUILTIN_Oplus_POP_EXCEPT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_POP_EXCEPT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 df                      subq    %rbx, %r15
// b2: 49 83 c7 b8                   addq    $-0x48, %r15
// b6: 49 c1 ef 03                   shrq    $0x3, %r15
// ba: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 f5 01 00 00             jne     0x301 <_JIT_ENTRY+0x301>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12c: 4c 89 f6                      movq    %r14, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 4c 8b 04 24                   movq    (%rsp), %r8
// 136: 41 ff 40 2c                   incl    0x2c(%r8)
// 13a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13f: 49 8b 06                      movq    (%r14), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 7f 2a                         jg      0x171 <_JIT_ENTRY+0x171>
// 147: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 160: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 165: 4c 89 f2                      movq    %r14, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 4c 8b 04 24                   movq    (%rsp), %r8
// 16e: 49 8b 06                      movq    (%r14), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 2f                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 4c 8b 04 24                   movq    (%rsp), %r8
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 4c 8b 04 24                   movq    (%rsp), %r8
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 29                         js      0x200 <_JIT_ENTRY+0x200>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 4c 8b 04 24                   movq    (%rsp), %r8
// 1e7: 49 ff 0c 24                   decq    (%r12)
// 1eb: 75 13                         jne     0x200 <_JIT_ENTRY+0x200>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_Dealloc
// 1f7: 4c 89 e7                      movq    %r12, %rdi
// 1fa: ff d0                         callq   *%rax
// 1fc: 4c 8b 04 24                   movq    (%rsp), %r8
// 200: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 204: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 209: 48 85 c9                      testq   %rcx, %rcx
// 20c: 0f 84 ec 00 00 00             je      0x2fe <_JIT_ENTRY+0x2fe>
// 212: 48 89 08                      movq    %rcx, (%rax)
// 215: 49 8b 40 10                   movq    0x10(%r8), %rax
// 219: 48 8b 00                      movq    (%rax), %rax
// 21c: 84 c0                         testb   %al, %al
// 21e: 74 20                         je      0x240 <_JIT_ENTRY+0x240>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_HandlePending
// 22a: 4c 89 c7                      movq    %r8, %rdi
// 22d: ff d0                         callq   *%rax
// 22f: 4c 8b 04 24                   movq    (%rsp), %r8
// 233: 85 c0                         testl   %eax, %eax
// 235: 74 09                         je      0x240 <_JIT_ENTRY+0x240>
// 237: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 23b: e9 c1 00 00 00                jmp     0x301 <_JIT_ENTRY+0x301>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _JIT_OPARG
// 24a: f7 d0                         notl    %eax
// 24c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 251: 48 98                         cltq
// 253: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 257: 49 83 c4 f8                   addq    $-0x8, %r12
// 25b: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// 260: 49 8b 48 70                   movq    0x70(%r8), %rcx
// 264: 4c 8b 39                      movq    (%rcx), %r15
// 267: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000269:  R_X86_64_64  _Py_NoneStruct
// 271: 31 f6                         xorl    %esi, %esi
// 273: 48 39 d0                      cmpq    %rdx, %rax
// 276: 48 0f 45 f0                   cmovneq %rax, %rsi
// 27a: 48 89 31                      movq    %rsi, (%rcx)
// 27d: 4d 85 ff                      testq   %r15, %r15
// 280: 74 59                         je      0x2db <_JIT_ENTRY+0x2db>
// 282: 49 8b 07                      movq    (%r15), %rax
// 285: 48 85 c0                      testq   %rax, %rax
// 288: 7f 25                         jg      0x2af <_JIT_ENTRY+0x2af>
// 28a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028c:  R_X86_64_64  .rodata.str1.1+0x58
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_NegativeRefcount
// 29e: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 2a3: 4c 89 fa                      movq    %r15, %rdx
// 2a6: ff d0                         callq   *%rax
// 2a8: 4c 8b 04 24                   movq    (%rsp), %r8
// 2ac: 49 8b 07                      movq    (%r15), %rax
// 2af: 85 c0                         testl   %eax, %eax
// 2b1: 78 28                         js      0x2db <_JIT_ENTRY+0x2db>
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bd: ff d0                         callq   *%rax
// 2bf: 4c 8b 04 24                   movq    (%rsp), %r8
// 2c3: 49 ff 0f                      decq    (%r15)
// 2c6: 75 13                         jne     0x2db <_JIT_ENTRY+0x2db>
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _Py_Dealloc
// 2d2: 4c 89 ff                      movq    %r15, %rdi
// 2d5: ff d0                         callq   *%rax
// 2d7: 4c 8b 04 24                   movq    (%rsp), %r8
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _JIT_CONTINUE
// 2e5: 48 89 df                      movq    %rbx, %rdi
// 2e8: 4c 89 e6                      movq    %r12, %rsi
// 2eb: 4c 89 c2                      movq    %r8, %rdx
// 2ee: 48 83 c4 18                   addq    $0x18, %rsp
// 2f2: 5b                            popq    %rbx
// 2f3: 41 5c                         popq    %r12
// 2f5: 41 5d                         popq    %r13
// 2f7: 41 5e                         popq    %r14
// 2f9: 41 5f                         popq    %r15
// 2fb: 5d                            popq    %rbp
// 2fc: ff e0                         jmpq    *%rax
// 2fe: 49 89 c7                      movq    %rax, %r15
// 301: 49 29 df                      subq    %rbx, %r15
// 304: 49 83 c7 b8                   addq    $-0x48, %r15
// 308: 49 c1 ef 03                   shrq    $0x3, %r15
// 30c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 310: 31 c0                         xorl    %eax, %eax
// 312: e9 c0 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 317: 
static const unsigned char _CALL_BUILTIN_Oplus_POP_EXCEPT_code_body[792] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xf5, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x3c, 0xef, 0xe9, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x49, 0x8b, 0x48, 0x70, 0x4c, 0x8b, 0x39, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0xd0, 0x48, 0x0f, 0x45, 0xf0, 0x48, 0x89, 0x31, 0x4d, 0x85, 0xff, 0x74, 0x59, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0f, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xc0, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_POP_EXCEPT_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x58},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 88: 
static const unsigned char _CALL_BUILTIN_Oplus_POP_EXCEPT_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00};
static const Hole _CALL_BUILTIN_Oplus_POP_EXCEPT_data_holes[1];

// _CALL_BUILTIN_Oplus_POP_FRAME
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_POP_FRAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2c 01 00 00             jne     0x238 <_JIT_ENTRY+0x238>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 3c 24                   movq    (%rsp), %rdi
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 28                         je      0x235 <_JIT_ENTRY+0x235>
// 20d: 48 89 08                      movq    %rcx, (%rax)
// 210: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 33                         je      0x24e <_JIT_ENTRY+0x24e>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: ff d0                         callq   *%rax
// 227: 48 8b 3c 24                   movq    (%rsp), %rdi
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 74 1f                         je      0x24e <_JIT_ENTRY+0x24e>
// 22f: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 233: eb 03                         jmp     0x238 <_JIT_ENTRY+0x238>
// 235: 49 89 c6                      movq    %rax, %r14
// 238: 49 29 de                      subq    %rbx, %r14
// 23b: 49 83 c6 b8                   addq    $-0x48, %r14
// 23f: 49 c1 ee 03                   shrq    $0x3, %r14
// 243: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 247: 31 c0                         xorl    %eax, %eax
// 249: e9 89 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _JIT_OPARG
// 258: f7 d0                         notl    %eax
// 25a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25f: 48 98                         cltq
// 261: 49 8d 0c c6                   leaq    (%r14,%rax,8), %rcx
// 265: 48 83 c1 f8                   addq    $-0x8, %rcx
// 269: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 26e: 48 29 d9                      subq    %rbx, %rcx
// 271: 48 83 c1 b8                   addq    $-0x48, %rcx
// 275: 48 c1 e9 03                   shrq    $0x3, %rcx
// 279: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 27c: ff 47 24                      incl    0x24(%rdi)
// 27f: 4c 8b 73 08                   movq    0x8(%rbx), %r14
// 283: 4c 89 77 40                   movq    %r14, 0x40(%rdi)
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _PyEval_FrameClearAndPop
// 291: 48 89 de                      movq    %rbx, %rsi
// 294: 48 89 fb                      movq    %rdi, %rbx
// 297: ff d0                         callq   *%rax
// 299: 49 63 46 40                   movslq  0x40(%r14), %rax
// 29d: 4d 89 7c c6 48                movq    %r15, 0x48(%r14,%rax,8)
// 2a2: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2a6: 48 83 c6 50                   addq    $0x50, %rsi
// 2aa: 41 c7 46 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r14) # imm = 0xFFFFFFFF
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _JIT_CONTINUE
// 2bc: 4c 89 f7                      movq    %r14, %rdi
// 2bf: 48 89 da                      movq    %rbx, %rdx
// 2c2: 48 83 c4 18                   addq    $0x18, %rsp
// 2c6: 5b                            popq    %rbx
// 2c7: 41 5c                         popq    %r12
// 2c9: 41 5d                         popq    %r13
// 2cb: 41 5e                         popq    %r14
// 2cd: 41 5f                         popq    %r15
// 2cf: 5d                            popq    %rbp
// 2d0: ff e0                         jmpq    *%rax
// 2d2: 
static const unsigned char _CALL_BUILTIN_Oplus_POP_FRAME_code_body[723] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x28, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x89, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8d, 0x0c, 0xc6, 0x48, 0x83, 0xc1, 0xf8, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0xff, 0x47, 0x24, 0x4c, 0x8b, 0x73, 0x08, 0x4c, 0x89, 0x77, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xde, 0x48, 0x89, 0xfb, 0xff, 0xd0, 0x49, 0x63, 0x46, 0x40, 0x4d, 0x89, 0x7c, 0xc6, 0x48, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x50, 0x41, 0xc7, 0x46, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_POP_FRAME_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_POP_FRAME_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_POP_FRAME_data_holes[1];

// _CALL_BUILTIN_Oplus_POP_TOP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_POP_TOP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2f 01 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2b                         je      0x238 <_JIT_ENTRY+0x238>
// 20d: 48 89 08                      movq    %rcx, (%rax)
// 210: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: 48 89 d7                      movq    %rdx, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 14 24                   movq    (%rsp), %rdx
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 1f                         je      0x251 <_JIT_ENTRY+0x251>
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: eb 03                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 238: 49 89 c6                      movq    %rax, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: e9 86 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_OPARG
// 25b: f7 d0                         notl    %eax
// 25d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 262: 4c 63 e8                      movslq  %eax, %r13
// 265: 4f 8b 64 ee f8                movq    -0x8(%r14,%r13,8), %r12
// 26a: 49 8b 04 24                   movq    (%r12), %rax
// 26e: 48 85 c0                      testq   %rax, %rax
// 271: 7f 26                         jg      0x299 <_JIT_ENTRY+0x299>
// 273: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000275:  R_X86_64_64  .rodata.str1.1
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_NegativeRefcount
// 287: be 54 00 00 00                movl    $0x54, %esi
// 28c: 4c 89 e2                      movq    %r12, %rdx
// 28f: ff d0                         callq   *%rax
// 291: 48 8b 14 24                   movq    (%rsp), %rdx
// 295: 49 8b 04 24                   movq    (%r12), %rax
// 299: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 29d: 49 83 c6 f8                   addq    $-0x8, %r14
// 2a1: 85 c0                         testl   %eax, %eax
// 2a3: 78 29                         js      0x2ce <_JIT_ENTRY+0x2ce>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2af: ff d0                         callq   *%rax
// 2b1: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b5: 49 ff 0c 24                   decq    (%r12)
// 2b9: 75 13                         jne     0x2ce <_JIT_ENTRY+0x2ce>
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_Dealloc
// 2c5: 4c 89 e7                      movq    %r12, %rdi
// 2c8: ff d0                         callq   *%rax
// 2ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _JIT_CONTINUE
// 2d8: 48 89 df                      movq    %rbx, %rdi
// 2db: 4c 89 f6                      movq    %r14, %rsi
// 2de: 48 83 c4 18                   addq    $0x18, %rsp
// 2e2: 5b                            popq    %rbx
// 2e3: 41 5c                         popq    %r12
// 2e5: 41 5d                         popq    %r13
// 2e7: 41 5e                         popq    %r14
// 2e9: 41 5f                         popq    %r15
// 2eb: 5d                            popq    %rbp
// 2ec: ff e0                         jmpq    *%rax
// 2ee: 
static const unsigned char _CALL_BUILTIN_Oplus_POP_TOP_code_body[751] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4f, 0x8b, 0x64, 0xee, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_POP_TOP_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_POP_TOP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_POP_TOP_data_holes[1];

// _CALL_BUILTIN_Oplus_PUSH_EXC_INFO
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_PUSH_EXC_INFO.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2f 01 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1af: 7f 26                         jg      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b3:  R_X86_64_64  .rodata.str1.1
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_NegativeRefcount
// 1c5: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1ca: 4c 89 e2                      movq    %r12, %rdx
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d3: 49 8b 04 24                   movq    (%r12), %rax
// 1d7: 85 c0                         testl   %eax, %eax
// 1d9: 78 29                         js      0x204 <_JIT_ENTRY+0x204>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e5: ff d0                         callq   *%rax
// 1e7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1eb: 49 ff 0c 24                   decq    (%r12)
// 1ef: 75 13                         jne     0x204 <_JIT_ENTRY+0x204>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 4c 89 e7                      movq    %r12, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 48 8b 14 24                   movq    (%rsp), %rdx
// 204: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 208: 4d 85 ff                      testq   %r15, %r15
// 20b: 74 2b                         je      0x238 <_JIT_ENTRY+0x238>
// 20d: 4c 89 38                      movq    %r15, (%rax)
// 210: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: 48 89 d7                      movq    %rdx, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 14 24                   movq    (%rsp), %rdx
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 1f                         je      0x251 <_JIT_ENTRY+0x251>
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: eb 03                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 238: 49 89 c6                      movq    %rax, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: e9 86 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_OPARG
// 25b: f7 d0                         notl    %eax
// 25d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 262: 48 98                         cltq
// 264: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 269: 4c 8b 62 70                   movq    0x70(%rdx), %r12
// 26d: 4d 8b 2c 24                   movq    (%r12), %r13
// 271: 41 8b 07                      movl    (%r15), %eax
// 274: ff c0                         incl    %eax
// 276: 74 13                         je      0x28b <_JIT_ENTRY+0x28b>
// 278: 41 89 07                      movl    %eax, (%r15)
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 285: ff d0                         callq   *%rax
// 287: 48 8b 14 24                   movq    (%rsp), %rdx
// 28b: 4d 85 ed                      testq   %r13, %r13
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_NoneStruct
// 298: 49 0f 45 c5                   cmovneq %r13, %rax
// 29c: 4d 89 3c 24                   movq    %r15, (%r12)
// 2a0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a2:  R_X86_64_64  _JIT_OPARG
// 2aa: f7 d1                         notl    %ecx
// 2ac: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2b2: 48 63 c9                      movslq  %ecx, %rcx
// 2b5: 49 89 44 ce f8                movq    %rax, -0x8(%r14,%rcx,8)
// 2ba: 4d 89 3c ce                   movq    %r15, (%r14,%rcx,8)
// 2be: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 2c2: 48 83 c6 08                   addq    $0x8, %rsi
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _JIT_CONTINUE
// 2d0: 48 89 df                      movq    %rbx, %rdi
// 2d3: 48 83 c4 18                   addq    $0x18, %rsp
// 2d7: 5b                            popq    %rbx
// 2d8: 41 5c                         popq    %r12
// 2da: 41 5d                         popq    %r13
// 2dc: 41 5e                         popq    %r14
// 2de: 41 5f                         popq    %r15
// 2e0: 5d                            popq    %rbp
// 2e1: ff e0                         jmpq    *%rax
// 2e3: 
static const unsigned char _CALL_BUILTIN_Oplus_PUSH_EXC_INFO_code_body[740] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x4d, 0x85, 0xff, 0x74, 0x2b, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x4c, 0x8b, 0x62, 0x70, 0x4d, 0x8b, 0x2c, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x13, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x4d, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x0f, 0x45, 0xc5, 0x4d, 0x89, 0x3c, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xce, 0xf8, 0x4d, 0x89, 0x3c, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_PUSH_EXC_INFO_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_PUSH_EXC_INFO_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_PUSH_EXC_INFO_data_holes[1];

// _CALL_BUILTIN_Oplus_PUSH_FRAME
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_PUSH_FRAME.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2f 01 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2b                         je      0x238 <_JIT_ENTRY+0x238>
// 20d: 48 89 08                      movq    %rcx, (%rax)
// 210: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: 48 89 d7                      movq    %rdx, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 14 24                   movq    (%rsp), %rdx
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 1f                         je      0x251 <_JIT_ENTRY+0x251>
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: eb 03                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 238: 49 89 c6                      movq    %rax, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: e9 86 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_OPARG
// 25b: f7 d0                         notl    %eax
// 25d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 262: 48 98                         cltq
// 264: 49 8d 0c c6                   leaq    (%r14,%rax,8), %rcx
// 268: 48 83 c1 f8                   addq    $-0x8, %rcx
// 26c: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 271: 48 29 d9                      subq    %rbx, %rcx
// 274: 48 83 c1 b8                   addq    $-0x48, %rcx
// 278: 48 c1 e9 03                   shrq    $0x3, %rcx
// 27c: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 27f: 48 89 5f 08                   movq    %rbx, 0x8(%rdi)
// 283: 48 89 7a 40                   movq    %rdi, 0x40(%rdx)
// 287: ff 4a 24                      decl    0x24(%rdx)
// 28a: 48 63 47 40                   movslq  0x40(%rdi), %rax
// 28e: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 292: 48 83 c6 48                   addq    $0x48, %rsi
// 296: c7 47 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rdi) # imm = 0xFFFFFFFF
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _JIT_CONTINUE
// 2a7: 48 83 c4 18                   addq    $0x18, %rsp
// 2ab: 5b                            popq    %rbx
// 2ac: 41 5c                         popq    %r12
// 2ae: 41 5d                         popq    %r13
// 2b0: 41 5e                         popq    %r14
// 2b2: 41 5f                         popq    %r15
// 2b4: 5d                            popq    %rbp
// 2b5: ff e0                         jmpq    *%rax
// 2b7: 
static const unsigned char _CALL_BUILTIN_Oplus_PUSH_FRAME_code_body[696] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8d, 0x0c, 0xc6, 0x48, 0x83, 0xc1, 0xf8, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0x48, 0x89, 0x5f, 0x08, 0x48, 0x89, 0x7a, 0x40, 0xff, 0x4a, 0x24, 0x48, 0x63, 0x47, 0x40, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x48, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_PUSH_FRAME_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_PUSH_FRAME_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_PUSH_FRAME_data_holes[1];

// _CALL_BUILTIN_Oplus_PUSH_NULL
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_PUSH_NULL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 2f 01 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2b                         je      0x238 <_JIT_ENTRY+0x238>
// 20d: 48 89 08                      movq    %rcx, (%rax)
// 210: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 214: 48 8b 00                      movq    (%rax), %rax
// 217: 84 c0                         testb   %al, %al
// 219: 74 36                         je      0x251 <_JIT_ENTRY+0x251>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_HandlePending
// 225: 48 89 d7                      movq    %rdx, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 14 24                   movq    (%rsp), %rdx
// 22e: 85 c0                         testl   %eax, %eax
// 230: 74 1f                         je      0x251 <_JIT_ENTRY+0x251>
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: eb 03                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 238: 49 89 c6                      movq    %rax, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: e9 86 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_OPARG
// 25b: f7 d0                         notl    %eax
// 25d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 262: 48 98                         cltq
// 264: 49 c7 04 c6 00 00 00 00       movq    $0x0, (%r14,%rax,8)
// 26c: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 270: 48 83 c6 08                   addq    $0x8, %rsi
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _JIT_CONTINUE
// 27e: 48 89 df                      movq    %rbx, %rdi
// 281: 48 83 c4 18                   addq    $0x18, %rsp
// 285: 5b                            popq    %rbx
// 286: 41 5c                         popq    %r12
// 288: 41 5d                         popq    %r13
// 28a: 41 5e                         popq    %r14
// 28c: 41 5f                         popq    %r15
// 28e: 5d                            popq    %rbp
// 28f: ff e0                         jmpq    *%rax
// 291: 
static const unsigned char _CALL_BUILTIN_Oplus_PUSH_NULL_code_body[658] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1f, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x04, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_PUSH_NULL_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_PUSH_NULL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_PUSH_NULL_data_holes[1];

// _CALL_BUILTIN_Oplus_RESUME_CHECK
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_RESUME_CHECK.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 de 01 00 00             jne     0x23c <_JIT_ENTRY+0x23c>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 bb 01 00 00             jne     0x23c <_JIT_ENTRY+0x23c>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 ac 01 00 00             jne     0x23c <_JIT_ENTRY+0x23c>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 95 01 00 00             jne     0x276 <_JIT_ENTRY+0x276>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 26                         js      0x179 <_JIT_ENTRY+0x179>
// 153: 41 ff d7                      callq   *%r15
// 156: 48 8b 14 24                   movq    (%rsp), %rdx
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 48 8b 14 24                   movq    (%rsp), %rdx
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 20                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ac: 41 ff d7                      callq   *%r15
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 13                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 0f 84 95 00 00 00             je      0x273 <_JIT_ENTRY+0x273>
// 1de: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1e2: 48 89 08                      movq    %rcx, (%rax)
// 1e5: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1e9: 48 8b 08                      movq    (%rax), %rcx
// 1ec: 84 c9                         testb   %cl, %cl
// 1ee: 74 1d                         je      0x20d <_JIT_ENTRY+0x20d>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_HandlePending
// 1fa: 48 89 d7                      movq    %rdx, %rdi
// 1fd: 49 89 d7                      movq    %rdx, %r15
// 200: ff d0                         callq   *%rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 75 70                         jne     0x276 <_JIT_ENTRY+0x276>
// 206: 49 8b 47 10                   movq    0x10(%r15), %rax
// 20a: 4c 89 fa                      movq    %r15, %rdx
// 20d: 48 8b 00                      movq    (%rax), %rax
// 210: 48 8b 0b                      movq    (%rbx), %rcx
// 213: 48 3b 81 a8 00 00 00          cmpq    0xa8(%rcx), %rax
// 21a: 75 20                         jne     0x23c <_JIT_ENTRY+0x23c>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _JIT_CONTINUE
// 226: 48 89 df                      movq    %rbx, %rdi
// 229: 4c 89 f6                      movq    %r14, %rsi
// 22c: 48 83 c4 18                   addq    $0x18, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: ff e0                         jmpq    *%rax
// 23c: 49 29 de                      subq    %rbx, %r14
// 23f: 49 83 c6 b8                   addq    $-0x48, %r14
// 243: 49 c1 ee 03                   shrq    $0x3, %r14
// 247: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24b: 48 8b 03                      movq    (%rbx), %rax
// 24e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000250:  R_X86_64_64  _JIT_TARGET
// 258: 89 c9                         movl    %ecx, %ecx
// 25a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 264: 48 83 c4 18                   addq    $0x18, %rsp
// 268: 5b                            popq    %rbx
// 269: 41 5c                         popq    %r12
// 26b: 41 5d                         popq    %r13
// 26d: 41 5e                         popq    %r14
// 26f: 41 5f                         popq    %r15
// 271: 5d                            popq    %rbp
// 272: c3                            retq
// 273: 49 89 c6                      movq    %rax, %r14
// 276: 49 29 de                      subq    %rbx, %r14
// 279: 49 83 c6 b8                   addq    $-0x48, %r14
// 27d: 49 c1 ee 03                   shrq    $0x3, %r14
// 281: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 285: 31 c0                         xorl    %eax, %eax
// 287: eb db                         jmp     0x264 <_JIT_ENTRY+0x264>
// 289: 
static const unsigned char _CALL_BUILTIN_Oplus_RESUME_CHECK_code_body[650] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xde, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xbb, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xac, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x95, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x08, 0x84, 0xc9, 0x74, 0x1d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x49, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x70, 0x49, 0x8b, 0x47, 0x10, 0x4c, 0x89, 0xfa, 0x48, 0x8b, 0x00, 0x48, 0x8b, 0x0b, 0x48, 0x3b, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xdb};
static const Hole _CALL_BUILTIN_Oplus_RESUME_CHECK_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_RESUME_CHECK_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_RESUME_CHECK_data_holes[1];

// _CALL_BUILTIN_Oplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_SAVE_RETURN_OFFSET.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 5b 01 00 00             jne     0x267 <_JIT_ENTRY+0x267>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 57                         je      0x264 <_JIT_ENTRY+0x264>
// 20d: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 17                         je      0x236 <_JIT_ENTRY+0x236>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: 48 89 d7                      movq    %rdx, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 14 24                   movq    (%rsp), %rdx
// 232: 85 c0                         testl   %eax, %eax
// 234: 75 31                         jne     0x267 <_JIT_ENTRY+0x267>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _JIT_OPARG
// 240: 66 89 43 44                   movw    %ax, 0x44(%rbx)
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _JIT_CONTINUE
// 24e: 48 89 df                      movq    %rbx, %rdi
// 251: 4c 89 f6                      movq    %r14, %rsi
// 254: 48 83 c4 18                   addq    $0x18, %rsp
// 258: 5b                            popq    %rbx
// 259: 41 5c                         popq    %r12
// 25b: 41 5d                         popq    %r13
// 25d: 41 5e                         popq    %r14
// 25f: 41 5f                         popq    %r15
// 261: 5d                            popq    %rbp
// 262: ff e0                         jmpq    *%rax
// 264: 49 89 c6                      movq    %rax, %r14
// 267: 49 29 de                      subq    %rbx, %r14
// 26a: 49 83 c6 b8                   addq    $-0x48, %r14
// 26e: 49 c1 ee 03                   shrq    $0x3, %r14
// 272: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 276: 31 c0                         xorl    %eax, %eax
// 278: e9 5a fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 27d: 
static const unsigned char _CALL_BUILTIN_Oplus_SAVE_RETURN_OFFSET_code_body[638] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x5b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x57, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x75, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x89, 0x43, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x5a, 0xfe, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_SAVE_RETURN_OFFSET_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_SAVE_RETURN_OFFSET_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_SAVE_RETURN_OFFSET_data_holes[1];

// _CALL_BUILTIN_Oplus_SETUP_ANNOTATIONS
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_SETUP_ANNOTATIONS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 50                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 31                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 26                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 14 24                   movq    %rdx, (%rsp)
// 96: 7e 48                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 98: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a0: 75 78                         jne     0x11a <_JIT_ENTRY+0x11a>
// a2: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a7: eb 73                         jmp     0x11c <_JIT_ENTRY+0x11c>
// a9: 49 29 de                      subq    %rbx, %r14
// ac: 49 83 c6 b8                   addq    $-0x48, %r14
// b0: 49 c1 ee 03                   shrq    $0x3, %r14
// b4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b8: 48 8b 03                      movq    (%rbx), %rax
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _JIT_TARGET
// c5: 89 c9                         movl    %ecx, %ecx
// c7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d1: 48 83 c4 18                   addq    $0x18, %rsp
// d5: 5b                            popq    %rbx
// d6: 41 5c                         popq    %r12
// d8: 41 5d                         popq    %r13
// da: 41 5e                         popq    %r14
// dc: 41 5f                         popq    %r15
// de: 5d                            popq    %rbp
// df: c3                            retq
// e0: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// e5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e7:  R_X86_64_64  .rodata.str1.1+0x65
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_CheckRecursiveCall
// f9: 48 89 d7                      movq    %rdx, %rdi
// fc: ff d0                         callq   *%rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 0f 85 f2 01 00 00             jne     0x2f8 <_JIT_ENTRY+0x2f8>
// 106: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10b: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 110: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 114: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 118: 74 88                         je      0xa2 <_JIT_ENTRY+0xa2>
// 11a: 31 ff                         xorl    %edi, %edi
// 11c: 48 89 ee                      movq    %rbp, %rsi
// 11f: 41 ff d0                      callq   *%r8
// 122: 4c 8b 04 24                   movq    (%rsp), %r8
// 126: 41 ff 40 2c                   incl    0x2c(%r8)
// 12a: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 12f: 48 8b 45 00                   movq    (%rbp), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 26                         jg      0x15e <_JIT_ENTRY+0x15e>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_NegativeRefcount
// 14c: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 151: 48 89 ea                      movq    %rbp, %rdx
// 154: ff d0                         callq   *%rax
// 156: 4c 8b 04 24                   movq    (%rsp), %r8
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 29                         js      0x18b <_JIT_ENTRY+0x18b>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 4c 8b 04 24                   movq    (%rsp), %r8
// 172: 48 ff 4d 00                   decq    (%rbp)
// 176: 75 13                         jne     0x18b <_JIT_ENTRY+0x18b>
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _Py_Dealloc
// 182: 48 89 ef                      movq    %rbp, %rdi
// 185: ff d0                         callq   *%rax
// 187: 4c 8b 04 24                   movq    (%rsp), %r8
// 18b: 49 8b 04 24                   movq    (%r12), %rax
// 18f: 48 85 c0                      testq   %rax, %rax
// 192: 7f 26                         jg      0x1ba <_JIT_ENTRY+0x1ba>
// 194: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000196:  R_X86_64_64  .rodata.str1.1
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_NegativeRefcount
// 1a8: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1ad: 4c 89 e2                      movq    %r12, %rdx
// 1b0: ff d0                         callq   *%rax
// 1b2: 4c 8b 04 24                   movq    (%rsp), %r8
// 1b6: 49 8b 04 24                   movq    (%r12), %rax
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 29                         js      0x1e7 <_JIT_ENTRY+0x1e7>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c8: ff d0                         callq   *%rax
// 1ca: 4c 8b 04 24                   movq    (%rsp), %r8
// 1ce: 49 ff 0c 24                   decq    (%r12)
// 1d2: 75 13                         jne     0x1e7 <_JIT_ENTRY+0x1e7>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_Dealloc
// 1de: 4c 89 e7                      movq    %r12, %rdi
// 1e1: ff d0                         callq   *%rax
// 1e3: 4c 8b 04 24                   movq    (%rsp), %r8
// 1e7: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1eb: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1f0: 48 85 c9                      testq   %rcx, %rcx
// 1f3: 0f 84 d2 00 00 00             je      0x2cb <_JIT_ENTRY+0x2cb>
// 1f9: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1fd: 48 89 08                      movq    %rcx, (%rax)
// 200: 49 8b 40 10                   movq    0x10(%r8), %rax
// 204: 48 8b 00                      movq    (%rax), %rax
// 207: 84 c0                         testb   %al, %al
// 209: 74 1b                         je      0x226 <_JIT_ENTRY+0x226>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_HandlePending
// 215: 4c 89 c7                      movq    %r8, %rdi
// 218: ff d0                         callq   *%rax
// 21a: 4c 8b 04 24                   movq    (%rsp), %r8
// 21e: 85 c0                         testl   %eax, %eax
// 220: 0f 85 d2 00 00 00             jne     0x2f8 <_JIT_ENTRY+0x2f8>
// 226: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 22a: 48 85 ff                      testq   %rdi, %rdi
// 22d: 0f 84 9d 00 00 00             je      0x2d0 <_JIT_ENTRY+0x2d0>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  PyMapping_GetOptionalItem
// 23d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000023f:  R_X86_64_64  _PyRuntime
// 247: 49 81 c5 a8 a7 00 00          addq    $0xa7a8, %r13           # imm = 0xA7A8
// 24e: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 253: 4c 89 ee                      movq    %r13, %rsi
// 256: ff d0                         callq   *%rax
// 258: 85 c0                         testl   %eax, %eax
// 25a: 0f 88 98 00 00 00             js      0x2f8 <_JIT_ENTRY+0x2f8>
// 260: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 265: 4d 85 e4                      testq   %r12, %r12
// 268: 0f 84 a0 00 00 00             je      0x30e <_JIT_ENTRY+0x30e>
// 26e: 49 8b 04 24                   movq    (%r12), %rax
// 272: 48 85 c0                      testq   %rax, %rax
// 275: 7f 22                         jg      0x299 <_JIT_ENTRY+0x299>
// 277: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000279:  R_X86_64_64  .rodata.str1.1
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_NegativeRefcount
// 28b: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 290: 4c 89 e2                      movq    %r12, %rdx
// 293: ff d0                         callq   *%rax
// 295: 49 8b 04 24                   movq    (%r12), %rax
// 299: 85 c0                         testl   %eax, %eax
// 29b: 0f 88 f8 00 00 00             js      0x399 <_JIT_ENTRY+0x399>
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ab: ff d0                         callq   *%rax
// 2ad: 49 ff 0c 24                   decq    (%r12)
// 2b1: 0f 85 e2 00 00 00             jne     0x399 <_JIT_ENTRY+0x399>
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_Dealloc
// 2c1: 4c 89 e7                      movq    %r12, %rdi
// 2c4: ff d0                         callq   *%rax
// 2c6: e9 ce 00 00 00                jmp     0x399 <_JIT_ENTRY+0x399>
// 2cb: 49 89 c6                      movq    %rax, %r14
// 2ce: eb 28                         jmp     0x2f8 <_JIT_ENTRY+0x2f8>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  PyExc_SystemError
// 2da: 48 8b 30                      movq    (%rax), %rsi
// 2dd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002df:  R_X86_64_64  .rodata.str1.1+0x39
// 2e7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e9:  R_X86_64_64  _PyErr_Format
// 2f1: 4c 89 c7                      movq    %r8, %rdi
// 2f4: 31 c0                         xorl    %eax, %eax
// 2f6: ff d1                         callq   *%rcx
// 2f8: 49 29 de                      subq    %rbx, %r14
// 2fb: 49 83 c6 b8                   addq    $-0x48, %r14
// 2ff: 49 c1 ee 03                   shrq    $0x3, %r14
// 303: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 307: 31 c0                         xorl    %eax, %eax
// 309: e9 c3 fd ff ff                jmp     0xd1 <_JIT_ENTRY+0xd1>
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  PyDict_New
// 318: ff d0                         callq   *%rax
// 31a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 31f: 48 85 c0                      testq   %rax, %rax
// 322: 74 d4                         je      0x2f8 <_JIT_ENTRY+0x2f8>
// 324: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 328: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000032a:  R_X86_64_64  PyObject_SetItem
// 332: 4c 89 ee                      movq    %r13, %rsi
// 335: 48 89 c2                      movq    %rax, %rdx
// 338: ff d1                         callq   *%rcx
// 33a: 89 c5                         movl    %eax, %ebp
// 33c: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 341: 49 8b 04 24                   movq    (%r12), %rax
// 345: 48 85 c0                      testq   %rax, %rax
// 348: 7f 22                         jg      0x36c <_JIT_ENTRY+0x36c>
// 34a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000034c:  R_X86_64_64  .rodata.str1.1
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  _Py_NegativeRefcount
// 35e: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 363: 4c 89 e2                      movq    %r12, %rdx
// 366: ff d0                         callq   *%rax
// 368: 49 8b 04 24                   movq    (%r12), %rax
// 36c: 85 c0                         testl   %eax, %eax
// 36e: 78 21                         js      0x391 <_JIT_ENTRY+0x391>
// 370: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000372:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 37a: ff d0                         callq   *%rax
// 37c: 49 ff 0c 24                   decq    (%r12)
// 380: 75 0f                         jne     0x391 <_JIT_ENTRY+0x391>
// 382: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000384:  R_X86_64_64  _Py_Dealloc
// 38c: 4c 89 e7                      movq    %r12, %rdi
// 38f: ff d0                         callq   *%rax
// 391: 85 ed                         testl   %ebp, %ebp
// 393: 0f 85 5f ff ff ff             jne     0x2f8 <_JIT_ENTRY+0x2f8>
// 399: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039b:  R_X86_64_64  _JIT_CONTINUE
// 3a3: 48 89 df                      movq    %rbx, %rdi
// 3a6: 4c 89 f6                      movq    %r14, %rsi
// 3a9: 48 8b 14 24                   movq    (%rsp), %rdx
// 3ad: 48 83 c4 18                   addq    $0x18, %rsp
// 3b1: 5b                            popq    %rbx
// 3b2: 41 5c                         popq    %r12
// 3b4: 41 5d                         popq    %r13
// 3b6: 41 5e                         popq    %r14
// 3b8: 41 5f                         popq    %r15
// 3ba: 5d                            popq    %rbp
// 3bb: ff e0                         jmpq    *%rax
// 3bd: 
static const unsigned char _CALL_BUILTIN_Oplus_SETUP_ANNOTATIONS_code_body[958] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x50, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x31, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x26, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x78, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x73, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xf2, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x88, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0xd2, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xf8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xe2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xce, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xeb, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xc3, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0xd4, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc5, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x5f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_SETUP_ANNOTATIONS_code_holes[31] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x65},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x372, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x384, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x39b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00 while calling a Python object\x00'
// 84: 00 00 00 00
static const unsigned char _CALL_BUILTIN_Oplus_SETUP_ANNOTATIONS_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_SETUP_ANNOTATIONS_data_holes[1];

// _CALL_BUILTIN_Oplus_SET_ADD
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_SET_ADD.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 df                      subq    %rbx, %r15
// b2: 49 83 c7 b8                   addq    $-0x48, %r15
// b6: 49 c1 ef 03                   shrq    $0x3, %r15
// ba: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 c9 01 00 00             jne     0x2d5 <_JIT_ENTRY+0x2d5>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12c: 4c 89 f6                      movq    %r14, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 06                      movq    (%r14), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 164: 4c 89 f2                      movq    %r14, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 06                      movq    (%r14), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 3c 24                   movq    (%rsp), %rdi
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1af: 7f 26                         jg      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b3:  R_X86_64_64  .rodata.str1.1
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_NegativeRefcount
// 1c5: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1ca: 4c 89 e2                      movq    %r12, %rdx
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d3: 49 8b 04 24                   movq    (%r12), %rax
// 1d7: 85 c0                         testl   %eax, %eax
// 1d9: 78 29                         js      0x204 <_JIT_ENTRY+0x204>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e5: ff d0                         callq   *%rax
// 1e7: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1eb: 49 ff 0c 24                   decq    (%r12)
// 1ef: 75 13                         jne     0x204 <_JIT_ENTRY+0x204>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 4c 89 e7                      movq    %r12, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 48 8b 3c 24                   movq    (%rsp), %rdi
// 204: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 208: 4d 85 f6                      testq   %r14, %r14
// 20b: 0f 84 c1 00 00 00             je      0x2d2 <_JIT_ENTRY+0x2d2>
// 211: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 215: 4c 89 30                      movq    %r14, (%rax)
// 218: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 21c: 48 8b 00                      movq    (%rax), %rax
// 21f: 84 c0                         testb   %al, %al
// 221: 74 14                         je      0x237 <_JIT_ENTRY+0x237>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_HandlePending
// 22d: ff d0                         callq   *%rax
// 22f: 85 c0                         testl   %eax, %eax
// 231: 0f 85 96 00 00 00             jne     0x2cd <_JIT_ENTRY+0x2cd>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_OPARG
// 241: f7 d0                         notl    %eax
// 243: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 248: 4c 63 f0                      movslq  %eax, %r14
// 24b: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 250: 4b 8d 04 36                   leaq    (%r14,%r14), %rax
// 254: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  PySet_Add
// 262: 4c 89 ee                      movq    %r13, %rsi
// 265: ff d0                         callq   *%rax
// 267: 89 c5                         movl    %eax, %ebp
// 269: 49 8b 45 00                   movq    (%r13), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 7f 22                         jg      0x294 <_JIT_ENTRY+0x294>
// 272: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000274:  R_X86_64_64  .rodata.str1.1
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_NegativeRefcount
// 286: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 28b: 4c 89 ea                      movq    %r13, %rdx
// 28e: ff d0                         callq   *%rax
// 290: 49 8b 45 00                   movq    (%r13), %rax
// 294: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 298: 49 83 c6 f8                   addq    $-0x8, %r14
// 29c: 85 c0                         testl   %eax, %eax
// 29e: 78 21                         js      0x2c1 <_JIT_ENTRY+0x2c1>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 ff 4d 00                   decq    (%r13)
// 2b0: 75 0f                         jne     0x2c1 <_JIT_ENTRY+0x2c1>
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_Dealloc
// 2bc: 4c 89 ef                      movq    %r13, %rdi
// 2bf: ff d0                         callq   *%rax
// 2c1: 85 ed                         testl   %ebp, %ebp
// 2c3: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 2c7: 74 22                         je      0x2eb <_JIT_ENTRY+0x2eb>
// 2c9: 49 83 c4 f8                   addq    $-0x8, %r12
// 2cd: 4d 89 e7                      movq    %r12, %r15
// 2d0: eb 03                         jmp     0x2d5 <_JIT_ENTRY+0x2d5>
// 2d2: 49 89 c7                      movq    %rax, %r15
// 2d5: 49 29 df                      subq    %rbx, %r15
// 2d8: 49 83 c7 b8                   addq    $-0x48, %r15
// 2dc: 49 c1 ef 03                   shrq    $0x3, %r15
// 2e0: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2e4: 31 c0                         xorl    %eax, %eax
// 2e6: e9 ec fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _JIT_CONTINUE
// 2f5: 48 89 df                      movq    %rbx, %rdi
// 2f8: 4c 89 e6                      movq    %r12, %rsi
// 2fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ff: 48 83 c4 18                   addq    $0x18, %rsp
// 303: 5b                            popq    %rbx
// 304: 41 5c                         popq    %r12
// 306: 41 5d                         popq    %r13
// 308: 41 5e                         popq    %r14
// 30a: 41 5f                         popq    %r15
// 30c: 5d                            popq    %rbp
// 30d: ff e0                         jmpq    *%rax
// 30f: 
static const unsigned char _CALL_BUILTIN_Oplus_SET_ADD_code_body[784] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xc9, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x96, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x4b, 0x8d, 0x04, 0x36, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x22, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x89, 0xe7, 0xeb, 0x03, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xec, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_SET_ADD_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_SET_ADD_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_SET_ADD_data_holes[1];

// _CALL_BUILTIN_Oplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_SET_FUNCTION_ATTRIBUTE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4c                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 0c 24                   movq    %rcx, (%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7a                         jne     0x122 <_JIT_ENTRY+0x122>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 75                         jmp     0x124 <_JIT_ENTRY+0x124>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 04 24                   movq    %r8, (%rsp)
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_CheckRecursiveCall
// fe: 48 89 d7                      movq    %rdx, %rdi
// 101: ff d0                         callq   *%rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 0f 85 43 01 00 00             jne     0x24e <_JIT_ENTRY+0x24e>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 04 24                   movq    (%rsp), %r8
// 114: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 118: 48 89 0c 24                   movq    %rcx, (%rsp)
// 11c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 120: 74 86                         je      0xa8 <_JIT_ENTRY+0xa8>
// 122: 31 ff                         xorl    %edi, %edi
// 124: 4c 8b 3c 24                   movq    (%rsp), %r15
// 128: 4c 89 fe                      movq    %r15, %rsi
// 12b: 41 ff d0                      callq   *%r8
// 12e: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 133: ff 41 2c                      incl    0x2c(%rcx)
// 136: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13b: 49 8b 07                      movq    (%r15), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7f 25                         jg      0x168 <_JIT_ENTRY+0x168>
// 143: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 160: 4c 89 fa                      movq    %r15, %rdx
// 163: ff d0                         callq   *%rax
// 165: 49 8b 07                      movq    (%r15), %rax
// 168: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: 85 c0                         testl   %eax, %eax
// 174: 78 1c                         js      0x192 <_JIT_ENTRY+0x192>
// 176: 41 ff d7                      callq   *%r15
// 179: 48 8b 04 24                   movq    (%rsp), %rax
// 17d: 48 ff 08                      decq    (%rax)
// 180: 75 10                         jne     0x192 <_JIT_ENTRY+0x192>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: 48 8b 3c 24                   movq    (%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 49 8b 04 24                   movq    (%r12), %rax
// 196: 48 85 c0                      testq   %rax, %rax
// 199: 7f 22                         jg      0x1bd <_JIT_ENTRY+0x1bd>
// 19b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019d:  R_X86_64_64  .rodata.str1.1
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_NegativeRefcount
// 1af: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b4: 4c 89 e2                      movq    %r12, %rdx
// 1b7: ff d0                         callq   *%rax
// 1b9: 49 8b 04 24                   movq    (%r12), %rax
// 1bd: 85 c0                         testl   %eax, %eax
// 1bf: 78 18                         js      0x1d9 <_JIT_ENTRY+0x1d9>
// 1c1: 41 ff d7                      callq   *%r15
// 1c4: 49 ff 0c 24                   decq    (%r12)
// 1c8: 75 0f                         jne     0x1d9 <_JIT_ENTRY+0x1d9>
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _Py_Dealloc
// 1d4: 4c 89 e7                      movq    %r12, %rdi
// 1d7: ff d0                         callq   *%rax
// 1d9: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1dd: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1e2: 48 85 c9                      testq   %rcx, %rcx
// 1e5: 74 64                         je      0x24b <_JIT_ENTRY+0x24b>
// 1e7: 48 89 08                      movq    %rcx, (%rax)
// 1ea: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1ef: 49 8b 40 10                   movq    0x10(%r8), %rax
// 1f3: 48 8b 00                      movq    (%rax), %rax
// 1f6: 84 c0                         testb   %al, %al
// 1f8: 74 1e                         je      0x218 <_JIT_ENTRY+0x218>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_HandlePending
// 204: 4c 89 c7                      movq    %r8, %rdi
// 207: ff d0                         callq   *%rax
// 209: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 20e: 85 c0                         testl   %eax, %eax
// 210: 74 06                         je      0x218 <_JIT_ENTRY+0x218>
// 212: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 216: eb 36                         jmp     0x24e <_JIT_ENTRY+0x24e>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _JIT_OPARG
// 222: 0f b7 f0                      movzwl  %ax, %esi
// 225: 89 f0                         movl    %esi, %eax
// 227: f7 d0                         notl    %eax
// 229: 48 63 d0                      movslq  %eax, %rdx
// 22c: 49 8b 4c d6 f0                movq    -0x10(%r14,%rdx,8), %rcx
// 231: 49 8b 44 d6 f8                movq    -0x8(%r14,%rdx,8), %rax
// 236: 83 fe 03                      cmpl    $0x3, %esi
// 239: 7f 29                         jg      0x264 <_JIT_ENTRY+0x264>
// 23b: 83 fe 01                      cmpl    $0x1, %esi
// 23e: 74 34                         je      0x274 <_JIT_ENTRY+0x274>
// 240: 83 fe 02                      cmpl    $0x2, %esi
// 243: 75 7e                         jne     0x2c3 <_JIT_ENTRY+0x2c3>
// 245: 48 8d 78 40                   leaq    0x40(%rax), %rdi
// 249: eb 33                         jmp     0x27e <_JIT_ENTRY+0x27e>
// 24b: 49 89 c6                      movq    %rax, %r14
// 24e: 49 29 de                      subq    %rbx, %r14
// 251: 49 83 c6 b8                   addq    $-0x48, %r14
// 255: 49 c1 ee 03                   shrq    $0x3, %r14
// 259: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 25d: 31 c0                         xorl    %eax, %eax
// 25f: e9 73 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 264: 83 fe 04                      cmpl    $0x4, %esi
// 267: 74 11                         je      0x27a <_JIT_ENTRY+0x27a>
// 269: 83 fe 08                      cmpl    $0x8, %esi
// 26c: 75 55                         jne     0x2c3 <_JIT_ENTRY+0x2c3>
// 26e: 48 8d 78 48                   leaq    0x48(%rax), %rdi
// 272: eb 0a                         jmp     0x27e <_JIT_ENTRY+0x27e>
// 274: 48 8d 78 38                   leaq    0x38(%rax), %rdi
// 278: eb 04                         jmp     0x27e <_JIT_ENTRY+0x27e>
// 27a: 48 8d 78 70                   leaq    0x70(%rax), %rdi
// 27e: 49 8d 34 d6                   leaq    (%r14,%rdx,8), %rsi
// 282: 48 83 c6 f8                   addq    $-0x8, %rsi
// 286: 48 89 0f                      movq    %rcx, (%rdi)
// 289: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028b:  R_X86_64_64  _JIT_OPARG
// 293: f7 d1                         notl    %ecx
// 295: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 29b: 48 63 c9                      movslq  %ecx, %rcx
// 29e: 49 89 44 ce f0                movq    %rax, -0x10(%r14,%rcx,8)
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _JIT_CONTINUE
// 2ad: 48 89 df                      movq    %rbx, %rdi
// 2b0: 4c 89 c2                      movq    %r8, %rdx
// 2b3: 48 83 c4 18                   addq    $0x18, %rsp
// 2b7: 5b                            popq    %rbx
// 2b8: 41 5c                         popq    %r12
// 2ba: 41 5d                         popq    %r13
// 2bc: 41 5e                         popq    %r14
// 2be: 41 5f                         popq    %r15
// 2c0: 5d                            popq    %rbp
// 2c1: ff e0                         jmpq    *%rax
// 2c3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c5:  R_X86_64_64  .rodata.str1.1+0x58
// 2cd: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002cf:  R_X86_64_64  .rodata.str1.1+0x63
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_FatalErrorFunc
// 2e1: ff d0                         callq   *%rax
// 2e3: 
static const unsigned char _CALL_BUILTIN_Oplus_SET_FUNCTION_ATTRIBUTE_code_body[740] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4c, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x43, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0xff, 0x41, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x1c, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x64, 0x48, 0x89, 0x08, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x85, 0xc0, 0x74, 0x06, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x89, 0xf0, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x49, 0x8b, 0x4c, 0xd6, 0xf0, 0x49, 0x8b, 0x44, 0xd6, 0xf8, 0x83, 0xfe, 0x03, 0x7f, 0x29, 0x83, 0xfe, 0x01, 0x74, 0x34, 0x83, 0xfe, 0x02, 0x75, 0x7e, 0x48, 0x8d, 0x78, 0x40, 0xeb, 0x33, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x73, 0xfe, 0xff, 0xff, 0x83, 0xfe, 0x04, 0x74, 0x11, 0x83, 0xfe, 0x08, 0x75, 0x55, 0x48, 0x8d, 0x78, 0x48, 0xeb, 0x0a, 0x48, 0x8d, 0x78, 0x38, 0xeb, 0x04, 0x48, 0x8d, 0x78, 0x70, 0x49, 0x8d, 0x34, 0xd6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x0f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xce, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_BUILTIN_Oplus_SET_FUNCTION_ATTRIBUTE_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x58},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x63},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// ef: 00
static const unsigned char _CALL_BUILTIN_Oplus_SET_FUNCTION_ATTRIBUTE_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00, 0x00};
static const Hole _CALL_BUILTIN_Oplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _CALL_BUILTIN_Oplus_SET_IP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_SET_IP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 6b 01 00 00             jne     0x277 <_JIT_ENTRY+0x277>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 67                         je      0x274 <_JIT_ENTRY+0x274>
// 20d: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 17                         je      0x236 <_JIT_ENTRY+0x236>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: 48 89 d7                      movq    %rdx, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 14 24                   movq    (%rsp), %rdx
// 232: 85 c0                         testl   %eax, %eax
// 234: 75 41                         jne     0x277 <_JIT_ENTRY+0x277>
// 236: 48 8b 03                      movq    (%rbx), %rax
// 239: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 0f b7 c9                      movzwl  %cx, %ecx
// 246: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 24a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 250: 48 89 43 38                   movq    %rax, 0x38(%rbx)
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_CONTINUE
// 25e: 48 89 df                      movq    %rbx, %rdi
// 261: 4c 89 f6                      movq    %r14, %rsi
// 264: 48 83 c4 18                   addq    $0x18, %rsp
// 268: 5b                            popq    %rbx
// 269: 41 5c                         popq    %r12
// 26b: 41 5d                         popq    %r13
// 26d: 41 5e                         popq    %r14
// 26f: 41 5f                         popq    %r15
// 271: 5d                            popq    %rbp
// 272: ff e0                         jmpq    *%rax
// 274: 49 89 c6                      movq    %rax, %r14
// 277: 49 29 de                      subq    %rbx, %r14
// 27a: 49 83 c6 b8                   addq    $-0x48, %r14
// 27e: 49 c1 ee 03                   shrq    $0x3, %r14
// 282: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 286: 31 c0                         xorl    %eax, %eax
// 288: e9 4a fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 28d: 
static const unsigned char _CALL_BUILTIN_Oplus_SET_IP_code_body[654] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x6b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x67, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x75, 0x41, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x4a, 0xfe, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_SET_IP_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_SET_IP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_SET_IP_data_holes[1];

// _CALL_BUILTIN_Oplus_SET_UPDATE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_SET_UPDATE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 ed 01 00 00             jne     0x2f9 <_JIT_ENTRY+0x2f9>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 3c 24                   movq    (%rsp), %rdi
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1af: 7f 26                         jg      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b3:  R_X86_64_64  .rodata.str1.1
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_NegativeRefcount
// 1c5: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1ca: 4c 89 e2                      movq    %r12, %rdx
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d3: 49 8b 04 24                   movq    (%r12), %rax
// 1d7: 85 c0                         testl   %eax, %eax
// 1d9: 78 29                         js      0x204 <_JIT_ENTRY+0x204>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e5: ff d0                         callq   *%rax
// 1e7: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1eb: 49 ff 0c 24                   decq    (%r12)
// 1ef: 75 13                         jne     0x204 <_JIT_ENTRY+0x204>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 4c 89 e7                      movq    %r12, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 48 8b 3c 24                   movq    (%rsp), %rdi
// 204: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 208: 4d 85 ff                      testq   %r15, %r15
// 20b: 74 2a                         je      0x237 <_JIT_ENTRY+0x237>
// 20d: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 211: 4c 89 38                      movq    %r15, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 20                         je      0x23f <_JIT_ENTRY+0x23f>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 74 10                         je      0x23f <_JIT_ENTRY+0x23f>
// 22f: 4d 89 ee                      movq    %r13, %r14
// 232: e9 c2 00 00 00                jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 237: 49 89 c6                      movq    %rax, %r14
// 23a: e9 ba 00 00 00                jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_OPARG
// 249: f7 d0                         notl    %eax
// 24b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 250: 4c 63 f8                      movslq  %eax, %r15
// 253: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 258: 4b 8d 04 3f                   leaq    (%r15,%r15), %rax
// 25c: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _PySet_Update
// 26a: 4c 89 e6                      movq    %r12, %rsi
// 26d: ff d0                         callq   *%rax
// 26f: 89 c5                         movl    %eax, %ebp
// 271: 49 8b 04 24                   movq    (%r12), %rax
// 275: 48 85 c0                      testq   %rax, %rax
// 278: 7f 22                         jg      0x29c <_JIT_ENTRY+0x29c>
// 27a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027c:  R_X86_64_64  .rodata.str1.1
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_NegativeRefcount
// 28e: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 293: 4c 89 e2                      movq    %r12, %rdx
// 296: ff d0                         callq   *%rax
// 298: 49 8b 04 24                   movq    (%r12), %rax
// 29c: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 2a0: 49 83 c6 f8                   addq    $-0x8, %r14
// 2a4: 85 c0                         testl   %eax, %eax
// 2a6: 78 21                         js      0x2c9 <_JIT_ENTRY+0x2c9>
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b2: ff d0                         callq   *%rax
// 2b4: 49 ff 0c 24                   decq    (%r12)
// 2b8: 75 0f                         jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_Dealloc
// 2c4: 4c 89 e7                      movq    %r12, %rdi
// 2c7: ff d0                         callq   *%rax
// 2c9: 85 ed                         testl   %ebp, %ebp
// 2cb: 4d 0f 48 f5                   cmovsq  %r13, %r14
// 2cf: 78 24                         js      0x2f5 <_JIT_ENTRY+0x2f5>
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _JIT_CONTINUE
// 2db: 48 89 df                      movq    %rbx, %rdi
// 2de: 4c 89 f6                      movq    %r14, %rsi
// 2e1: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e5: 48 83 c4 18                   addq    $0x18, %rsp
// 2e9: 5b                            popq    %rbx
// 2ea: 41 5c                         popq    %r12
// 2ec: 41 5d                         popq    %r13
// 2ee: 41 5e                         popq    %r14
// 2f0: 41 5f                         popq    %r15
// 2f2: 5d                            popq    %rbp
// 2f3: ff e0                         jmpq    *%rax
// 2f5: 49 83 c6 f8                   addq    $-0x8, %r14
// 2f9: 49 29 de                      subq    %rbx, %r14
// 2fc: 49 83 c6 b8                   addq    $-0x48, %r14
// 300: 49 c1 ee 03                   shrq    $0x3, %r14
// 304: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 308: 31 c0                         xorl    %eax, %eax
// 30a: e9 c8 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 30f: 
static const unsigned char _CALL_BUILTIN_Oplus_SET_UPDATE_code_body[784] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xed, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x4d, 0x85, 0xff, 0x74, 0x2a, 0x4f, 0x8d, 0x2c, 0xee, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x10, 0x4d, 0x89, 0xee, 0xe9, 0xc2, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xe9, 0xba, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0x4b, 0x8d, 0x04, 0x3f, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x48, 0xf5, 0x78, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xc8, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_SET_UPDATE_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_SET_UPDATE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_SET_UPDATE_data_holes[1];

// _CALL_BUILTIN_Oplus_STORE_ATTR
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_STORE_ATTR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4c                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 9a: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9e: 48 89 0c 24                   movq    %rcx, (%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7a                         jne     0x122 <_JIT_ENTRY+0x122>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 75                         jmp     0x124 <_JIT_ENTRY+0x124>
// af: 49 29 df                      subq    %rbx, %r15
// b2: 49 83 c7 b8                   addq    $-0x48, %r15
// b6: 49 c1 ef 03                   shrq    $0x3, %r15
// ba: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 04 24                   movq    %r8, (%rsp)
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_CheckRecursiveCall
// fe: 48 89 d7                      movq    %rdx, %rdi
// 101: ff d0                         callq   *%rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 0f 85 29 02 00 00             jne     0x334 <_JIT_ENTRY+0x334>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 04 24                   movq    (%rsp), %r8
// 114: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 118: 48 89 0c 24                   movq    %rcx, (%rsp)
// 11c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 120: 74 86                         je      0xa8 <_JIT_ENTRY+0xa8>
// 122: 31 ff                         xorl    %edi, %edi
// 124: 4c 8b 34 24                   movq    (%rsp), %r14
// 128: 4c 89 f6                      movq    %r14, %rsi
// 12b: 41 ff d0                      callq   *%r8
// 12e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 133: ff 47 2c                      incl    0x2c(%rdi)
// 136: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13b: 49 8b 06                      movq    (%r14), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7f 2a                         jg      0x16d <_JIT_ENTRY+0x16d>
// 143: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15c: 4c 8b 34 24                   movq    (%rsp), %r14
// 160: 4c 89 f2                      movq    %r14, %rdx
// 163: ff d0                         callq   *%rax
// 165: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16a: 49 8b 06                      movq    (%r14), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 2f                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 8b 04 24                   movq    (%rsp), %rax
// 186: 48 ff 08                      decq    (%rax)
// 189: 75 15                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 48 8b 3c 24                   movq    (%rsp), %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 27                         jg      0x1d0 <_JIT_ENTRY+0x1d0>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 2b                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 14                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ff: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 203: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 208: 4d 85 f6                      testq   %r14, %r14
// 20b: 0f 84 20 01 00 00             je      0x331 <_JIT_ENTRY+0x331>
// 211: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 215: 4c 89 30                      movq    %r14, (%rax)
// 218: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 21c: 48 8b 00                      movq    (%rax), %rax
// 21f: 84 c0                         testb   %al, %al
// 221: 74 14                         je      0x237 <_JIT_ENTRY+0x237>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_HandlePending
// 22d: ff d0                         callq   *%rax
// 22f: 85 c0                         testl   %eax, %eax
// 231: 0f 85 f5 00 00 00             jne     0x32c <_JIT_ENTRY+0x32c>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_OPARG
// 241: 0f b7 c8                      movzwl  %ax, %ecx
// 244: f7 d0                         notl    %eax
// 246: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24b: 4c 63 e8                      movslq  %eax, %r13
// 24e: 4b 8b 6c ef f0                movq    -0x10(%r15,%r13,8), %rbp
// 253: 4f 8b 74 ef f8                movq    -0x8(%r15,%r13,8), %r14
// 258: 48 8b 03                      movq    (%rbx), %rax
// 25b: 48 8b 40 20                   movq    0x20(%rax), %rax
// 25f: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  PyObject_SetAttr
// 26e: 4c 89 f7                      movq    %r14, %rdi
// 271: 48 89 ea                      movq    %rbp, %rdx
// 274: ff d0                         callq   *%rax
// 276: 89 04 24                      movl    %eax, (%rsp)
// 279: 48 8b 45 00                   movq    (%rbp), %rax
// 27d: 48 85 c0                      testq   %rax, %rax
// 280: 7f 22                         jg      0x2a4 <_JIT_ENTRY+0x2a4>
// 282: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000284:  R_X86_64_64  .rodata.str1.1
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_NegativeRefcount
// 296: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// 29b: 48 89 ea                      movq    %rbp, %rdx
// 29e: ff d0                         callq   *%rax
// 2a0: 48 8b 45 00                   movq    (%rbp), %rax
// 2a4: 85 c0                         testl   %eax, %eax
// 2a6: 78 21                         js      0x2c9 <_JIT_ENTRY+0x2c9>
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b2: ff d0                         callq   *%rax
// 2b4: 48 ff 4d 00                   decq    (%rbp)
// 2b8: 75 0f                         jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_Dealloc
// 2c4: 48 89 ef                      movq    %rbp, %rdi
// 2c7: ff d0                         callq   *%rax
// 2c9: 49 8b 06                      movq    (%r14), %rax
// 2cc: 48 85 c0                      testq   %rax, %rax
// 2cf: 7f 21                         jg      0x2f2 <_JIT_ENTRY+0x2f2>
// 2d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d3:  R_X86_64_64  .rodata.str1.1
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_NegativeRefcount
// 2e5: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 2ea: 4c 89 f2                      movq    %r14, %rdx
// 2ed: ff d0                         callq   *%rax
// 2ef: 49 8b 06                      movq    (%r14), %rax
// 2f2: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 2f6: 49 83 c7 f0                   addq    $-0x10, %r15
// 2fa: 85 c0                         testl   %eax, %eax
// 2fc: 78 20                         js      0x31e <_JIT_ENTRY+0x31e>
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 308: ff d0                         callq   *%rax
// 30a: 49 ff 0e                      decq    (%r14)
// 30d: 75 0f                         jne     0x31e <_JIT_ENTRY+0x31e>
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  _Py_Dealloc
// 319: 4c 89 f7                      movq    %r14, %rdi
// 31c: ff d0                         callq   *%rax
// 31e: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 322: 4d 0f 44 e7                   cmoveq  %r15, %r12
// 326: 74 22                         je      0x34a <_JIT_ENTRY+0x34a>
// 328: 49 83 c4 f0                   addq    $-0x10, %r12
// 32c: 4d 89 e7                      movq    %r12, %r15
// 32f: eb 03                         jmp     0x334 <_JIT_ENTRY+0x334>
// 331: 49 89 c7                      movq    %rax, %r15
// 334: 49 29 df                      subq    %rbx, %r15
// 337: 49 83 c7 b8                   addq    $-0x48, %r15
// 33b: 49 c1 ef 03                   shrq    $0x3, %r15
// 33f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 343: 31 c0                         xorl    %eax, %eax
// 345: e9 8d fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 34a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034c:  R_X86_64_64  _JIT_CONTINUE
// 354: 48 89 df                      movq    %rbx, %rdi
// 357: 4c 89 e6                      movq    %r12, %rsi
// 35a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 35f: 48 83 c4 18                   addq    $0x18, %rsp
// 363: 5b                            popq    %rbx
// 364: 41 5c                         popq    %r12
// 366: 41 5d                         popq    %r13
// 368: 41 5e                         popq    %r14
// 36a: 41 5f                         popq    %r15
// 36c: 5d                            popq    %rbp
// 36d: ff e0                         jmpq    *%rax
// 36f: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_ATTR_code_body[880] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4c, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x29, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x4c, 0x8b, 0x34, 0x24, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x34, 0x24, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xef, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x20, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4b, 0x8b, 0x6c, 0xef, 0xf0, 0x4f, 0x8b, 0x74, 0xef, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf0, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x83, 0x3c, 0x24, 0x00, 0x4d, 0x0f, 0x44, 0xe7, 0x74, 0x22, 0x49, 0x83, 0xc4, 0xf0, 0x4d, 0x89, 0xe7, 0xeb, 0x03, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x8d, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_STORE_ATTR_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_ATTR_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_STORE_ATTR_data_holes[1];

// _CALL_BUILTIN_Oplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_STORE_ATTR_INSTANCE_VALUE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 d4 01 00 00             jne     0x2e0 <_JIT_ENTRY+0x2e0>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 4c 8b 04 24                   movq    (%rsp), %r8
// 136: 41 ff 40 2c                   incl    0x2c(%r8)
// 13a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13f: 49 8b 07                      movq    (%r15), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 7f 2a                         jg      0x171 <_JIT_ENTRY+0x171>
// 147: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 160: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 165: 4c 89 fa                      movq    %r15, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 4c 8b 04 24                   movq    (%rsp), %r8
// 16e: 49 8b 07                      movq    (%r15), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 2f                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 4c 8b 04 24                   movq    (%rsp), %r8
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 4c 8b 04 24                   movq    (%rsp), %r8
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 29                         js      0x200 <_JIT_ENTRY+0x200>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 4c 8b 04 24                   movq    (%rsp), %r8
// 1e7: 49 ff 0c 24                   decq    (%r12)
// 1eb: 75 13                         jne     0x200 <_JIT_ENTRY+0x200>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_Dealloc
// 1f7: 4c 89 e7                      movq    %r12, %rdi
// 1fa: ff d0                         callq   *%rax
// 1fc: 4c 8b 04 24                   movq    (%rsp), %r8
// 200: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 204: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 209: 48 85 c9                      testq   %rcx, %rcx
// 20c: 0f 84 cb 00 00 00             je      0x2dd <_JIT_ENTRY+0x2dd>
// 212: 48 89 08                      movq    %rcx, (%rax)
// 215: 49 8b 40 10                   movq    0x10(%r8), %rax
// 219: 48 8b 00                      movq    (%rax), %rax
// 21c: 84 c0                         testb   %al, %al
// 21e: 74 20                         je      0x240 <_JIT_ENTRY+0x240>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_HandlePending
// 22a: 4c 89 c7                      movq    %r8, %rdi
// 22d: ff d0                         callq   *%rax
// 22f: 4c 8b 04 24                   movq    (%rsp), %r8
// 233: 85 c0                         testl   %eax, %eax
// 235: 74 09                         je      0x240 <_JIT_ENTRY+0x240>
// 237: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 23b: e9 a0 00 00 00                jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _JIT_OPARG
// 24a: f7 d0                         notl    %eax
// 24c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 251: 48 63 e8                      movslq  %eax, %rbp
// 254: 49 8b 4c ee f0                movq    -0x10(%r14,%rbp,8), %rcx
// 259: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 25e: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 263: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000265:  R_X86_64_64  _JIT_OPERAND
// 26d: 0f b7 d2                      movzwl  %dx, %edx
// 270: 4c 8b 6c d0 01                movq    0x1(%rax,%rdx,8), %r13
// 275: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 27a: 4d 85 ed                      testq   %r13, %r13
// 27d: 74 77                         je      0x2f6 <_JIT_ENTRY+0x2f6>
// 27f: 49 8b 45 00                   movq    (%r13), %rax
// 283: 48 85 c0                      testq   %rax, %rax
// 286: 7f 26                         jg      0x2ae <_JIT_ENTRY+0x2ae>
// 288: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028a:  R_X86_64_64  .rodata.str1.1
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_NegativeRefcount
// 29c: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// 2a1: 4c 89 ea                      movq    %r13, %rdx
// 2a4: ff d0                         callq   *%rax
// 2a6: 4c 8b 04 24                   movq    (%rsp), %r8
// 2aa: 49 8b 45 00                   movq    (%r13), %rax
// 2ae: 85 c0                         testl   %eax, %eax
// 2b0: 78 60                         js      0x312 <_JIT_ENTRY+0x312>
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bc: ff d0                         callq   *%rax
// 2be: 4c 8b 04 24                   movq    (%rsp), %r8
// 2c2: 49 ff 4d 00                   decq    (%r13)
// 2c6: 75 4a                         jne     0x312 <_JIT_ENTRY+0x312>
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _Py_Dealloc
// 2d2: 4c 89 ef                      movq    %r13, %rdi
// 2d5: ff d0                         callq   *%rax
// 2d7: 4c 8b 04 24                   movq    (%rsp), %r8
// 2db: eb 35                         jmp     0x312 <_JIT_ENTRY+0x312>
// 2dd: 49 89 c6                      movq    %rax, %r14
// 2e0: 49 29 de                      subq    %rbx, %r14
// 2e3: 49 83 c6 b8                   addq    $-0x48, %r14
// 2e7: 49 c1 ee 03                   shrq    $0x3, %r14
// 2eb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2ef: 31 c0                         xorl    %eax, %eax
// 2f1: e9 e1 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 2f6: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 2fa: 8d 51 01                      leal    0x1(%rcx), %edx
// 2fd: 48 f7 d1                      notq    %rcx
// 300: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000302:  R_X86_64_64  _JIT_OPERAND
// 30a: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// 30f: 88 50 ff                      movb    %dl, -0x1(%rax)
// 312: 49 8b 04 24                   movq    (%r12), %rax
// 316: 48 85 c0                      testq   %rax, %rax
// 319: 7f 26                         jg      0x341 <_JIT_ENTRY+0x341>
// 31b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031d:  R_X86_64_64  .rodata.str1.1
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  _Py_NegativeRefcount
// 32f: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 334: 4c 89 e2                      movq    %r12, %rdx
// 337: ff d0                         callq   *%rax
// 339: 4c 8b 04 24                   movq    (%rsp), %r8
// 33d: 49 8b 04 24                   movq    (%r12), %rax
// 341: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 345: 49 83 c6 f0                   addq    $-0x10, %r14
// 349: 85 c0                         testl   %eax, %eax
// 34b: 78 29                         js      0x376 <_JIT_ENTRY+0x376>
// 34d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 357: ff d0                         callq   *%rax
// 359: 4c 8b 04 24                   movq    (%rsp), %r8
// 35d: 49 ff 0c 24                   decq    (%r12)
// 361: 75 13                         jne     0x376 <_JIT_ENTRY+0x376>
// 363: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000365:  R_X86_64_64  _Py_Dealloc
// 36d: 4c 89 e7                      movq    %r12, %rdi
// 370: ff d0                         callq   *%rax
// 372: 4c 8b 04 24                   movq    (%rsp), %r8
// 376: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000378:  R_X86_64_64  _JIT_CONTINUE
// 380: 48 89 df                      movq    %rbx, %rdi
// 383: 4c 89 f6                      movq    %r14, %rsi
// 386: 4c 89 c2                      movq    %r8, %rdx
// 389: 48 83 c4 18                   addq    $0x18, %rsp
// 38d: 5b                            popq    %rbx
// 38e: 41 5c                         popq    %r12
// 390: 41 5d                         popq    %r13
// 392: 41 5e                         popq    %r14
// 394: 41 5f                         popq    %r15
// 396: 5d                            popq    %rbp
// 397: ff e0                         jmpq    *%rax
// 399: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_ATTR_INSTANCE_VALUE_code_body[922] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xd4, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0xa0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x49, 0x8b, 0x4c, 0xee, 0xf0, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x6c, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x77, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0xeb, 0x35, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xe1, 0xfd, 0xff, 0xff, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_STORE_ATTR_INSTANCE_VALUE_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x365, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x378, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_ATTR_INSTANCE_VALUE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _CALL_BUILTIN_Oplus_STORE_ATTR_SLOT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_STORE_ATTR_SLOT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 4e 02 00 00             jne     0x35a <_JIT_ENTRY+0x35a>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 0f 84 46 01 00 00             je      0x357 <_JIT_ENTRY+0x357>
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 20                         je      0x23f <_JIT_ENTRY+0x23f>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: 48 89 d7                      movq    %rdx, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 14 24                   movq    (%rsp), %rdx
// 232: 85 c0                         testl   %eax, %eax
// 234: 74 09                         je      0x23f <_JIT_ENTRY+0x23f>
// 236: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 23a: e9 1b 01 00 00                jmp     0x35a <_JIT_ENTRY+0x35a>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_OPARG
// 249: f7 d0                         notl    %eax
// 24b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 250: 48 63 e8                      movslq  %eax, %rbp
// 253: 49 8b 44 ee f0                movq    -0x10(%r14,%rbp,8), %rax
// 258: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 25d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025f:  R_X86_64_64  _JIT_OPERAND
// 267: 0f b7 c9                      movzwl  %cx, %ecx
// 26a: 4d 8b 2c 0c                   movq    (%r12,%rcx), %r13
// 26e: 49 89 04 0c                   movq    %rax, (%r12,%rcx)
// 272: 4d 85 ed                      testq   %r13, %r13
// 275: 74 5c                         je      0x2d3 <_JIT_ENTRY+0x2d3>
// 277: 49 8b 45 00                   movq    (%r13), %rax
// 27b: 48 85 c0                      testq   %rax, %rax
// 27e: 7f 26                         jg      0x2a6 <_JIT_ENTRY+0x2a6>
// 280: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000282:  R_X86_64_64  .rodata.str1.1+0x58
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_NegativeRefcount
// 294: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 299: 4c 89 ea                      movq    %r13, %rdx
// 29c: ff d0                         callq   *%rax
// 29e: 48 8b 14 24                   movq    (%rsp), %rdx
// 2a2: 49 8b 45 00                   movq    (%r13), %rax
// 2a6: 85 c0                         testl   %eax, %eax
// 2a8: 78 29                         js      0x2d3 <_JIT_ENTRY+0x2d3>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b4: ff d0                         callq   *%rax
// 2b6: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ba: 49 ff 4d 00                   decq    (%r13)
// 2be: 75 13                         jne     0x2d3 <_JIT_ENTRY+0x2d3>
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_Dealloc
// 2ca: 4c 89 ef                      movq    %r13, %rdi
// 2cd: ff d0                         callq   *%rax
// 2cf: 48 8b 14 24                   movq    (%rsp), %rdx
// 2d3: 49 8b 04 24                   movq    (%r12), %rax
// 2d7: 48 85 c0                      testq   %rax, %rax
// 2da: 7f 26                         jg      0x302 <_JIT_ENTRY+0x302>
// 2dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002de:  R_X86_64_64  .rodata.str1.1
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_NegativeRefcount
// 2f0: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// 2f5: 4c 89 e2                      movq    %r12, %rdx
// 2f8: ff d0                         callq   *%rax
// 2fa: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fe: 49 8b 04 24                   movq    (%r12), %rax
// 302: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 306: 49 83 c6 f0                   addq    $-0x10, %r14
// 30a: 85 c0                         testl   %eax, %eax
// 30c: 78 29                         js      0x337 <_JIT_ENTRY+0x337>
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 318: ff d0                         callq   *%rax
// 31a: 48 8b 14 24                   movq    (%rsp), %rdx
// 31e: 49 ff 0c 24                   decq    (%r12)
// 322: 75 13                         jne     0x337 <_JIT_ENTRY+0x337>
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _Py_Dealloc
// 32e: 4c 89 e7                      movq    %r12, %rdi
// 331: ff d0                         callq   *%rax
// 333: 48 8b 14 24                   movq    (%rsp), %rdx
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _JIT_CONTINUE
// 341: 48 89 df                      movq    %rbx, %rdi
// 344: 4c 89 f6                      movq    %r14, %rsi
// 347: 48 83 c4 18                   addq    $0x18, %rsp
// 34b: 5b                            popq    %rbx
// 34c: 41 5c                         popq    %r12
// 34e: 41 5d                         popq    %r13
// 350: 41 5e                         popq    %r14
// 352: 41 5f                         popq    %r15
// 354: 5d                            popq    %rbp
// 355: ff e0                         jmpq    *%rax
// 357: 49 89 c6                      movq    %rax, %r14
// 35a: 49 29 de                      subq    %rbx, %r14
// 35d: 49 83 c6 b8                   addq    $-0x48, %r14
// 361: 49 c1 ee 03                   shrq    $0x3, %r14
// 365: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 369: 31 c0                         xorl    %eax, %eax
// 36b: e9 67 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 370: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_ATTR_SLOT_code_body[881] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x4e, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x46, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x1b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x49, 0x8b, 0x44, 0xee, 0xf0, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x2c, 0x0c, 0x49, 0x89, 0x04, 0x0c, 0x4d, 0x85, 0xed, 0x74, 0x5c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x67, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_STORE_ATTR_SLOT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x58},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 88: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_ATTR_SLOT_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00};
static const Hole _CALL_BUILTIN_Oplus_STORE_ATTR_SLOT_data_holes[1];

// _CALL_BUILTIN_Oplus_STORE_DEREF
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_STORE_DEREF.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 df                      subq    %rbx, %r15
// b2: 49 83 c7 b8                   addq    $-0x48, %r15
// b6: 49 c1 ef 03                   shrq    $0x3, %r15
// ba: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 e4 01 00 00             jne     0x2f0 <_JIT_ENTRY+0x2f0>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12c: 4c 89 f6                      movq    %r14, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 06                      movq    (%r14), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 164: 4c 89 f2                      movq    %r14, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 06                      movq    (%r14), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 0f 84 dc 00 00 00             je      0x2ed <_JIT_ENTRY+0x2ed>
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 20                         je      0x23f <_JIT_ENTRY+0x23f>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: 48 89 d7                      movq    %rdx, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 14 24                   movq    (%rsp), %rdx
// 232: 85 c0                         testl   %eax, %eax
// 234: 74 09                         je      0x23f <_JIT_ENTRY+0x23f>
// 236: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 23a: e9 b1 00 00 00                jmp     0x2f0 <_JIT_ENTRY+0x2f0>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_OPARG
// 249: 0f b7 c8                      movzwl  %ax, %ecx
// 24c: f7 d0                         notl    %eax
// 24e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 253: 48 98                         cltq
// 255: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 259: 49 83 c4 f8                   addq    $-0x8, %r12
// 25d: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// 262: 48 8b 4c cb 48                movq    0x48(%rbx,%rcx,8), %rcx
// 267: 4c 8b 79 10                   movq    0x10(%rcx), %r15
// 26b: 48 89 41 10                   movq    %rax, 0x10(%rcx)
// 26f: 4d 85 ff                      testq   %r15, %r15
// 272: 74 59                         je      0x2cd <_JIT_ENTRY+0x2cd>
// 274: 49 8b 07                      movq    (%r15), %rax
// 277: 48 85 c0                      testq   %rax, %rax
// 27a: 7f 25                         jg      0x2a1 <_JIT_ENTRY+0x2a1>
// 27c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027e:  R_X86_64_64  .rodata.str1.1+0x58
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_NegativeRefcount
// 290: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 295: 4c 89 fa                      movq    %r15, %rdx
// 298: ff d0                         callq   *%rax
// 29a: 48 8b 14 24                   movq    (%rsp), %rdx
// 29e: 49 8b 07                      movq    (%r15), %rax
// 2a1: 85 c0                         testl   %eax, %eax
// 2a3: 78 28                         js      0x2cd <_JIT_ENTRY+0x2cd>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2af: ff d0                         callq   *%rax
// 2b1: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b5: 49 ff 0f                      decq    (%r15)
// 2b8: 75 13                         jne     0x2cd <_JIT_ENTRY+0x2cd>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_Dealloc
// 2c4: 4c 89 ff                      movq    %r15, %rdi
// 2c7: ff d0                         callq   *%rax
// 2c9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _JIT_CONTINUE
// 2d7: 48 89 df                      movq    %rbx, %rdi
// 2da: 4c 89 e6                      movq    %r12, %rsi
// 2dd: 48 83 c4 18                   addq    $0x18, %rsp
// 2e1: 5b                            popq    %rbx
// 2e2: 41 5c                         popq    %r12
// 2e4: 41 5d                         popq    %r13
// 2e6: 41 5e                         popq    %r14
// 2e8: 41 5f                         popq    %r15
// 2ea: 5d                            popq    %rbp
// 2eb: ff e0                         jmpq    *%rax
// 2ed: 49 89 c7                      movq    %rax, %r15
// 2f0: 49 29 df                      subq    %rbx, %r15
// 2f3: 49 83 c7 b8                   addq    $-0x48, %r15
// 2f7: 49 c1 ef 03                   shrq    $0x3, %r15
// 2fb: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2ff: 31 c0                         xorl    %eax, %eax
// 301: e9 d1 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 306: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_DEREF_code_body[775] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xe4, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xdc, 0x00, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x3c, 0xef, 0xe9, 0xb1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x48, 0x8b, 0x4c, 0xcb, 0x48, 0x4c, 0x8b, 0x79, 0x10, 0x48, 0x89, 0x41, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x59, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0f, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xd1, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_STORE_DEREF_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x58},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 88: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_DEREF_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00};
static const Hole _CALL_BUILTIN_Oplus_STORE_DEREF_data_holes[1];

// _CALL_BUILTIN_Oplus_STORE_FAST
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_STORE_FAST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 df                      subq    %rbx, %r15
// b2: 49 83 c7 b8                   addq    $-0x48, %r15
// b6: 49 c1 ef 03                   shrq    $0x3, %r15
// ba: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 e1 01 00 00             jne     0x2ed <_JIT_ENTRY+0x2ed>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12c: 4c 89 f6                      movq    %r14, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 14 24                   movq    (%rsp), %rdx
// 136: ff 42 2c                      incl    0x2c(%rdx)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 06                      movq    (%r14), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 164: 4c 89 f2                      movq    %r14, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 14 24                   movq    (%rsp), %rdx
// 16d: 49 8b 06                      movq    (%r14), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 14 24                   movq    (%rsp), %rdx
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 0f 84 d9 00 00 00             je      0x2ea <_JIT_ENTRY+0x2ea>
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 20                         je      0x23f <_JIT_ENTRY+0x23f>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: 48 89 d7                      movq    %rdx, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 14 24                   movq    (%rsp), %rdx
// 232: 85 c0                         testl   %eax, %eax
// 234: 74 09                         je      0x23f <_JIT_ENTRY+0x23f>
// 236: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 23a: e9 ae 00 00 00                jmp     0x2ed <_JIT_ENTRY+0x2ed>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_OPARG
// 249: 0f b7 c8                      movzwl  %ax, %ecx
// 24c: f7 d0                         notl    %eax
// 24e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 253: 48 98                         cltq
// 255: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 259: 49 83 c4 f8                   addq    $-0x8, %r12
// 25d: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// 262: 4c 8b 7c cb 48                movq    0x48(%rbx,%rcx,8), %r15
// 267: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 26c: 4d 85 ff                      testq   %r15, %r15
// 26f: 74 59                         je      0x2ca <_JIT_ENTRY+0x2ca>
// 271: 49 8b 07                      movq    (%r15), %rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 7f 25                         jg      0x29e <_JIT_ENTRY+0x29e>
// 279: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027b:  R_X86_64_64  .rodata.str1.1+0x58
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_NegativeRefcount
// 28d: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 292: 4c 89 fa                      movq    %r15, %rdx
// 295: ff d0                         callq   *%rax
// 297: 48 8b 14 24                   movq    (%rsp), %rdx
// 29b: 49 8b 07                      movq    (%r15), %rax
// 29e: 85 c0                         testl   %eax, %eax
// 2a0: 78 28                         js      0x2ca <_JIT_ENTRY+0x2ca>
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ac: ff d0                         callq   *%rax
// 2ae: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b2: 49 ff 0f                      decq    (%r15)
// 2b5: 75 13                         jne     0x2ca <_JIT_ENTRY+0x2ca>
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_Dealloc
// 2c1: 4c 89 ff                      movq    %r15, %rdi
// 2c4: ff d0                         callq   *%rax
// 2c6: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _JIT_CONTINUE
// 2d4: 48 89 df                      movq    %rbx, %rdi
// 2d7: 4c 89 e6                      movq    %r12, %rsi
// 2da: 48 83 c4 18                   addq    $0x18, %rsp
// 2de: 5b                            popq    %rbx
// 2df: 41 5c                         popq    %r12
// 2e1: 41 5d                         popq    %r13
// 2e3: 41 5e                         popq    %r14
// 2e5: 41 5f                         popq    %r15
// 2e7: 5d                            popq    %rbp
// 2e8: ff e0                         jmpq    *%rax
// 2ea: 49 89 c7                      movq    %rax, %r15
// 2ed: 49 29 df                      subq    %rbx, %r15
// 2f0: 49 83 c7 b8                   addq    $-0x48, %r15
// 2f4: 49 c1 ef 03                   shrq    $0x3, %r15
// 2f8: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2fc: 31 c0                         xorl    %eax, %eax
// 2fe: e9 d4 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 303: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_FAST_code_body[772] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xe1, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xd9, 0x00, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x3c, 0xef, 0xe9, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x4c, 0x8b, 0x7c, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xff, 0x74, 0x59, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0f, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xd4, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_STORE_FAST_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x58},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 88: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_FAST_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00};
static const Hole _CALL_BUILTIN_Oplus_STORE_FAST_data_holes[1];

// _CALL_BUILTIN_Oplus_STORE_GLOBAL
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_STORE_GLOBAL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 df                      subq    %rbx, %r15
// b2: 49 83 c7 b8                   addq    $-0x48, %r15
// b6: 49 c1 ef 03                   shrq    $0x3, %r15
// ba: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 d4 01 00 00             jne     0x2e0 <_JIT_ENTRY+0x2e0>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12c: 4c 89 f6                      movq    %r14, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 06                      movq    (%r14), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 164: 4c 89 f2                      movq    %r14, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 06                      movq    (%r14), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 3c 24                   movq    (%rsp), %rdi
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1af: 7f 26                         jg      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b3:  R_X86_64_64  .rodata.str1.1
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_NegativeRefcount
// 1c5: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1ca: 4c 89 e2                      movq    %r12, %rdx
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d3: 49 8b 04 24                   movq    (%r12), %rax
// 1d7: 85 c0                         testl   %eax, %eax
// 1d9: 78 29                         js      0x204 <_JIT_ENTRY+0x204>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e5: ff d0                         callq   *%rax
// 1e7: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1eb: 49 ff 0c 24                   decq    (%r12)
// 1ef: 75 13                         jne     0x204 <_JIT_ENTRY+0x204>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 4c 89 e7                      movq    %r12, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 48 8b 3c 24                   movq    (%rsp), %rdi
// 204: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 208: 4d 85 f6                      testq   %r14, %r14
// 20b: 0f 84 cc 00 00 00             je      0x2dd <_JIT_ENTRY+0x2dd>
// 211: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 215: 4c 89 30                      movq    %r14, (%rax)
// 218: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 21c: 48 8b 00                      movq    (%rax), %rax
// 21f: 84 c0                         testb   %al, %al
// 221: 74 14                         je      0x237 <_JIT_ENTRY+0x237>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_HandlePending
// 22d: ff d0                         callq   *%rax
// 22f: 85 c0                         testl   %eax, %eax
// 231: 0f 85 a1 00 00 00             jne     0x2d8 <_JIT_ENTRY+0x2d8>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_OPARG
// 241: 0f b7 c8                      movzwl  %ax, %ecx
// 244: f7 d0                         notl    %eax
// 246: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24b: 4c 63 f0                      movslq  %eax, %r14
// 24e: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 253: 48 8b 03                      movq    (%rbx), %rax
// 256: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 25a: 48 8b 40 20                   movq    0x20(%rax), %rax
// 25e: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  PyDict_SetItem
// 26d: 4c 89 ea                      movq    %r13, %rdx
// 270: ff d0                         callq   *%rax
// 272: 89 c5                         movl    %eax, %ebp
// 274: 49 8b 45 00                   movq    (%r13), %rax
// 278: 48 85 c0                      testq   %rax, %rax
// 27b: 7f 22                         jg      0x29f <_JIT_ENTRY+0x29f>
// 27d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027f:  R_X86_64_64  .rodata.str1.1
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _Py_NegativeRefcount
// 291: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// 296: 4c 89 ea                      movq    %r13, %rdx
// 299: ff d0                         callq   *%rax
// 29b: 49 8b 45 00                   movq    (%r13), %rax
// 29f: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 2a3: 49 83 c6 f8                   addq    $-0x8, %r14
// 2a7: 85 c0                         testl   %eax, %eax
// 2a9: 78 21                         js      0x2cc <_JIT_ENTRY+0x2cc>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b5: ff d0                         callq   *%rax
// 2b7: 49 ff 4d 00                   decq    (%r13)
// 2bb: 75 0f                         jne     0x2cc <_JIT_ENTRY+0x2cc>
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _Py_Dealloc
// 2c7: 4c 89 ef                      movq    %r13, %rdi
// 2ca: ff d0                         callq   *%rax
// 2cc: 85 ed                         testl   %ebp, %ebp
// 2ce: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 2d2: 74 22                         je      0x2f6 <_JIT_ENTRY+0x2f6>
// 2d4: 49 83 c4 f8                   addq    $-0x8, %r12
// 2d8: 4d 89 e7                      movq    %r12, %r15
// 2db: eb 03                         jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 2dd: 49 89 c7                      movq    %rax, %r15
// 2e0: 49 29 df                      subq    %rbx, %r15
// 2e3: 49 83 c7 b8                   addq    $-0x48, %r15
// 2e7: 49 c1 ef 03                   shrq    $0x3, %r15
// 2eb: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2ef: 31 c0                         xorl    %eax, %eax
// 2f1: e9 e1 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _JIT_CONTINUE
// 300: 48 89 df                      movq    %rbx, %rdi
// 303: 4c 89 e6                      movq    %r12, %rsi
// 306: 48 8b 14 24                   movq    (%rsp), %rdx
// 30a: 48 83 c4 18                   addq    $0x18, %rsp
// 30e: 5b                            popq    %rbx
// 30f: 41 5c                         popq    %r12
// 311: 41 5d                         popq    %r13
// 313: 41 5e                         popq    %r14
// 315: 41 5f                         popq    %r15
// 317: 5d                            popq    %rbp
// 318: ff e0                         jmpq    *%rax
// 31a: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_GLOBAL_code_body[795] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xd4, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xef, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xa1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x22, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x89, 0xe7, 0xeb, 0x03, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xe1, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_STORE_GLOBAL_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_STORE_GLOBAL_data_holes[1];

// _CALL_BUILTIN_Oplus_STORE_NAME
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_STORE_NAME.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f1                   movzwl  %cx, %r14d
// 3f: 4c 89 f1                      movq    %r14, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d6                      notq    %r14
// 50: 4c 0f 44 f1                   cmoveq  %rcx, %r14
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5c                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3d                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 32                         jne     0xb6 <_JIT_ENTRY+0xb6>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 54                         jle     0xed <_JIT_ENTRY+0xed>
// 99: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 0f 85 88 00 00 00             jne     0x134 <_JIT_ENTRY+0x134>
// ac: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b1: e9 80 00 00 00                jmp     0x136 <_JIT_ENTRY+0x136>
// b6: 49 29 df                      subq    %rbx, %r15
// b9: 49 83 c7 b8                   addq    $-0x48, %r15
// bd: 49 c1 ef 03                   shrq    $0x3, %r15
// c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_TARGET
// d2: 89 c9                         movl    %ecx, %ecx
// d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// de: 48 83 c4 18                   addq    $0x18, %rsp
// e2: 5b                            popq    %rbx
// e3: 41 5c                         popq    %r12
// e5: 41 5d                         popq    %r13
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: 5d                            popq    %rbp
// ec: c3                            retq
// ed: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0x59
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_CheckRecursiveCall
// 106: 48 89 d7                      movq    %rdx, %rdi
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 74 08                         je      0x117 <_JIT_ENTRY+0x117>
// 10f: 4d 89 fc                      movq    %r15, %r12
// 112: e9 89 02 00 00                jmp     0x3a0 <_JIT_ENTRY+0x3a0>
// 117: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 121: 4b 8b 0c f7                   movq    (%r15,%r14,8), %rcx
// 125: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12e: 0f 84 78 ff ff ff             je      0xac <_JIT_ENTRY+0xac>
// 134: 31 ff                         xorl    %edi, %edi
// 136: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13b: 4c 89 f6                      movq    %r14, %rsi
// 13e: 41 ff d0                      callq   *%r8
// 141: 4c 8b 0c 24                   movq    (%rsp), %r9
// 145: 41 ff 41 2c                   incl    0x2c(%r9)
// 149: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14e: 49 8b 06                      movq    (%r14), %rax
// 151: 48 85 c0                      testq   %rax, %rax
// 154: 7f 2a                         jg      0x180 <_JIT_ENTRY+0x180>
// 156: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000158:  R_X86_64_64  .rodata.str1.1
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_NegativeRefcount
// 16a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 16f: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 174: 4c 89 f2                      movq    %r14, %rdx
// 177: ff d0                         callq   *%rax
// 179: 4c 8b 0c 24                   movq    (%rsp), %r9
// 17d: 49 8b 06                      movq    (%r14), %rax
// 180: 85 c0                         testl   %eax, %eax
// 182: 78 2f                         js      0x1b3 <_JIT_ENTRY+0x1b3>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18e: ff d0                         callq   *%rax
// 190: 4c 8b 0c 24                   movq    (%rsp), %r9
// 194: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 199: 48 ff 08                      decq    (%rax)
// 19c: 75 15                         jne     0x1b3 <_JIT_ENTRY+0x1b3>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_Dealloc
// 1a8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 0c 24                   movq    (%rsp), %r9
// 1b3: 49 8b 04 24                   movq    (%r12), %rax
// 1b7: 48 85 c0                      testq   %rax, %rax
// 1ba: 7f 26                         jg      0x1e2 <_JIT_ENTRY+0x1e2>
// 1bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001be:  R_X86_64_64  .rodata.str1.1
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_NegativeRefcount
// 1d0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d5: 4c 89 e2                      movq    %r12, %rdx
// 1d8: ff d0                         callq   *%rax
// 1da: 4c 8b 0c 24                   movq    (%rsp), %r9
// 1de: 49 8b 04 24                   movq    (%r12), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 29                         js      0x20f <_JIT_ENTRY+0x20f>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 4c 8b 0c 24                   movq    (%rsp), %r9
// 1f6: 49 ff 0c 24                   decq    (%r12)
// 1fa: 75 13                         jne     0x20f <_JIT_ENTRY+0x20f>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_Dealloc
// 206: 4c 89 e7                      movq    %r12, %rdi
// 209: ff d0                         callq   *%rax
// 20b: 4c 8b 0c 24                   movq    (%rsp), %r9
// 20f: 4d 8d 24 ef                   leaq    (%r15,%rbp,8), %r12
// 213: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 218: 48 85 c0                      testq   %rax, %rax
// 21b: 0f 84 7f 01 00 00             je      0x3a0 <_JIT_ENTRY+0x3a0>
// 221: 49 89 04 24                   movq    %rax, (%r12)
// 225: 49 8b 41 10                   movq    0x10(%r9), %rax
// 229: 48 8b 00                      movq    (%rax), %rax
// 22c: 84 c0                         testb   %al, %al
// 22e: 74 20                         je      0x250 <_JIT_ENTRY+0x250>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _Py_HandlePending
// 23a: 4c 89 cf                      movq    %r9, %rdi
// 23d: ff d0                         callq   *%rax
// 23f: 4c 8b 0c 24                   movq    (%rsp), %r9
// 243: 85 c0                         testl   %eax, %eax
// 245: 74 09                         je      0x250 <_JIT_ENTRY+0x250>
// 247: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 24b: e9 50 01 00 00                jmp     0x3a0 <_JIT_ENTRY+0x3a0>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _JIT_OPARG
// 25a: 0f b7 c8                      movzwl  %ax, %ecx
// 25d: f7 d0                         notl    %eax
// 25f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 264: 48 98                         cltq
// 266: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 26a: 49 83 c4 f8                   addq    $-0x8, %r12
// 26e: 4d 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %r15
// 273: 48 8b 03                      movq    (%rbx), %rax
// 276: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 27a: 48 8b 40 20                   movq    0x20(%rax), %rax
// 27e: 48 8b 4c c8 18                movq    0x18(%rax,%rcx,8), %rcx
// 283: 48 85 ff                      testq   %rdi, %rdi
// 286: 74 23                         je      0x2ab <_JIT_ENTRY+0x2ab>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  PyDict_Type
// 292: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 296: 0f 84 8f 00 00 00             je      0x32b <_JIT_ENTRY+0x32b>
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  PyObject_SetItem
// 2a6: e9 8a 00 00 00                jmp     0x335 <_JIT_ENTRY+0x335>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  PyExc_SystemError
// 2b5: 48 8b 30                      movq    (%rax), %rsi
// 2b8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ba:  R_X86_64_64  .rodata.str1.1+0x39
// 2c2: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002c4:  R_X86_64_64  _PyErr_Format
// 2cc: 4c 89 cf                      movq    %r9, %rdi
// 2cf: 31 c0                         xorl    %eax, %eax
// 2d1: 41 ff d0                      callq   *%r8
// 2d4: 49 8b 07                      movq    (%r15), %rax
// 2d7: 48 85 c0                      testq   %rax, %rax
// 2da: 7f 21                         jg      0x2fd <_JIT_ENTRY+0x2fd>
// 2dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002de:  R_X86_64_64  .rodata.str1.1
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_NegativeRefcount
// 2f0: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 2f5: 4c 89 fa                      movq    %r15, %rdx
// 2f8: ff d0                         callq   *%rax
// 2fa: 49 8b 07                      movq    (%r15), %rax
// 2fd: 85 c0                         testl   %eax, %eax
// 2ff: 0f 88 9b 00 00 00             js      0x3a0 <_JIT_ENTRY+0x3a0>
// 305: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000307:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30f: ff d0                         callq   *%rax
// 311: 49 ff 0f                      decq    (%r15)
// 314: 0f 85 86 00 00 00             jne     0x3a0 <_JIT_ENTRY+0x3a0>
// 31a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031c:  R_X86_64_64  _Py_Dealloc
// 324: 4c 89 ff                      movq    %r15, %rdi
// 327: ff d0                         callq   *%rax
// 329: eb 75                         jmp     0x3a0 <_JIT_ENTRY+0x3a0>
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  PyDict_SetItem
// 335: 48 89 ce                      movq    %rcx, %rsi
// 338: 4c 89 fa                      movq    %r15, %rdx
// 33b: ff d0                         callq   *%rax
// 33d: 48 8b 14 24                   movq    (%rsp), %rdx
// 341: 89 c5                         movl    %eax, %ebp
// 343: 49 8b 07                      movq    (%r15), %rax
// 346: 48 85 c0                      testq   %rax, %rax
// 349: 7f 25                         jg      0x370 <_JIT_ENTRY+0x370>
// 34b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000034d:  R_X86_64_64  .rodata.str1.1
// 355: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000357:  R_X86_64_64  _Py_NegativeRefcount
// 35f: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 364: 4c 89 fa                      movq    %r15, %rdx
// 367: ff d0                         callq   *%rax
// 369: 48 8b 14 24                   movq    (%rsp), %rdx
// 36d: 49 8b 07                      movq    (%r15), %rax
// 370: 85 c0                         testl   %eax, %eax
// 372: 78 28                         js      0x39c <_JIT_ENTRY+0x39c>
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 37e: ff d0                         callq   *%rax
// 380: 48 8b 14 24                   movq    (%rsp), %rdx
// 384: 49 ff 0f                      decq    (%r15)
// 387: 75 13                         jne     0x39c <_JIT_ENTRY+0x39c>
// 389: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038b:  R_X86_64_64  _Py_Dealloc
// 393: 4c 89 ff                      movq    %r15, %rdi
// 396: ff d0                         callq   *%rax
// 398: 48 8b 14 24                   movq    (%rsp), %rdx
// 39c: 85 ed                         testl   %ebp, %ebp
// 39e: 74 16                         je      0x3b6 <_JIT_ENTRY+0x3b6>
// 3a0: 49 29 dc                      subq    %rbx, %r12
// 3a3: 49 83 c4 b8                   addq    $-0x48, %r12
// 3a7: 49 c1 ec 03                   shrq    $0x3, %r12
// 3ab: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 3af: 31 c0                         xorl    %eax, %eax
// 3b1: e9 28 fd ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 3b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b8:  R_X86_64_64  _JIT_CONTINUE
// 3c0: 48 89 df                      movq    %rbx, %rdi
// 3c3: 4c 89 e6                      movq    %r12, %rsi
// 3c6: 48 83 c4 18                   addq    $0x18, %rsp
// 3ca: 5b                            popq    %rbx
// 3cb: 41 5c                         popq    %r12
// 3cd: 41 5d                         popq    %r13
// 3cf: 41 5e                         popq    %r14
// 3d1: 41 5f                         popq    %r15
// 3d3: 5d                            popq    %rbp
// 3d4: ff e0                         jmpq    *%rax
// 3d6: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_NAME_code_body[983] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf1, 0x4c, 0x89, 0xf1, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd6, 0x4c, 0x0f, 0x44, 0xf1, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfc, 0xe9, 0x89, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xf7, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x41, 0xff, 0x41, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xef, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x7f, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x41, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xcf, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x85, 0xc0, 0x74, 0x09, 0x4f, 0x8d, 0x24, 0xef, 0xe9, 0x50, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x4c, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x0f, 0x84, 0x8f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xcf, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0f, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xed, 0x74, 0x16, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x28, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_STORE_NAME_code_holes[31] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x59},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x34d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x357, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3b8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00 while calling a Python object\x00'
// 78: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_NAME_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_STORE_NAME_data_holes[1];

// _CALL_BUILTIN_Oplus_STORE_SLICE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_STORE_SLICE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f1                      movslq  %ecx, %r14
// 63: 4f 8b 24 f7                   movq    (%r15,%r14,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 48                         jle     0xe1 <_JIT_ENTRY+0xe1>
// 99: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 78                         jne     0x11b <_JIT_ENTRY+0x11b>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 73                         jmp     0x11d <_JIT_ENTRY+0x11d>
// aa: 49 29 df                      subq    %rbx, %r15
// ad: 49 83 c7 b8                   addq    $-0x48, %r15
// b1: 49 c1 ef 03                   shrq    $0x3, %r15
// b5: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// b9: 48 8b 03                      movq    (%rbx), %rax
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_TARGET
// c6: 89 c9                         movl    %ecx, %ecx
// c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d2: 48 83 c4 28                   addq    $0x28, %rsp
// d6: 5b                            popq    %rbx
// d7: 41 5c                         popq    %r12
// d9: 41 5d                         popq    %r13
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: 5d                            popq    %rbp
// e0: c3                            retq
// e1: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1+0x39
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_CheckRecursiveCall
// fa: 48 89 d7                      movq    %rdx, %rdi
// fd: ff d0                         callq   *%rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 0f 85 fb 02 00 00             jne     0x402 <_JIT_ENTRY+0x402>
// 107: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10c: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 111: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 115: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 119: 74 88                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11b: 31 ff                         xorl    %edi, %edi
// 11d: 48 89 ee                      movq    %rbp, %rsi
// 120: 41 ff d0                      callq   *%r8
// 123: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 128: ff 47 2c                      incl    0x2c(%rdi)
// 12b: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 130: 48 8b 45 00                   movq    (%rbp), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 27                         jg      0x160 <_JIT_ENTRY+0x160>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 152: 48 89 ea                      movq    %rbp, %rdx
// 155: ff d0                         callq   *%rax
// 157: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 15c: 48 8b 45 00                   movq    (%rbp), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 2b                         js      0x18f <_JIT_ENTRY+0x18f>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 175: 48 ff 4d 00                   decq    (%rbp)
// 179: 75 14                         jne     0x18f <_JIT_ENTRY+0x18f>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: 48 89 ef                      movq    %rbp, %rdi
// 188: ff d0                         callq   *%rax
// 18a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18f: 49 8b 04 24                   movq    (%r12), %rax
// 193: 48 85 c0                      testq   %rax, %rax
// 196: 7f 27                         jg      0x1bf <_JIT_ENTRY+0x1bf>
// 198: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019a:  R_X86_64_64  .rodata.str1.1
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_NegativeRefcount
// 1ac: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b1: 4c 89 e2                      movq    %r12, %rdx
// 1b4: ff d0                         callq   *%rax
// 1b6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1bb: 49 8b 04 24                   movq    (%r12), %rax
// 1bf: 85 c0                         testl   %eax, %eax
// 1c1: 78 2b                         js      0x1ee <_JIT_ENTRY+0x1ee>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d4: 49 ff 0c 24                   decq    (%r12)
// 1d8: 75 14                         jne     0x1ee <_JIT_ENTRY+0x1ee>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_Dealloc
// 1e4: 4c 89 e7                      movq    %r12, %rdi
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ee: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 1f2: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f7: 48 85 c9                      testq   %rcx, %rcx
// 1fa: 0f 84 f2 00 00 00             je      0x2f2 <_JIT_ENTRY+0x2f2>
// 200: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 204: 48 89 08                      movq    %rcx, (%rax)
// 207: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 20b: 48 8b 00                      movq    (%rax), %rax
// 20e: 84 c0                         testb   %al, %al
// 210: 74 18                         je      0x22a <_JIT_ENTRY+0x22a>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_HandlePending
// 21c: ff d0                         callq   *%rax
// 21e: 85 c0                         testl   %eax, %eax
// 220: 74 08                         je      0x22a <_JIT_ENTRY+0x22a>
// 222: 4d 89 f7                      movq    %r14, %r15
// 225: e9 d8 01 00 00                jmp     0x402 <_JIT_ENTRY+0x402>
// 22a: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _JIT_OPARG
// 239: f7 d0                         notl    %eax
// 23b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 240: 4c 63 f0                      movslq  %eax, %r14
// 243: 4b 8b 74 f7 f8                movq    -0x8(%r15,%r14,8), %rsi
// 248: 4b 8b 7c f7 f0                movq    -0x10(%r15,%r14,8), %rdi
// 24d: 4b 8b 6c f7 e0                movq    -0x20(%r15,%r14,8), %rbp
// 252: 4f 8b 64 f7 e8                movq    -0x18(%r15,%r14,8), %r12
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 261: ff d0                         callq   *%rax
// 263: 48 85 c0                      testq   %rax, %rax
// 266: 4c 89 64 24 10                movq    %r12, 0x10(%rsp)
// 26b: 0f 84 89 00 00 00             je      0x2fa <_JIT_ENTRY+0x2fa>
// 271: 49 89 c5                      movq    %rax, %r13
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  PyObject_SetItem
// 27e: 4c 89 e7                      movq    %r12, %rdi
// 281: 4c 89 ee                      movq    %r13, %rsi
// 284: 48 89 ea                      movq    %rbp, %rdx
// 287: ff d0                         callq   *%rax
// 289: 89 44 24 1c                   movl    %eax, 0x1c(%rsp)
// 28d: 49 8b 45 00                   movq    (%r13), %rax
// 291: 48 85 c0                      testq   %rax, %rax
// 294: 7f 22                         jg      0x2b8 <_JIT_ENTRY+0x2b8>
// 296: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000298:  R_X86_64_64  .rodata.str1.1
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_NegativeRefcount
// 2aa: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 2af: 4c 89 ea                      movq    %r13, %rdx
// 2b2: ff d0                         callq   *%rax
// 2b4: 49 8b 45 00                   movq    (%r13), %rax
// 2b8: 85 c0                         testl   %eax, %eax
// 2ba: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 2bf: 78 21                         js      0x2e2 <_JIT_ENTRY+0x2e2>
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cb: ff d0                         callq   *%rax
// 2cd: 49 ff 4d 00                   decq    (%r13)
// 2d1: 75 0f                         jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _Py_Dealloc
// 2dd: 4c 89 ef                      movq    %r13, %rdi
// 2e0: ff d0                         callq   *%rax
// 2e2: 83 7c 24 1c 00                cmpl    $0x0, 0x1c(%rsp)
// 2e7: 41 0f 94 c5                   sete    %r13b
// 2eb: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2f0: eb 15                         jmp     0x307 <_JIT_ENTRY+0x307>
// 2f2: 49 89 c7                      movq    %rax, %r15
// 2f5: e9 08 01 00 00                jmp     0x402 <_JIT_ENTRY+0x402>
// 2fa: 45 31 ed                      xorl    %r13d, %r13d
// 2fd: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 302: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 307: 48 8b 45 00                   movq    (%rbp), %rax
// 30b: 48 85 c0                      testq   %rax, %rax
// 30e: 7f 27                         jg      0x337 <_JIT_ENTRY+0x337>
// 310: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000312:  R_X86_64_64  .rodata.str1.1
// 31a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031c:  R_X86_64_64  _Py_NegativeRefcount
// 324: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 329: 48 89 ea                      movq    %rbp, %rdx
// 32c: ff d0                         callq   *%rax
// 32e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 333: 48 8b 45 00                   movq    (%rbp), %rax
// 337: 85 c0                         testl   %eax, %eax
// 339: 78 2b                         js      0x366 <_JIT_ENTRY+0x366>
// 33b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 345: ff d0                         callq   *%rax
// 347: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 34c: 48 ff 4d 00                   decq    (%rbp)
// 350: 75 14                         jne     0x366 <_JIT_ENTRY+0x366>
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _Py_Dealloc
// 35c: 48 89 ef                      movq    %rbp, %rdi
// 35f: ff d0                         callq   *%rax
// 361: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 366: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 36b: 48 8b 45 00                   movq    (%rbp), %rax
// 36f: 48 85 c0                      testq   %rax, %rax
// 372: 7f 27                         jg      0x39b <_JIT_ENTRY+0x39b>
// 374: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000376:  R_X86_64_64  .rodata.str1.1
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _Py_NegativeRefcount
// 388: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 38d: 48 89 ea                      movq    %rbp, %rdx
// 390: ff d0                         callq   *%rax
// 392: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 397: 48 8b 45 00                   movq    (%rbp), %rax
// 39b: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 39f: 49 83 c6 e0                   addq    $-0x20, %r14
// 3a3: 85 c0                         testl   %eax, %eax
// 3a5: 78 2b                         js      0x3d2 <_JIT_ENTRY+0x3d2>
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3b1: ff d0                         callq   *%rax
// 3b3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3b8: 48 ff 4d 00                   decq    (%rbp)
// 3bc: 75 14                         jne     0x3d2 <_JIT_ENTRY+0x3d2>
// 3be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c0:  R_X86_64_64  _Py_Dealloc
// 3c8: 48 89 ef                      movq    %rbp, %rdi
// 3cb: ff d0                         callq   *%rax
// 3cd: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3d2: 45 84 ed                      testb   %r13b, %r13b
// 3d5: 4d 0f 45 e6                   cmovneq %r14, %r12
// 3d9: 74 20                         je      0x3fb <_JIT_ENTRY+0x3fb>
// 3db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003dd:  R_X86_64_64  _JIT_CONTINUE
// 3e5: 48 89 df                      movq    %rbx, %rdi
// 3e8: 4c 89 e6                      movq    %r12, %rsi
// 3eb: 48 83 c4 28                   addq    $0x28, %rsp
// 3ef: 5b                            popq    %rbx
// 3f0: 41 5c                         popq    %r12
// 3f2: 41 5d                         popq    %r13
// 3f4: 41 5e                         popq    %r14
// 3f6: 41 5f                         popq    %r15
// 3f8: 5d                            popq    %rbp
// 3f9: ff e0                         jmpq    *%rax
// 3fb: 49 83 c4 e0                   addq    $-0x20, %r12
// 3ff: 4d 89 e7                      movq    %r12, %r15
// 402: 49 29 df                      subq    %rbx, %r15
// 405: 49 83 c7 b8                   addq    $-0x48, %r15
// 409: 49 c1 ef 03                   shrq    $0x3, %r15
// 40d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 411: 31 c0                         xorl    %eax, %eax
// 413: e9 ba fc ff ff                jmp     0xd2 <_JIT_ENTRY+0xd2>
// 418: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_SLICE_code_body[1049] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf1, 0x4f, 0x8b, 0x24, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x78, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x73, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xfb, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x88, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xf2, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xef, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf7, 0xe9, 0xd8, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x74, 0xf7, 0xf8, 0x4b, 0x8b, 0x7c, 0xf7, 0xf0, 0x4b, 0x8b, 0x6c, 0xf7, 0xe0, 0x4f, 0x8b, 0x64, 0xf7, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x4c, 0x89, 0x64, 0x24, 0x10, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x1c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x1c, 0x00, 0x41, 0x0f, 0x94, 0xc5, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xeb, 0x15, 0x49, 0x89, 0xc7, 0xe9, 0x08, 0x01, 0x00, 0x00, 0x45, 0x31, 0xed, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xe0, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x45, 0x84, 0xed, 0x4d, 0x0f, 0x45, 0xe6, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xe0, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xba, 0xfc, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_STORE_SLICE_code_holes[31] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_SLICE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_STORE_SLICE_data_holes[1];

// _CALL_BUILTIN_Oplus_STORE_SUBSCR
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_STORE_SUBSCR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 50                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f1                      movslq  %ecx, %r14
// 63: 4f 8b 24 f7                   movq    (%r15,%r14,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 31                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 26                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 14 24                   movq    %rdx, (%rsp)
// 96: 7e 48                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 98: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 9c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a0: 75 78                         jne     0x11a <_JIT_ENTRY+0x11a>
// a2: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a7: eb 73                         jmp     0x11c <_JIT_ENTRY+0x11c>
// a9: 49 29 df                      subq    %rbx, %r15
// ac: 49 83 c7 b8                   addq    $-0x48, %r15
// b0: 49 c1 ef 03                   shrq    $0x3, %r15
// b4: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// b8: 48 8b 03                      movq    (%rbx), %rax
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _JIT_TARGET
// c5: 89 c9                         movl    %ecx, %ecx
// c7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d1: 48 83 c4 18                   addq    $0x18, %rsp
// d5: 5b                            popq    %rbx
// d6: 41 5c                         popq    %r12
// d8: 41 5d                         popq    %r13
// da: 41 5e                         popq    %r14
// dc: 41 5f                         popq    %r15
// de: 5d                            popq    %rbp
// df: c3                            retq
// e0: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// e5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e7:  R_X86_64_64  .rodata.str1.1+0x39
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_CheckRecursiveCall
// f9: 48 89 d7                      movq    %rdx, %rdi
// fc: ff d0                         callq   *%rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 0f 85 6a 02 00 00             jne     0x370 <_JIT_ENTRY+0x370>
// 106: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10b: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 110: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 114: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 118: 74 88                         je      0xa2 <_JIT_ENTRY+0xa2>
// 11a: 31 ff                         xorl    %edi, %edi
// 11c: 48 89 ee                      movq    %rbp, %rsi
// 11f: 41 ff d0                      callq   *%r8
// 122: 48 8b 3c 24                   movq    (%rsp), %rdi
// 126: ff 47 2c                      incl    0x2c(%rdi)
// 129: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 12e: 48 8b 45 00                   movq    (%rbp), %rax
// 132: 48 85 c0                      testq   %rax, %rax
// 135: 7f 26                         jg      0x15d <_JIT_ENTRY+0x15d>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 150: 48 89 ea                      movq    %rbp, %rdx
// 153: ff d0                         callq   *%rax
// 155: 48 8b 3c 24                   movq    (%rsp), %rdi
// 159: 48 8b 45 00                   movq    (%rbp), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 29                         js      0x18a <_JIT_ENTRY+0x18a>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 48 8b 3c 24                   movq    (%rsp), %rdi
// 171: 48 ff 4d 00                   decq    (%rbp)
// 175: 75 13                         jne     0x18a <_JIT_ENTRY+0x18a>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_Dealloc
// 181: 48 89 ef                      movq    %rbp, %rdi
// 184: ff d0                         callq   *%rax
// 186: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18a: 49 8b 04 24                   movq    (%r12), %rax
// 18e: 48 85 c0                      testq   %rax, %rax
// 191: 7f 26                         jg      0x1b9 <_JIT_ENTRY+0x1b9>
// 193: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000195:  R_X86_64_64  .rodata.str1.1
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_NegativeRefcount
// 1a7: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1ac: 4c 89 e2                      movq    %r12, %rdx
// 1af: ff d0                         callq   *%rax
// 1b1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b5: 49 8b 04 24                   movq    (%r12), %rax
// 1b9: 85 c0                         testl   %eax, %eax
// 1bb: 78 29                         js      0x1e6 <_JIT_ENTRY+0x1e6>
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c7: ff d0                         callq   *%rax
// 1c9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1cd: 49 ff 0c 24                   decq    (%r12)
// 1d1: 75 13                         jne     0x1e6 <_JIT_ENTRY+0x1e6>
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _Py_Dealloc
// 1dd: 4c 89 e7                      movq    %r12, %rdi
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e6: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 1ea: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1ef: 48 85 c9                      testq   %rcx, %rcx
// 1f2: 0f 84 75 01 00 00             je      0x36d <_JIT_ENTRY+0x36d>
// 1f8: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 1fc: 48 89 08                      movq    %rcx, (%rax)
// 1ff: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 203: 48 8b 00                      movq    (%rax), %rax
// 206: 84 c0                         testb   %al, %al
// 208: 74 14                         je      0x21e <_JIT_ENTRY+0x21e>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_HandlePending
// 214: ff d0                         callq   *%rax
// 216: 85 c0                         testl   %eax, %eax
// 218: 0f 85 4a 01 00 00             jne     0x368 <_JIT_ENTRY+0x368>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_OPARG
// 228: f7 d0                         notl    %eax
// 22a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22f: 4c 63 f0                      movslq  %eax, %r14
// 232: 4b 8b 74 f7 f8                movq    -0x8(%r15,%r14,8), %rsi
// 237: 4f 8b 6c f7 e8                movq    -0x18(%r15,%r14,8), %r13
// 23c: 4b 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %rbp
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  PyObject_SetItem
// 24b: 48 89 ef                      movq    %rbp, %rdi
// 24e: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 253: 4c 89 ea                      movq    %r13, %rdx
// 256: ff d0                         callq   *%rax
// 258: 89 44 24 14                   movl    %eax, 0x14(%rsp)
// 25c: 49 8b 45 00                   movq    (%r13), %rax
// 260: 48 85 c0                      testq   %rax, %rax
// 263: 7f 22                         jg      0x287 <_JIT_ENTRY+0x287>
// 265: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000267:  R_X86_64_64  .rodata.str1.1
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_NegativeRefcount
// 279: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 27e: 4c 89 ea                      movq    %r13, %rdx
// 281: ff d0                         callq   *%rax
// 283: 49 8b 45 00                   movq    (%r13), %rax
// 287: 85 c0                         testl   %eax, %eax
// 289: 78 21                         js      0x2ac <_JIT_ENTRY+0x2ac>
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 295: ff d0                         callq   *%rax
// 297: 49 ff 4d 00                   decq    (%r13)
// 29b: 75 0f                         jne     0x2ac <_JIT_ENTRY+0x2ac>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_Dealloc
// 2a7: 4c 89 ef                      movq    %r13, %rdi
// 2aa: ff d0                         callq   *%rax
// 2ac: 48 8b 45 00                   movq    (%rbp), %rax
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 7f 22                         jg      0x2d7 <_JIT_ENTRY+0x2d7>
// 2b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_NegativeRefcount
// 2c9: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// 2ce: 48 89 ea                      movq    %rbp, %rdx
// 2d1: ff d0                         callq   *%rax
// 2d3: 48 8b 45 00                   movq    (%rbp), %rax
// 2d7: 85 c0                         testl   %eax, %eax
// 2d9: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 2de: 78 21                         js      0x301 <_JIT_ENTRY+0x301>
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ea: ff d0                         callq   *%rax
// 2ec: 48 ff 4d 00                   decq    (%rbp)
// 2f0: 75 0f                         jne     0x301 <_JIT_ENTRY+0x301>
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _Py_Dealloc
// 2fc: 48 89 ef                      movq    %rbp, %rdi
// 2ff: ff d0                         callq   *%rax
// 301: 49 8b 45 00                   movq    (%r13), %rax
// 305: 48 85 c0                      testq   %rax, %rax
// 308: 7f 22                         jg      0x32c <_JIT_ENTRY+0x32c>
// 30a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030c:  R_X86_64_64  .rodata.str1.1
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _Py_NegativeRefcount
// 31e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 323: 4c 89 ea                      movq    %r13, %rdx
// 326: ff d0                         callq   *%rax
// 328: 49 8b 45 00                   movq    (%r13), %rax
// 32c: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 330: 49 83 c6 e8                   addq    $-0x18, %r14
// 334: 85 c0                         testl   %eax, %eax
// 336: 78 21                         js      0x359 <_JIT_ENTRY+0x359>
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 342: ff d0                         callq   *%rax
// 344: 49 ff 4d 00                   decq    (%r13)
// 348: 75 0f                         jne     0x359 <_JIT_ENTRY+0x359>
// 34a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034c:  R_X86_64_64  _Py_Dealloc
// 354: 4c 89 ef                      movq    %r13, %rdi
// 357: ff d0                         callq   *%rax
// 359: 83 7c 24 14 00                cmpl    $0x0, 0x14(%rsp)
// 35e: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 362: 74 22                         je      0x386 <_JIT_ENTRY+0x386>
// 364: 49 83 c4 e8                   addq    $-0x18, %r12
// 368: 4d 89 e7                      movq    %r12, %r15
// 36b: eb 03                         jmp     0x370 <_JIT_ENTRY+0x370>
// 36d: 49 89 c7                      movq    %rax, %r15
// 370: 49 29 df                      subq    %rbx, %r15
// 373: 49 83 c7 b8                   addq    $-0x48, %r15
// 377: 49 c1 ef 03                   shrq    $0x3, %r15
// 37b: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 37f: 31 c0                         xorl    %eax, %eax
// 381: e9 4b fd ff ff                jmp     0xd1 <_JIT_ENTRY+0xd1>
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _JIT_CONTINUE
// 390: 48 89 df                      movq    %rbx, %rdi
// 393: 4c 89 e6                      movq    %r12, %rsi
// 396: 48 8b 14 24                   movq    (%rsp), %rdx
// 39a: 48 83 c4 18                   addq    $0x18, %rsp
// 39e: 5b                            popq    %rbx
// 39f: 41 5c                         popq    %r12
// 3a1: 41 5d                         popq    %r13
// 3a3: 41 5e                         popq    %r14
// 3a5: 41 5f                         popq    %r15
// 3a7: 5d                            popq    %rbp
// 3a8: ff e0                         jmpq    *%rax
// 3aa: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_SUBSCR_code_body[939] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x50, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf1, 0x4f, 0x8b, 0x24, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x31, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x26, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x48, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x78, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x73, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x6a, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x88, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x75, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x4a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x74, 0xf7, 0xf8, 0x4f, 0x8b, 0x6c, 0xf7, 0xe8, 0x4b, 0x8b, 0x6c, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x14, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x14, 0x00, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x22, 0x49, 0x83, 0xc4, 0xe8, 0x4d, 0x89, 0xe7, 0xeb, 0x03, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x4b, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_STORE_SUBSCR_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_SUBSCR_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_STORE_SUBSCR_data_holes[1];

// _CALL_BUILTIN_Oplus_STORE_SUBSCR_DICT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_STORE_SUBSCR_DICT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 da 01 00 00             jne     0x238 <_JIT_ENTRY+0x238>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 b7 01 00 00             jne     0x238 <_JIT_ENTRY+0x238>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 a8 01 00 00             jne     0x238 <_JIT_ENTRY+0x238>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 2d 02 00 00             jne     0x30e <_JIT_ENTRY+0x30e>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 3c 24                   movq    (%rsp), %rdi
// 10b: ff 47 2c                      incl    0x2c(%rdi)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 3c 24                   movq    (%rsp), %rdi
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 3c 24                   movq    (%rsp), %rdi
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1dd: 4d 85 ff                      testq   %r15, %r15
// 1e0: 0f 84 89 00 00 00             je      0x26f <_JIT_ENTRY+0x26f>
// 1e6: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1ea: 4c 89 38                      movq    %r15, (%rax)
// 1ed: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1f1: 48 8b 00                      movq    (%rax), %rax
// 1f4: 84 c0                         testb   %al, %al
// 1f6: 74 14                         je      0x20c <_JIT_ENTRY+0x20c>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_HandlePending
// 202: ff d0                         callq   *%rax
// 204: 85 c0                         testl   %eax, %eax
// 206: 0f 85 ff 00 00 00             jne     0x30b <_JIT_ENTRY+0x30b>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _JIT_OPARG
// 216: f7 d0                         notl    %eax
// 218: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21d: 48 63 e8                      movslq  %eax, %rbp
// 220: 4d 8b 6c ee f0                movq    -0x10(%r14,%rbp,8), %r13
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  PyDict_Type
// 22f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 233: 74 42                         je      0x277 <_JIT_ENTRY+0x277>
// 235: 4d 89 e6                      movq    %r12, %r14
// 238: 49 29 de                      subq    %rbx, %r14
// 23b: 49 83 c6 b8                   addq    $-0x48, %r14
// 23f: 49 c1 ee 03                   shrq    $0x3, %r14
// 243: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 247: 48 8b 03                      movq    (%rbx), %rax
// 24a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024c:  R_X86_64_64  _JIT_TARGET
// 254: 89 c9                         movl    %ecx, %ecx
// 256: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 260: 48 83 c4 18                   addq    $0x18, %rsp
// 264: 5b                            popq    %rbx
// 265: 41 5c                         popq    %r12
// 267: 41 5d                         popq    %r13
// 269: 41 5e                         popq    %r14
// 26b: 41 5f                         popq    %r15
// 26d: 5d                            popq    %rbp
// 26e: c3                            retq
// 26f: 49 89 c6                      movq    %rax, %r14
// 272: e9 97 00 00 00                jmp     0x30e <_JIT_ENTRY+0x30e>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_OPARG
// 281: f7 d0                         notl    %eax
// 283: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 288: 48 98                         cltq
// 28a: 49 8b 54 c6 e8                movq    -0x18(%r14,%rax,8), %rdx
// 28f: 49 8b 74 c6 f8                movq    -0x8(%r14,%rax,8), %rsi
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _PyDict_SetItem_Take2
// 29e: 4c 89 ef                      movq    %r13, %rdi
// 2a1: ff d0                         callq   *%rax
// 2a3: 41 89 c7                      movl    %eax, %r15d
// 2a6: 49 8b 45 00                   movq    (%r13), %rax
// 2aa: 48 85 c0                      testq   %rax, %rax
// 2ad: 7f 22                         jg      0x2d1 <_JIT_ENTRY+0x2d1>
// 2af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_NegativeRefcount
// 2c3: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// 2c8: 4c 89 ea                      movq    %r13, %rdx
// 2cb: ff d0                         callq   *%rax
// 2cd: 49 8b 45 00                   movq    (%r13), %rax
// 2d1: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 2d5: 49 83 c6 e8                   addq    $-0x18, %r14
// 2d9: 85 c0                         testl   %eax, %eax
// 2db: 78 21                         js      0x2fe <_JIT_ENTRY+0x2fe>
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e7: ff d0                         callq   *%rax
// 2e9: 49 ff 4d 00                   decq    (%r13)
// 2ed: 75 0f                         jne     0x2fe <_JIT_ENTRY+0x2fe>
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_Dealloc
// 2f9: 4c 89 ef                      movq    %r13, %rdi
// 2fc: ff d0                         callq   *%rax
// 2fe: 45 85 ff                      testl   %r15d, %r15d
// 301: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 305: 74 1d                         je      0x324 <_JIT_ENTRY+0x324>
// 307: 49 83 c4 e8                   addq    $-0x18, %r12
// 30b: 4d 89 e6                      movq    %r12, %r14
// 30e: 49 29 de                      subq    %rbx, %r14
// 311: 49 83 c6 b8                   addq    $-0x48, %r14
// 315: 49 c1 ee 03                   shrq    $0x3, %r14
// 319: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 31d: 31 c0                         xorl    %eax, %eax
// 31f: e9 3c ff ff ff                jmp     0x260 <_JIT_ENTRY+0x260>
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _JIT_CONTINUE
// 32e: 48 89 df                      movq    %rbx, %rdi
// 331: 4c 89 e6                      movq    %r12, %rsi
// 334: 48 8b 14 24                   movq    (%rsp), %rdx
// 338: 48 83 c4 18                   addq    $0x18, %rsp
// 33c: 5b                            popq    %rbx
// 33d: 41 5c                         popq    %r12
// 33f: 41 5d                         popq    %r13
// 341: 41 5e                         popq    %r14
// 343: 41 5f                         popq    %r15
// 345: 5d                            popq    %rbp
// 346: ff e0                         jmpq    *%rax
// 348: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_SUBSCR_DICT_code_body[841] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xda, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xb7, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xa8, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2d, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xff, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x6c, 0xee, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x42, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc6, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x54, 0xc6, 0xe8, 0x49, 0x8b, 0x74, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xff, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x1d, 0x49, 0x83, 0xc4, 0xe8, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x3c, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_STORE_SUBSCR_DICT_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_SUBSCR_DICT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_STORE_SUBSCR_DICT_data_holes[1];

// _CALL_BUILTIN_Oplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_STORE_SUBSCR_LIST_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f1                      movslq  %ecx, %r14
// 63: 4f 8b 24 f7                   movq    (%r15,%r14,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 4a                         jle     0xe3 <_JIT_ENTRY+0xe3>
// 99: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 7a                         jne     0x11d <_JIT_ENTRY+0x11d>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 75                         jmp     0x11f <_JIT_ENTRY+0x11f>
// aa: 4c 89 fd                      movq    %r15, %rbp
// ad: 48 29 dd                      subq    %rbx, %rbp
// b0: 48 83 c5 b8                   addq    $-0x48, %rbp
// b4: 48 c1 ed 03                   shrq    $0x3, %rbp
// b8: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// bb: 48 8b 03                      movq    (%rbx), %rax
// be: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c0:  R_X86_64_64  _JIT_TARGET
// c8: 89 c9                         movl    %ecx, %ecx
// ca: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ce: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d4: 48 83 c4 18                   addq    $0x18, %rsp
// d8: 5b                            popq    %rbx
// d9: 41 5c                         popq    %r12
// db: 41 5d                         popq    %r13
// dd: 41 5e                         popq    %r14
// df: 41 5f                         popq    %r15
// e1: 5d                            popq    %rbp
// e2: c3                            retq
// e3: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ea:  R_X86_64_64  .rodata.str1.1+0x39
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_CheckRecursiveCall
// fc: 48 89 d7                      movq    %rdx, %rdi
// ff: ff d0                         callq   *%rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 0f 85 c4 02 00 00             jne     0x3cd <_JIT_ENTRY+0x3cd>
// 109: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10e: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 113: 49 8b 2c ef                   movq    (%r15,%rbp,8), %rbp
// 117: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11b: 74 86                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11d: 31 ff                         xorl    %edi, %edi
// 11f: 48 89 ee                      movq    %rbp, %rsi
// 122: 41 ff d0                      callq   *%r8
// 125: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 12a: 41 ff 40 2c                   incl    0x2c(%r8)
// 12e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 27                         jg      0x163 <_JIT_ENTRY+0x163>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 15f: 48 8b 45 00                   movq    (%rbp), %rax
// 163: 85 c0                         testl   %eax, %eax
// 165: 78 2b                         js      0x192 <_JIT_ENTRY+0x192>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 178: 48 ff 4d 00                   decq    (%rbp)
// 17c: 75 14                         jne     0x192 <_JIT_ENTRY+0x192>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_Dealloc
// 188: 48 89 ef                      movq    %rbp, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 192: 49 8b 04 24                   movq    (%r12), %rax
// 196: 48 85 c0                      testq   %rax, %rax
// 199: 7f 27                         jg      0x1c2 <_JIT_ENTRY+0x1c2>
// 19b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019d:  R_X86_64_64  .rodata.str1.1
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_NegativeRefcount
// 1af: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b4: 4c 89 e2                      movq    %r12, %rdx
// 1b7: ff d0                         callq   *%rax
// 1b9: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1be: 49 8b 04 24                   movq    (%r12), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 2b                         js      0x1f1 <_JIT_ENTRY+0x1f1>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1d7: 49 ff 0c 24                   decq    (%r12)
// 1db: 75 14                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_Dealloc
// 1e7: 4c 89 e7                      movq    %r12, %rdi
// 1ea: ff d0                         callq   *%rax
// 1ec: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1f1: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 1f5: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1fa: 48 85 c9                      testq   %rcx, %rcx
// 1fd: 0f 84 c7 01 00 00             je      0x3ca <_JIT_ENTRY+0x3ca>
// 203: 4b 8d 2c ef                   leaq    (%r15,%r13,8), %rbp
// 207: 48 89 08                      movq    %rcx, (%rax)
// 20a: 49 8b 40 10                   movq    0x10(%r8), %rax
// 20e: 48 8b 00                      movq    (%rax), %rax
// 211: 84 c0                         testb   %al, %al
// 213: 74 20                         je      0x235 <_JIT_ENTRY+0x235>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_HandlePending
// 21f: 4c 89 c7                      movq    %r8, %rdi
// 222: ff d0                         callq   *%rax
// 224: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 229: 85 c0                         testl   %eax, %eax
// 22b: 74 08                         je      0x235 <_JIT_ENTRY+0x235>
// 22d: 49 89 ef                      movq    %rbp, %r15
// 230: e9 98 01 00 00                jmp     0x3cd <_JIT_ENTRY+0x3cd>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_OPARG
// 23f: f7 d0                         notl    %eax
// 241: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 246: 4c 63 f0                      movslq  %eax, %r14
// 249: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  PyLong_Type
// 258: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 25c: 0f 85 4b fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 262: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  PyList_Type
// 271: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 276: 0f 85 31 fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 27c: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 281: 0f 87 26 fe ff ff             ja      0xad <_JIT_ENTRY+0xad>
// 287: 41 8b 45 18                   movl    0x18(%r13), %eax
// 28b: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 290: 0f 8e 17 fe ff ff             jle     0xad <_JIT_ENTRY+0xad>
// 296: 4b 8b 4c f7 e8                movq    -0x18(%r15,%r14,8), %rcx
// 29b: 49 8b 54 24 18                movq    0x18(%r12), %rdx
// 2a0: 48 8b 2c c2                   movq    (%rdx,%rax,8), %rbp
// 2a4: 48 89 0c c2                   movq    %rcx, (%rdx,%rax,8)
// 2a8: 48 8b 45 00                   movq    (%rbp), %rax
// 2ac: 48 85 c0                      testq   %rax, %rax
// 2af: 7f 27                         jg      0x2d8 <_JIT_ENTRY+0x2d8>
// 2b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b3:  R_X86_64_64  .rodata.str1.1
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_NegativeRefcount
// 2c5: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// 2ca: 48 89 ea                      movq    %rbp, %rdx
// 2cd: ff d0                         callq   *%rax
// 2cf: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 2d4: 48 8b 45 00                   movq    (%rbp), %rax
// 2d8: 85 c0                         testl   %eax, %eax
// 2da: 78 2b                         js      0x307 <_JIT_ENTRY+0x307>
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e6: ff d0                         callq   *%rax
// 2e8: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 2ed: 48 ff 4d 00                   decq    (%rbp)
// 2f1: 75 14                         jne     0x307 <_JIT_ENTRY+0x307>
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _Py_Dealloc
// 2fd: 48 89 ef                      movq    %rbp, %rdi
// 300: ff d0                         callq   *%rax
// 302: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 307: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 30c: 75 32                         jne     0x340 <_JIT_ENTRY+0x340>
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  PyInterpreterState_Get
// 318: ff d0                         callq   *%rax
// 31a: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 31f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 326: 49 ff 4d 00                   decq    (%r13)
// 32a: 75 14                         jne     0x340 <_JIT_ENTRY+0x340>
// 32c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032e:  R_X86_64_64  PyObject_Free
// 336: 4c 89 ef                      movq    %r13, %rdi
// 339: ff d0                         callq   *%rax
// 33b: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 340: 49 8b 04 24                   movq    (%r12), %rax
// 344: 48 85 c0                      testq   %rax, %rax
// 347: 7f 27                         jg      0x370 <_JIT_ENTRY+0x370>
// 349: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000034b:  R_X86_64_64  .rodata.str1.1
// 353: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000355:  R_X86_64_64  _Py_NegativeRefcount
// 35d: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 362: 4c 89 e2                      movq    %r12, %rdx
// 365: ff d0                         callq   *%rax
// 367: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 36c: 49 8b 04 24                   movq    (%r12), %rax
// 370: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 374: 49 83 c7 e8                   addq    $-0x18, %r15
// 378: 85 c0                         testl   %eax, %eax
// 37a: 78 2b                         js      0x3a7 <_JIT_ENTRY+0x3a7>
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 386: ff d0                         callq   *%rax
// 388: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 38d: 49 ff 0c 24                   decq    (%r12)
// 391: 75 14                         jne     0x3a7 <_JIT_ENTRY+0x3a7>
// 393: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000395:  R_X86_64_64  _Py_Dealloc
// 39d: 4c 89 e7                      movq    %r12, %rdi
// 3a0: ff d0                         callq   *%rax
// 3a2: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _JIT_CONTINUE
// 3b1: 48 89 df                      movq    %rbx, %rdi
// 3b4: 4c 89 fe                      movq    %r15, %rsi
// 3b7: 4c 89 c2                      movq    %r8, %rdx
// 3ba: 48 83 c4 18                   addq    $0x18, %rsp
// 3be: 5b                            popq    %rbx
// 3bf: 41 5c                         popq    %r12
// 3c1: 41 5d                         popq    %r13
// 3c3: 41 5e                         popq    %r14
// 3c5: 41 5f                         popq    %r15
// 3c7: 5d                            popq    %rbp
// 3c8: ff e0                         jmpq    *%rax
// 3ca: 49 89 c7                      movq    %rax, %r15
// 3cd: 49 29 df                      subq    %rbx, %r15
// 3d0: 49 83 c7 b8                   addq    $-0x48, %r15
// 3d4: 49 c1 ef 03                   shrq    $0x3, %r15
// 3d8: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 3dc: 31 c0                         xorl    %eax, %eax
// 3de: e9 f1 fc ff ff                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 3e3: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_SUBSCR_LIST_INT_code_body[996] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf1, 0x4f, 0x8b, 0x24, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4a, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x4c, 0x89, 0xfd, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xc4, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xef, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc7, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xef, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x85, 0xc0, 0x74, 0x08, 0x49, 0x89, 0xef, 0xe9, 0x98, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x4b, 0xfe, 0xff, 0xff, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x31, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x26, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x17, 0xfe, 0xff, 0xff, 0x4b, 0x8b, 0x4c, 0xf7, 0xe8, 0x49, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xc2, 0x48, 0x89, 0x0c, 0xc2, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x83, 0xc7, 0xe8, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xf1, 0xfc, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_STORE_SUBSCR_LIST_INT_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x32e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x395, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_STORE_SUBSCR_LIST_INT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _CALL_BUILTIN_Oplus_SWAP
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_SWAP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 33 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 4c 8b 04 24                   movq    (%rsp), %r8
// 136: 41 ff 40 2c                   incl    0x2c(%r8)
// 13a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13f: 49 8b 07                      movq    (%r15), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 7f 2a                         jg      0x171 <_JIT_ENTRY+0x171>
// 147: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 160: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 165: 4c 89 fa                      movq    %r15, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 4c 8b 04 24                   movq    (%rsp), %r8
// 16e: 49 8b 07                      movq    (%r15), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 2f                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 4c 8b 04 24                   movq    (%rsp), %r8
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 4c 8b 04 24                   movq    (%rsp), %r8
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 29                         js      0x200 <_JIT_ENTRY+0x200>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 4c 8b 04 24                   movq    (%rsp), %r8
// 1e7: 49 ff 0c 24                   decq    (%r12)
// 1eb: 75 13                         jne     0x200 <_JIT_ENTRY+0x200>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_Dealloc
// 1f7: 4c 89 e7                      movq    %r12, %rdi
// 1fa: ff d0                         callq   *%rax
// 1fc: 4c 8b 04 24                   movq    (%rsp), %r8
// 200: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 204: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 209: 48 85 c9                      testq   %rcx, %rcx
// 20c: 74 2e                         je      0x23c <_JIT_ENTRY+0x23c>
// 20e: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 212: 48 89 08                      movq    %rcx, (%rax)
// 215: 49 8b 40 10                   movq    0x10(%r8), %rax
// 219: 48 8b 00                      movq    (%rax), %rax
// 21c: 84 c0                         testb   %al, %al
// 21e: 74 35                         je      0x255 <_JIT_ENTRY+0x255>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_HandlePending
// 22a: 4c 89 c7                      movq    %r8, %rdi
// 22d: ff d0                         callq   *%rax
// 22f: 4c 8b 04 24                   movq    (%rsp), %r8
// 233: 85 c0                         testl   %eax, %eax
// 235: 74 1e                         je      0x255 <_JIT_ENTRY+0x255>
// 237: 4d 89 e6                      movq    %r12, %r14
// 23a: eb 03                         jmp     0x23f <_JIT_ENTRY+0x23f>
// 23c: 49 89 c6                      movq    %rax, %r14
// 23f: 49 29 de                      subq    %rbx, %r14
// 242: 49 83 c6 b8                   addq    $-0x48, %r14
// 246: 49 c1 ee 03                   shrq    $0x3, %r14
// 24a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24e: 31 c0                         xorl    %eax, %eax
// 250: e9 82 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _JIT_OPARG
// 25f: 0f b7 c8                      movzwl  %ax, %ecx
// 262: f7 d0                         notl    %eax
// 264: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 269: 48 98                         cltq
// 26b: 49 8b 54 c6 f8                movq    -0x8(%r14,%rax,8), %rdx
// 270: 48 89 c6                      movq    %rax, %rsi
// 273: 48 29 ce                      subq    %rcx, %rsi
// 276: 49 8b 0c f6                   movq    (%r14,%rsi,8), %rcx
// 27a: 49 89 14 f6                   movq    %rdx, (%r14,%rsi,8)
// 27e: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_CONTINUE
// 28d: 48 89 df                      movq    %rbx, %rdi
// 290: 4c 89 e6                      movq    %r12, %rsi
// 293: 4c 89 c2                      movq    %r8, %rdx
// 296: 48 83 c4 18                   addq    $0x18, %rsp
// 29a: 5b                            popq    %rbx
// 29b: 41 5c                         popq    %r12
// 29d: 41 5d                         popq    %r13
// 29f: 41 5e                         popq    %r14
// 2a1: 41 5f                         popq    %r15
// 2a3: 5d                            popq    %rbp
// 2a4: ff e0                         jmpq    *%rax
// 2a6: 
static const unsigned char _CALL_BUILTIN_Oplus_SWAP_code_body[679] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x33, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x82, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x54, 0xc6, 0xf8, 0x48, 0x89, 0xc6, 0x48, 0x29, 0xce, 0x49, 0x8b, 0x0c, 0xf6, 0x49, 0x89, 0x14, 0xf6, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_SWAP_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_SWAP_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_SWAP_data_holes[1];

// _CALL_BUILTIN_Oplus_TO_BOOL
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_TO_BOOL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4c                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 0c 24                   movq    %rcx, (%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7a                         jne     0x122 <_JIT_ENTRY+0x122>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 75                         jmp     0x124 <_JIT_ENTRY+0x124>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 04 24                   movq    %r8, (%rsp)
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_CheckRecursiveCall
// fe: 48 89 d7                      movq    %rdx, %rdi
// 101: ff d0                         callq   *%rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 0f 85 ff 01 00 00             jne     0x30a <_JIT_ENTRY+0x30a>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 04 24                   movq    (%rsp), %r8
// 114: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 118: 48 89 0c 24                   movq    %rcx, (%rsp)
// 11c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 120: 74 86                         je      0xa8 <_JIT_ENTRY+0xa8>
// 122: 31 ff                         xorl    %edi, %edi
// 124: 4c 8b 3c 24                   movq    (%rsp), %r15
// 128: 4c 89 fe                      movq    %r15, %rsi
// 12b: 41 ff d0                      callq   *%r8
// 12e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 133: ff 47 2c                      incl    0x2c(%rdi)
// 136: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13b: 49 8b 07                      movq    (%r15), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7f 2a                         jg      0x16d <_JIT_ENTRY+0x16d>
// 143: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 160: 4c 89 fa                      movq    %r15, %rdx
// 163: ff d0                         callq   *%rax
// 165: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16a: 49 8b 07                      movq    (%r15), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 2f                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 8b 04 24                   movq    (%rsp), %rax
// 186: 48 ff 08                      decq    (%rax)
// 189: 75 15                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 48 8b 3c 24                   movq    (%rsp), %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 27                         jg      0x1d0 <_JIT_ENTRY+0x1d0>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 2b                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 14                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2a                         je      0x237 <_JIT_ENTRY+0x237>
// 20d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 20                         je      0x23f <_JIT_ENTRY+0x23f>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 74 10                         je      0x23f <_JIT_ENTRY+0x23f>
// 22f: 4d 89 e6                      movq    %r12, %r14
// 232: e9 d3 00 00 00                jmp     0x30a <_JIT_ENTRY+0x30a>
// 237: 49 89 c6                      movq    %rax, %r14
// 23a: e9 cb 00 00 00                jmp     0x30a <_JIT_ENTRY+0x30a>
// 23f: 4c 89 24 24                   movq    %r12, (%rsp)
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_OPARG
// 24d: f7 d0                         notl    %eax
// 24f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 254: 4c 63 e0                      movslq  %eax, %r12
// 257: 4f 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %r13
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  PyObject_IsTrue
// 266: 4c 89 ef                      movq    %r13, %rdi
// 269: ff d0                         callq   *%rax
// 26b: 89 c5                         movl    %eax, %ebp
// 26d: 49 8b 45 00                   movq    (%r13), %rax
// 271: 48 85 c0                      testq   %rax, %rax
// 274: 7f 22                         jg      0x298 <_JIT_ENTRY+0x298>
// 276: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000278:  R_X86_64_64  .rodata.str1.1
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_NegativeRefcount
// 28a: be 86 00 00 00                movl    $0x86, %esi
// 28f: 4c 89 ea                      movq    %r13, %rdx
// 292: ff d0                         callq   *%rax
// 294: 49 8b 45 00                   movq    (%r13), %rax
// 298: 85 c0                         testl   %eax, %eax
// 29a: 78 21                         js      0x2bd <_JIT_ENTRY+0x2bd>
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a6: ff d0                         callq   *%rax
// 2a8: 49 ff 4d 00                   decq    (%r13)
// 2ac: 75 0f                         jne     0x2bd <_JIT_ENTRY+0x2bd>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_Dealloc
// 2b8: 4c 89 ef                      movq    %r13, %rdi
// 2bb: ff d0                         callq   *%rax
// 2bd: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 2c1: 49 83 c6 f8                   addq    $-0x8, %r14
// 2c5: 85 ed                         testl   %ebp, %ebp
// 2c7: 78 41                         js      0x30a <_JIT_ENTRY+0x30a>
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_FalseStruct
// 2d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002d5:  R_X86_64_64  _Py_TrueStruct
// 2dd: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 2e1: 49 89 0e                      movq    %rcx, (%r14)
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _JIT_CONTINUE
// 2ee: 48 89 df                      movq    %rbx, %rdi
// 2f1: 48 8b 34 24                   movq    (%rsp), %rsi
// 2f5: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2fa: 48 83 c4 18                   addq    $0x18, %rsp
// 2fe: 5b                            popq    %rbx
// 2ff: 41 5c                         popq    %r12
// 301: 41 5d                         popq    %r13
// 303: 41 5e                         popq    %r14
// 305: 41 5f                         popq    %r15
// 307: 5d                            popq    %rbp
// 308: ff e0                         jmpq    *%rax
// 30a: 49 29 de                      subq    %rbx, %r14
// 30d: 49 83 c6 b8                   addq    $-0x48, %r14
// 311: 49 c1 ee 03                   shrq    $0x3, %r14
// 315: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 319: 31 c0                         xorl    %eax, %eax
// 31b: e9 b7 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 320: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_code_body[801] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4c, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xff, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x10, 0x4d, 0x89, 0xe6, 0xe9, 0xd3, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xe9, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x24, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4f, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xed, 0x78, 0x41, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x0e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb7, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_data_holes[1];

// _CALL_BUILTIN_Oplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_TO_BOOL_ALWAYS_TRUE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 a2 02 00 00             jne     0x300 <_JIT_ENTRY+0x300>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 7f 02 00 00             jne     0x300 <_JIT_ENTRY+0x300>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 70 02 00 00             jne     0x300 <_JIT_ENTRY+0x300>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 09 02 00 00             jne     0x2ea <_JIT_ENTRY+0x2ea>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 0f 84 01 01 00 00             je      0x2e7 <_JIT_ENTRY+0x2e7>
// 1e6: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1ea: 48 89 08                      movq    %rcx, (%rax)
// 1ed: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1f1: 48 8b 00                      movq    (%rax), %rax
// 1f4: 84 c0                         testb   %al, %al
// 1f6: 74 1f                         je      0x217 <_JIT_ENTRY+0x217>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_HandlePending
// 202: 48 89 d7                      movq    %rdx, %rdi
// 205: ff d0                         callq   *%rax
// 207: 48 8b 14 24                   movq    (%rsp), %rdx
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 74 08                         je      0x217 <_JIT_ENTRY+0x217>
// 20f: 4d 89 e6                      movq    %r12, %r14
// 212: e9 d3 00 00 00                jmp     0x2ea <_JIT_ENTRY+0x2ea>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _JIT_OPARG
// 221: f7 d0                         notl    %eax
// 223: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 228: 48 98                         cltq
// 22a: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 22f: 49 8b 45 08                   movq    0x8(%r13), %rax
// 233: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000235:  R_X86_64_64  _JIT_OPERAND
// 23d: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 243: 0f 85 b4 00 00 00             jne     0x2fd <_JIT_ENTRY+0x2fd>
// 249: 49 8b 45 00                   movq    (%r13), %rax
// 24d: 48 85 c0                      testq   %rax, %rax
// 250: 7f 26                         jg      0x278 <_JIT_ENTRY+0x278>
// 252: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000254:  R_X86_64_64  .rodata.str1.1
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_NegativeRefcount
// 266: be db 00 00 00                movl    $0xdb, %esi
// 26b: 4c 89 ea                      movq    %r13, %rdx
// 26e: ff d0                         callq   *%rax
// 270: 48 8b 14 24                   movq    (%rsp), %rdx
// 274: 49 8b 45 00                   movq    (%r13), %rax
// 278: 85 c0                         testl   %eax, %eax
// 27a: 78 29                         js      0x2a5 <_JIT_ENTRY+0x2a5>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 286: ff d0                         callq   *%rax
// 288: 48 8b 14 24                   movq    (%rsp), %rdx
// 28c: 49 ff 4d 00                   decq    (%r13)
// 290: 75 13                         jne     0x2a5 <_JIT_ENTRY+0x2a5>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_Dealloc
// 29c: 4c 89 ef                      movq    %r13, %rdi
// 29f: ff d0                         callq   *%rax
// 2a1: 48 8b 14 24                   movq    (%rsp), %rdx
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _JIT_OPARG
// 2af: f7 d0                         notl    %eax
// 2b1: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2b6: 48 98                         cltq
// 2b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ba:  R_X86_64_64  _Py_TrueStruct
// 2c2: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _JIT_CONTINUE
// 2d1: 48 89 df                      movq    %rbx, %rdi
// 2d4: 4c 89 e6                      movq    %r12, %rsi
// 2d7: 48 83 c4 18                   addq    $0x18, %rsp
// 2db: 5b                            popq    %rbx
// 2dc: 41 5c                         popq    %r12
// 2de: 41 5d                         popq    %r13
// 2e0: 41 5e                         popq    %r14
// 2e2: 41 5f                         popq    %r15
// 2e4: 5d                            popq    %rbp
// 2e5: ff e0                         jmpq    *%rax
// 2e7: 49 89 c6                      movq    %rax, %r14
// 2ea: 49 29 de                      subq    %rbx, %r14
// 2ed: 49 83 c6 b8                   addq    $-0x48, %r14
// 2f1: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2f9: 31 c0                         xorl    %eax, %eax
// 2fb: eb 2b                         jmp     0x328 <_JIT_ENTRY+0x328>
// 2fd: 4d 89 e6                      movq    %r12, %r14
// 300: 49 29 de                      subq    %rbx, %r14
// 303: 49 83 c6 b8                   addq    $-0x48, %r14
// 307: 49 c1 ee 03                   shrq    $0x3, %r14
// 30b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 30f: 48 8b 03                      movq    (%rbx), %rax
// 312: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000314:  R_X86_64_64  _JIT_TARGET
// 31c: 89 c9                         movl    %ecx, %ecx
// 31e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 322: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 328: 48 83 c4 18                   addq    $0x18, %rsp
// 32c: 5b                            popq    %rbx
// 32d: 41 5c                         popq    %r12
// 32f: 41 5d                         popq    %r13
// 331: 41 5e                         popq    %r14
// 333: 41 5f                         popq    %r15
// 335: 5d                            popq    %rbp
// 336: c3                            retq
// 337: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_ALWAYS_TRUE_code_body[824] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xa2, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x7f, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0x70, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x09, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x01, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x0f, 0x85, 0xb4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_ALWAYS_TRUE_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_ALWAYS_TRUE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _CALL_BUILTIN_Oplus_TO_BOOL_BOOL
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_TO_BOOL_BOOL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 eb 01 00 00             jne     0x249 <_JIT_ENTRY+0x249>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 c8 01 00 00             jne     0x249 <_JIT_ENTRY+0x249>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 b9 01 00 00             jne     0x249 <_JIT_ENTRY+0x249>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 2a 01 00 00             jne     0x20b <_JIT_ENTRY+0x20b>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 26                         js      0x179 <_JIT_ENTRY+0x179>
// 153: 41 ff d7                      callq   *%r15
// 156: 48 8b 14 24                   movq    (%rsp), %rdx
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 48 8b 14 24                   movq    (%rsp), %rdx
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 20                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ac: 41 ff d7                      callq   *%r15
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 13                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 2e                         je      0x208 <_JIT_ENTRY+0x208>
// 1da: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1de: 48 89 08                      movq    %rcx, (%rax)
// 1e1: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1e5: 48 8b 00                      movq    (%rax), %rax
// 1e8: 84 c0                         testb   %al, %al
// 1ea: 74 32                         je      0x21e <_JIT_ENTRY+0x21e>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_HandlePending
// 1f6: 48 89 d7                      movq    %rdx, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 74 1b                         je      0x21e <_JIT_ENTRY+0x21e>
// 203: 4d 89 e6                      movq    %r12, %r14
// 206: eb 03                         jmp     0x20b <_JIT_ENTRY+0x20b>
// 208: 49 89 c6                      movq    %rax, %r14
// 20b: 49 29 de                      subq    %rbx, %r14
// 20e: 49 83 c6 b8                   addq    $-0x48, %r14
// 212: 49 c1 ee 03                   shrq    $0x3, %r14
// 216: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21a: 31 c0                         xorl    %eax, %eax
// 21c: eb 53                         jmp     0x271 <_JIT_ENTRY+0x271>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_OPARG
// 228: f7 d0                         notl    %eax
// 22a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22f: 48 98                         cltq
// 231: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 236: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000238:  R_X86_64_64  PyBool_Type
// 240: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 244: 74 3a                         je      0x280 <_JIT_ENTRY+0x280>
// 246: 4d 89 e6                      movq    %r12, %r14
// 249: 49 29 de                      subq    %rbx, %r14
// 24c: 49 83 c6 b8                   addq    $-0x48, %r14
// 250: 49 c1 ee 03                   shrq    $0x3, %r14
// 254: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 258: 48 8b 03                      movq    (%rbx), %rax
// 25b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025d:  R_X86_64_64  _JIT_TARGET
// 265: 89 c9                         movl    %ecx, %ecx
// 267: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 26b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 271: 48 83 c4 18                   addq    $0x18, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: c3                            retq
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_CONTINUE
// 28a: 48 89 df                      movq    %rbx, %rdi
// 28d: 4c 89 e6                      movq    %r12, %rsi
// 290: 48 83 c4 18                   addq    $0x18, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: ff e0                         jmpq    *%rax
// 2a0: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_BOOL_code_body[673] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xeb, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xc8, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xb9, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_BOOL_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_BOOL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_BOOL_data_holes[1];

// _CALL_BUILTIN_Oplus_TO_BOOL_INT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_TO_BOOL_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 e1 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 be 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 af 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 98 01 00 00             jne     0x279 <_JIT_ENTRY+0x279>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 0f 84 90 00 00 00             je      0x276 <_JIT_ENTRY+0x276>
// 1e6: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1ea: 48 89 08                      movq    %rcx, (%rax)
// 1ed: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1f1: 48 8b 00                      movq    (%rax), %rax
// 1f4: 84 c0                         testb   %al, %al
// 1f6: 74 1c                         je      0x214 <_JIT_ENTRY+0x214>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_HandlePending
// 202: 48 89 d7                      movq    %rdx, %rdi
// 205: ff d0                         callq   *%rax
// 207: 48 8b 14 24                   movq    (%rsp), %rdx
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 74 05                         je      0x214 <_JIT_ENTRY+0x214>
// 20f: 4d 89 e6                      movq    %r12, %r14
// 212: eb 65                         jmp     0x279 <_JIT_ENTRY+0x279>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_OPARG
// 21e: f7 d0                         notl    %eax
// 220: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 225: 48 98                         cltq
// 227: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  PyLong_Type
// 236: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23a: 74 50                         je      0x28c <_JIT_ENTRY+0x28c>
// 23c: 4d 89 e6                      movq    %r12, %r14
// 23f: 49 29 de                      subq    %rbx, %r14
// 242: 49 83 c6 b8                   addq    $-0x48, %r14
// 246: 49 c1 ee 03                   shrq    $0x3, %r14
// 24a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24e: 48 8b 03                      movq    (%rbx), %rax
// 251: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000253:  R_X86_64_64  _JIT_TARGET
// 25b: 89 c9                         movl    %ecx, %ecx
// 25d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 261: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 267: 48 83 c4 18                   addq    $0x18, %rsp
// 26b: 5b                            popq    %rbx
// 26c: 41 5c                         popq    %r12
// 26e: 41 5d                         popq    %r13
// 270: 41 5e                         popq    %r14
// 272: 41 5f                         popq    %r15
// 274: 5d                            popq    %rbp
// 275: c3                            retq
// 276: 49 89 c6                      movq    %rax, %r14
// 279: 49 29 de                      subq    %rbx, %r14
// 27c: 49 83 c6 b8                   addq    $-0x48, %r14
// 280: 49 c1 ee 03                   shrq    $0x3, %r14
// 284: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 288: 31 c0                         xorl    %eax, %eax
// 28a: eb db                         jmp     0x267 <_JIT_ENTRY+0x267>
// 28c: 41 8b 45 10                   movl    0x10(%r13), %eax
// 290: 83 e0 03                      andl    $0x3, %eax
// 293: 83 f8 01                      cmpl    $0x1, %eax
// 296: 75 0c                         jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 298: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000029a:  R_X86_64_64  _Py_FalseStruct
// 2a2: eb 62                         jmp     0x306 <_JIT_ENTRY+0x306>
// 2a4: 49 8b 45 00                   movq    (%r13), %rax
// 2a8: 48 85 c0                      testq   %rax, %rax
// 2ab: 7f 26                         jg      0x2d3 <_JIT_ENTRY+0x2d3>
// 2ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002af:  R_X86_64_64  .rodata.str1.1
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_NegativeRefcount
// 2c1: be a0 00 00 00                movl    $0xa0, %esi
// 2c6: 4c 89 ea                      movq    %r13, %rdx
// 2c9: ff d0                         callq   *%rax
// 2cb: 48 8b 14 24                   movq    (%rsp), %rdx
// 2cf: 49 8b 45 00                   movq    (%r13), %rax
// 2d3: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000002d5:  R_X86_64_64  _Py_TrueStruct
// 2dd: 85 c0                         testl   %eax, %eax
// 2df: 78 25                         js      0x306 <_JIT_ENTRY+0x306>
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2eb: ff d0                         callq   *%rax
// 2ed: 49 ff 4d 00                   decq    (%r13)
// 2f1: 75 0f                         jne     0x302 <_JIT_ENTRY+0x302>
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _Py_Dealloc
// 2fd: 4c 89 ef                      movq    %r13, %rdi
// 300: ff d0                         callq   *%rax
// 302: 48 8b 14 24                   movq    (%rsp), %rdx
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _JIT_OPARG
// 310: f7 d0                         notl    %eax
// 312: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 317: 48 98                         cltq
// 319: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _JIT_CONTINUE
// 328: 48 89 df                      movq    %rbx, %rdi
// 32b: 4c 89 e6                      movq    %r12, %rsi
// 32e: 48 83 c4 18                   addq    $0x18, %rsp
// 332: 5b                            popq    %rbx
// 333: 41 5c                         popq    %r12
// 335: 41 5d                         popq    %r13
// 337: 41 5e                         popq    %r14
// 339: 41 5f                         popq    %r15
// 33b: 5d                            popq    %rbp
// 33c: ff e0                         jmpq    *%rax
// 33e: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_INT_code_body[831] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xe1, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xbe, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xaf, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x98, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x05, 0x4d, 0x89, 0xe6, 0xeb, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x50, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xdb, 0x41, 0x8b, 0x45, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x75, 0x0c, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x62, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_INT_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_INT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_INT_data_holes[1];

// _CALL_BUILTIN_Oplus_TO_BOOL_LIST
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_TO_BOOL_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 e1 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 be 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 af 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 98 01 00 00             jne     0x279 <_JIT_ENTRY+0x279>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 0f 84 90 00 00 00             je      0x276 <_JIT_ENTRY+0x276>
// 1e6: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1ea: 48 89 08                      movq    %rcx, (%rax)
// 1ed: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1f1: 48 8b 00                      movq    (%rax), %rax
// 1f4: 84 c0                         testb   %al, %al
// 1f6: 74 1c                         je      0x214 <_JIT_ENTRY+0x214>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_HandlePending
// 202: 48 89 d7                      movq    %rdx, %rdi
// 205: ff d0                         callq   *%rax
// 207: 48 8b 14 24                   movq    (%rsp), %rdx
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 74 05                         je      0x214 <_JIT_ENTRY+0x214>
// 20f: 4d 89 e6                      movq    %r12, %r14
// 212: eb 65                         jmp     0x279 <_JIT_ENTRY+0x279>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_OPARG
// 21e: f7 d0                         notl    %eax
// 220: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 225: 48 98                         cltq
// 227: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  PyList_Type
// 236: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23a: 74 50                         je      0x28c <_JIT_ENTRY+0x28c>
// 23c: 4d 89 e6                      movq    %r12, %r14
// 23f: 49 29 de                      subq    %rbx, %r14
// 242: 49 83 c6 b8                   addq    $-0x48, %r14
// 246: 49 c1 ee 03                   shrq    $0x3, %r14
// 24a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24e: 48 8b 03                      movq    (%rbx), %rax
// 251: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000253:  R_X86_64_64  _JIT_TARGET
// 25b: 89 c9                         movl    %ecx, %ecx
// 25d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 261: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 267: 48 83 c4 18                   addq    $0x18, %rsp
// 26b: 5b                            popq    %rbx
// 26c: 41 5c                         popq    %r12
// 26e: 41 5d                         popq    %r13
// 270: 41 5e                         popq    %r14
// 272: 41 5f                         popq    %r15
// 274: 5d                            popq    %rbp
// 275: c3                            retq
// 276: 49 89 c6                      movq    %rax, %r14
// 279: 49 29 de                      subq    %rbx, %r14
// 27c: 49 83 c6 b8                   addq    $-0x48, %r14
// 280: 49 c1 ee 03                   shrq    $0x3, %r14
// 284: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 288: 31 c0                         xorl    %eax, %eax
// 28a: eb db                         jmp     0x267 <_JIT_ENTRY+0x267>
// 28c: 49 8b 45 00                   movq    (%r13), %rax
// 290: 49 8b 6d 10                   movq    0x10(%r13), %rbp
// 294: 48 85 c0                      testq   %rax, %rax
// 297: 7f 26                         jg      0x2bf <_JIT_ENTRY+0x2bf>
// 299: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029b:  R_X86_64_64  .rodata.str1.1
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_NegativeRefcount
// 2ad: be ae 00 00 00                movl    $0xae, %esi
// 2b2: 4c 89 ea                      movq    %r13, %rdx
// 2b5: ff d0                         callq   *%rax
// 2b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 2bb: 49 8b 45 00                   movq    (%r13), %rax
// 2bf: 85 c0                         testl   %eax, %eax
// 2c1: 78 29                         js      0x2ec <_JIT_ENTRY+0x2ec>
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cd: ff d0                         callq   *%rax
// 2cf: 48 8b 14 24                   movq    (%rsp), %rdx
// 2d3: 49 ff 4d 00                   decq    (%r13)
// 2d7: 75 13                         jne     0x2ec <_JIT_ENTRY+0x2ec>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_Dealloc
// 2e3: 4c 89 ef                      movq    %r13, %rdi
// 2e6: ff d0                         callq   *%rax
// 2e8: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ec: 48 85 ed                      testq   %rbp, %rbp
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_FalseStruct
// 2f9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fb:  R_X86_64_64  _Py_TrueStruct
// 303: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _JIT_OPARG
// 311: f7 d0                         notl    %eax
// 313: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 318: 48 98                         cltq
// 31a: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _JIT_CONTINUE
// 329: 48 89 df                      movq    %rbx, %rdi
// 32c: 4c 89 e6                      movq    %r12, %rsi
// 32f: 48 83 c4 18                   addq    $0x18, %rsp
// 333: 5b                            popq    %rbx
// 334: 41 5c                         popq    %r12
// 336: 41 5d                         popq    %r13
// 338: 41 5e                         popq    %r14
// 33a: 41 5f                         popq    %r15
// 33c: 5d                            popq    %rbp
// 33d: ff e0                         jmpq    *%rax
// 33f: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_LIST_code_body[832] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xe1, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xbe, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xaf, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x98, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x05, 0x4d, 0x89, 0xe6, 0xeb, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x50, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xdb, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8b, 0x6d, 0x10, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_LIST_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_LIST_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_LIST_data_holes[1];

// _CALL_BUILTIN_Oplus_TO_BOOL_NONE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_TO_BOOL_NONE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 e7 01 00 00             jne     0x245 <_JIT_ENTRY+0x245>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 c4 01 00 00             jne     0x245 <_JIT_ENTRY+0x245>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 b5 01 00 00             jne     0x245 <_JIT_ENTRY+0x245>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 2a 01 00 00             jne     0x20b <_JIT_ENTRY+0x20b>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 26                         js      0x179 <_JIT_ENTRY+0x179>
// 153: 41 ff d7                      callq   *%r15
// 156: 48 8b 14 24                   movq    (%rsp), %rdx
// 15a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15f: 48 ff 08                      decq    (%rax)
// 162: 75 15                         jne     0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 173: ff d0                         callq   *%rax
// 175: 48 8b 14 24                   movq    (%rsp), %rdx
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 26                         jg      0x1a8 <_JIT_ENTRY+0x1a8>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 20                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ac: 41 ff d7                      callq   *%r15
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 75 13                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 2e                         je      0x208 <_JIT_ENTRY+0x208>
// 1da: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1de: 48 89 08                      movq    %rcx, (%rax)
// 1e1: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1e5: 48 8b 00                      movq    (%rax), %rax
// 1e8: 84 c0                         testb   %al, %al
// 1ea: 74 32                         je      0x21e <_JIT_ENTRY+0x21e>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_HandlePending
// 1f6: 48 89 d7                      movq    %rdx, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 74 1b                         je      0x21e <_JIT_ENTRY+0x21e>
// 203: 4d 89 e6                      movq    %r12, %r14
// 206: eb 03                         jmp     0x20b <_JIT_ENTRY+0x20b>
// 208: 49 89 c6                      movq    %rax, %r14
// 20b: 49 29 de                      subq    %rbx, %r14
// 20e: 49 83 c6 b8                   addq    $-0x48, %r14
// 212: 49 c1 ee 03                   shrq    $0x3, %r14
// 216: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21a: 31 c0                         xorl    %eax, %eax
// 21c: eb 4f                         jmp     0x26d <_JIT_ENTRY+0x26d>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_OPARG
// 228: f7 d0                         notl    %eax
// 22a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22f: 48 98                         cltq
// 231: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000233:  R_X86_64_64  _Py_NoneStruct
// 23b: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 240: 74 3a                         je      0x27c <_JIT_ENTRY+0x27c>
// 242: 4d 89 e6                      movq    %r12, %r14
// 245: 49 29 de                      subq    %rbx, %r14
// 248: 49 83 c6 b8                   addq    $-0x48, %r14
// 24c: 49 c1 ee 03                   shrq    $0x3, %r14
// 250: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 254: 48 8b 03                      movq    (%rbx), %rax
// 257: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000259:  R_X86_64_64  _JIT_TARGET
// 261: 89 c9                         movl    %ecx, %ecx
// 263: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 267: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 26d: 48 83 c4 18                   addq    $0x18, %rsp
// 271: 5b                            popq    %rbx
// 272: 41 5c                         popq    %r12
// 274: 41 5d                         popq    %r13
// 276: 41 5e                         popq    %r14
// 278: 41 5f                         popq    %r15
// 27a: 5d                            popq    %rbp
// 27b: c3                            retq
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _JIT_OPARG
// 286: f7 d0                         notl    %eax
// 288: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 28d: 48 98                         cltq
// 28f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000291:  R_X86_64_64  _Py_FalseStruct
// 299: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _JIT_CONTINUE
// 2a8: 48 89 df                      movq    %rbx, %rdi
// 2ab: 4c 89 e6                      movq    %r12, %rsi
// 2ae: 48 83 c4 18                   addq    $0x18, %rsp
// 2b2: 5b                            popq    %rbx
// 2b3: 41 5c                         popq    %r12
// 2b5: 41 5d                         popq    %r13
// 2b7: 41 5e                         popq    %r14
// 2b9: 41 5f                         popq    %r15
// 2bb: 5d                            popq    %rbp
// 2bc: ff e0                         jmpq    *%rax
// 2be: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_NONE_code_body[703] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xe7, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xc4, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x2a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x20, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x1b, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_NONE_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_NONE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_NONE_data_holes[1];

// _CALL_BUILTIN_Oplus_TO_BOOL_STR
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_TO_BOOL_STR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 e1 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 be 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 af 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 98 01 00 00             jne     0x279 <_JIT_ENTRY+0x279>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 0f 84 90 00 00 00             je      0x276 <_JIT_ENTRY+0x276>
// 1e6: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1ea: 48 89 08                      movq    %rcx, (%rax)
// 1ed: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1f1: 48 8b 00                      movq    (%rax), %rax
// 1f4: 84 c0                         testb   %al, %al
// 1f6: 74 1c                         je      0x214 <_JIT_ENTRY+0x214>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_HandlePending
// 202: 48 89 d7                      movq    %rdx, %rdi
// 205: ff d0                         callq   *%rax
// 207: 48 8b 14 24                   movq    (%rsp), %rdx
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 74 05                         je      0x214 <_JIT_ENTRY+0x214>
// 20f: 4d 89 e6                      movq    %r12, %r14
// 212: eb 65                         jmp     0x279 <_JIT_ENTRY+0x279>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_OPARG
// 21e: f7 d0                         notl    %eax
// 220: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 225: 48 98                         cltq
// 227: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  PyUnicode_Type
// 236: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23a: 74 50                         je      0x28c <_JIT_ENTRY+0x28c>
// 23c: 4d 89 e6                      movq    %r12, %r14
// 23f: 49 29 de                      subq    %rbx, %r14
// 242: 49 83 c6 b8                   addq    $-0x48, %r14
// 246: 49 c1 ee 03                   shrq    $0x3, %r14
// 24a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24e: 48 8b 03                      movq    (%rbx), %rax
// 251: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000253:  R_X86_64_64  _JIT_TARGET
// 25b: 89 c9                         movl    %ecx, %ecx
// 25d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 261: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 267: 48 83 c4 18                   addq    $0x18, %rsp
// 26b: 5b                            popq    %rbx
// 26c: 41 5c                         popq    %r12
// 26e: 41 5d                         popq    %r13
// 270: 41 5e                         popq    %r14
// 272: 41 5f                         popq    %r15
// 274: 5d                            popq    %rbp
// 275: c3                            retq
// 276: 49 89 c6                      movq    %rax, %r14
// 279: 49 29 de                      subq    %rbx, %r14
// 27c: 49 83 c6 b8                   addq    $-0x48, %r14
// 280: 49 c1 ee 03                   shrq    $0x3, %r14
// 284: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 288: 31 c0                         xorl    %eax, %eax
// 28a: eb db                         jmp     0x267 <_JIT_ENTRY+0x267>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _PyRuntime
// 296: 48 05 00 a1 00 00             addq    $0xa100, %rax           # imm = 0xA100
// 29c: 49 39 c5                      cmpq    %rax, %r13
// 29f: 74 64                         je      0x305 <_JIT_ENTRY+0x305>
// 2a1: 49 8b 45 00                   movq    (%r13), %rax
// 2a5: 48 85 c0                      testq   %rax, %rax
// 2a8: 7f 26                         jg      0x2d0 <_JIT_ENTRY+0x2d0>
// 2aa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ac:  R_X86_64_64  .rodata.str1.1
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_NegativeRefcount
// 2be: be cb 00 00 00                movl    $0xcb, %esi
// 2c3: 4c 89 ea                      movq    %r13, %rdx
// 2c6: ff d0                         callq   *%rax
// 2c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 2cc: 49 8b 45 00                   movq    (%r13), %rax
// 2d0: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000002d2:  R_X86_64_64  _Py_TrueStruct
// 2da: 85 c0                         testl   %eax, %eax
// 2dc: 78 31                         js      0x30f <_JIT_ENTRY+0x30f>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e8: ff d0                         callq   *%rax
// 2ea: 49 ff 4d 00                   decq    (%r13)
// 2ee: 75 0f                         jne     0x2ff <_JIT_ENTRY+0x2ff>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_Dealloc
// 2fa: 4c 89 ef                      movq    %r13, %rdi
// 2fd: ff d0                         callq   *%rax
// 2ff: 48 8b 14 24                   movq    (%rsp), %rdx
// 303: eb 0a                         jmp     0x30f <_JIT_ENTRY+0x30f>
// 305: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000307:  R_X86_64_64  _Py_FalseStruct
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  _JIT_OPARG
// 319: f7 d0                         notl    %eax
// 31b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 320: 48 98                         cltq
// 322: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 327: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000329:  R_X86_64_64  _JIT_CONTINUE
// 331: 48 89 df                      movq    %rbx, %rdi
// 334: 4c 89 e6                      movq    %r12, %rsi
// 337: 48 83 c4 18                   addq    $0x18, %rsp
// 33b: 5b                            popq    %rbx
// 33c: 41 5c                         popq    %r12
// 33e: 41 5d                         popq    %r13
// 340: 41 5e                         popq    %r14
// 342: 41 5f                         popq    %r15
// 344: 5d                            popq    %rbp
// 345: ff e0                         jmpq    *%rax
// 347: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_STR_code_body[840] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xe1, 0x01, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xbe, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0xaf, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x98, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x05, 0x4d, 0x89, 0xe6, 0xeb, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x50, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xdb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x05, 0x00, 0xa1, 0x00, 0x00, 0x49, 0x39, 0xc5, 0x74, 0x64, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xeb, 0x0a, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_STR_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_TO_BOOL_STR_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_TO_BOOL_STR_data_holes[1];

// _CALL_BUILTIN_Oplus_UNARY_INVERT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_UNARY_INVERT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4c                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 0c 24                   movq    %rcx, (%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7a                         jne     0x122 <_JIT_ENTRY+0x122>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 75                         jmp     0x124 <_JIT_ENTRY+0x124>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 04 24                   movq    %r8, (%rsp)
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_CheckRecursiveCall
// fe: 48 89 d7                      movq    %rdx, %rdi
// 101: ff d0                         callq   *%rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 0f 85 e9 01 00 00             jne     0x2f4 <_JIT_ENTRY+0x2f4>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 04 24                   movq    (%rsp), %r8
// 114: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 118: 48 89 0c 24                   movq    %rcx, (%rsp)
// 11c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 120: 74 86                         je      0xa8 <_JIT_ENTRY+0xa8>
// 122: 31 ff                         xorl    %edi, %edi
// 124: 4c 8b 3c 24                   movq    (%rsp), %r15
// 128: 4c 89 fe                      movq    %r15, %rsi
// 12b: 41 ff d0                      callq   *%r8
// 12e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 133: ff 47 2c                      incl    0x2c(%rdi)
// 136: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13b: 49 8b 07                      movq    (%r15), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7f 2a                         jg      0x16d <_JIT_ENTRY+0x16d>
// 143: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 160: 4c 89 fa                      movq    %r15, %rdx
// 163: ff d0                         callq   *%rax
// 165: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16a: 49 8b 07                      movq    (%r15), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 2f                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 8b 04 24                   movq    (%rsp), %rax
// 186: 48 ff 08                      decq    (%rax)
// 189: 75 15                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 48 8b 3c 24                   movq    (%rsp), %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 27                         jg      0x1d0 <_JIT_ENTRY+0x1d0>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 2b                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 14                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2a                         je      0x237 <_JIT_ENTRY+0x237>
// 20d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 20                         je      0x23f <_JIT_ENTRY+0x23f>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 74 10                         je      0x23f <_JIT_ENTRY+0x23f>
// 22f: 4d 89 e6                      movq    %r12, %r14
// 232: e9 bd 00 00 00                jmp     0x2f4 <_JIT_ENTRY+0x2f4>
// 237: 49 89 c6                      movq    %rax, %r14
// 23a: e9 b5 00 00 00                jmp     0x2f4 <_JIT_ENTRY+0x2f4>
// 23f: 4c 89 24 24                   movq    %r12, (%rsp)
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_OPARG
// 24d: f7 d0                         notl    %eax
// 24f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 254: 4c 63 e0                      movslq  %eax, %r12
// 257: 4b 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %rbp
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  PyNumber_Invert
// 266: 48 89 ef                      movq    %rbp, %rdi
// 269: ff d0                         callq   *%rax
// 26b: 49 89 c5                      movq    %rax, %r13
// 26e: 48 8b 45 00                   movq    (%rbp), %rax
// 272: 48 85 c0                      testq   %rax, %rax
// 275: 7f 22                         jg      0x299 <_JIT_ENTRY+0x299>
// 277: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000279:  R_X86_64_64  .rodata.str1.1
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_NegativeRefcount
// 28b: be e6 00 00 00                movl    $0xe6, %esi
// 290: 48 89 ea                      movq    %rbp, %rdx
// 293: ff d0                         callq   *%rax
// 295: 48 8b 45 00                   movq    (%rbp), %rax
// 299: 85 c0                         testl   %eax, %eax
// 29b: 78 21                         js      0x2be <_JIT_ENTRY+0x2be>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a7: ff d0                         callq   *%rax
// 2a9: 48 ff 4d 00                   decq    (%rbp)
// 2ad: 75 0f                         jne     0x2be <_JIT_ENTRY+0x2be>
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_Dealloc
// 2b9: 48 89 ef                      movq    %rbp, %rdi
// 2bc: ff d0                         callq   *%rax
// 2be: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 2c2: 49 83 c6 f8                   addq    $-0x8, %r14
// 2c6: 4d 85 ed                      testq   %r13, %r13
// 2c9: 74 29                         je      0x2f4 <_JIT_ENTRY+0x2f4>
// 2cb: 4d 89 2e                      movq    %r13, (%r14)
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _JIT_CONTINUE
// 2d8: 48 89 df                      movq    %rbx, %rdi
// 2db: 48 8b 34 24                   movq    (%rsp), %rsi
// 2df: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2e4: 48 83 c4 18                   addq    $0x18, %rsp
// 2e8: 5b                            popq    %rbx
// 2e9: 41 5c                         popq    %r12
// 2eb: 41 5d                         popq    %r13
// 2ed: 41 5e                         popq    %r14
// 2ef: 41 5f                         popq    %r15
// 2f1: 5d                            popq    %rbp
// 2f2: ff e0                         jmpq    *%rax
// 2f4: 49 29 de                      subq    %rbx, %r14
// 2f7: 49 83 c6 b8                   addq    $-0x48, %r14
// 2fb: 49 c1 ee 03                   shrq    $0x3, %r14
// 2ff: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 303: 31 c0                         xorl    %eax, %eax
// 305: e9 cd fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 30a: 
static const unsigned char _CALL_BUILTIN_Oplus_UNARY_INVERT_code_body[779] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4c, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xe9, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x10, 0x4d, 0x89, 0xe6, 0xe9, 0xbd, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xe9, 0xb5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x24, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x85, 0xed, 0x74, 0x29, 0x4d, 0x89, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xcd, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_UNARY_INVERT_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_UNARY_INVERT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_UNARY_INVERT_data_holes[1];

// _CALL_BUILTIN_Oplus_UNARY_NEGATIVE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_UNARY_NEGATIVE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 98: 7e 4c                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 0c 24                   movq    %rcx, (%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7a                         jne     0x122 <_JIT_ENTRY+0x122>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 75                         jmp     0x124 <_JIT_ENTRY+0x124>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 04 24                   movq    %r8, (%rsp)
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x39
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_CheckRecursiveCall
// fe: 48 89 d7                      movq    %rdx, %rdi
// 101: ff d0                         callq   *%rax
// 103: 85 c0                         testl   %eax, %eax
// 105: 0f 85 e9 01 00 00             jne     0x2f4 <_JIT_ENTRY+0x2f4>
// 10b: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 110: 4c 8b 04 24                   movq    (%rsp), %r8
// 114: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 118: 48 89 0c 24                   movq    %rcx, (%rsp)
// 11c: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 120: 74 86                         je      0xa8 <_JIT_ENTRY+0xa8>
// 122: 31 ff                         xorl    %edi, %edi
// 124: 4c 8b 3c 24                   movq    (%rsp), %r15
// 128: 4c 89 fe                      movq    %r15, %rsi
// 12b: 41 ff d0                      callq   *%r8
// 12e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 133: ff 47 2c                      incl    0x2c(%rdi)
// 136: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13b: 49 8b 07                      movq    (%r15), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7f 2a                         jg      0x16d <_JIT_ENTRY+0x16d>
// 143: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 160: 4c 89 fa                      movq    %r15, %rdx
// 163: ff d0                         callq   *%rax
// 165: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16a: 49 8b 07                      movq    (%r15), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 2f                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 8b 04 24                   movq    (%rsp), %rax
// 186: 48 ff 08                      decq    (%rax)
// 189: 75 15                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 48 8b 3c 24                   movq    (%rsp), %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 27                         jg      0x1d0 <_JIT_ENTRY+0x1d0>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 2b                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 14                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2a                         je      0x237 <_JIT_ENTRY+0x237>
// 20d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 20                         je      0x23f <_JIT_ENTRY+0x23f>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 74 10                         je      0x23f <_JIT_ENTRY+0x23f>
// 22f: 4d 89 e6                      movq    %r12, %r14
// 232: e9 bd 00 00 00                jmp     0x2f4 <_JIT_ENTRY+0x2f4>
// 237: 49 89 c6                      movq    %rax, %r14
// 23a: e9 b5 00 00 00                jmp     0x2f4 <_JIT_ENTRY+0x2f4>
// 23f: 4c 89 24 24                   movq    %r12, (%rsp)
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_OPARG
// 24d: f7 d0                         notl    %eax
// 24f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 254: 4c 63 e0                      movslq  %eax, %r12
// 257: 4b 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %rbp
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  PyNumber_Negative
// 266: 48 89 ef                      movq    %rbp, %rdi
// 269: ff d0                         callq   *%rax
// 26b: 49 89 c5                      movq    %rax, %r13
// 26e: 48 8b 45 00                   movq    (%rbp), %rax
// 272: 48 85 c0                      testq   %rax, %rax
// 275: 7f 22                         jg      0x299 <_JIT_ENTRY+0x299>
// 277: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000279:  R_X86_64_64  .rodata.str1.1
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_NegativeRefcount
// 28b: be 71 00 00 00                movl    $0x71, %esi
// 290: 48 89 ea                      movq    %rbp, %rdx
// 293: ff d0                         callq   *%rax
// 295: 48 8b 45 00                   movq    (%rbp), %rax
// 299: 85 c0                         testl   %eax, %eax
// 29b: 78 21                         js      0x2be <_JIT_ENTRY+0x2be>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a7: ff d0                         callq   *%rax
// 2a9: 48 ff 4d 00                   decq    (%rbp)
// 2ad: 75 0f                         jne     0x2be <_JIT_ENTRY+0x2be>
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_Dealloc
// 2b9: 48 89 ef                      movq    %rbp, %rdi
// 2bc: ff d0                         callq   *%rax
// 2be: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 2c2: 49 83 c6 f8                   addq    $-0x8, %r14
// 2c6: 4d 85 ed                      testq   %r13, %r13
// 2c9: 74 29                         je      0x2f4 <_JIT_ENTRY+0x2f4>
// 2cb: 4d 89 2e                      movq    %r13, (%r14)
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _JIT_CONTINUE
// 2d8: 48 89 df                      movq    %rbx, %rdi
// 2db: 48 8b 34 24                   movq    (%rsp), %rsi
// 2df: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2e4: 48 83 c4 18                   addq    $0x18, %rsp
// 2e8: 5b                            popq    %rbx
// 2e9: 41 5c                         popq    %r12
// 2eb: 41 5d                         popq    %r13
// 2ed: 41 5e                         popq    %r14
// 2ef: 41 5f                         popq    %r15
// 2f1: 5d                            popq    %rbp
// 2f2: ff e0                         jmpq    *%rax
// 2f4: 49 29 de                      subq    %rbx, %r14
// 2f7: 49 83 c6 b8                   addq    $-0x48, %r14
// 2fb: 49 c1 ee 03                   shrq    $0x3, %r14
// 2ff: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 303: 31 c0                         xorl    %eax, %eax
// 305: e9 cd fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 30a: 
static const unsigned char _CALL_BUILTIN_Oplus_UNARY_NEGATIVE_code_body[779] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4c, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xe9, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x10, 0x4d, 0x89, 0xe6, 0xe9, 0xbd, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xe9, 0xb5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x24, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x85, 0xed, 0x74, 0x29, 0x4d, 0x89, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xcd, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_UNARY_NEGATIVE_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_UNARY_NEGATIVE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_UNARY_NEGATIVE_data_holes[1];

// _CALL_BUILTIN_Oplus_UNARY_NOT
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_UNARY_NOT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 33 01 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 4c 8b 04 24                   movq    (%rsp), %r8
// 136: 41 ff 40 2c                   incl    0x2c(%r8)
// 13a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13f: 49 8b 07                      movq    (%r15), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 7f 2a                         jg      0x171 <_JIT_ENTRY+0x171>
// 147: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 160: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 165: 4c 89 fa                      movq    %r15, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 4c 8b 04 24                   movq    (%rsp), %r8
// 16e: 49 8b 07                      movq    (%r15), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 2f                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 4c 8b 04 24                   movq    (%rsp), %r8
// 185: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18a: 48 ff 08                      decq    (%rax)
// 18d: 75 15                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 26                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c6: 4c 89 e2                      movq    %r12, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 4c 8b 04 24                   movq    (%rsp), %r8
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 29                         js      0x200 <_JIT_ENTRY+0x200>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 4c 8b 04 24                   movq    (%rsp), %r8
// 1e7: 49 ff 0c 24                   decq    (%r12)
// 1eb: 75 13                         jne     0x200 <_JIT_ENTRY+0x200>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_Dealloc
// 1f7: 4c 89 e7                      movq    %r12, %rdi
// 1fa: ff d0                         callq   *%rax
// 1fc: 4c 8b 04 24                   movq    (%rsp), %r8
// 200: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 204: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 209: 48 85 c9                      testq   %rcx, %rcx
// 20c: 74 2e                         je      0x23c <_JIT_ENTRY+0x23c>
// 20e: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 212: 48 89 08                      movq    %rcx, (%rax)
// 215: 49 8b 40 10                   movq    0x10(%r8), %rax
// 219: 48 8b 00                      movq    (%rax), %rax
// 21c: 84 c0                         testb   %al, %al
// 21e: 74 35                         je      0x255 <_JIT_ENTRY+0x255>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_HandlePending
// 22a: 4c 89 c7                      movq    %r8, %rdi
// 22d: ff d0                         callq   *%rax
// 22f: 4c 8b 04 24                   movq    (%rsp), %r8
// 233: 85 c0                         testl   %eax, %eax
// 235: 74 1e                         je      0x255 <_JIT_ENTRY+0x255>
// 237: 4d 89 e6                      movq    %r12, %r14
// 23a: eb 03                         jmp     0x23f <_JIT_ENTRY+0x23f>
// 23c: 49 89 c6                      movq    %rax, %r14
// 23f: 49 29 de                      subq    %rbx, %r14
// 242: 49 83 c6 b8                   addq    $-0x48, %r14
// 246: 49 c1 ee 03                   shrq    $0x3, %r14
// 24a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24e: 31 c0                         xorl    %eax, %eax
// 250: e9 82 fe ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _JIT_OPARG
// 25f: f7 d0                         notl    %eax
// 261: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 266: 48 98                         cltq
// 268: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026a:  R_X86_64_64  _Py_FalseStruct
// 272: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 277: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000279:  R_X86_64_64  _Py_TrueStruct
// 281: 48 0f 45 d1                   cmovneq %rcx, %rdx
// 285: 49 89 54 c6 f8                movq    %rdx, -0x8(%r14,%rax,8)
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _JIT_CONTINUE
// 294: 48 89 df                      movq    %rbx, %rdi
// 297: 4c 89 e6                      movq    %r12, %rsi
// 29a: 4c 89 c2                      movq    %r8, %rdx
// 29d: 48 83 c4 18                   addq    $0x18, %rsp
// 2a1: 5b                            popq    %rbx
// 2a2: 41 5c                         popq    %r12
// 2a4: 41 5d                         popq    %r13
// 2a6: 41 5e                         popq    %r14
// 2a8: 41 5f                         popq    %r15
// 2aa: 5d                            popq    %rbp
// 2ab: ff e0                         jmpq    *%rax
// 2ad: 
static const unsigned char _CALL_BUILTIN_Oplus_UNARY_NOT_code_body[686] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x33, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x41, 0xff, 0x40, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x1e, 0x4d, 0x89, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x82, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xd1, 0x49, 0x89, 0x54, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_UNARY_NOT_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_UNARY_NOT_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_UNARY_NOT_data_holes[1];

// _CALL_BUILTIN_Oplus_UNPACK_EX
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_UNPACK_EX.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 19 02 00 00             jne     0x325 <_JIT_ENTRY+0x325>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 3c 24                   movq    (%rsp), %rdi
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2e                         je      0x23b <_JIT_ENTRY+0x23b>
// 20d: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 24                         je      0x243 <_JIT_ENTRY+0x243>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 22f: 85 c0                         testl   %eax, %eax
// 231: 74 10                         je      0x243 <_JIT_ENTRY+0x243>
// 233: 4d 89 ee                      movq    %r13, %r14
// 236: e9 ea 00 00 00                jmp     0x325 <_JIT_ENTRY+0x325>
// 23b: 49 89 c6                      movq    %rax, %r14
// 23e: e9 e2 00 00 00                jmp     0x325 <_JIT_ENTRY+0x325>
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_OPARG
// 24d: 0f b7 c8                      movzwl  %ax, %ecx
// 250: 89 ca                         movl    %ecx, %edx
// 252: f7 d2                         notl    %edx
// 254: 48 63 f2                      movslq  %edx, %rsi
// 257: 4d 8b 64 f6 f8                movq    -0x8(%r14,%rsi,8), %r12
// 25c: 0f b6 d0                      movzbl  %al, %edx
// 25f: c1 e9 08                      shrl    $0x8, %ecx
// 262: 8d 04 0a                      leal    (%rdx,%rcx), %eax
// 265: ff c0                         incl    %eax
// 267: 48 01 f0                      addq    %rsi, %rax
// 26a: 4d 8d 04 c6                   leaq    (%r14,%rax,8), %r8
// 26e: 49 83 c0 f8                   addq    $-0x8, %r8
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _PyEval_UnpackIterable
// 27c: 4c 89 e6                      movq    %r12, %rsi
// 27f: ff d0                         callq   *%rax
// 281: 89 c5                         movl    %eax, %ebp
// 283: 49 8b 04 24                   movq    (%r12), %rax
// 287: 48 85 c0                      testq   %rax, %rax
// 28a: 7f 22                         jg      0x2ae <_JIT_ENTRY+0x2ae>
// 28c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028e:  R_X86_64_64  .rodata.str1.1
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_NegativeRefcount
// 2a0: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 2a5: 4c 89 e2                      movq    %r12, %rdx
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 8b 04 24                   movq    (%r12), %rax
// 2ae: 85 c0                         testl   %eax, %eax
// 2b0: 78 21                         js      0x2d3 <_JIT_ENTRY+0x2d3>
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bc: ff d0                         callq   *%rax
// 2be: 49 ff 0c 24                   decq    (%r12)
// 2c2: 75 0f                         jne     0x2d3 <_JIT_ENTRY+0x2d3>
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_Dealloc
// 2ce: 4c 89 e7                      movq    %r12, %rdi
// 2d1: ff d0                         callq   *%rax
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _JIT_OPARG
// 2dd: 0f b6 c8                      movzbl  %al, %ecx
// 2e0: 0f b7 c0                      movzwl  %ax, %eax
// 2e3: 89 c2                         movl    %eax, %edx
// 2e5: c1 ea 08                      shrl    $0x8, %edx
// 2e8: 01 ca                         addl    %ecx, %edx
// 2ea: f7 d0                         notl    %eax
// 2ec: 48 98                         cltq
// 2ee: 48 01 d0                      addq    %rdx, %rax
// 2f1: 4d 8d 34 c6                   leaq    (%r14,%rax,8), %r14
// 2f5: 85 ed                         testl   %ebp, %ebp
// 2f7: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 2fb: 74 24                         je      0x321 <_JIT_ENTRY+0x321>
// 2fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ff:  R_X86_64_64  _JIT_CONTINUE
// 307: 48 89 df                      movq    %rbx, %rdi
// 30a: 4c 89 f6                      movq    %r14, %rsi
// 30d: 48 8b 14 24                   movq    (%rsp), %rdx
// 311: 48 83 c4 18                   addq    $0x18, %rsp
// 315: 5b                            popq    %rbx
// 316: 41 5c                         popq    %r12
// 318: 41 5d                         popq    %r13
// 31a: 41 5e                         popq    %r14
// 31c: 41 5f                         popq    %r15
// 31e: 5d                            popq    %rbp
// 31f: ff e0                         jmpq    *%rax
// 321: 49 83 c6 f8                   addq    $-0x8, %r14
// 325: 49 29 de                      subq    %rbx, %r14
// 328: 49 83 c6 b8                   addq    $-0x48, %r14
// 32c: 49 c1 ee 03                   shrq    $0x3, %r14
// 330: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 334: 31 c0                         xorl    %eax, %eax
// 336: e9 9c fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 33b: 
static const unsigned char _CALL_BUILTIN_Oplus_UNPACK_EX_code_body[828] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x19, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x74, 0x10, 0x4d, 0x89, 0xee, 0xe9, 0xea, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xe9, 0xe2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xf2, 0x4d, 0x8b, 0x64, 0xf6, 0xf8, 0x0f, 0xb6, 0xd0, 0xc1, 0xe9, 0x08, 0x8d, 0x04, 0x0a, 0xff, 0xc0, 0x48, 0x01, 0xf0, 0x4d, 0x8d, 0x04, 0xc6, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xc8, 0x0f, 0xb7, 0xc0, 0x89, 0xc2, 0xc1, 0xea, 0x08, 0x01, 0xca, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xd0, 0x4d, 0x8d, 0x34, 0xc6, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x74, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x9c, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_UNPACK_EX_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ff, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_UNPACK_EX_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_UNPACK_EX_data_holes[1];

// _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_UNPACK_SEQUENCE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 55                         jne     0xaf <_JIT_ENTRY+0xaf>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 36                         jne     0xaf <_JIT_ENTRY+0xaf>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 2b                         jne     0xaf <_JIT_ENTRY+0xaf>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 14 24                   movq    %rdx, (%rsp)
// 97: 7e 4d                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 99: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9d: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a6: 75 7d                         jne     0x125 <_JIT_ENTRY+0x125>
// a8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// ad: eb 78                         jmp     0x127 <_JIT_ENTRY+0x127>
// af: 49 29 de                      subq    %rbx, %r14
// b2: 49 83 c6 b8                   addq    $-0x48, %r14
// b6: 49 c1 ee 03                   shrq    $0x3, %r14
// ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_TARGET
// cb: 89 c9                         movl    %ecx, %ecx
// cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d7: 48 83 c4 18                   addq    $0x18, %rsp
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: 5d                            popq    %rbp
// e5: c3                            retq
// e6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_CheckRecursiveCall
// ff: 48 89 d7                      movq    %rdx, %rdi
// 102: ff d0                         callq   *%rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 0f 85 15 02 00 00             jne     0x321 <_JIT_ENTRY+0x321>
// 10c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 111: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 116: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 11a: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 11f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 123: 74 83                         je      0xa8 <_JIT_ENTRY+0xa8>
// 125: 31 ff                         xorl    %edi, %edi
// 127: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12c: 4c 89 fe                      movq    %r15, %rsi
// 12f: 41 ff d0                      callq   *%r8
// 132: 48 8b 3c 24                   movq    (%rsp), %rdi
// 136: ff 47 2c                      incl    0x2c(%rdi)
// 139: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 2a                         jg      0x170 <_JIT_ENTRY+0x170>
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 15f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 164: 4c 89 fa                      movq    %r15, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16d: 49 8b 07                      movq    (%r15), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 2f                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 3c 24                   movq    (%rsp), %rdi
// 184: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 189: 48 ff 08                      decq    (%rax)
// 18c: 75 15                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f 26                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 29                         js      0x1ff <_JIT_ENTRY+0x1ff>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 13                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ff: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 203: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 208: 48 85 c9                      testq   %rcx, %rcx
// 20b: 74 2e                         je      0x23b <_JIT_ENTRY+0x23b>
// 20d: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 211: 48 89 08                      movq    %rcx, (%rax)
// 214: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 218: 48 8b 00                      movq    (%rax), %rax
// 21b: 84 c0                         testb   %al, %al
// 21d: 74 24                         je      0x243 <_JIT_ENTRY+0x243>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_HandlePending
// 229: ff d0                         callq   *%rax
// 22b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 22f: 85 c0                         testl   %eax, %eax
// 231: 74 10                         je      0x243 <_JIT_ENTRY+0x243>
// 233: 4d 89 ee                      movq    %r13, %r14
// 236: e9 e6 00 00 00                jmp     0x321 <_JIT_ENTRY+0x321>
// 23b: 49 89 c6                      movq    %rax, %r14
// 23e: e9 de 00 00 00                jmp     0x321 <_JIT_ENTRY+0x321>
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_OPARG
// 24d: 0f b7 d0                      movzwl  %ax, %edx
// 250: 89 d1                         movl    %edx, %ecx
// 252: f7 d1                         notl    %ecx
// 254: 48 63 c9                      movslq  %ecx, %rcx
// 257: 4d 8b 64 ce f8                movq    -0x8(%r14,%rcx,8), %r12
// 25c: 0f b7 c0                      movzwl  %ax, %eax
// 25f: 48 01 c8                      addq    %rcx, %rax
// 262: 4d 8d 04 c6                   leaq    (%r14,%rax,8), %r8
// 266: 49 83 c0 f8                   addq    $-0x8, %r8
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _PyEval_UnpackIterable
// 274: 4c 89 e6                      movq    %r12, %rsi
// 277: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 27c: ff d0                         callq   *%rax
// 27e: 89 c5                         movl    %eax, %ebp
// 280: 49 8b 04 24                   movq    (%r12), %rax
// 284: 48 85 c0                      testq   %rax, %rax
// 287: 7f 22                         jg      0x2ab <_JIT_ENTRY+0x2ab>
// 289: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028b:  R_X86_64_64  .rodata.str1.1
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_NegativeRefcount
// 29d: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 2a2: 4c 89 e2                      movq    %r12, %rdx
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 8b 04 24                   movq    (%r12), %rax
// 2ab: 85 c0                         testl   %eax, %eax
// 2ad: 78 21                         js      0x2d0 <_JIT_ENTRY+0x2d0>
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 ff 0c 24                   decq    (%r12)
// 2bf: 75 0f                         jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_Dealloc
// 2cb: 4c 89 e7                      movq    %r12, %rdi
// 2ce: ff d0                         callq   *%rax
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _JIT_OPARG
// 2da: 0f b7 c8                      movzwl  %ax, %ecx
// 2dd: f7 d0                         notl    %eax
// 2df: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2e4: 48 98                         cltq
// 2e6: 48 01 c8                      addq    %rcx, %rax
// 2e9: 4d 8d 34 c6                   leaq    (%r14,%rax,8), %r14
// 2ed: 49 83 c6 f8                   addq    $-0x8, %r14
// 2f1: 85 ed                         testl   %ebp, %ebp
// 2f3: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 2f7: 74 24                         je      0x31d <_JIT_ENTRY+0x31d>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _JIT_CONTINUE
// 303: 48 89 df                      movq    %rbx, %rdi
// 306: 4c 89 f6                      movq    %r14, %rsi
// 309: 48 8b 14 24                   movq    (%rsp), %rdx
// 30d: 48 83 c4 18                   addq    $0x18, %rsp
// 311: 5b                            popq    %rbx
// 312: 41 5c                         popq    %r12
// 314: 41 5d                         popq    %r13
// 316: 41 5e                         popq    %r14
// 318: 41 5f                         popq    %r15
// 31a: 5d                            popq    %rbp
// 31b: ff e0                         jmpq    *%rax
// 31d: 49 83 c6 f8                   addq    $-0x8, %r14
// 321: 49 29 de                      subq    %rbx, %r14
// 324: 49 83 c6 b8                   addq    $-0x48, %r14
// 328: 49 c1 ee 03                   shrq    $0x3, %r14
// 32c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 330: 31 c0                         xorl    %eax, %eax
// 332: e9 a0 fd ff ff                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 337: 
static const unsigned char _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_code_body[824] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x55, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x36, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x4d, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7d, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x78, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x15, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x83, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x74, 0x10, 0x4d, 0x89, 0xee, 0xe9, 0xe6, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xe9, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x89, 0xd1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x8b, 0x64, 0xce, 0xf8, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc8, 0x4d, 0x8d, 0x04, 0xc6, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x8d, 0x34, 0xc6, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x74, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xa0, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_data_holes[1];

// _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 4b                         jle     0xe4 <_JIT_ENTRY+0xe4>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 7b                         jne     0x11e <_JIT_ENTRY+0x11e>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 76                         jmp     0x120 <_JIT_ENTRY+0x120>
// aa: 4d 89 f7                      movq    %r14, %r15
// ad: 49 29 df                      subq    %rbx, %r15
// b0: 49 83 c7 b8                   addq    $-0x48, %r15
// b4: 49 c1 ef 03                   shrq    $0x3, %r15
// b8: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// bc: 48 8b 03                      movq    (%rbx), %rax
// bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c1:  R_X86_64_64  _JIT_TARGET
// c9: 89 c9                         movl    %ecx, %ecx
// cb: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cf: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d5: 48 83 c4 18                   addq    $0x18, %rsp
// d9: 5b                            popq    %rbx
// da: 41 5c                         popq    %r12
// dc: 41 5d                         popq    %r13
// de: 41 5e                         popq    %r14
// e0: 41 5f                         popq    %r15
// e2: 5d                            popq    %rbp
// e3: c3                            retq
// e4: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000eb:  R_X86_64_64  .rodata.str1.1+0x39
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_CheckRecursiveCall
// fd: 48 89 d7                      movq    %rdx, %rdi
// 100: ff d0                         callq   *%rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 0f 85 e2 01 00 00             jne     0x2ec <_JIT_ENTRY+0x2ec>
// 10a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10f: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 114: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 118: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11c: 74 85                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11e: 31 ff                         xorl    %edi, %edi
// 120: 48 89 ee                      movq    %rbp, %rsi
// 123: 41 ff d0                      callq   *%r8
// 126: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 12b: ff 42 2c                      incl    0x2c(%rdx)
// 12e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 27                         jg      0x163 <_JIT_ENTRY+0x163>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 15f: 48 8b 45 00                   movq    (%rbp), %rax
// 163: 85 c0                         testl   %eax, %eax
// 165: 78 2b                         js      0x192 <_JIT_ENTRY+0x192>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 178: 48 ff 4d 00                   decq    (%rbp)
// 17c: 75 14                         jne     0x192 <_JIT_ENTRY+0x192>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_Dealloc
// 188: 48 89 ef                      movq    %rbp, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 192: 49 8b 04 24                   movq    (%r12), %rax
// 196: 48 85 c0                      testq   %rax, %rax
// 199: 7f 27                         jg      0x1c2 <_JIT_ENTRY+0x1c2>
// 19b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019d:  R_X86_64_64  .rodata.str1.1
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_NegativeRefcount
// 1af: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b4: 4c 89 e2                      movq    %r12, %rdx
// 1b7: ff d0                         callq   *%rax
// 1b9: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1be: 49 8b 04 24                   movq    (%r12), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 2b                         js      0x1f1 <_JIT_ENTRY+0x1f1>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1d7: 49 ff 0c 24                   decq    (%r12)
// 1db: 75 14                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_Dealloc
// 1e7: 4c 89 e7                      movq    %r12, %rdi
// 1ea: ff d0                         callq   *%rax
// 1ec: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1f1: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f5: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1fa: 48 85 c9                      testq   %rcx, %rcx
// 1fd: 0f 84 e6 00 00 00             je      0x2e9 <_JIT_ENTRY+0x2e9>
// 203: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 207: 48 89 08                      movq    %rcx, (%rax)
// 20a: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 20e: 48 8b 00                      movq    (%rax), %rax
// 211: 84 c0                         testb   %al, %al
// 213: 74 20                         je      0x235 <_JIT_ENTRY+0x235>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_HandlePending
// 21f: 48 89 d7                      movq    %rdx, %rdi
// 222: ff d0                         callq   *%rax
// 224: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 229: 85 c0                         testl   %eax, %eax
// 22b: 74 08                         je      0x235 <_JIT_ENTRY+0x235>
// 22d: 4d 89 fe                      movq    %r15, %r14
// 230: e9 b7 00 00 00                jmp     0x2ec <_JIT_ENTRY+0x2ec>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_OPARG
// 23f: f7 d0                         notl    %eax
// 241: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 246: 48 98                         cltq
// 248: 49 8b 74 c6 f8                movq    -0x8(%r14,%rax,8), %rsi
// 24d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024f:  R_X86_64_64  PyList_Type
// 257: 48 39 4e 08                   cmpq    %rcx, 0x8(%rsi)
// 25b: 0f 85 4c fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 261: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000263:  R_X86_64_64  _JIT_OPARG
// 26b: 0f b7 c9                      movzwl  %cx, %ecx
// 26e: 48 39 4e 10                   cmpq    %rcx, 0x10(%rsi)
// 272: 0f 85 35 fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 278: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 27d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027f:  R_X86_64_64  _JIT_OPARG
// 287: f7 c1 ff ff 00 00             testl   $0xffff, %ecx           # imm = 0xFFFF
// 28d: 7e 73                         jle     0x302 <_JIT_ENTRY+0x302>
// 28f: 4d 8d 3c c6                   leaq    (%r14,%rax,8), %r15
// 293: 49 83 c7 f8                   addq    $-0x8, %r15
// 297: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 29c: 4c 8b 68 18                   movq    0x18(%rax), %r13
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _JIT_OPARG
// 2aa: 0f b7 e8                      movzwl  %ax, %ebp
// 2ad: 48 ff c5                      incq    %rbp
// 2b0: eb 10                         jmp     0x2c2 <_JIT_ENTRY+0x2c2>
// 2b2: 4d 89 27                      movq    %r12, (%r15)
// 2b5: 49 83 c7 08                   addq    $0x8, %r15
// 2b9: 48 ff cd                      decq    %rbp
// 2bc: 48 83 fd 01                   cmpq    $0x1, %rbp
// 2c0: 7e 40                         jle     0x302 <_JIT_ENTRY+0x302>
// 2c2: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 2c5: 4d 8b 64 c5 00                movq    (%r13,%rax,8), %r12
// 2ca: 41 8b 04 24                   movl    (%r12), %eax
// 2ce: ff c0                         incl    %eax
// 2d0: 74 e0                         je      0x2b2 <_JIT_ENTRY+0x2b2>
// 2d2: 41 89 04 24                   movl    %eax, (%r12)
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2e0: ff d0                         callq   *%rax
// 2e2: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2e7: eb c9                         jmp     0x2b2 <_JIT_ENTRY+0x2b2>
// 2e9: 49 89 c6                      movq    %rax, %r14
// 2ec: 49 29 de                      subq    %rbx, %r14
// 2ef: 49 83 c6 b8                   addq    $-0x48, %r14
// 2f3: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2fb: 31 c0                         xorl    %eax, %eax
// 2fd: e9 d3 fd ff ff                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 302: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 307: 49 8b 07                      movq    (%r15), %rax
// 30a: 48 85 c0                      testq   %rax, %rax
// 30d: 7f 26                         jg      0x335 <_JIT_ENTRY+0x335>
// 30f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000311:  R_X86_64_64  .rodata.str1.1
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  _Py_NegativeRefcount
// 323: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 328: 4c 89 fa                      movq    %r15, %rdx
// 32b: ff d0                         callq   *%rax
// 32d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 332: 49 8b 07                      movq    (%r15), %rax
// 335: 85 c0                         testl   %eax, %eax
// 337: 78 2a                         js      0x363 <_JIT_ENTRY+0x363>
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 343: ff d0                         callq   *%rax
// 345: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 34a: 49 ff 0f                      decq    (%r15)
// 34d: 75 14                         jne     0x363 <_JIT_ENTRY+0x363>
// 34f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000351:  R_X86_64_64  _Py_Dealloc
// 359: 4c 89 ff                      movq    %r15, %rdi
// 35c: ff d0                         callq   *%rax
// 35e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 363: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000365:  R_X86_64_64  _JIT_OPARG
// 36d: 0f b7 c8                      movzwl  %ax, %ecx
// 370: f7 d0                         notl    %eax
// 372: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 377: 48 98                         cltq
// 379: 48 01 c8                      addq    %rcx, %rax
// 37c: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 380: 48 83 c6 f8                   addq    $-0x8, %rsi
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  _JIT_CONTINUE
// 38e: 48 89 df                      movq    %rbx, %rdi
// 391: 48 83 c4 18                   addq    $0x18, %rsp
// 395: 5b                            popq    %rbx
// 396: 41 5c                         popq    %r12
// 398: 41 5d                         popq    %r13
// 39a: 41 5e                         popq    %r14
// 39c: 41 5f                         popq    %r15
// 39e: 5d                            popq    %rbp
// 39f: ff e0                         jmpq    *%rax
// 3a1: 
static const unsigned char _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_LIST_code_body[930] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4b, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7b, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x76, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xe2, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x85, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xe6, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfe, 0xe9, 0xb7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x74, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4e, 0x08, 0x0f, 0x85, 0x4c, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x4e, 0x10, 0x0f, 0x85, 0x35, 0xfe, 0xff, 0xff, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xc1, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x73, 0x4d, 0x8d, 0x3c, 0xc6, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x68, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x10, 0x4d, 0x89, 0x27, 0x49, 0x83, 0xc7, 0x08, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x7e, 0x40, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x64, 0xc5, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0xe0, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xeb, 0xc9, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xd3, 0xfd, 0xff, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x0f, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_LIST_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x365, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_LIST_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 51                         jne     0xaa <_JIT_ENTRY+0xaa>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 4c 63 f9                      movslq  %ecx, %r15
// 63: 4f 8b 24 fe                   movq    (%r14,%r15,8), %r12
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 76: 75 32                         jne     0xaa <_JIT_ENTRY+0xaa>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 27                         jne     0xaa <_JIT_ENTRY+0xaa>
// 83: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 87: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8a: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8d: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 90: 85 c9                         testl   %ecx, %ecx
// 92: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 97: 7e 4b                         jle     0xe4 <_JIT_ENTRY+0xe4>
// 99: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 9d: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a1: 75 7b                         jne     0x11e <_JIT_ENTRY+0x11e>
// a3: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// a8: eb 76                         jmp     0x120 <_JIT_ENTRY+0x120>
// aa: 4d 89 f7                      movq    %r14, %r15
// ad: 49 29 df                      subq    %rbx, %r15
// b0: 49 83 c7 b8                   addq    $-0x48, %r15
// b4: 49 c1 ef 03                   shrq    $0x3, %r15
// b8: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// bc: 48 8b 03                      movq    (%rbx), %rax
// bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c1:  R_X86_64_64  _JIT_TARGET
// c9: 89 c9                         movl    %ecx, %ecx
// cb: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cf: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d5: 48 83 c4 18                   addq    $0x18, %rsp
// d9: 5b                            popq    %rbx
// da: 41 5c                         popq    %r12
// dc: 41 5d                         popq    %r13
// de: 41 5e                         popq    %r14
// e0: 41 5f                         popq    %r15
// e2: 5d                            popq    %rbp
// e3: c3                            retq
// e4: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// e9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000eb:  R_X86_64_64  .rodata.str1.1+0x39
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_CheckRecursiveCall
// fd: 48 89 d7                      movq    %rdx, %rdi
// 100: ff d0                         callq   *%rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 0f 85 d6 01 00 00             jne     0x2e0 <_JIT_ENTRY+0x2e0>
// 10a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 10f: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 114: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 118: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 11c: 74 85                         je      0xa3 <_JIT_ENTRY+0xa3>
// 11e: 31 ff                         xorl    %edi, %edi
// 120: 48 89 ee                      movq    %rbp, %rsi
// 123: 41 ff d0                      callq   *%r8
// 126: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 12b: ff 42 2c                      incl    0x2c(%rdx)
// 12e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 27                         jg      0x163 <_JIT_ENTRY+0x163>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 15f: 48 8b 45 00                   movq    (%rbp), %rax
// 163: 85 c0                         testl   %eax, %eax
// 165: 78 2b                         js      0x192 <_JIT_ENTRY+0x192>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 178: 48 ff 4d 00                   decq    (%rbp)
// 17c: 75 14                         jne     0x192 <_JIT_ENTRY+0x192>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_Dealloc
// 188: 48 89 ef                      movq    %rbp, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 192: 49 8b 04 24                   movq    (%r12), %rax
// 196: 48 85 c0                      testq   %rax, %rax
// 199: 7f 27                         jg      0x1c2 <_JIT_ENTRY+0x1c2>
// 19b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019d:  R_X86_64_64  .rodata.str1.1
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_NegativeRefcount
// 1af: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1b4: 4c 89 e2                      movq    %r12, %rdx
// 1b7: ff d0                         callq   *%rax
// 1b9: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1be: 49 8b 04 24                   movq    (%r12), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 2b                         js      0x1f1 <_JIT_ENTRY+0x1f1>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1d7: 49 ff 0c 24                   decq    (%r12)
// 1db: 75 14                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_Dealloc
// 1e7: 4c 89 e7                      movq    %r12, %rdi
// 1ea: ff d0                         callq   *%rax
// 1ec: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1f1: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f5: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1fa: 48 85 c9                      testq   %rcx, %rcx
// 1fd: 0f 84 da 00 00 00             je      0x2dd <_JIT_ENTRY+0x2dd>
// 203: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 207: 48 89 08                      movq    %rcx, (%rax)
// 20a: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 20e: 48 8b 00                      movq    (%rax), %rax
// 211: 84 c0                         testb   %al, %al
// 213: 74 20                         je      0x235 <_JIT_ENTRY+0x235>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_HandlePending
// 21f: 48 89 d7                      movq    %rdx, %rdi
// 222: ff d0                         callq   *%rax
// 224: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 229: 85 c0                         testl   %eax, %eax
// 22b: 74 08                         je      0x235 <_JIT_ENTRY+0x235>
// 22d: 4d 89 fe                      movq    %r15, %r14
// 230: e9 ab 00 00 00                jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_OPARG
// 23f: f7 d0                         notl    %eax
// 241: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 246: 48 98                         cltq
// 248: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 24d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024f:  R_X86_64_64  PyTuple_Type
// 257: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 25c: 0f 85 4b fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 262: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000264:  R_X86_64_64  _JIT_OPARG
// 26c: 0f b7 c9                      movzwl  %cx, %ecx
// 26f: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 274: 0f 85 33 fe ff ff             jne     0xad <_JIT_ENTRY+0xad>
// 27a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027c:  R_X86_64_64  _JIT_OPARG
// 284: f7 c1 ff ff 00 00             testl   $0xffff, %ecx           # imm = 0xFFFF
// 28a: 7e 6a                         jle     0x2f6 <_JIT_ENTRY+0x2f6>
// 28c: 4d 8d 3c c6                   leaq    (%r14,%rax,8), %r15
// 290: 49 83 c7 f8                   addq    $-0x8, %r15
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _JIT_OPARG
// 29e: 44 0f b7 e8                   movzwl  %ax, %r13d
// 2a2: 49 ff c5                      incq    %r13
// 2a5: eb 10                         jmp     0x2b7 <_JIT_ENTRY+0x2b7>
// 2a7: 49 89 2f                      movq    %rbp, (%r15)
// 2aa: 49 83 c7 08                   addq    $0x8, %r15
// 2ae: 49 ff cd                      decq    %r13
// 2b1: 49 83 fd 01                   cmpq    $0x1, %r13
// 2b5: 7e 3f                         jle     0x2f6 <_JIT_ENTRY+0x2f6>
// 2b7: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 2bb: 49 8b 6c c4 18                movq    0x18(%r12,%rax,8), %rbp
// 2c0: 8b 45 00                      movl    (%rbp), %eax
// 2c3: ff c0                         incl    %eax
// 2c5: 74 e0                         je      0x2a7 <_JIT_ENTRY+0x2a7>
// 2c7: 89 45 00                      movl    %eax, (%rbp)
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2d4: ff d0                         callq   *%rax
// 2d6: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2db: eb ca                         jmp     0x2a7 <_JIT_ENTRY+0x2a7>
// 2dd: 49 89 c6                      movq    %rax, %r14
// 2e0: 49 29 de                      subq    %rbx, %r14
// 2e3: 49 83 c6 b8                   addq    $-0x48, %r14
// 2e7: 49 c1 ee 03                   shrq    $0x3, %r14
// 2eb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2ef: 31 c0                         xorl    %eax, %eax
// 2f1: e9 df fd ff ff                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 2f6: 49 8b 04 24                   movq    (%r12), %rax
// 2fa: 48 85 c0                      testq   %rax, %rax
// 2fd: 7f 27                         jg      0x326 <_JIT_ENTRY+0x326>
// 2ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000301:  R_X86_64_64  .rodata.str1.1
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_NegativeRefcount
// 313: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 318: 4c 89 e2                      movq    %r12, %rdx
// 31b: ff d0                         callq   *%rax
// 31d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 322: 49 8b 04 24                   movq    (%r12), %rax
// 326: 85 c0                         testl   %eax, %eax
// 328: 78 2b                         js      0x355 <_JIT_ENTRY+0x355>
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 334: ff d0                         callq   *%rax
// 336: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 33b: 49 ff 0c 24                   decq    (%r12)
// 33f: 75 14                         jne     0x355 <_JIT_ENTRY+0x355>
// 341: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000343:  R_X86_64_64  _Py_Dealloc
// 34b: 4c 89 e7                      movq    %r12, %rdi
// 34e: ff d0                         callq   *%rax
// 350: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 355: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000357:  R_X86_64_64  _JIT_OPARG
// 35f: 0f b7 c8                      movzwl  %ax, %ecx
// 362: f7 d0                         notl    %eax
// 364: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 369: 48 98                         cltq
// 36b: 48 01 c8                      addq    %rcx, %rax
// 36e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 372: 48 83 c6 f8                   addq    $-0x8, %rsi
// 376: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000378:  R_X86_64_64  _JIT_CONTINUE
// 380: 48 89 df                      movq    %rbx, %rdi
// 383: 48 83 c4 18                   addq    $0x18, %rsp
// 387: 5b                            popq    %rbx
// 388: 41 5c                         popq    %r12
// 38a: 41 5d                         popq    %r13
// 38c: 41 5e                         popq    %r14
// 38e: 41 5f                         popq    %r15
// 390: 5d                            popq    %rbp
// 391: ff e0                         jmpq    *%rax
// 393: 
static const unsigned char _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TUPLE_code_body[916] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x51, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x24, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x32, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x27, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x7e, 0x4b, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7b, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x76, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xd6, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x85, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfe, 0xe9, 0xab, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x4b, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x85, 0x33, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xc1, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x6a, 0x4d, 0x8d, 0x3c, 0xc6, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0xeb, 0x10, 0x49, 0x89, 0x2f, 0x49, 0x83, 0xc7, 0x08, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x3f, 0x41, 0x8d, 0x45, 0xfe, 0x49, 0x8b, 0x6c, 0xc4, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe0, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xeb, 0xca, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xdf, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TUPLE_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x343, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x357, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x378, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TUPLE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TWO_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 0f 85 61 02 00 00             jne     0x2bf <_JIT_ENTRY+0x2bf>
// 5e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 63: 29 c1                         subl    %eax, %ecx
// 65: 48 63 e9                      movslq  %ecx, %rbp
// 68: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  PyCFunction_Type
// 76: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 7b: 0f 85 3e 02 00 00             jne     0x2bf <_JIT_ENTRY+0x2bf>
// 81: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 86: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 8a: 0f 85 2f 02 00 00             jne     0x2bf <_JIT_ENTRY+0x2bf>
// 90: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 94: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 97: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 9a: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 9d: 85 c9                         testl   %ecx, %ecx
// 9f: 48 89 14 24                   movq    %rdx, (%rsp)
// a3: 7e 16                         jle     0xbb <_JIT_ENTRY+0xbb>
// a5: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// a9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ae: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// b2: 75 46                         jne     0xfa <_JIT_ENTRY+0xfa>
// b4: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b9: eb 41                         jmp     0xfc <_JIT_ENTRY+0xfc>
// bb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_CheckRecursiveCall
// d4: 48 89 d7                      movq    %rdx, %rdi
// d7: ff d0                         callq   *%rax
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 85 c8 01 00 00             jne     0x2a9 <_JIT_ENTRY+0x2a9>
// e1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// e6: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// eb: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// ef: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// f4: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// f8: 74 ba                         je      0xb4 <_JIT_ENTRY+0xb4>
// fa: 31 ff                         xorl    %edi, %edi
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 4c 89 fe                      movq    %r15, %rsi
// 104: 41 ff d0                      callq   *%r8
// 107: 48 8b 14 24                   movq    (%rsp), %rdx
// 10b: ff 42 2c                      incl    0x2c(%rdx)
// 10e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 113: 49 8b 07                      movq    (%r15), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 2a                         jg      0x145 <_JIT_ENTRY+0x145>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 48 8b 14 24                   movq    (%rsp), %rdx
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 2f                         js      0x178 <_JIT_ENTRY+0x178>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 8b 14 24                   movq    (%rsp), %rdx
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 48 ff 08                      decq    (%rax)
// 161: 75 15                         jne     0x178 <_JIT_ENTRY+0x178>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 26                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 29                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 13                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1dd: 48 85 c9                      testq   %rcx, %rcx
// 1e0: 0f 84 c0 00 00 00             je      0x2a6 <_JIT_ENTRY+0x2a6>
// 1e6: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 1ea: 48 89 08                      movq    %rcx, (%rax)
// 1ed: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1f1: 48 8b 00                      movq    (%rax), %rax
// 1f4: 84 c0                         testb   %al, %al
// 1f6: 74 1f                         je      0x217 <_JIT_ENTRY+0x217>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_HandlePending
// 202: 48 89 d7                      movq    %rdx, %rdi
// 205: ff d0                         callq   *%rax
// 207: 48 8b 14 24                   movq    (%rsp), %rdx
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 74 08                         je      0x217 <_JIT_ENTRY+0x217>
// 20f: 4d 89 ee                      movq    %r13, %r14
// 212: e9 92 00 00 00                jmp     0x2a9 <_JIT_ENTRY+0x2a9>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _JIT_OPARG
// 221: f7 d0                         notl    %eax
// 223: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 228: 48 98                         cltq
// 22a: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  PyTuple_Type
// 239: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 23e: 75 7c                         jne     0x2bc <_JIT_ENTRY+0x2bc>
// 240: 49 83 7c 24 10 02             cmpq    $0x2, 0x10(%r12)
// 246: 75 74                         jne     0x2bc <_JIT_ENTRY+0x2bc>
// 248: 49 8b 6c 24 20                movq    0x20(%r12), %rbp
// 24d: 8b 45 00                      movl    (%rbp), %eax
// 250: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000252:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 25a: ff c0                         incl    %eax
// 25c: 74 0a                         je      0x268 <_JIT_ENTRY+0x268>
// 25e: 89 45 00                      movl    %eax, (%rbp)
// 261: 41 ff d7                      callq   *%r15
// 264: 48 8b 14 24                   movq    (%rsp), %rdx
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _JIT_OPARG
// 272: f7 d0                         notl    %eax
// 274: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 279: 48 98                         cltq
// 27b: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 280: 49 8b 6c 24 18                movq    0x18(%r12), %rbp
// 285: 8b 45 00                      movl    (%rbp), %eax
// 288: ff c0                         incl    %eax
// 28a: 75 6a                         jne     0x2f6 <_JIT_ENTRY+0x2f6>
// 28c: 49 89 6d 00                   movq    %rbp, (%r13)
// 290: 49 8b 04 24                   movq    (%r12), %rax
// 294: 48 85 c0                      testq   %rax, %rax
// 297: 7e 74                         jle     0x30d <_JIT_ENTRY+0x30d>
// 299: 85 c0                         testl   %eax, %eax
// 29b: 0f 89 96 00 00 00             jns     0x337 <_JIT_ENTRY+0x337>
// 2a1: e9 ba 00 00 00                jmp     0x360 <_JIT_ENTRY+0x360>
// 2a6: 49 89 c6                      movq    %rax, %r14
// 2a9: 49 29 de                      subq    %rbx, %r14
// 2ac: 49 83 c6 b8                   addq    $-0x48, %r14
// 2b0: 49 c1 ee 03                   shrq    $0x3, %r14
// 2b4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2b8: 31 c0                         xorl    %eax, %eax
// 2ba: eb 2b                         jmp     0x2e7 <_JIT_ENTRY+0x2e7>
// 2bc: 4d 89 ee                      movq    %r13, %r14
// 2bf: 49 29 de                      subq    %rbx, %r14
// 2c2: 49 83 c6 b8                   addq    $-0x48, %r14
// 2c6: 49 c1 ee 03                   shrq    $0x3, %r14
// 2ca: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2ce: 48 8b 03                      movq    (%rbx), %rax
// 2d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002d3:  R_X86_64_64  _JIT_TARGET
// 2db: 89 c9                         movl    %ecx, %ecx
// 2dd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2e1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2e7: 48 83 c4 18                   addq    $0x18, %rsp
// 2eb: 5b                            popq    %rbx
// 2ec: 41 5c                         popq    %r12
// 2ee: 41 5d                         popq    %r13
// 2f0: 41 5e                         popq    %r14
// 2f2: 41 5f                         popq    %r15
// 2f4: 5d                            popq    %rbp
// 2f5: c3                            retq
// 2f6: 89 45 00                      movl    %eax, (%rbp)
// 2f9: 41 ff d7                      callq   *%r15
// 2fc: 48 8b 14 24                   movq    (%rsp), %rdx
// 300: 49 89 6d 00                   movq    %rbp, (%r13)
// 304: 49 8b 04 24                   movq    (%r12), %rax
// 308: 48 85 c0                      testq   %rax, %rax
// 30b: 7f 8c                         jg      0x299 <_JIT_ENTRY+0x299>
// 30d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030f:  R_X86_64_64  .rodata.str1.1
// 317: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000319:  R_X86_64_64  _Py_NegativeRefcount
// 321: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 326: 4c 89 e2                      movq    %r12, %rdx
// 329: ff d0                         callq   *%rax
// 32b: 48 8b 14 24                   movq    (%rsp), %rdx
// 32f: 49 8b 04 24                   movq    (%r12), %rax
// 333: 85 c0                         testl   %eax, %eax
// 335: 78 29                         js      0x360 <_JIT_ENTRY+0x360>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 341: ff d0                         callq   *%rax
// 343: 48 8b 14 24                   movq    (%rsp), %rdx
// 347: 49 ff 0c 24                   decq    (%r12)
// 34b: 75 13                         jne     0x360 <_JIT_ENTRY+0x360>
// 34d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034f:  R_X86_64_64  _Py_Dealloc
// 357: 4c 89 e7                      movq    %r12, %rdi
// 35a: ff d0                         callq   *%rax
// 35c: 48 8b 14 24                   movq    (%rsp), %rdx
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _JIT_OPARG
// 36a: 0f b7 c8                      movzwl  %ax, %ecx
// 36d: f7 d0                         notl    %eax
// 36f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 374: 48 98                         cltq
// 376: 48 01 c8                      addq    %rcx, %rax
// 379: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 37d: 48 83 c6 f8                   addq    $-0x8, %rsi
// 381: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000383:  R_X86_64_64  _JIT_CONTINUE
// 38b: 48 89 df                      movq    %rbx, %rdi
// 38e: 48 83 c4 18                   addq    $0x18, %rsp
// 392: 5b                            popq    %rbx
// 393: 41 5c                         popq    %r12
// 395: 41 5d                         popq    %r13
// 397: 41 5e                         popq    %r14
// 399: 41 5f                         popq    %r15
// 39b: 5d                            popq    %rbp
// 39c: ff e0                         jmpq    *%rax
// 39e: 
static const unsigned char _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[927] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x61, 0x02, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x3e, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x0f, 0x85, 0x2f, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x7e, 0x16, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x41, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xc8, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xba, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xff, 0x42, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xee, 0xe9, 0x92, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x7c, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x02, 0x75, 0x74, 0x49, 0x8b, 0x6c, 0x24, 0x20, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x0a, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x6a, 0x49, 0x89, 0x6d, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x74, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xba, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x89, 0x6d, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x8c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x383, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _CALL_BUILTIN_Oplus_WITH_EXCEPT_START
// 
// /tmp/tmplxca_3rw/_CALL_BUILTIN_Oplus_WITH_EXCEPT_START.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 48                   subq    $0x48, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 44 0f b7 f9                   movzwl  %cx, %r15d
// 3f: 4c 89 f9                      movq    %r15, %rcx
// 42: 48 f7 d9                      negq    %rcx
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 0f 44 fe                      cmovel  %esi, %edi
// 4d: 49 f7 d7                      notq    %r15
// 50: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 54: 40 80 ff 01                   cmpb    $0x1, %dil
// 58: 75 5d                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 5a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5f: 29 c1                         subl    %eax, %ecx
// 61: 48 63 e9                      movslq  %ecx, %rbp
// 64: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyCFunction_Type
// 72: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 77: 75 3e                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 79: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7e: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 82: 75 33                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 84: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 88: 8b 4a 2c                      movl    0x2c(%rdx), %ecx
// 8b: 8d 71 ff                      leal    -0x1(%rcx), %esi
// 8e: 89 72 2c                      movl    %esi, 0x2c(%rdx)
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 98: 7e 54                         jle     0xee <_JIT_ENTRY+0xee>
// 9a: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 9e: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// a3: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// a7: 0f 85 88 00 00 00             jne     0x135 <_JIT_ENTRY+0x135>
// ad: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b2: e9 80 00 00 00                jmp     0x137 <_JIT_ENTRY+0x137>
// b7: 49 29 de                      subq    %rbx, %r14
// ba: 49 83 c6 b8                   addq    $-0x48, %r14
// be: 49 c1 ee 03                   shrq    $0x3, %r14
// c2: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// c6: 48 8b 03                      movq    (%rbx), %rax
// c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cb:  R_X86_64_64  _JIT_TARGET
// d3: 89 c9                         movl    %ecx, %ecx
// d5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// df: 48 83 c4 48                   addq    $0x48, %rsp
// e3: 5b                            popq    %rbx
// e4: 41 5c                         popq    %r12
// e6: 41 5d                         popq    %r13
// e8: 41 5e                         popq    %r14
// ea: 41 5f                         popq    %r15
// ec: 5d                            popq    %rbp
// ed: c3                            retq
// ee: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// f3: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f5:  R_X86_64_64  .rodata.str1.1+0x39
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_CheckRecursiveCall
// 107: 48 89 d7                      movq    %rdx, %rdi
// 10a: ff d0                         callq   *%rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 74 08                         je      0x118 <_JIT_ENTRY+0x118>
// 110: 4d 89 f4                      movq    %r14, %r12
// 113: e9 58 02 00 00                jmp     0x370 <_JIT_ENTRY+0x370>
// 118: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 11d: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 122: 4b 8b 0c fe                   movq    (%r14,%r15,8), %rcx
// 126: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 12b: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 12f: 0f 84 78 ff ff ff             je      0xad <_JIT_ENTRY+0xad>
// 135: 31 ff                         xorl    %edi, %edi
// 137: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13c: 4c 89 fe                      movq    %r15, %rsi
// 13f: 41 ff d0                      callq   *%r8
// 142: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 147: ff 47 2c                      incl    0x2c(%rdi)
// 14a: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 14f: 49 8b 07                      movq    (%r15), %rax
// 152: 48 85 c0                      testq   %rax, %rax
// 155: 7f 2b                         jg      0x182 <_JIT_ENTRY+0x182>
// 157: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000159:  R_X86_64_64  .rodata.str1.1
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_NegativeRefcount
// 16b: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 170: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 175: 4c 89 fa                      movq    %r15, %rdx
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 17f: 49 8b 07                      movq    (%r15), %rax
// 182: 85 c0                         testl   %eax, %eax
// 184: 78 31                         js      0x1b7 <_JIT_ENTRY+0x1b7>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 190: ff d0                         callq   *%rax
// 192: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 197: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19c: 48 ff 08                      decq    (%rax)
// 19f: 75 16                         jne     0x1b7 <_JIT_ENTRY+0x1b7>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_Dealloc
// 1ab: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1b0: ff d0                         callq   *%rax
// 1b2: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1b7: 49 8b 04 24                   movq    (%r12), %rax
// 1bb: 48 85 c0                      testq   %rax, %rax
// 1be: 7f 27                         jg      0x1e7 <_JIT_ENTRY+0x1e7>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _Py_NegativeRefcount
// 1d4: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 1d9: 4c 89 e2                      movq    %r12, %rdx
// 1dc: ff d0                         callq   *%rax
// 1de: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1e3: 49 8b 04 24                   movq    (%r12), %rax
// 1e7: 85 c0                         testl   %eax, %eax
// 1e9: 78 2b                         js      0x216 <_JIT_ENTRY+0x216>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f5: ff d0                         callq   *%rax
// 1f7: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1fc: 49 ff 0c 24                   decq    (%r12)
// 200: 75 14                         jne     0x216 <_JIT_ENTRY+0x216>
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_Dealloc
// 20c: 4c 89 e7                      movq    %r12, %rdi
// 20f: ff d0                         callq   *%rax
// 211: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 216: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 21a: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 21f: 4d 85 ff                      testq   %r15, %r15
// 222: 0f 84 b4 00 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 228: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 22c: 4c 89 38                      movq    %r15, (%rax)
// 22f: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 233: 48 8b 00                      movq    (%rax), %rax
// 236: 84 c0                         testb   %al, %al
// 238: 74 14                         je      0x24e <_JIT_ENTRY+0x24e>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_HandlePending
// 244: ff d0                         callq   *%rax
// 246: 85 c0                         testl   %eax, %eax
// 248: 0f 85 22 01 00 00             jne     0x370 <_JIT_ENTRY+0x370>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _JIT_OPARG
// 258: f7 d0                         notl    %eax
// 25a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25f: 48 98                         cltq
// 261: 49 8b 4c c6 e0                movq    -0x20(%r14,%rax,8), %rcx
// 266: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 26b: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 270: 4d 8b 7d 08                   movq    0x8(%r13), %r15
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  PyException_GetTraceback
// 27e: 4c 89 ef                      movq    %r13, %rdi
// 281: ff d0                         callq   *%rax
// 283: 48 85 c0                      testq   %rax, %rax
// 286: 74 5c                         je      0x2e4 <_JIT_ENTRY+0x2e4>
// 288: 48 89 c5                      movq    %rax, %rbp
// 28b: 48 8b 00                      movq    (%rax), %rax
// 28e: 48 85 c0                      testq   %rax, %rax
// 291: 7f 22                         jg      0x2b5 <_JIT_ENTRY+0x2b5>
// 293: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000295:  R_X86_64_64  .rodata.str1.1
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_NegativeRefcount
// 2a7: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 2ac: 48 89 ea                      movq    %rbp, %rdx
// 2af: ff d0                         callq   *%rax
// 2b1: 48 8b 45 00                   movq    (%rbp), %rax
// 2b5: 85 c0                         testl   %eax, %eax
// 2b7: 78 35                         js      0x2ee <_JIT_ENTRY+0x2ee>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c3: ff d0                         callq   *%rax
// 2c5: 48 ff 4d 00                   decq    (%rbp)
// 2c9: 75 23                         jne     0x2ee <_JIT_ENTRY+0x2ee>
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_Dealloc
// 2d5: 48 89 ef                      movq    %rbp, %rdi
// 2d8: ff d0                         callq   *%rax
// 2da: eb 12                         jmp     0x2ee <_JIT_ENTRY+0x2ee>
// 2dc: 49 89 c4                      movq    %rax, %r12
// 2df: e9 8c 00 00 00                jmp     0x370 <_JIT_ENTRY+0x370>
// 2e4: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000002e6:  R_X86_64_64  _Py_NoneStruct
// 2ee: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2f3: 48 c7 44 24 20 00 00 00 00    movq    $0x0, 0x20(%rsp)
// 2fc: 48 8d 74 24 28                leaq    0x28(%rsp), %rsi
// 301: 4c 89 7c 24 28                movq    %r15, 0x28(%rsp)
// 306: 4c 89 6c 24 30                movq    %r13, 0x30(%rsp)
// 30b: 48 89 6c 24 38                movq    %rbp, 0x38(%rsp)
// 310: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000312:  R_X86_64_64  PyObject_Vectorcall
// 31a: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 324: 31 c9                         xorl    %ecx, %ecx
// 326: ff d0                         callq   *%rax
// 328: 48 85 c0                      testq   %rax, %rax
// 32b: 74 43                         je      0x370 <_JIT_ENTRY+0x370>
// 32d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000032f:  R_X86_64_64  _JIT_OPARG
// 337: f7 d1                         notl    %ecx
// 339: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 33f: 48 63 c9                      movslq  %ecx, %rcx
// 342: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 346: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 34a: 48 83 c6 08                   addq    $0x8, %rsi
// 34e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000350:  R_X86_64_64  _JIT_CONTINUE
// 358: 48 89 df                      movq    %rbx, %rdi
// 35b: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 360: 48 83 c4 48                   addq    $0x48, %rsp
// 364: 5b                            popq    %rbx
// 365: 41 5c                         popq    %r12
// 367: 41 5d                         popq    %r13
// 369: 41 5e                         popq    %r14
// 36b: 41 5f                         popq    %r15
// 36d: 5d                            popq    %rbp
// 36e: ff e0                         jmpq    *%rax
// 370: 49 29 dc                      subq    %rbx, %r12
// 373: 49 83 c4 b8                   addq    $-0x48, %r12
// 377: 49 c1 ec 03                   shrq    $0x3, %r12
// 37b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 37f: 31 c0                         xorl    %eax, %eax
// 381: e9 59 fd ff ff                jmp     0xdf <_JIT_ENTRY+0xdf>
// 386: 
static const unsigned char _CALL_BUILTIN_Oplus_WITH_EXCEPT_START_code_body[903] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x48, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5d, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3e, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x33, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x4a, 0x2c, 0x8d, 0x71, 0xff, 0x89, 0x72, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x10, 0x7e, 0x54, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x48, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf4, 0xe9, 0x58, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4b, 0x8b, 0x0c, 0xfe, 0x48, 0x89, 0x4c, 0x24, 0x08, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x18, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x2b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xee, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x22, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xe0, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x4d, 0x8b, 0x7d, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x5c, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x12, 0x49, 0x89, 0xc4, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x28, 0x4c, 0x89, 0x7c, 0x24, 0x28, 0x4c, 0x89, 0x6c, 0x24, 0x30, 0x48, 0x89, 0x6c, 0x24, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x43, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x48, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x59, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_Oplus_WITH_EXCEPT_START_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_Oplus_WITH_EXCEPT_START_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_Oplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_CALL_BUILTIN_Oplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BEFORE_ASYNC_WITH),
    [_CALL_BUILTIN_Oplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BEFORE_WITH),
    [_CALL_BUILTIN_Oplus_BINARY_OP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_OP),
    [_CALL_BUILTIN_Oplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_OP_ADD_FLOAT),
    [_CALL_BUILTIN_Oplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_OP_ADD_INT),
    [_CALL_BUILTIN_Oplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_OP_ADD_UNICODE),
    [_CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_FLOAT),
    [_CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_OP_MULTIPLY_INT),
    [_CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_FLOAT),
    [_CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_OP_SUBTRACT_INT),
    [_CALL_BUILTIN_Oplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_SLICE),
    [_CALL_BUILTIN_Oplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_SUBSCR),
    [_CALL_BUILTIN_Oplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_SUBSCR_DICT),
    [_CALL_BUILTIN_Oplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_SUBSCR_LIST_INT),
    [_CALL_BUILTIN_Oplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_SUBSCR_STR_INT),
    [_CALL_BUILTIN_Oplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BINARY_SUBSCR_TUPLE_INT),
    [_CALL_BUILTIN_Oplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BUILD_CONST_KEY_MAP),
    [_CALL_BUILTIN_Oplus_BUILD_LIST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BUILD_LIST),
    [_CALL_BUILTIN_Oplus_BUILD_MAP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BUILD_MAP),
    [_CALL_BUILTIN_Oplus_BUILD_SET] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BUILD_SET),
    [_CALL_BUILTIN_Oplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BUILD_SLICE),
    [_CALL_BUILTIN_Oplus_BUILD_STRING] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BUILD_STRING),
    [_CALL_BUILTIN_Oplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_BUILD_TUPLE),
    [_CALL_BUILTIN_Oplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_BUILTIN_CLASS),
    [_CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST),
    [_CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_CALL_BUILTIN_Oplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_BUILTIN_O),
    [_CALL_BUILTIN_Oplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_INTRINSIC_1),
    [_CALL_BUILTIN_Oplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_INTRINSIC_2),
    [_CALL_BUILTIN_Oplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_ISINSTANCE),
    [_CALL_BUILTIN_Oplus_CALL_LEN] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_LEN),
    [_CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_METHOD_DESCRIPTOR_O),
    [_CALL_BUILTIN_Oplus_CALL_STR_1] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_STR_1),
    [_CALL_BUILTIN_Oplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_TUPLE_1),
    [_CALL_BUILTIN_Oplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CALL_TYPE_1),
    [_CALL_BUILTIN_Oplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CHECK_ATTR_CLASS),
    [_CALL_BUILTIN_Oplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_CALL_BUILTIN_Oplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CHECK_ATTR_MODULE),
    [_CALL_BUILTIN_Oplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CHECK_ATTR_WITH_HINT),
    [_CALL_BUILTIN_Oplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_CALL_BUILTIN_Oplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CHECK_EG_MATCH),
    [_CALL_BUILTIN_Oplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CHECK_EXC_MATCH),
    [_CALL_BUILTIN_Oplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CHECK_FUNCTION_EXACT_ARGS),
    [_CALL_BUILTIN_Oplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_CALL_BUILTIN_Oplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CHECK_PEP_523),
    [_CALL_BUILTIN_Oplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CHECK_STACK_SPACE),
    [_CALL_BUILTIN_Oplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CHECK_VALIDITY),
    [_CALL_BUILTIN_Oplus_COMPARE_OP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_COMPARE_OP),
    [_CALL_BUILTIN_Oplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_COMPARE_OP_FLOAT),
    [_CALL_BUILTIN_Oplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_COMPARE_OP_INT),
    [_CALL_BUILTIN_Oplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_COMPARE_OP_STR),
    [_CALL_BUILTIN_Oplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CONTAINS_OP),
    [_CALL_BUILTIN_Oplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_CONVERT_VALUE),
    [_CALL_BUILTIN_Oplus_COPY] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_COPY),
    [_CALL_BUILTIN_Oplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_COPY_FREE_VARS),
    [_CALL_BUILTIN_Oplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_DELETE_ATTR),
    [_CALL_BUILTIN_Oplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_DELETE_DEREF),
    [_CALL_BUILTIN_Oplus_DELETE_FAST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_DELETE_FAST),
    [_CALL_BUILTIN_Oplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_DELETE_GLOBAL),
    [_CALL_BUILTIN_Oplus_DELETE_NAME] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_DELETE_NAME),
    [_CALL_BUILTIN_Oplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_DELETE_SUBSCR),
    [_CALL_BUILTIN_Oplus_DICT_MERGE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_DICT_MERGE),
    [_CALL_BUILTIN_Oplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_DICT_UPDATE),
    [_CALL_BUILTIN_Oplus_END_SEND] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_END_SEND),
    [_CALL_BUILTIN_Oplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_EXIT_INIT_CHECK),
    [_CALL_BUILTIN_Oplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_EXIT_TRACE),
    [_CALL_BUILTIN_Oplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_FORMAT_SIMPLE),
    [_CALL_BUILTIN_Oplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_FORMAT_WITH_SPEC),
    [_CALL_BUILTIN_Oplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_FOR_ITER_TIER_TWO),
    [_CALL_BUILTIN_Oplus_GET_AITER] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GET_AITER),
    [_CALL_BUILTIN_Oplus_GET_ANEXT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GET_ANEXT),
    [_CALL_BUILTIN_Oplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GET_AWAITABLE),
    [_CALL_BUILTIN_Oplus_GET_ITER] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GET_ITER),
    [_CALL_BUILTIN_Oplus_GET_LEN] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GET_LEN),
    [_CALL_BUILTIN_Oplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GET_YIELD_FROM_ITER),
    [_CALL_BUILTIN_Oplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_BOTH_FLOAT),
    [_CALL_BUILTIN_Oplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_BOTH_INT),
    [_CALL_BUILTIN_Oplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_BOTH_UNICODE),
    [_CALL_BUILTIN_Oplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_BUILTINS_VERSION),
    [_CALL_BUILTIN_Oplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_DORV_VALUES),
    [_CALL_BUILTIN_Oplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_CALL_BUILTIN_Oplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_GLOBALS_VERSION),
    [_CALL_BUILTIN_Oplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_IS_FALSE_POP),
    [_CALL_BUILTIN_Oplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_IS_NONE_POP),
    [_CALL_BUILTIN_Oplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_IS_NOT_NONE_POP),
    [_CALL_BUILTIN_Oplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_IS_TRUE_POP),
    [_CALL_BUILTIN_Oplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_KEYS_VERSION),
    [_CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_LIST),
    [_CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_CALL_BUILTIN_Oplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_GUARD_TYPE_VERSION),
    [_CALL_BUILTIN_Oplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_CALL_BUILTIN_Oplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_INIT_CALL_PY_EXACT_ARGS),
    [_CALL_BUILTIN_Oplus_INSERT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_INSERT),
    [_CALL_BUILTIN_Oplus_IS_NONE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_IS_NONE),
    [_CALL_BUILTIN_Oplus_IS_OP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_IS_OP),
    [_CALL_BUILTIN_Oplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_ITER_CHECK_LIST),
    [_CALL_BUILTIN_Oplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_ITER_CHECK_RANGE),
    [_CALL_BUILTIN_Oplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_ITER_CHECK_TUPLE),
    [_CALL_BUILTIN_Oplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_ITER_NEXT_LIST),
    [_CALL_BUILTIN_Oplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_ITER_NEXT_RANGE),
    [_CALL_BUILTIN_Oplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_ITER_NEXT_TUPLE),
    [_CALL_BUILTIN_Oplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_JUMP_TO_TOP),
    [_CALL_BUILTIN_Oplus_LIST_APPEND] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LIST_APPEND),
    [_CALL_BUILTIN_Oplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LIST_EXTEND),
    [_CALL_BUILTIN_Oplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_ASSERTION_ERROR),
    [_CALL_BUILTIN_Oplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_ATTR),
    [_CALL_BUILTIN_Oplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_ATTR_CLASS),
    [_CALL_BUILTIN_Oplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_ATTR_INSTANCE_VALUE),
    [_CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_NO_DICT),
    [_CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_CALL_BUILTIN_Oplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_ATTR_MODULE),
    [_CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_CALL_BUILTIN_Oplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_ATTR_SLOT),
    [_CALL_BUILTIN_Oplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_ATTR_WITH_HINT),
    [_CALL_BUILTIN_Oplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_BUILD_CLASS),
    [_CALL_BUILTIN_Oplus_LOAD_CONST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_CONST),
    [_CALL_BUILTIN_Oplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_DEREF),
    [_CALL_BUILTIN_Oplus_LOAD_FAST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_FAST),
    [_CALL_BUILTIN_Oplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_FAST_AND_CLEAR),
    [_CALL_BUILTIN_Oplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_FAST_CHECK),
    [_CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_DEREF),
    [_CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_CALL_BUILTIN_Oplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_GLOBAL),
    [_CALL_BUILTIN_Oplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_GLOBAL_BUILTINS),
    [_CALL_BUILTIN_Oplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_GLOBAL_MODULE),
    [_CALL_BUILTIN_Oplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_LOCALS),
    [_CALL_BUILTIN_Oplus_LOAD_NAME] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_NAME),
    [_CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_ATTR),
    [_CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_LOAD_SUPER_ATTR_METHOD),
    [_CALL_BUILTIN_Oplus_MAKE_CELL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_MAKE_CELL),
    [_CALL_BUILTIN_Oplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_MAKE_FUNCTION),
    [_CALL_BUILTIN_Oplus_MAP_ADD] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_MAP_ADD),
    [_CALL_BUILTIN_Oplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_MATCH_CLASS),
    [_CALL_BUILTIN_Oplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_MATCH_KEYS),
    [_CALL_BUILTIN_Oplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_MATCH_MAPPING),
    [_CALL_BUILTIN_Oplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_MATCH_SEQUENCE),
    [_CALL_BUILTIN_Oplus_NOP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_NOP),
    [_CALL_BUILTIN_Oplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_POP_EXCEPT),
    [_CALL_BUILTIN_Oplus_POP_FRAME] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_POP_FRAME),
    [_CALL_BUILTIN_Oplus_POP_TOP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_POP_TOP),
    [_CALL_BUILTIN_Oplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_PUSH_EXC_INFO),
    [_CALL_BUILTIN_Oplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_PUSH_FRAME),
    [_CALL_BUILTIN_Oplus_PUSH_NULL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_PUSH_NULL),
    [_CALL_BUILTIN_Oplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_RESUME_CHECK),
    [_CALL_BUILTIN_Oplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_SAVE_RETURN_OFFSET),
    [_CALL_BUILTIN_Oplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_SETUP_ANNOTATIONS),
    [_CALL_BUILTIN_Oplus_SET_ADD] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_SET_ADD),
    [_CALL_BUILTIN_Oplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_SET_FUNCTION_ATTRIBUTE),
    [_CALL_BUILTIN_Oplus_SET_IP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_SET_IP),
    [_CALL_BUILTIN_Oplus_SET_UPDATE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_SET_UPDATE),
    [_CALL_BUILTIN_Oplus_STORE_ATTR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_STORE_ATTR),
    [_CALL_BUILTIN_Oplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_STORE_ATTR_INSTANCE_VALUE),
    [_CALL_BUILTIN_Oplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_STORE_ATTR_SLOT),
    [_CALL_BUILTIN_Oplus_STORE_DEREF] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_STORE_DEREF),
    [_CALL_BUILTIN_Oplus_STORE_FAST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_STORE_FAST),
    [_CALL_BUILTIN_Oplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_STORE_GLOBAL),
    [_CALL_BUILTIN_Oplus_STORE_NAME] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_STORE_NAME),
    [_CALL_BUILTIN_Oplus_STORE_SLICE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_STORE_SLICE),
    [_CALL_BUILTIN_Oplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_STORE_SUBSCR),
    [_CALL_BUILTIN_Oplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_STORE_SUBSCR_DICT),
    [_CALL_BUILTIN_Oplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_STORE_SUBSCR_LIST_INT),
    [_CALL_BUILTIN_Oplus_SWAP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_SWAP),
    [_CALL_BUILTIN_Oplus_TO_BOOL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_TO_BOOL),
    [_CALL_BUILTIN_Oplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_TO_BOOL_ALWAYS_TRUE),
    [_CALL_BUILTIN_Oplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_TO_BOOL_BOOL),
    [_CALL_BUILTIN_Oplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_TO_BOOL_INT),
    [_CALL_BUILTIN_Oplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_TO_BOOL_LIST),
    [_CALL_BUILTIN_Oplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_TO_BOOL_NONE),
    [_CALL_BUILTIN_Oplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_TO_BOOL_STR),
    [_CALL_BUILTIN_Oplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_UNARY_INVERT),
    [_CALL_BUILTIN_Oplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_UNARY_NEGATIVE),
    [_CALL_BUILTIN_Oplus_UNARY_NOT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_UNARY_NOT),
    [_CALL_BUILTIN_Oplus_UNPACK_EX] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_UNPACK_EX),
    [_CALL_BUILTIN_Oplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_UNPACK_SEQUENCE),
    [_CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_LIST),
    [_CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TUPLE),
    [_CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_CALL_BUILTIN_Oplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_CALL_BUILTIN_Oplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
